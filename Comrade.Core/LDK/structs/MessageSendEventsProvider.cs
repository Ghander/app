using org.ldk.impl;
using org.ldk.enums;
using org.ldk.util;
using System;

namespace org { namespace ldk { namespace structs {

/**
 * A trait indicating an object may generate message send events
 */
public class MessageSendEventsProvider : CommonBase {
	internal readonly bindings.LDKMessageSendEventsProvider bindings_instance;
	internal MessageSendEventsProvider(object _dummy, long ptr) : base(ptr) { bindings_instance = null; }
	private MessageSendEventsProvider(bindings.LDKMessageSendEventsProvider arg) : base(bindings.LDKMessageSendEventsProvider_new(arg)) {
		this.ptrs_to.AddLast(arg);
		this.bindings_instance = arg;
	}
	~MessageSendEventsProvider() {
		if (ptr != 0) { bindings.MessageSendEventsProvider_free(ptr); }
	}

	public interface MessageSendEventsProviderInterface {
		/**
		 * Gets the list of pending events which were generated by previous actions, clearing the list
		 * in the process.
		 */
		MessageSendEvent[] get_and_clear_pending_msg_events();
	}
	private class LDKMessageSendEventsProviderHolder { internal MessageSendEventsProvider held; }
	private class LDKMessageSendEventsProviderImpl : bindings.LDKMessageSendEventsProvider {
		internal LDKMessageSendEventsProviderImpl(MessageSendEventsProviderInterface arg, LDKMessageSendEventsProviderHolder impl_holder) { this.arg = arg; this.impl_holder = impl_holder; }
		private MessageSendEventsProviderInterface arg;
		private LDKMessageSendEventsProviderHolder impl_holder;
		public long[] get_and_clear_pending_msg_events() {
			MessageSendEvent[] ret = arg.get_and_clear_pending_msg_events();
				GC.KeepAlive(arg);
			long[] result = ret != null ? InternalUtils.mapArray(ret, ret_conv_18 => ret_conv_18 == null ? 0 : ret_conv_18.clone_ptr()) : null;
			return result;
		}
	}
	public static MessageSendEventsProvider new_impl(MessageSendEventsProviderInterface arg) {
		LDKMessageSendEventsProviderHolder impl_holder = new LDKMessageSendEventsProviderHolder();
		impl_holder.held = new MessageSendEventsProvider(new LDKMessageSendEventsProviderImpl(arg, impl_holder));
		return impl_holder.held;
	}
	/**
	 * Gets the list of pending events which were generated by previous actions, clearing the list
	 * in the process.
	 */
	public MessageSendEvent[] get_and_clear_pending_msg_events() {
		long[] ret = bindings.MessageSendEventsProvider_get_and_clear_pending_msg_events(this.ptr);
		GC.KeepAlive(this);
		int ret_conv_18_len = ret.Length;
		MessageSendEvent[] ret_conv_18_arr = new MessageSendEvent[ret_conv_18_len];
		for (int s = 0; s < ret_conv_18_len; s++) {
			long ret_conv_18 = ret[s];
			org.ldk.structs.MessageSendEvent ret_conv_18_hu_conv = org.ldk.structs.MessageSendEvent.constr_from_ptr(ret_conv_18);
			if (ret_conv_18_hu_conv != null) { ret_conv_18_hu_conv.ptrs_to.AddLast(this); };
			ret_conv_18_arr[s] = ret_conv_18_hu_conv;
		}
		return ret_conv_18_arr;
	}

}
} } }
