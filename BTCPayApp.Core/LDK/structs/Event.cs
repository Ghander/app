using org.ldk.impl;
using org.ldk.enums;
using org.ldk.util;
using System;
using UInt128 = org.ldk.util.UInt128;

namespace org { namespace ldk { namespace structs {

/**
 * An Event which you should probably take some action in response to.
 * 
 * Note that while Writeable and Readable are implemented for Event, you probably shouldn't use
 * them directly as they don't round-trip exactly (for example FundingGenerationReady is never
 * written as it makes no sense to respond to it after reconnecting to peers).
 */
public class Event : CommonBase {
	protected Event(object _dummy, long ptr) : base(ptr) { }
	~Event() {
		if (ptr != 0) { bindings.Event_free(ptr); }
	}

	internal static Event constr_from_ptr(long ptr) {
		long raw_ty = bindings.LDKEvent_ty_from_ptr(ptr);
		switch (raw_ty) {
			case 0: return new Event_FundingGenerationReady(ptr);
			case 1: return new Event_PaymentClaimable(ptr);
			case 2: return new Event_PaymentClaimed(ptr);
			case 3: return new Event_PaymentSent(ptr);
			case 4: return new Event_PaymentFailed(ptr);
			case 5: return new Event_PaymentPathSuccessful(ptr);
			case 6: return new Event_PaymentPathFailed(ptr);
			case 7: return new Event_ProbeSuccessful(ptr);
			case 8: return new Event_ProbeFailed(ptr);
			case 9: return new Event_PendingHTLCsForwardable(ptr);
			case 10: return new Event_HTLCIntercepted(ptr);
			case 11: return new Event_SpendableOutputs(ptr);
			case 12: return new Event_PaymentForwarded(ptr);
			case 13: return new Event_ChannelReady(ptr);
			case 14: return new Event_ChannelClosed(ptr);
			case 15: return new Event_DiscardFunding(ptr);
			case 16: return new Event_OpenChannelRequest(ptr);
			case 17: return new Event_HTLCHandlingFailed(ptr);
			default:
				throw new ArgumentException("Impossible enum variant");
		}
	}

	/** A Event of type FundingGenerationReady */
	public class Event_FundingGenerationReady : Event {
		/**
		 * The random channel_id we picked which you'll need to pass into
		 * [`ChannelManager::funding_transaction_generated`].
		 * 
		 * [`ChannelManager::funding_transaction_generated`]: crate::ln::channelmanager::ChannelManager::funding_transaction_generated
		 */
		public byte[] temporary_channel_id;
		/**
		 * The counterparty's node_id, which you'll need to pass back into
		 * [`ChannelManager::funding_transaction_generated`].
		 * 
		 * [`ChannelManager::funding_transaction_generated`]: crate::ln::channelmanager::ChannelManager::funding_transaction_generated
		 */
		public byte[] counterparty_node_id;
		/**
		 * The value, in satoshis, that the output should have.
		 */
		public long channel_value_satoshis;
		/**
		 * The script which should be used in the transaction output.
		 */
		public byte[] output_script;
		/**
		 * The `user_channel_id` value passed in to [`ChannelManager::create_channel`], or a
		 * random value for an inbound channel. This may be zero for objects serialized with LDK
		 * versions prior to 0.0.113.
		 * 
		 * [`ChannelManager::create_channel`]: crate::ln::channelmanager::ChannelManager::create_channel
		 */
		public UInt128 user_channel_id;
		internal Event_FundingGenerationReady(long ptr) : base(null, ptr) {
			this.temporary_channel_id = bindings.LDKEvent_FundingGenerationReady_get_temporary_channel_id(ptr);
			this.counterparty_node_id = bindings.LDKEvent_FundingGenerationReady_get_counterparty_node_id(ptr);
			this.channel_value_satoshis = bindings.LDKEvent_FundingGenerationReady_get_channel_value_satoshis(ptr);
			this.output_script = bindings.LDKEvent_FundingGenerationReady_get_output_script(ptr);
			byte[] user_channel_id = bindings.LDKEvent_FundingGenerationReady_get_user_channel_id(ptr);
			org.ldk.util.UInt128 user_channel_id_conv = new org.ldk.util.UInt128(user_channel_id);
			this.user_channel_id = user_channel_id_conv;
		}
	}
	/** A Event of type PaymentClaimable */
	public class Event_PaymentClaimable : Event {
		/**
		 * The node that will receive the payment after it has been claimed.
		 * This is useful to identify payments received via [phantom nodes].
		 * This field will always be filled in when the event was generated by LDK versions
		 * 0.0.113 and above.
		 * 
		 * [phantom nodes]: crate::chain::keysinterface::PhantomKeysManager
		 * 
		 * Note that this (or a relevant inner pointer) may be NULL or all-0s to represent None
		 */
		public byte[] receiver_node_id;
		/**
		 * The hash for which the preimage should be handed to the ChannelManager. Note that LDK will
		 * not stop you from registering duplicate payment hashes for inbound payments.
		 */
		public byte[] payment_hash;
		/**
		 * The value, in thousandths of a satoshi, that this payment is for.
		 */
		public long amount_msat;
		/**
		 * Information for claiming this received payment, based on whether the purpose of the
		 * payment is to pay an invoice or to send a spontaneous payment.
		 */
		public PaymentPurpose purpose;
		/**
		 * The `channel_id` indicating over which channel we received the payment.
		 * 
		 * Note that this (or a relevant inner pointer) may be NULL or all-0s to represent None
		 */
		public byte[] via_channel_id;
		/**
		 * The `user_channel_id` indicating over which channel we received the payment.
		 */
		public Option_u128Z via_user_channel_id;
		internal Event_PaymentClaimable(long ptr) : base(null, ptr) {
			this.receiver_node_id = bindings.LDKEvent_PaymentClaimable_get_receiver_node_id(ptr);
			this.payment_hash = bindings.LDKEvent_PaymentClaimable_get_payment_hash(ptr);
			this.amount_msat = bindings.LDKEvent_PaymentClaimable_get_amount_msat(ptr);
			long purpose = bindings.LDKEvent_PaymentClaimable_get_purpose(ptr);
			org.ldk.structs.PaymentPurpose purpose_hu_conv = org.ldk.structs.PaymentPurpose.constr_from_ptr(purpose);
			if (purpose_hu_conv != null) { purpose_hu_conv.ptrs_to.AddLast(this); };
			this.purpose = purpose_hu_conv;
			this.via_channel_id = bindings.LDKEvent_PaymentClaimable_get_via_channel_id(ptr);
			long via_user_channel_id = bindings.LDKEvent_PaymentClaimable_get_via_user_channel_id(ptr);
			org.ldk.structs.Option_u128Z via_user_channel_id_hu_conv = org.ldk.structs.Option_u128Z.constr_from_ptr(via_user_channel_id);
			if (via_user_channel_id_hu_conv != null) { via_user_channel_id_hu_conv.ptrs_to.AddLast(this); };
			this.via_user_channel_id = via_user_channel_id_hu_conv;
		}
	}
	/** A Event of type PaymentClaimed */
	public class Event_PaymentClaimed : Event {
		/**
		 * The node that received the payment.
		 * This is useful to identify payments which were received via [phantom nodes].
		 * This field will always be filled in when the event was generated by LDK versions
		 * 0.0.113 and above.
		 * 
		 * [phantom nodes]: crate::chain::keysinterface::PhantomKeysManager
		 * 
		 * Note that this (or a relevant inner pointer) may be NULL or all-0s to represent None
		 */
		public byte[] receiver_node_id;
		/**
		 * The payment hash of the claimed payment. Note that LDK will not stop you from
		 * registering duplicate payment hashes for inbound payments.
		 */
		public byte[] payment_hash;
		/**
		 * The value, in thousandths of a satoshi, that this payment is for.
		 */
		public long amount_msat;
		/**
		 * The purpose of the claimed payment, i.e. whether the payment was for an invoice or a
		 * spontaneous payment.
		 */
		public PaymentPurpose purpose;
		internal Event_PaymentClaimed(long ptr) : base(null, ptr) {
			this.receiver_node_id = bindings.LDKEvent_PaymentClaimed_get_receiver_node_id(ptr);
			this.payment_hash = bindings.LDKEvent_PaymentClaimed_get_payment_hash(ptr);
			this.amount_msat = bindings.LDKEvent_PaymentClaimed_get_amount_msat(ptr);
			long purpose = bindings.LDKEvent_PaymentClaimed_get_purpose(ptr);
			org.ldk.structs.PaymentPurpose purpose_hu_conv = org.ldk.structs.PaymentPurpose.constr_from_ptr(purpose);
			if (purpose_hu_conv != null) { purpose_hu_conv.ptrs_to.AddLast(this); };
			this.purpose = purpose_hu_conv;
		}
	}
	/** A Event of type PaymentSent */
	public class Event_PaymentSent : Event {
		/**
		 * The id returned by [`ChannelManager::send_payment`] and used with
		 * [`ChannelManager::retry_payment`].
		 * 
		 * [`ChannelManager::send_payment`]: crate::ln::channelmanager::ChannelManager::send_payment
		 * [`ChannelManager::retry_payment`]: crate::ln::channelmanager::ChannelManager::retry_payment
		 * 
		 * Note that this (or a relevant inner pointer) may be NULL or all-0s to represent None
		 */
		public byte[] payment_id;
		/**
		 * The preimage to the hash given to ChannelManager::send_payment.
		 * Note that this serves as a payment receipt, if you wish to have such a thing, you must
		 * store it somehow!
		 */
		public byte[] payment_preimage;
		/**
		 * The hash that was given to [`ChannelManager::send_payment`].
		 * 
		 * [`ChannelManager::send_payment`]: crate::ln::channelmanager::ChannelManager::send_payment
		 */
		public byte[] payment_hash;
		/**
		 * The total fee which was spent at intermediate hops in this payment, across all paths.
		 * 
		 * Note that, like [`Route::get_total_fees`] this does *not* include any potential
		 * overpayment to the recipient node.
		 * 
		 * If the recipient or an intermediate node misbehaves and gives us free money, this may
		 * overstate the amount paid, though this is unlikely.
		 * 
		 * [`Route::get_total_fees`]: crate::routing::router::Route::get_total_fees
		 */
		public Option_u64Z fee_paid_msat;
		internal Event_PaymentSent(long ptr) : base(null, ptr) {
			this.payment_id = bindings.LDKEvent_PaymentSent_get_payment_id(ptr);
			this.payment_preimage = bindings.LDKEvent_PaymentSent_get_payment_preimage(ptr);
			this.payment_hash = bindings.LDKEvent_PaymentSent_get_payment_hash(ptr);
			long fee_paid_msat = bindings.LDKEvent_PaymentSent_get_fee_paid_msat(ptr);
			org.ldk.structs.Option_u64Z fee_paid_msat_hu_conv = org.ldk.structs.Option_u64Z.constr_from_ptr(fee_paid_msat);
			if (fee_paid_msat_hu_conv != null) { fee_paid_msat_hu_conv.ptrs_to.AddLast(this); };
			this.fee_paid_msat = fee_paid_msat_hu_conv;
		}
	}
	/** A Event of type PaymentFailed */
	public class Event_PaymentFailed : Event {
		/**
		 * The id returned by [`ChannelManager::send_payment`] and used with
		 * [`ChannelManager::retry_payment`] and [`ChannelManager::abandon_payment`].
		 * 
		 * [`ChannelManager::send_payment`]: crate::ln::channelmanager::ChannelManager::send_payment
		 * [`ChannelManager::retry_payment`]: crate::ln::channelmanager::ChannelManager::retry_payment
		 * [`ChannelManager::abandon_payment`]: crate::ln::channelmanager::ChannelManager::abandon_payment
		 */
		public byte[] payment_id;
		/**
		 * The hash that was given to [`ChannelManager::send_payment`].
		 * 
		 * [`ChannelManager::send_payment`]: crate::ln::channelmanager::ChannelManager::send_payment
		 */
		public byte[] payment_hash;
		internal Event_PaymentFailed(long ptr) : base(null, ptr) {
			this.payment_id = bindings.LDKEvent_PaymentFailed_get_payment_id(ptr);
			this.payment_hash = bindings.LDKEvent_PaymentFailed_get_payment_hash(ptr);
		}
	}
	/** A Event of type PaymentPathSuccessful */
	public class Event_PaymentPathSuccessful : Event {
		/**
		 * The id returned by [`ChannelManager::send_payment`] and used with
		 * [`ChannelManager::retry_payment`].
		 * 
		 * [`ChannelManager::send_payment`]: crate::ln::channelmanager::ChannelManager::send_payment
		 * [`ChannelManager::retry_payment`]: crate::ln::channelmanager::ChannelManager::retry_payment
		 */
		public byte[] payment_id;
		/**
		 * The hash that was given to [`ChannelManager::send_payment`].
		 * 
		 * [`ChannelManager::send_payment`]: crate::ln::channelmanager::ChannelManager::send_payment
		 * 
		 * Note that this (or a relevant inner pointer) may be NULL or all-0s to represent None
		 */
		public byte[] payment_hash;
		/**
		 * The payment path that was successful.
		 * 
		 * May contain a closed channel if the HTLC sent along the path was fulfilled on chain.
		 */
		public RouteHop[] path;
		internal Event_PaymentPathSuccessful(long ptr) : base(null, ptr) {
			this.payment_id = bindings.LDKEvent_PaymentPathSuccessful_get_payment_id(ptr);
			this.payment_hash = bindings.LDKEvent_PaymentPathSuccessful_get_payment_hash(ptr);
			long[] path = bindings.LDKEvent_PaymentPathSuccessful_get_path(ptr);
			int path_conv_10_len = path.Length;
			RouteHop[] path_conv_10_arr = new RouteHop[path_conv_10_len];
			for (int k = 0; k < path_conv_10_len; k++) {
				long path_conv_10 = path[k];
				org.ldk.structs.RouteHop path_conv_10_hu_conv = null; if (path_conv_10 < 0 || path_conv_10 > 4096) { path_conv_10_hu_conv = new org.ldk.structs.RouteHop(null, path_conv_10); }
				if (path_conv_10_hu_conv != null) { path_conv_10_hu_conv.ptrs_to.AddLast(this); };
				path_conv_10_arr[k] = path_conv_10_hu_conv;
			}
			this.path = path_conv_10_arr;
		}
	}
	/** A Event of type PaymentPathFailed */
	public class Event_PaymentPathFailed : Event {
		/**
		 * The id returned by [`ChannelManager::send_payment`] and used with
		 * [`ChannelManager::retry_payment`] and [`ChannelManager::abandon_payment`].
		 * 
		 * [`ChannelManager::send_payment`]: crate::ln::channelmanager::ChannelManager::send_payment
		 * [`ChannelManager::retry_payment`]: crate::ln::channelmanager::ChannelManager::retry_payment
		 * [`ChannelManager::abandon_payment`]: crate::ln::channelmanager::ChannelManager::abandon_payment
		 * 
		 * Note that this (or a relevant inner pointer) may be NULL or all-0s to represent None
		 */
		public byte[] payment_id;
		/**
		 * The hash that was given to [`ChannelManager::send_payment`].
		 * 
		 * [`ChannelManager::send_payment`]: crate::ln::channelmanager::ChannelManager::send_payment
		 */
		public byte[] payment_hash;
		/**
		 * Indicates the payment was rejected for some reason by the recipient. This implies that
		 * the payment has failed, not just the route in question. If this is not set, you may
		 * retry the payment via a different route.
		 */
		public bool payment_failed_permanently;
		/**
		 * Any failure information conveyed via the Onion return packet by a node along the failed
		 * payment route.
		 * 
		 * Should be applied to the [`NetworkGraph`] so that routing decisions can take into
		 * account the update.
		 * 
		 * [`NetworkGraph`]: crate::routing::gossip::NetworkGraph
		 */
		public Option_NetworkUpdateZ network_update;
		/**
		 * For both single-path and multi-path payments, this is set if all paths of the payment have
		 * failed. This will be set to false if (1) this is an MPP payment and (2) other parts of the
		 * larger MPP payment were still in flight when this event was generated.
		 * 
		 * Note that if you are retrying individual MPP parts, using this value to determine if a
		 * payment has fully failed is race-y. Because multiple failures can happen prior to events
		 * being processed, you may retry in response to a first failure, with a second failure
		 * (with `all_paths_failed` set) still pending. Then, when the second failure is processed
		 * you will see `all_paths_failed` set even though the retry of the first failure still
		 * has an associated in-flight HTLC. See (1) for an example of such a failure.
		 * 
		 * If you wish to retry individual MPP parts and learn when a payment has failed, you must
		 * call [`ChannelManager::abandon_payment`] and wait for a [`Event::PaymentFailed`] event.
		 * 
		 * (1) <https://github.com/lightningdevkit/rust-lightning/issues/1164>
		 * 
		 * [`ChannelManager::abandon_payment`]: crate::ln::channelmanager::ChannelManager::abandon_payment
		 */
		public bool all_paths_failed;
		/**
		 * The payment path that failed.
		 */
		public RouteHop[] path;
		/**
		 * The channel responsible for the failed payment path.
		 * 
		 * Note that for route hints or for the first hop in a path this may be an SCID alias and
		 * may not refer to a channel in the public network graph. These aliases may also collide
		 * with channels in the public network graph.
		 * 
		 * If this is `Some`, then the corresponding channel should be avoided when the payment is
		 * retried. May be `None` for older [`Event`] serializations.
		 */
		public Option_u64Z short_channel_id;
		/**
		 * Parameters needed to compute a new [`Route`] when retrying the failed payment path.
		 * 
		 * See [`find_route`] for details.
		 * 
		 * [`Route`]: crate::routing::router::Route
		 * [`find_route`]: crate::routing::router::find_route
		 * 
		 * Note that this (or a relevant inner pointer) may be NULL or all-0s to represent None
		 */
		public RouteParameters retry;
		internal Event_PaymentPathFailed(long ptr) : base(null, ptr) {
			this.payment_id = bindings.LDKEvent_PaymentPathFailed_get_payment_id(ptr);
			this.payment_hash = bindings.LDKEvent_PaymentPathFailed_get_payment_hash(ptr);
			this.payment_failed_permanently = bindings.LDKEvent_PaymentPathFailed_get_payment_failed_permanently(ptr);
			long network_update = bindings.LDKEvent_PaymentPathFailed_get_network_update(ptr);
			org.ldk.structs.Option_NetworkUpdateZ network_update_hu_conv = org.ldk.structs.Option_NetworkUpdateZ.constr_from_ptr(network_update);
			if (network_update_hu_conv != null) { network_update_hu_conv.ptrs_to.AddLast(this); };
			this.network_update = network_update_hu_conv;
			this.all_paths_failed = bindings.LDKEvent_PaymentPathFailed_get_all_paths_failed(ptr);
			long[] path = bindings.LDKEvent_PaymentPathFailed_get_path(ptr);
			int path_conv_10_len = path.Length;
			RouteHop[] path_conv_10_arr = new RouteHop[path_conv_10_len];
			for (int k = 0; k < path_conv_10_len; k++) {
				long path_conv_10 = path[k];
				org.ldk.structs.RouteHop path_conv_10_hu_conv = null; if (path_conv_10 < 0 || path_conv_10 > 4096) { path_conv_10_hu_conv = new org.ldk.structs.RouteHop(null, path_conv_10); }
				if (path_conv_10_hu_conv != null) { path_conv_10_hu_conv.ptrs_to.AddLast(this); };
				path_conv_10_arr[k] = path_conv_10_hu_conv;
			}
			this.path = path_conv_10_arr;
			long short_channel_id = bindings.LDKEvent_PaymentPathFailed_get_short_channel_id(ptr);
			org.ldk.structs.Option_u64Z short_channel_id_hu_conv = org.ldk.structs.Option_u64Z.constr_from_ptr(short_channel_id);
			if (short_channel_id_hu_conv != null) { short_channel_id_hu_conv.ptrs_to.AddLast(this); };
			this.short_channel_id = short_channel_id_hu_conv;
			long retry = bindings.LDKEvent_PaymentPathFailed_get_retry(ptr);
			org.ldk.structs.RouteParameters retry_hu_conv = null; if (retry < 0 || retry > 4096) { retry_hu_conv = new org.ldk.structs.RouteParameters(null, retry); }
			if (retry_hu_conv != null) { retry_hu_conv.ptrs_to.AddLast(this); };
			this.retry = retry_hu_conv;
		}
	}
	/** A Event of type ProbeSuccessful */
	public class Event_ProbeSuccessful : Event {
		/**
		 * The id returned by [`ChannelManager::send_probe`].
		 * 
		 * [`ChannelManager::send_probe`]: crate::ln::channelmanager::ChannelManager::send_probe
		 */
		public byte[] payment_id;
		/**
		 * The hash generated by [`ChannelManager::send_probe`].
		 * 
		 * [`ChannelManager::send_probe`]: crate::ln::channelmanager::ChannelManager::send_probe
		 */
		public byte[] payment_hash;
		/**
		 * The payment path that was successful.
		 */
		public RouteHop[] path;
		internal Event_ProbeSuccessful(long ptr) : base(null, ptr) {
			this.payment_id = bindings.LDKEvent_ProbeSuccessful_get_payment_id(ptr);
			this.payment_hash = bindings.LDKEvent_ProbeSuccessful_get_payment_hash(ptr);
			long[] path = bindings.LDKEvent_ProbeSuccessful_get_path(ptr);
			int path_conv_10_len = path.Length;
			RouteHop[] path_conv_10_arr = new RouteHop[path_conv_10_len];
			for (int k = 0; k < path_conv_10_len; k++) {
				long path_conv_10 = path[k];
				org.ldk.structs.RouteHop path_conv_10_hu_conv = null; if (path_conv_10 < 0 || path_conv_10 > 4096) { path_conv_10_hu_conv = new org.ldk.structs.RouteHop(null, path_conv_10); }
				if (path_conv_10_hu_conv != null) { path_conv_10_hu_conv.ptrs_to.AddLast(this); };
				path_conv_10_arr[k] = path_conv_10_hu_conv;
			}
			this.path = path_conv_10_arr;
		}
	}
	/** A Event of type ProbeFailed */
	public class Event_ProbeFailed : Event {
		/**
		 * The id returned by [`ChannelManager::send_probe`].
		 * 
		 * [`ChannelManager::send_probe`]: crate::ln::channelmanager::ChannelManager::send_probe
		 */
		public byte[] payment_id;
		/**
		 * The hash generated by [`ChannelManager::send_probe`].
		 * 
		 * [`ChannelManager::send_probe`]: crate::ln::channelmanager::ChannelManager::send_probe
		 */
		public byte[] payment_hash;
		/**
		 * The payment path that failed.
		 */
		public RouteHop[] path;
		/**
		 * The channel responsible for the failed probe.
		 * 
		 * Note that for route hints or for the first hop in a path this may be an SCID alias and
		 * may not refer to a channel in the public network graph. These aliases may also collide
		 * with channels in the public network graph.
		 */
		public Option_u64Z short_channel_id;
		internal Event_ProbeFailed(long ptr) : base(null, ptr) {
			this.payment_id = bindings.LDKEvent_ProbeFailed_get_payment_id(ptr);
			this.payment_hash = bindings.LDKEvent_ProbeFailed_get_payment_hash(ptr);
			long[] path = bindings.LDKEvent_ProbeFailed_get_path(ptr);
			int path_conv_10_len = path.Length;
			RouteHop[] path_conv_10_arr = new RouteHop[path_conv_10_len];
			for (int k = 0; k < path_conv_10_len; k++) {
				long path_conv_10 = path[k];
				org.ldk.structs.RouteHop path_conv_10_hu_conv = null; if (path_conv_10 < 0 || path_conv_10 > 4096) { path_conv_10_hu_conv = new org.ldk.structs.RouteHop(null, path_conv_10); }
				if (path_conv_10_hu_conv != null) { path_conv_10_hu_conv.ptrs_to.AddLast(this); };
				path_conv_10_arr[k] = path_conv_10_hu_conv;
			}
			this.path = path_conv_10_arr;
			long short_channel_id = bindings.LDKEvent_ProbeFailed_get_short_channel_id(ptr);
			org.ldk.structs.Option_u64Z short_channel_id_hu_conv = org.ldk.structs.Option_u64Z.constr_from_ptr(short_channel_id);
			if (short_channel_id_hu_conv != null) { short_channel_id_hu_conv.ptrs_to.AddLast(this); };
			this.short_channel_id = short_channel_id_hu_conv;
		}
	}
	/** A Event of type PendingHTLCsForwardable */
	public class Event_PendingHTLCsForwardable : Event {
		/**
		 * The minimum amount of time that should be waited prior to calling
		 * process_pending_htlc_forwards. To increase the effort required to correlate payments,
		 * you should wait a random amount of time in roughly the range (now + time_forwardable,
		 * now + 5*time_forwardable).
		 */
		public long time_forwardable;
		internal Event_PendingHTLCsForwardable(long ptr) : base(null, ptr) {
			this.time_forwardable = bindings.LDKEvent_PendingHTLCsForwardable_get_time_forwardable(ptr);
		}
	}
	/** A Event of type HTLCIntercepted */
	public class Event_HTLCIntercepted : Event {
		/**
		 * An id to help LDK identify which HTLC is being forwarded or failed.
		 */
		public byte[] intercept_id;
		/**
		 * The fake scid that was programmed as the next hop's scid, generated using
		 * [`ChannelManager::get_intercept_scid`].
		 * 
		 * [`ChannelManager::get_intercept_scid`]: crate::ln::channelmanager::ChannelManager::get_intercept_scid
		 */
		public long requested_next_hop_scid;
		/**
		 * The payment hash used for this HTLC.
		 */
		public byte[] payment_hash;
		/**
		 * How many msats were received on the inbound edge of this HTLC.
		 */
		public long inbound_amount_msat;
		/**
		 * How many msats the payer intended to route to the next node. Depending on the reason you are
		 * intercepting this payment, you might take a fee by forwarding less than this amount.
		 * 
		 * Note that LDK will NOT check that expected fees were factored into this value. You MUST
		 * check that whatever fee you want has been included here or subtract it as required. Further,
		 * LDK will not stop you from forwarding more than you received.
		 */
		public long expected_outbound_amount_msat;
		internal Event_HTLCIntercepted(long ptr) : base(null, ptr) {
			this.intercept_id = bindings.LDKEvent_HTLCIntercepted_get_intercept_id(ptr);
			this.requested_next_hop_scid = bindings.LDKEvent_HTLCIntercepted_get_requested_next_hop_scid(ptr);
			this.payment_hash = bindings.LDKEvent_HTLCIntercepted_get_payment_hash(ptr);
			this.inbound_amount_msat = bindings.LDKEvent_HTLCIntercepted_get_inbound_amount_msat(ptr);
			this.expected_outbound_amount_msat = bindings.LDKEvent_HTLCIntercepted_get_expected_outbound_amount_msat(ptr);
		}
	}
	/** A Event of type SpendableOutputs */
	public class Event_SpendableOutputs : Event {
		/**
		 * The outputs which you should store as spendable by you.
		 */
		public SpendableOutputDescriptor[] outputs;
		internal Event_SpendableOutputs(long ptr) : base(null, ptr) {
			long[] outputs = bindings.LDKEvent_SpendableOutputs_get_outputs(ptr);
			int outputs_conv_27_len = outputs.Length;
			SpendableOutputDescriptor[] outputs_conv_27_arr = new SpendableOutputDescriptor[outputs_conv_27_len];
			for (int b = 0; b < outputs_conv_27_len; b++) {
				long outputs_conv_27 = outputs[b];
				org.ldk.structs.SpendableOutputDescriptor outputs_conv_27_hu_conv = org.ldk.structs.SpendableOutputDescriptor.constr_from_ptr(outputs_conv_27);
				if (outputs_conv_27_hu_conv != null) { outputs_conv_27_hu_conv.ptrs_to.AddLast(this); };
				outputs_conv_27_arr[b] = outputs_conv_27_hu_conv;
			}
			this.outputs = outputs_conv_27_arr;
		}
	}
	/** A Event of type PaymentForwarded */
	public class Event_PaymentForwarded : Event {
		/**
		 * The incoming channel between the previous node and us. This is only `None` for events
		 * generated or serialized by versions prior to 0.0.107.
		 * 
		 * Note that this (or a relevant inner pointer) may be NULL or all-0s to represent None
		 */
		public byte[] prev_channel_id;
		/**
		 * The outgoing channel between the next node and us. This is only `None` for events
		 * generated or serialized by versions prior to 0.0.107.
		 * 
		 * Note that this (or a relevant inner pointer) may be NULL or all-0s to represent None
		 */
		public byte[] next_channel_id;
		/**
		 * The fee, in milli-satoshis, which was earned as a result of the payment.
		 * 
		 * Note that if we force-closed the channel over which we forwarded an HTLC while the HTLC
		 * was pending, the amount the next hop claimed will have been rounded down to the nearest
		 * whole satoshi. Thus, the fee calculated here may be higher than expected as we still
		 * claimed the full value in millisatoshis from the source. In this case,
		 * `claim_from_onchain_tx` will be set.
		 * 
		 * If the channel which sent us the payment has been force-closed, we will claim the funds
		 * via an on-chain transaction. In that case we do not yet know the on-chain transaction
		 * fees which we will spend and will instead set this to `None`. It is possible duplicate
		 * `PaymentForwarded` events are generated for the same payment iff `fee_earned_msat` is
		 * `None`.
		 */
		public Option_u64Z fee_earned_msat;
		/**
		 * If this is `true`, the forwarded HTLC was claimed by our counterparty via an on-chain
		 * transaction.
		 */
		public bool claim_from_onchain_tx;
		internal Event_PaymentForwarded(long ptr) : base(null, ptr) {
			this.prev_channel_id = bindings.LDKEvent_PaymentForwarded_get_prev_channel_id(ptr);
			this.next_channel_id = bindings.LDKEvent_PaymentForwarded_get_next_channel_id(ptr);
			long fee_earned_msat = bindings.LDKEvent_PaymentForwarded_get_fee_earned_msat(ptr);
			org.ldk.structs.Option_u64Z fee_earned_msat_hu_conv = org.ldk.structs.Option_u64Z.constr_from_ptr(fee_earned_msat);
			if (fee_earned_msat_hu_conv != null) { fee_earned_msat_hu_conv.ptrs_to.AddLast(this); };
			this.fee_earned_msat = fee_earned_msat_hu_conv;
			this.claim_from_onchain_tx = bindings.LDKEvent_PaymentForwarded_get_claim_from_onchain_tx(ptr);
		}
	}
	/** A Event of type ChannelReady */
	public class Event_ChannelReady : Event {
		/**
		 * The channel_id of the channel that is ready.
		 */
		public byte[] channel_id;
		/**
		 * The `user_channel_id` value passed in to [`ChannelManager::create_channel`] for outbound
		 * channels, or to [`ChannelManager::accept_inbound_channel`] for inbound channels if
		 * [`UserConfig::manually_accept_inbound_channels`] config flag is set to true. Otherwise
		 * `user_channel_id` will be randomized for an inbound channel.
		 * 
		 * [`ChannelManager::create_channel`]: crate::ln::channelmanager::ChannelManager::create_channel
		 * [`ChannelManager::accept_inbound_channel`]: crate::ln::channelmanager::ChannelManager::accept_inbound_channel
		 * [`UserConfig::manually_accept_inbound_channels`]: crate::util::config::UserConfig::manually_accept_inbound_channels
		 */
		public UInt128 user_channel_id;
		/**
		 * The node_id of the channel counterparty.
		 */
		public byte[] counterparty_node_id;
		/**
		 * The features that this channel will operate with.
		 */
		public ChannelTypeFeatures channel_type;
		internal Event_ChannelReady(long ptr) : base(null, ptr) {
			this.channel_id = bindings.LDKEvent_ChannelReady_get_channel_id(ptr);
			byte[] user_channel_id = bindings.LDKEvent_ChannelReady_get_user_channel_id(ptr);
			org.ldk.util.UInt128 user_channel_id_conv = new org.ldk.util.UInt128(user_channel_id);
			this.user_channel_id = user_channel_id_conv;
			this.counterparty_node_id = bindings.LDKEvent_ChannelReady_get_counterparty_node_id(ptr);
			long channel_type = bindings.LDKEvent_ChannelReady_get_channel_type(ptr);
			org.ldk.structs.ChannelTypeFeatures channel_type_hu_conv = null; if (channel_type < 0 || channel_type > 4096) { channel_type_hu_conv = new org.ldk.structs.ChannelTypeFeatures(null, channel_type); }
			if (channel_type_hu_conv != null) { channel_type_hu_conv.ptrs_to.AddLast(this); };
			this.channel_type = channel_type_hu_conv;
		}
	}
	/** A Event of type ChannelClosed */
	public class Event_ChannelClosed : Event {
		/**
		 * The channel_id of the channel which has been closed. Note that on-chain transactions
		 * resolving the channel are likely still awaiting confirmation.
		 */
		public byte[] channel_id;
		/**
		 * The `user_channel_id` value passed in to [`ChannelManager::create_channel`] for outbound
		 * channels, or to [`ChannelManager::accept_inbound_channel`] for inbound channels if
		 * [`UserConfig::manually_accept_inbound_channels`] config flag is set to true. Otherwise
		 * `user_channel_id` will be randomized for inbound channels.
		 * This may be zero for inbound channels serialized prior to 0.0.113 and will always be
		 * zero for objects serialized with LDK versions prior to 0.0.102.
		 * 
		 * [`ChannelManager::create_channel`]: crate::ln::channelmanager::ChannelManager::create_channel
		 * [`ChannelManager::accept_inbound_channel`]: crate::ln::channelmanager::ChannelManager::accept_inbound_channel
		 * [`UserConfig::manually_accept_inbound_channels`]: crate::util::config::UserConfig::manually_accept_inbound_channels
		 */
		public UInt128 user_channel_id;
		/**
		 * The reason the channel was closed.
		 */
		public ClosureReason reason;
		internal Event_ChannelClosed(long ptr) : base(null, ptr) {
			this.channel_id = bindings.LDKEvent_ChannelClosed_get_channel_id(ptr);
			byte[] user_channel_id = bindings.LDKEvent_ChannelClosed_get_user_channel_id(ptr);
			org.ldk.util.UInt128 user_channel_id_conv = new org.ldk.util.UInt128(user_channel_id);
			this.user_channel_id = user_channel_id_conv;
			long reason = bindings.LDKEvent_ChannelClosed_get_reason(ptr);
			org.ldk.structs.ClosureReason reason_hu_conv = org.ldk.structs.ClosureReason.constr_from_ptr(reason);
			if (reason_hu_conv != null) { reason_hu_conv.ptrs_to.AddLast(this); };
			this.reason = reason_hu_conv;
		}
	}
	/** A Event of type DiscardFunding */
	public class Event_DiscardFunding : Event {
		/**
		 * The channel_id of the channel which has been closed.
		 */
		public byte[] channel_id;
		/**
		 * The full transaction received from the user
		 */
		public byte[] transaction;
		internal Event_DiscardFunding(long ptr) : base(null, ptr) {
			this.channel_id = bindings.LDKEvent_DiscardFunding_get_channel_id(ptr);
			this.transaction = bindings.LDKEvent_DiscardFunding_get_transaction(ptr);
		}
	}
	/** A Event of type OpenChannelRequest */
	public class Event_OpenChannelRequest : Event {
		/**
		 * The temporary channel ID of the channel requested to be opened.
		 * 
		 * When responding to the request, the `temporary_channel_id` should be passed
		 * back to the ChannelManager through [`ChannelManager::accept_inbound_channel`] to accept,
		 * or through [`ChannelManager::force_close_without_broadcasting_txn`] to reject.
		 * 
		 * [`ChannelManager::accept_inbound_channel`]: crate::ln::channelmanager::ChannelManager::accept_inbound_channel
		 * [`ChannelManager::force_close_without_broadcasting_txn`]: crate::ln::channelmanager::ChannelManager::force_close_without_broadcasting_txn
		 */
		public byte[] temporary_channel_id;
		/**
		 * The node_id of the counterparty requesting to open the channel.
		 * 
		 * When responding to the request, the `counterparty_node_id` should be passed
		 * back to the `ChannelManager` through [`ChannelManager::accept_inbound_channel`] to
		 * accept the request, or through [`ChannelManager::force_close_without_broadcasting_txn`] to reject the
		 * request.
		 * 
		 * [`ChannelManager::accept_inbound_channel`]: crate::ln::channelmanager::ChannelManager::accept_inbound_channel
		 * [`ChannelManager::force_close_without_broadcasting_txn`]: crate::ln::channelmanager::ChannelManager::force_close_without_broadcasting_txn
		 */
		public byte[] counterparty_node_id;
		/**
		 * The channel value of the requested channel.
		 */
		public long funding_satoshis;
		/**
		 * Our starting balance in the channel if the request is accepted, in milli-satoshi.
		 */
		public long push_msat;
		/**
		 * The features that this channel will operate with. If you reject the channel, a
		 * well-behaved counterparty may automatically re-attempt the channel with a new set of
		 * feature flags.
		 * 
		 * Note that if [`ChannelTypeFeatures::supports_scid_privacy`] returns true on this type,
		 * the resulting [`ChannelManager`] will not be readable by versions of LDK prior to
		 * 0.0.106.
		 * 
		 * Furthermore, note that if [`ChannelTypeFeatures::supports_zero_conf`] returns true on this type,
		 * the resulting [`ChannelManager`] will not be readable by versions of LDK prior to
		 * 0.0.107. Channels setting this type also need to get manually accepted via
		 * [`crate::ln::channelmanager::ChannelManager::accept_inbound_channel_from_trusted_peer_0conf`],
		 * or will be rejected otherwise.
		 * 
		 * [`ChannelManager`]: crate::ln::channelmanager::ChannelManager
		 */
		public ChannelTypeFeatures channel_type;
		internal Event_OpenChannelRequest(long ptr) : base(null, ptr) {
			this.temporary_channel_id = bindings.LDKEvent_OpenChannelRequest_get_temporary_channel_id(ptr);
			this.counterparty_node_id = bindings.LDKEvent_OpenChannelRequest_get_counterparty_node_id(ptr);
			this.funding_satoshis = bindings.LDKEvent_OpenChannelRequest_get_funding_satoshis(ptr);
			this.push_msat = bindings.LDKEvent_OpenChannelRequest_get_push_msat(ptr);
			long channel_type = bindings.LDKEvent_OpenChannelRequest_get_channel_type(ptr);
			org.ldk.structs.ChannelTypeFeatures channel_type_hu_conv = null; if (channel_type < 0 || channel_type > 4096) { channel_type_hu_conv = new org.ldk.structs.ChannelTypeFeatures(null, channel_type); }
			if (channel_type_hu_conv != null) { channel_type_hu_conv.ptrs_to.AddLast(this); };
			this.channel_type = channel_type_hu_conv;
		}
	}
	/** A Event of type HTLCHandlingFailed */
	public class Event_HTLCHandlingFailed : Event {
		/**
		 * The channel over which the HTLC was received.
		 */
		public byte[] prev_channel_id;
		/**
		 * Destination of the HTLC that failed to be processed.
		 */
		public HTLCDestination failed_next_destination;
		internal Event_HTLCHandlingFailed(long ptr) : base(null, ptr) {
			this.prev_channel_id = bindings.LDKEvent_HTLCHandlingFailed_get_prev_channel_id(ptr);
			long failed_next_destination = bindings.LDKEvent_HTLCHandlingFailed_get_failed_next_destination(ptr);
			org.ldk.structs.HTLCDestination failed_next_destination_hu_conv = org.ldk.structs.HTLCDestination.constr_from_ptr(failed_next_destination);
			if (failed_next_destination_hu_conv != null) { failed_next_destination_hu_conv.ptrs_to.AddLast(this); };
			this.failed_next_destination = failed_next_destination_hu_conv;
		}
	}
	internal long clone_ptr() {
		long ret = bindings.Event_clone_ptr(this.ptr);
		GC.KeepAlive(this);
		return ret;
	}

	/**
	 * Creates a copy of the Event
	 */
	public Event clone() {
		long ret = bindings.Event_clone(this.ptr);
		GC.KeepAlive(this);
		if (ret >= 0 && ret <= 4096) { return null; }
		org.ldk.structs.Event ret_hu_conv = org.ldk.structs.Event.constr_from_ptr(ret);
		if (ret_hu_conv != null) { ret_hu_conv.ptrs_to.AddLast(this); };
		return ret_hu_conv;
	}

	/**
	 * Utility method to constructs a new FundingGenerationReady-variant Event
	 */
	public static Event funding_generation_ready(byte[] temporary_channel_id, byte[] counterparty_node_id, long channel_value_satoshis, byte[] output_script, org.ldk.util.UInt128 user_channel_id) {
		long ret = bindings.Event_funding_generation_ready(InternalUtils.check_arr_len(temporary_channel_id, 32), InternalUtils.check_arr_len(counterparty_node_id, 33), channel_value_satoshis, output_script, user_channel_id.getLEBytes());
		GC.KeepAlive(temporary_channel_id);
		GC.KeepAlive(counterparty_node_id);
		GC.KeepAlive(channel_value_satoshis);
		GC.KeepAlive(output_script);
		GC.KeepAlive(user_channel_id);
		if (ret >= 0 && ret <= 4096) { return null; }
		org.ldk.structs.Event ret_hu_conv = org.ldk.structs.Event.constr_from_ptr(ret);
		if (ret_hu_conv != null) { ret_hu_conv.ptrs_to.AddLast(ret_hu_conv); };
		return ret_hu_conv;
	}

	/**
	 * Utility method to constructs a new PaymentClaimable-variant Event
	 */
	public static Event payment_claimable(byte[] receiver_node_id, byte[] payment_hash, long amount_msat, org.ldk.structs.PaymentPurpose purpose, byte[] via_channel_id, org.ldk.structs.Option_u128Z via_user_channel_id) {
		long ret = bindings.Event_payment_claimable(InternalUtils.check_arr_len(receiver_node_id, 33), InternalUtils.check_arr_len(payment_hash, 32), amount_msat, purpose.ptr, InternalUtils.check_arr_len(via_channel_id, 32), via_user_channel_id.ptr);
		GC.KeepAlive(receiver_node_id);
		GC.KeepAlive(payment_hash);
		GC.KeepAlive(amount_msat);
		GC.KeepAlive(purpose);
		GC.KeepAlive(via_channel_id);
		GC.KeepAlive(via_user_channel_id);
		if (ret >= 0 && ret <= 4096) { return null; }
		org.ldk.structs.Event ret_hu_conv = org.ldk.structs.Event.constr_from_ptr(ret);
		if (ret_hu_conv != null) { ret_hu_conv.ptrs_to.AddLast(ret_hu_conv); };
		return ret_hu_conv;
	}

	/**
	 * Utility method to constructs a new PaymentClaimed-variant Event
	 */
	public static Event payment_claimed(byte[] receiver_node_id, byte[] payment_hash, long amount_msat, org.ldk.structs.PaymentPurpose purpose) {
		long ret = bindings.Event_payment_claimed(InternalUtils.check_arr_len(receiver_node_id, 33), InternalUtils.check_arr_len(payment_hash, 32), amount_msat, purpose.ptr);
		GC.KeepAlive(receiver_node_id);
		GC.KeepAlive(payment_hash);
		GC.KeepAlive(amount_msat);
		GC.KeepAlive(purpose);
		if (ret >= 0 && ret <= 4096) { return null; }
		org.ldk.structs.Event ret_hu_conv = org.ldk.structs.Event.constr_from_ptr(ret);
		if (ret_hu_conv != null) { ret_hu_conv.ptrs_to.AddLast(ret_hu_conv); };
		return ret_hu_conv;
	}

	/**
	 * Utility method to constructs a new PaymentSent-variant Event
	 */
	public static Event payment_sent(byte[] payment_id, byte[] payment_preimage, byte[] payment_hash, org.ldk.structs.Option_u64Z fee_paid_msat) {
		long ret = bindings.Event_payment_sent(InternalUtils.check_arr_len(payment_id, 32), InternalUtils.check_arr_len(payment_preimage, 32), InternalUtils.check_arr_len(payment_hash, 32), fee_paid_msat.ptr);
		GC.KeepAlive(payment_id);
		GC.KeepAlive(payment_preimage);
		GC.KeepAlive(payment_hash);
		GC.KeepAlive(fee_paid_msat);
		if (ret >= 0 && ret <= 4096) { return null; }
		org.ldk.structs.Event ret_hu_conv = org.ldk.structs.Event.constr_from_ptr(ret);
		if (ret_hu_conv != null) { ret_hu_conv.ptrs_to.AddLast(ret_hu_conv); };
		return ret_hu_conv;
	}

	/**
	 * Utility method to constructs a new PaymentFailed-variant Event
	 */
	public static Event payment_failed(byte[] payment_id, byte[] payment_hash) {
		long ret = bindings.Event_payment_failed(InternalUtils.check_arr_len(payment_id, 32), InternalUtils.check_arr_len(payment_hash, 32));
		GC.KeepAlive(payment_id);
		GC.KeepAlive(payment_hash);
		if (ret >= 0 && ret <= 4096) { return null; }
		org.ldk.structs.Event ret_hu_conv = org.ldk.structs.Event.constr_from_ptr(ret);
		if (ret_hu_conv != null) { ret_hu_conv.ptrs_to.AddLast(ret_hu_conv); };
		return ret_hu_conv;
	}

	/**
	 * Utility method to constructs a new PaymentPathSuccessful-variant Event
	 */
	public static Event payment_path_successful(byte[] payment_id, byte[] payment_hash, RouteHop[] path) {
		long ret = bindings.Event_payment_path_successful(InternalUtils.check_arr_len(payment_id, 32), InternalUtils.check_arr_len(payment_hash, 32), path != null ? InternalUtils.mapArray(path, path_conv_10 => path_conv_10 == null ? 0 : path_conv_10.ptr) : null);
		GC.KeepAlive(payment_id);
		GC.KeepAlive(payment_hash);
		GC.KeepAlive(path);
		if (ret >= 0 && ret <= 4096) { return null; }
		org.ldk.structs.Event ret_hu_conv = org.ldk.structs.Event.constr_from_ptr(ret);
		if (ret_hu_conv != null) { ret_hu_conv.ptrs_to.AddLast(ret_hu_conv); };
		foreach (RouteHop path_conv_10 in path) { if (ret_hu_conv != null) { ret_hu_conv.ptrs_to.AddLast(path_conv_10); }; };
		return ret_hu_conv;
	}

	/**
	 * Utility method to constructs a new PaymentPathFailed-variant Event
	 */
	public static Event payment_path_failed(byte[] payment_id, byte[] payment_hash, bool payment_failed_permanently, org.ldk.structs.Option_NetworkUpdateZ network_update, bool all_paths_failed, RouteHop[] path, org.ldk.structs.Option_u64Z short_channel_id, org.ldk.structs.RouteParameters retry) {
		long ret = bindings.Event_payment_path_failed(InternalUtils.check_arr_len(payment_id, 32), InternalUtils.check_arr_len(payment_hash, 32), payment_failed_permanently, network_update.ptr, all_paths_failed, path != null ? InternalUtils.mapArray(path, path_conv_10 => path_conv_10 == null ? 0 : path_conv_10.ptr) : null, short_channel_id.ptr, retry == null ? 0 : retry.ptr);
		GC.KeepAlive(payment_id);
		GC.KeepAlive(payment_hash);
		GC.KeepAlive(payment_failed_permanently);
		GC.KeepAlive(network_update);
		GC.KeepAlive(all_paths_failed);
		GC.KeepAlive(path);
		GC.KeepAlive(short_channel_id);
		GC.KeepAlive(retry);
		if (ret >= 0 && ret <= 4096) { return null; }
		org.ldk.structs.Event ret_hu_conv = org.ldk.structs.Event.constr_from_ptr(ret);
		if (ret_hu_conv != null) { ret_hu_conv.ptrs_to.AddLast(ret_hu_conv); };
		foreach (RouteHop path_conv_10 in path) { if (ret_hu_conv != null) { ret_hu_conv.ptrs_to.AddLast(path_conv_10); }; };
		if (ret_hu_conv != null) { ret_hu_conv.ptrs_to.AddLast(retry); };
		return ret_hu_conv;
	}

	/**
	 * Utility method to constructs a new ProbeSuccessful-variant Event
	 */
	public static Event probe_successful(byte[] payment_id, byte[] payment_hash, RouteHop[] path) {
		long ret = bindings.Event_probe_successful(InternalUtils.check_arr_len(payment_id, 32), InternalUtils.check_arr_len(payment_hash, 32), path != null ? InternalUtils.mapArray(path, path_conv_10 => path_conv_10 == null ? 0 : path_conv_10.ptr) : null);
		GC.KeepAlive(payment_id);
		GC.KeepAlive(payment_hash);
		GC.KeepAlive(path);
		if (ret >= 0 && ret <= 4096) { return null; }
		org.ldk.structs.Event ret_hu_conv = org.ldk.structs.Event.constr_from_ptr(ret);
		if (ret_hu_conv != null) { ret_hu_conv.ptrs_to.AddLast(ret_hu_conv); };
		foreach (RouteHop path_conv_10 in path) { if (ret_hu_conv != null) { ret_hu_conv.ptrs_to.AddLast(path_conv_10); }; };
		return ret_hu_conv;
	}

	/**
	 * Utility method to constructs a new ProbeFailed-variant Event
	 */
	public static Event probe_failed(byte[] payment_id, byte[] payment_hash, RouteHop[] path, org.ldk.structs.Option_u64Z short_channel_id) {
		long ret = bindings.Event_probe_failed(InternalUtils.check_arr_len(payment_id, 32), InternalUtils.check_arr_len(payment_hash, 32), path != null ? InternalUtils.mapArray(path, path_conv_10 => path_conv_10 == null ? 0 : path_conv_10.ptr) : null, short_channel_id.ptr);
		GC.KeepAlive(payment_id);
		GC.KeepAlive(payment_hash);
		GC.KeepAlive(path);
		GC.KeepAlive(short_channel_id);
		if (ret >= 0 && ret <= 4096) { return null; }
		org.ldk.structs.Event ret_hu_conv = org.ldk.structs.Event.constr_from_ptr(ret);
		if (ret_hu_conv != null) { ret_hu_conv.ptrs_to.AddLast(ret_hu_conv); };
		foreach (RouteHop path_conv_10 in path) { if (ret_hu_conv != null) { ret_hu_conv.ptrs_to.AddLast(path_conv_10); }; };
		return ret_hu_conv;
	}

	/**
	 * Utility method to constructs a new PendingHTLCsForwardable-variant Event
	 */
	public static Event pending_htlcs_forwardable(long time_forwardable) {
		long ret = bindings.Event_pending_htlcs_forwardable(time_forwardable);
		GC.KeepAlive(time_forwardable);
		if (ret >= 0 && ret <= 4096) { return null; }
		org.ldk.structs.Event ret_hu_conv = org.ldk.structs.Event.constr_from_ptr(ret);
		if (ret_hu_conv != null) { ret_hu_conv.ptrs_to.AddLast(ret_hu_conv); };
		return ret_hu_conv;
	}

	/**
	 * Utility method to constructs a new HTLCIntercepted-variant Event
	 */
	public static Event htlcintercepted(byte[] intercept_id, long requested_next_hop_scid, byte[] payment_hash, long inbound_amount_msat, long expected_outbound_amount_msat) {
		long ret = bindings.Event_htlcintercepted(InternalUtils.check_arr_len(intercept_id, 32), requested_next_hop_scid, InternalUtils.check_arr_len(payment_hash, 32), inbound_amount_msat, expected_outbound_amount_msat);
		GC.KeepAlive(intercept_id);
		GC.KeepAlive(requested_next_hop_scid);
		GC.KeepAlive(payment_hash);
		GC.KeepAlive(inbound_amount_msat);
		GC.KeepAlive(expected_outbound_amount_msat);
		if (ret >= 0 && ret <= 4096) { return null; }
		org.ldk.structs.Event ret_hu_conv = org.ldk.structs.Event.constr_from_ptr(ret);
		if (ret_hu_conv != null) { ret_hu_conv.ptrs_to.AddLast(ret_hu_conv); };
		return ret_hu_conv;
	}

	/**
	 * Utility method to constructs a new SpendableOutputs-variant Event
	 */
	public static Event spendable_outputs(SpendableOutputDescriptor[] outputs) {
		long ret = bindings.Event_spendable_outputs(outputs != null ? InternalUtils.mapArray(outputs, outputs_conv_27 => outputs_conv_27.ptr) : null);
		GC.KeepAlive(outputs);
		if (ret >= 0 && ret <= 4096) { return null; }
		org.ldk.structs.Event ret_hu_conv = org.ldk.structs.Event.constr_from_ptr(ret);
		if (ret_hu_conv != null) { ret_hu_conv.ptrs_to.AddLast(ret_hu_conv); };
		return ret_hu_conv;
	}

	/**
	 * Utility method to constructs a new PaymentForwarded-variant Event
	 */
	public static Event payment_forwarded(byte[] prev_channel_id, byte[] next_channel_id, org.ldk.structs.Option_u64Z fee_earned_msat, bool claim_from_onchain_tx) {
		long ret = bindings.Event_payment_forwarded(InternalUtils.check_arr_len(prev_channel_id, 32), InternalUtils.check_arr_len(next_channel_id, 32), fee_earned_msat.ptr, claim_from_onchain_tx);
		GC.KeepAlive(prev_channel_id);
		GC.KeepAlive(next_channel_id);
		GC.KeepAlive(fee_earned_msat);
		GC.KeepAlive(claim_from_onchain_tx);
		if (ret >= 0 && ret <= 4096) { return null; }
		org.ldk.structs.Event ret_hu_conv = org.ldk.structs.Event.constr_from_ptr(ret);
		if (ret_hu_conv != null) { ret_hu_conv.ptrs_to.AddLast(ret_hu_conv); };
		return ret_hu_conv;
	}

	/**
	 * Utility method to constructs a new ChannelReady-variant Event
	 */
	public static Event channel_ready(byte[] channel_id, org.ldk.util.UInt128 user_channel_id, byte[] counterparty_node_id, org.ldk.structs.ChannelTypeFeatures channel_type) {
		long ret = bindings.Event_channel_ready(InternalUtils.check_arr_len(channel_id, 32), user_channel_id.getLEBytes(), InternalUtils.check_arr_len(counterparty_node_id, 33), channel_type == null ? 0 : channel_type.ptr);
		GC.KeepAlive(channel_id);
		GC.KeepAlive(user_channel_id);
		GC.KeepAlive(counterparty_node_id);
		GC.KeepAlive(channel_type);
		if (ret >= 0 && ret <= 4096) { return null; }
		org.ldk.structs.Event ret_hu_conv = org.ldk.structs.Event.constr_from_ptr(ret);
		if (ret_hu_conv != null) { ret_hu_conv.ptrs_to.AddLast(ret_hu_conv); };
		if (ret_hu_conv != null) { ret_hu_conv.ptrs_to.AddLast(channel_type); };
		return ret_hu_conv;
	}

	/**
	 * Utility method to constructs a new ChannelClosed-variant Event
	 */
	public static Event channel_closed(byte[] channel_id, org.ldk.util.UInt128 user_channel_id, org.ldk.structs.ClosureReason reason) {
		long ret = bindings.Event_channel_closed(InternalUtils.check_arr_len(channel_id, 32), user_channel_id.getLEBytes(), reason.ptr);
		GC.KeepAlive(channel_id);
		GC.KeepAlive(user_channel_id);
		GC.KeepAlive(reason);
		if (ret >= 0 && ret <= 4096) { return null; }
		org.ldk.structs.Event ret_hu_conv = org.ldk.structs.Event.constr_from_ptr(ret);
		if (ret_hu_conv != null) { ret_hu_conv.ptrs_to.AddLast(ret_hu_conv); };
		return ret_hu_conv;
	}

	/**
	 * Utility method to constructs a new DiscardFunding-variant Event
	 */
	public static Event discard_funding(byte[] channel_id, byte[] transaction) {
		long ret = bindings.Event_discard_funding(InternalUtils.check_arr_len(channel_id, 32), transaction);
		GC.KeepAlive(channel_id);
		GC.KeepAlive(transaction);
		if (ret >= 0 && ret <= 4096) { return null; }
		org.ldk.structs.Event ret_hu_conv = org.ldk.structs.Event.constr_from_ptr(ret);
		if (ret_hu_conv != null) { ret_hu_conv.ptrs_to.AddLast(ret_hu_conv); };
		return ret_hu_conv;
	}

	/**
	 * Utility method to constructs a new OpenChannelRequest-variant Event
	 */
	public static Event open_channel_request(byte[] temporary_channel_id, byte[] counterparty_node_id, long funding_satoshis, long push_msat, org.ldk.structs.ChannelTypeFeatures channel_type) {
		long ret = bindings.Event_open_channel_request(InternalUtils.check_arr_len(temporary_channel_id, 32), InternalUtils.check_arr_len(counterparty_node_id, 33), funding_satoshis, push_msat, channel_type == null ? 0 : channel_type.ptr);
		GC.KeepAlive(temporary_channel_id);
		GC.KeepAlive(counterparty_node_id);
		GC.KeepAlive(funding_satoshis);
		GC.KeepAlive(push_msat);
		GC.KeepAlive(channel_type);
		if (ret >= 0 && ret <= 4096) { return null; }
		org.ldk.structs.Event ret_hu_conv = org.ldk.structs.Event.constr_from_ptr(ret);
		if (ret_hu_conv != null) { ret_hu_conv.ptrs_to.AddLast(ret_hu_conv); };
		if (ret_hu_conv != null) { ret_hu_conv.ptrs_to.AddLast(channel_type); };
		return ret_hu_conv;
	}

	/**
	 * Utility method to constructs a new HTLCHandlingFailed-variant Event
	 */
	public static Event htlchandling_failed(byte[] prev_channel_id, org.ldk.structs.HTLCDestination failed_next_destination) {
		long ret = bindings.Event_htlchandling_failed(InternalUtils.check_arr_len(prev_channel_id, 32), failed_next_destination.ptr);
		GC.KeepAlive(prev_channel_id);
		GC.KeepAlive(failed_next_destination);
		if (ret >= 0 && ret <= 4096) { return null; }
		org.ldk.structs.Event ret_hu_conv = org.ldk.structs.Event.constr_from_ptr(ret);
		if (ret_hu_conv != null) { ret_hu_conv.ptrs_to.AddLast(ret_hu_conv); };
		return ret_hu_conv;
	}

	/**
	 * Serialize the Event object into a byte array which can be read by Event_read
	 */
	public byte[] write() {
		byte[] ret = bindings.Event_write(this.ptr);
		GC.KeepAlive(this);
		return ret;
	}

}
} } }
