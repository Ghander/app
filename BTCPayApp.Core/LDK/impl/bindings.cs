
using org.ldk.enums;
using org.ldk.impl;
using System.Runtime.InteropServices;

namespace org { namespace ldk { namespace impl {

internal class bindings {
	/*static {
		init(java.lang.Enum.class, VecOrSliceDef.class);
		init_class_cache();
		if (!get_lib_version_string().equals(version.get_ldk_java_bindings_version()))
			throw new ArgumentException("Compiled LDK library and LDK class failes do not match");
		// Fetching the LDK versions from C also checks that the header and binaries match
		Console.Error.WriteLine("Loaded LDK-Java Bindings " + version.get_ldk_java_bindings_version() + " with LDK " + get_ldk_version() + " and LDK-C-Bindings " + get_ldk_c_bindings_version());
	}*/
	//static extern void init(java.lang.Class c);
	//static native void init_class_cache();
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_get_lib_version_string")] public static extern string get_lib_version_string();
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_get_ldk_c_bindings_version")] public static extern string get_ldk_c_bindings_version();
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_get_ldk_version")] public static extern string get_ldk_version();

	// struct LDKThirtyTwoBytes BigEndianScalar_get_bytes (struct LDKBigEndianScalar* thing)
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigEndianScalar_get_bytes")] public static extern byte[] BigEndianScalar_get_bytes(long _thing);
	// static void BigEndianScalar_free (struct LDKBigEndianScalar thing)
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigEndianScalar_free")] public static extern void BigEndianScalar_free(long _thing);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBech32Error_ty_from_ptr")] public static extern long LDKBech32Error_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBech32Error_InvalidChar_get_invalid_char")] public static extern int LDKBech32Error_InvalidChar_get_invalid_char(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBech32Error_InvalidData_get_invalid_data")] public static extern byte LDKBech32Error_InvalidData_get_invalid_data(long ptr);
	// struct LDKCVec_u8Z TxOut_get_script_pubkey (struct LDKTxOut* thing)
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxOut_get_script_pubkey")] public static extern byte[] TxOut_get_script_pubkey(long _thing);
	// uint64_t TxOut_get_value (struct LDKTxOut* thing)
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxOut_get_value")] public static extern long TxOut_get_value(long _thing);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_HTLCClaimZ_ty_from_ptr")] public static extern long LDKCOption_HTLCClaimZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_HTLCClaimZ_Some_get_some")] public static extern HTLCClaim LDKCOption_HTLCClaimZ_Some_get_some(long ptr);
	// void CResult_NoneNoneZ_get_ok(LDKCResult_NoneNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneNoneZ_get_ok")] public static extern void CResult_NoneNoneZ_get_ok(long _owner);
	// void CResult_NoneNoneZ_get_err(LDKCResult_NoneNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneNoneZ_get_err")] public static extern void CResult_NoneNoneZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKDecodeError_ty_from_ptr")] public static extern long LDKDecodeError_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKDecodeError_Io_get_io")] public static extern IOError LDKDecodeError_Io_get_io(long ptr);
	// struct LDKCounterpartyCommitmentSecrets CResult_CounterpartyCommitmentSecretsDecodeErrorZ_get_ok(LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyCommitmentSecretsDecodeErrorZ_get_ok")] public static extern long CResult_CounterpartyCommitmentSecretsDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_CounterpartyCommitmentSecretsDecodeErrorZ_get_err(LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyCommitmentSecretsDecodeErrorZ_get_err")] public static extern long CResult_CounterpartyCommitmentSecretsDecodeErrorZ_get_err(long _owner);
	// struct LDKTxCreationKeys CResult_TxCreationKeysDecodeErrorZ_get_ok(LDKCResult_TxCreationKeysDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCreationKeysDecodeErrorZ_get_ok")] public static extern long CResult_TxCreationKeysDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_TxCreationKeysDecodeErrorZ_get_err(LDKCResult_TxCreationKeysDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCreationKeysDecodeErrorZ_get_err")] public static extern long CResult_TxCreationKeysDecodeErrorZ_get_err(long _owner);
	// struct LDKChannelPublicKeys CResult_ChannelPublicKeysDecodeErrorZ_get_ok(LDKCResult_ChannelPublicKeysDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelPublicKeysDecodeErrorZ_get_ok")] public static extern long CResult_ChannelPublicKeysDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelPublicKeysDecodeErrorZ_get_err(LDKCResult_ChannelPublicKeysDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelPublicKeysDecodeErrorZ_get_err")] public static extern long CResult_ChannelPublicKeysDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_u32Z_ty_from_ptr")] public static extern long LDKCOption_u32Z_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_u32Z_Some_get_some")] public static extern int LDKCOption_u32Z_Some_get_some(long ptr);
	// struct LDKHTLCOutputInCommitment CResult_HTLCOutputInCommitmentDecodeErrorZ_get_ok(LDKCResult_HTLCOutputInCommitmentDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCOutputInCommitmentDecodeErrorZ_get_ok")] public static extern long CResult_HTLCOutputInCommitmentDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_HTLCOutputInCommitmentDecodeErrorZ_get_err(LDKCResult_HTLCOutputInCommitmentDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCOutputInCommitmentDecodeErrorZ_get_err")] public static extern long CResult_HTLCOutputInCommitmentDecodeErrorZ_get_err(long _owner);
	// struct LDKCounterpartyChannelTransactionParameters CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_get_ok(LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_get_ok")] public static extern long CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_get_err(LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_get_err")] public static extern long CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_get_err(long _owner);
	// struct LDKChannelTransactionParameters CResult_ChannelTransactionParametersDecodeErrorZ_get_ok(LDKCResult_ChannelTransactionParametersDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTransactionParametersDecodeErrorZ_get_ok")] public static extern long CResult_ChannelTransactionParametersDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelTransactionParametersDecodeErrorZ_get_err(LDKCResult_ChannelTransactionParametersDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTransactionParametersDecodeErrorZ_get_err")] public static extern long CResult_ChannelTransactionParametersDecodeErrorZ_get_err(long _owner);
	// struct LDKHolderCommitmentTransaction CResult_HolderCommitmentTransactionDecodeErrorZ_get_ok(LDKCResult_HolderCommitmentTransactionDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HolderCommitmentTransactionDecodeErrorZ_get_ok")] public static extern long CResult_HolderCommitmentTransactionDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_HolderCommitmentTransactionDecodeErrorZ_get_err(LDKCResult_HolderCommitmentTransactionDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HolderCommitmentTransactionDecodeErrorZ_get_err")] public static extern long CResult_HolderCommitmentTransactionDecodeErrorZ_get_err(long _owner);
	// struct LDKBuiltCommitmentTransaction CResult_BuiltCommitmentTransactionDecodeErrorZ_get_ok(LDKCResult_BuiltCommitmentTransactionDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BuiltCommitmentTransactionDecodeErrorZ_get_ok")] public static extern long CResult_BuiltCommitmentTransactionDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_BuiltCommitmentTransactionDecodeErrorZ_get_err(LDKCResult_BuiltCommitmentTransactionDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BuiltCommitmentTransactionDecodeErrorZ_get_err")] public static extern long CResult_BuiltCommitmentTransactionDecodeErrorZ_get_err(long _owner);
	// struct LDKTrustedClosingTransaction CResult_TrustedClosingTransactionNoneZ_get_ok(LDKCResult_TrustedClosingTransactionNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedClosingTransactionNoneZ_get_ok")] public static extern long CResult_TrustedClosingTransactionNoneZ_get_ok(long _owner);
	// void CResult_TrustedClosingTransactionNoneZ_get_err(LDKCResult_TrustedClosingTransactionNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedClosingTransactionNoneZ_get_err")] public static extern void CResult_TrustedClosingTransactionNoneZ_get_err(long _owner);
	// struct LDKCommitmentTransaction CResult_CommitmentTransactionDecodeErrorZ_get_ok(LDKCResult_CommitmentTransactionDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentTransactionDecodeErrorZ_get_ok")] public static extern long CResult_CommitmentTransactionDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_CommitmentTransactionDecodeErrorZ_get_err(LDKCResult_CommitmentTransactionDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentTransactionDecodeErrorZ_get_err")] public static extern long CResult_CommitmentTransactionDecodeErrorZ_get_err(long _owner);
	// struct LDKTrustedCommitmentTransaction CResult_TrustedCommitmentTransactionNoneZ_get_ok(LDKCResult_TrustedCommitmentTransactionNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedCommitmentTransactionNoneZ_get_ok")] public static extern long CResult_TrustedCommitmentTransactionNoneZ_get_ok(long _owner);
	// void CResult_TrustedCommitmentTransactionNoneZ_get_err(LDKCResult_TrustedCommitmentTransactionNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedCommitmentTransactionNoneZ_get_err")] public static extern void CResult_TrustedCommitmentTransactionNoneZ_get_err(long _owner);
	// struct LDKCVec_SignatureZ CResult_CVec_SignatureZNoneZ_get_ok(LDKCResult_CVec_SignatureZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_SignatureZNoneZ_get_ok")] public static extern byte[][] CResult_CVec_SignatureZNoneZ_get_ok(long _owner);
	// void CResult_CVec_SignatureZNoneZ_get_err(LDKCResult_CVec_SignatureZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_SignatureZNoneZ_get_err")] public static extern void CResult_CVec_SignatureZNoneZ_get_err(long _owner);
	// struct LDKShutdownScript CResult_ShutdownScriptDecodeErrorZ_get_ok(LDKCResult_ShutdownScriptDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptDecodeErrorZ_get_ok")] public static extern long CResult_ShutdownScriptDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ShutdownScriptDecodeErrorZ_get_err(LDKCResult_ShutdownScriptDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptDecodeErrorZ_get_err")] public static extern long CResult_ShutdownScriptDecodeErrorZ_get_err(long _owner);
	// struct LDKShutdownScript CResult_ShutdownScriptInvalidShutdownScriptZ_get_ok(LDKCResult_ShutdownScriptInvalidShutdownScriptZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptInvalidShutdownScriptZ_get_ok")] public static extern long CResult_ShutdownScriptInvalidShutdownScriptZ_get_ok(long _owner);
	// struct LDKInvalidShutdownScript CResult_ShutdownScriptInvalidShutdownScriptZ_get_err(LDKCResult_ShutdownScriptInvalidShutdownScriptZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptInvalidShutdownScriptZ_get_err")] public static extern long CResult_ShutdownScriptInvalidShutdownScriptZ_get_err(long _owner);
	// struct LDKBlindedPath CResult_BlindedPathNoneZ_get_ok(LDKCResult_BlindedPathNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathNoneZ_get_ok")] public static extern long CResult_BlindedPathNoneZ_get_ok(long _owner);
	// void CResult_BlindedPathNoneZ_get_err(LDKCResult_BlindedPathNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathNoneZ_get_err")] public static extern void CResult_BlindedPathNoneZ_get_err(long _owner);
	// struct LDKBlindedPath CResult_BlindedPathDecodeErrorZ_get_ok(LDKCResult_BlindedPathDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathDecodeErrorZ_get_ok")] public static extern long CResult_BlindedPathDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_BlindedPathDecodeErrorZ_get_err(LDKCResult_BlindedPathDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathDecodeErrorZ_get_err")] public static extern long CResult_BlindedPathDecodeErrorZ_get_err(long _owner);
	// struct LDKBlindedHop CResult_BlindedHopDecodeErrorZ_get_ok(LDKCResult_BlindedHopDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopDecodeErrorZ_get_ok")] public static extern long CResult_BlindedHopDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_BlindedHopDecodeErrorZ_get_err(LDKCResult_BlindedHopDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopDecodeErrorZ_get_err")] public static extern long CResult_BlindedHopDecodeErrorZ_get_err(long _owner);
	public interface LDKScore {
		long channel_penalty_msat(long _short_channel_id, long _source, long _target, long _usage);
		void payment_path_failed(long[] _path, long _short_channel_id);
		void payment_path_successful(long[] _path);
		void probe_failed(long[] _path, long _short_channel_id);
		void probe_successful(long[] _path);
		byte[] write();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKScore_new")] public static extern long LDKScore_new(LDKScore impl);
	// uint64_t Score_channel_penalty_msat LDKScore *NONNULL_PTR this_arg, uint64_t short_channel_id, const struct LDKNodeId *NONNULL_PTR source, const struct LDKNodeId *NONNULL_PTR target, struct LDKChannelUsage usage
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Score_channel_penalty_msat")] public static extern long Score_channel_penalty_msat(long _this_arg, long _short_channel_id, long _source, long _target, long _usage);
	// void Score_payment_path_failed LDKScore *NONNULL_PTR this_arg, struct LDKCVec_RouteHopZ path, uint64_t short_channel_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Score_payment_path_failed")] public static extern void Score_payment_path_failed(long _this_arg, long[] _path, long _short_channel_id);
	// void Score_payment_path_successful LDKScore *NONNULL_PTR this_arg, struct LDKCVec_RouteHopZ path
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Score_payment_path_successful")] public static extern void Score_payment_path_successful(long _this_arg, long[] _path);
	// void Score_probe_failed LDKScore *NONNULL_PTR this_arg, struct LDKCVec_RouteHopZ path, uint64_t short_channel_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Score_probe_failed")] public static extern void Score_probe_failed(long _this_arg, long[] _path, long _short_channel_id);
	// void Score_probe_successful LDKScore *NONNULL_PTR this_arg, struct LDKCVec_RouteHopZ path
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Score_probe_successful")] public static extern void Score_probe_successful(long _this_arg, long[] _path);
	// LDKCVec_u8Z Score_write LDKScore *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Score_write")] public static extern byte[] Score_write(long _this_arg);
	public interface LDKLockableScore {
		long do_lock();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLockableScore_new")] public static extern long LDKLockableScore_new(LDKLockableScore impl);
	// LDKScore LockableScore_lock LDKLockableScore *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LockableScore_lock")] public static extern long LockableScore_lock(long _this_arg);
	public interface LDKWriteableScore {
		byte[] write();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKWriteableScore_new")] public static extern long LDKWriteableScore_new(LDKWriteableScore impl, LDKLockableScore LockableScore);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKWriteableScore_get_LockableScore")] public static extern long LDKWriteableScore_get_LockableScore(long arg);
	// LDKCVec_u8Z WriteableScore_write LDKWriteableScore *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WriteableScore_write")] public static extern byte[] WriteableScore_write(long _this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_WriteableScoreZ_ty_from_ptr")] public static extern long LDKCOption_WriteableScoreZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_WriteableScoreZ_Some_get_some")] public static extern long LDKCOption_WriteableScoreZ_Some_get_some(long ptr);
	// void CResult_NoneErrorZ_get_ok(LDKCResult_NoneErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneErrorZ_get_ok")] public static extern void CResult_NoneErrorZ_get_ok(long _owner);
	// enum LDKIOError CResult_NoneErrorZ_get_err(LDKCResult_NoneErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneErrorZ_get_err")] public static extern IOError CResult_NoneErrorZ_get_err(long _owner);
	// struct LDKRoute CResult_RouteLightningErrorZ_get_ok(LDKCResult_RouteLightningErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteLightningErrorZ_get_ok")] public static extern long CResult_RouteLightningErrorZ_get_ok(long _owner);
	// struct LDKLightningError CResult_RouteLightningErrorZ_get_err(LDKCResult_RouteLightningErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteLightningErrorZ_get_err")] public static extern long CResult_RouteLightningErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_u64Z_ty_from_ptr")] public static extern long LDKCOption_u64Z_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_u64Z_Some_get_some")] public static extern long LDKCOption_u64Z_Some_get_some(long ptr);
	// struct LDKInFlightHtlcs CResult_InFlightHtlcsDecodeErrorZ_get_ok(LDKCResult_InFlightHtlcsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InFlightHtlcsDecodeErrorZ_get_ok")] public static extern long CResult_InFlightHtlcsDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_InFlightHtlcsDecodeErrorZ_get_err(LDKCResult_InFlightHtlcsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InFlightHtlcsDecodeErrorZ_get_err")] public static extern long CResult_InFlightHtlcsDecodeErrorZ_get_err(long _owner);
	// struct LDKRouteHop CResult_RouteHopDecodeErrorZ_get_ok(LDKCResult_RouteHopDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHopDecodeErrorZ_get_ok")] public static extern long CResult_RouteHopDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_RouteHopDecodeErrorZ_get_err(LDKCResult_RouteHopDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHopDecodeErrorZ_get_err")] public static extern long CResult_RouteHopDecodeErrorZ_get_err(long _owner);
	// struct LDKRoute CResult_RouteDecodeErrorZ_get_ok(LDKCResult_RouteDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteDecodeErrorZ_get_ok")] public static extern long CResult_RouteDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_RouteDecodeErrorZ_get_err(LDKCResult_RouteDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteDecodeErrorZ_get_err")] public static extern long CResult_RouteDecodeErrorZ_get_err(long _owner);
	// struct LDKRouteParameters CResult_RouteParametersDecodeErrorZ_get_ok(LDKCResult_RouteParametersDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteParametersDecodeErrorZ_get_ok")] public static extern long CResult_RouteParametersDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_RouteParametersDecodeErrorZ_get_err(LDKCResult_RouteParametersDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteParametersDecodeErrorZ_get_err")] public static extern long CResult_RouteParametersDecodeErrorZ_get_err(long _owner);
	// struct LDKPaymentParameters CResult_PaymentParametersDecodeErrorZ_get_ok(LDKCResult_PaymentParametersDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentParametersDecodeErrorZ_get_ok")] public static extern long CResult_PaymentParametersDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_PaymentParametersDecodeErrorZ_get_err(LDKCResult_PaymentParametersDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentParametersDecodeErrorZ_get_err")] public static extern long CResult_PaymentParametersDecodeErrorZ_get_err(long _owner);
	// struct LDKRouteHint CResult_RouteHintDecodeErrorZ_get_ok(LDKCResult_RouteHintDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintDecodeErrorZ_get_ok")] public static extern long CResult_RouteHintDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_RouteHintDecodeErrorZ_get_err(LDKCResult_RouteHintDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintDecodeErrorZ_get_err")] public static extern long CResult_RouteHintDecodeErrorZ_get_err(long _owner);
	// struct LDKRouteHintHop CResult_RouteHintHopDecodeErrorZ_get_ok(LDKCResult_RouteHintHopDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintHopDecodeErrorZ_get_ok")] public static extern long CResult_RouteHintHopDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_RouteHintHopDecodeErrorZ_get_err(LDKCResult_RouteHintHopDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintHopDecodeErrorZ_get_err")] public static extern long CResult_RouteHintHopDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentPurpose_ty_from_ptr")] public static extern long LDKPaymentPurpose_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentPurpose_InvoicePayment_get_payment_preimage")] public static extern byte[] LDKPaymentPurpose_InvoicePayment_get_payment_preimage(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentPurpose_InvoicePayment_get_payment_secret")] public static extern byte[] LDKPaymentPurpose_InvoicePayment_get_payment_secret(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentPurpose_SpontaneousPayment_get_spontaneous_payment")] public static extern byte[] LDKPaymentPurpose_SpontaneousPayment_get_spontaneous_payment(long ptr);
	// struct LDKPaymentPurpose CResult_PaymentPurposeDecodeErrorZ_get_ok(LDKCResult_PaymentPurposeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPurposeDecodeErrorZ_get_ok")] public static extern long CResult_PaymentPurposeDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_PaymentPurposeDecodeErrorZ_get_err(LDKCResult_PaymentPurposeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPurposeDecodeErrorZ_get_err")] public static extern long CResult_PaymentPurposeDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKClosureReason_ty_from_ptr")] public static extern long LDKClosureReason_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKClosureReason_CounterpartyForceClosed_get_peer_msg")] public static extern string LDKClosureReason_CounterpartyForceClosed_get_peer_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKClosureReason_ProcessingError_get_err")] public static extern string LDKClosureReason_ProcessingError_get_err(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_ClosureReasonZ_ty_from_ptr")] public static extern long LDKCOption_ClosureReasonZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_ClosureReasonZ_Some_get_some")] public static extern long LDKCOption_ClosureReasonZ_Some_get_some(long ptr);
	// struct LDKCOption_ClosureReasonZ CResult_COption_ClosureReasonZDecodeErrorZ_get_ok(LDKCResult_COption_ClosureReasonZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_ClosureReasonZDecodeErrorZ_get_ok")] public static extern long CResult_COption_ClosureReasonZDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_COption_ClosureReasonZDecodeErrorZ_get_err(LDKCResult_COption_ClosureReasonZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_ClosureReasonZDecodeErrorZ_get_err")] public static extern long CResult_COption_ClosureReasonZDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKHTLCDestination_ty_from_ptr")] public static extern long LDKHTLCDestination_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKHTLCDestination_NextHopChannel_get_node_id")] public static extern byte[] LDKHTLCDestination_NextHopChannel_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKHTLCDestination_NextHopChannel_get_channel_id")] public static extern byte[] LDKHTLCDestination_NextHopChannel_get_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKHTLCDestination_UnknownNextHop_get_requested_forward_scid")] public static extern long LDKHTLCDestination_UnknownNextHop_get_requested_forward_scid(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKHTLCDestination_InvalidForward_get_requested_forward_scid")] public static extern long LDKHTLCDestination_InvalidForward_get_requested_forward_scid(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKHTLCDestination_FailedPayment_get_payment_hash")] public static extern byte[] LDKHTLCDestination_FailedPayment_get_payment_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_HTLCDestinationZ_ty_from_ptr")] public static extern long LDKCOption_HTLCDestinationZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_HTLCDestinationZ_Some_get_some")] public static extern long LDKCOption_HTLCDestinationZ_Some_get_some(long ptr);
	// struct LDKCOption_HTLCDestinationZ CResult_COption_HTLCDestinationZDecodeErrorZ_get_ok(LDKCResult_COption_HTLCDestinationZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_HTLCDestinationZDecodeErrorZ_get_ok")] public static extern long CResult_COption_HTLCDestinationZDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_COption_HTLCDestinationZDecodeErrorZ_get_err(LDKCResult_COption_HTLCDestinationZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_HTLCDestinationZDecodeErrorZ_get_err")] public static extern long CResult_COption_HTLCDestinationZDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_u128Z_ty_from_ptr")] public static extern long LDKCOption_u128Z_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_u128Z_Some_get_some")] public static extern byte[] LDKCOption_u128Z_Some_get_some(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetworkUpdate_ty_from_ptr")] public static extern long LDKNetworkUpdate_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetworkUpdate_ChannelUpdateMessage_get_msg")] public static extern long LDKNetworkUpdate_ChannelUpdateMessage_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetworkUpdate_ChannelFailure_get_short_channel_id")] public static extern long LDKNetworkUpdate_ChannelFailure_get_short_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetworkUpdate_ChannelFailure_get_is_permanent")] public static extern bool LDKNetworkUpdate_ChannelFailure_get_is_permanent(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetworkUpdate_NodeFailure_get_node_id")] public static extern byte[] LDKNetworkUpdate_NodeFailure_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetworkUpdate_NodeFailure_get_is_permanent")] public static extern bool LDKNetworkUpdate_NodeFailure_get_is_permanent(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_NetworkUpdateZ_ty_from_ptr")] public static extern long LDKCOption_NetworkUpdateZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_NetworkUpdateZ_Some_get_some")] public static extern long LDKCOption_NetworkUpdateZ_Some_get_some(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSpendableOutputDescriptor_ty_from_ptr")] public static extern long LDKSpendableOutputDescriptor_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSpendableOutputDescriptor_StaticOutput_get_outpoint")] public static extern long LDKSpendableOutputDescriptor_StaticOutput_get_outpoint(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSpendableOutputDescriptor_StaticOutput_get_output")] public static extern long LDKSpendableOutputDescriptor_StaticOutput_get_output(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSpendableOutputDescriptor_DelayedPaymentOutput_get_delayed_payment_output")] public static extern long LDKSpendableOutputDescriptor_DelayedPaymentOutput_get_delayed_payment_output(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSpendableOutputDescriptor_StaticPaymentOutput_get_static_payment_output")] public static extern long LDKSpendableOutputDescriptor_StaticPaymentOutput_get_static_payment_output(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ty_from_ptr")] public static extern long LDKEvent_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_FundingGenerationReady_get_temporary_channel_id")] public static extern byte[] LDKEvent_FundingGenerationReady_get_temporary_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_FundingGenerationReady_get_counterparty_node_id")] public static extern byte[] LDKEvent_FundingGenerationReady_get_counterparty_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_FundingGenerationReady_get_channel_value_satoshis")] public static extern long LDKEvent_FundingGenerationReady_get_channel_value_satoshis(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_FundingGenerationReady_get_output_script")] public static extern byte[] LDKEvent_FundingGenerationReady_get_output_script(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_FundingGenerationReady_get_user_channel_id")] public static extern byte[] LDKEvent_FundingGenerationReady_get_user_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimable_get_receiver_node_id")] public static extern byte[] LDKEvent_PaymentClaimable_get_receiver_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimable_get_payment_hash")] public static extern byte[] LDKEvent_PaymentClaimable_get_payment_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimable_get_amount_msat")] public static extern long LDKEvent_PaymentClaimable_get_amount_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimable_get_purpose")] public static extern long LDKEvent_PaymentClaimable_get_purpose(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimable_get_via_channel_id")] public static extern byte[] LDKEvent_PaymentClaimable_get_via_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimable_get_via_user_channel_id")] public static extern long LDKEvent_PaymentClaimable_get_via_user_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimed_get_receiver_node_id")] public static extern byte[] LDKEvent_PaymentClaimed_get_receiver_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimed_get_payment_hash")] public static extern byte[] LDKEvent_PaymentClaimed_get_payment_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimed_get_amount_msat")] public static extern long LDKEvent_PaymentClaimed_get_amount_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimed_get_purpose")] public static extern long LDKEvent_PaymentClaimed_get_purpose(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentSent_get_payment_id")] public static extern byte[] LDKEvent_PaymentSent_get_payment_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentSent_get_payment_preimage")] public static extern byte[] LDKEvent_PaymentSent_get_payment_preimage(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentSent_get_payment_hash")] public static extern byte[] LDKEvent_PaymentSent_get_payment_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentSent_get_fee_paid_msat")] public static extern long LDKEvent_PaymentSent_get_fee_paid_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentFailed_get_payment_id")] public static extern byte[] LDKEvent_PaymentFailed_get_payment_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentFailed_get_payment_hash")] public static extern byte[] LDKEvent_PaymentFailed_get_payment_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathSuccessful_get_payment_id")] public static extern byte[] LDKEvent_PaymentPathSuccessful_get_payment_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathSuccessful_get_payment_hash")] public static extern byte[] LDKEvent_PaymentPathSuccessful_get_payment_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathSuccessful_get_path")] public static extern long[] LDKEvent_PaymentPathSuccessful_get_path(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathFailed_get_payment_id")] public static extern byte[] LDKEvent_PaymentPathFailed_get_payment_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathFailed_get_payment_hash")] public static extern byte[] LDKEvent_PaymentPathFailed_get_payment_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathFailed_get_payment_failed_permanently")] public static extern bool LDKEvent_PaymentPathFailed_get_payment_failed_permanently(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathFailed_get_network_update")] public static extern long LDKEvent_PaymentPathFailed_get_network_update(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathFailed_get_all_paths_failed")] public static extern bool LDKEvent_PaymentPathFailed_get_all_paths_failed(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathFailed_get_path")] public static extern long[] LDKEvent_PaymentPathFailed_get_path(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathFailed_get_short_channel_id")] public static extern long LDKEvent_PaymentPathFailed_get_short_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathFailed_get_retry")] public static extern long LDKEvent_PaymentPathFailed_get_retry(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ProbeSuccessful_get_payment_id")] public static extern byte[] LDKEvent_ProbeSuccessful_get_payment_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ProbeSuccessful_get_payment_hash")] public static extern byte[] LDKEvent_ProbeSuccessful_get_payment_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ProbeSuccessful_get_path")] public static extern long[] LDKEvent_ProbeSuccessful_get_path(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ProbeFailed_get_payment_id")] public static extern byte[] LDKEvent_ProbeFailed_get_payment_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ProbeFailed_get_payment_hash")] public static extern byte[] LDKEvent_ProbeFailed_get_payment_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ProbeFailed_get_path")] public static extern long[] LDKEvent_ProbeFailed_get_path(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ProbeFailed_get_short_channel_id")] public static extern long LDKEvent_ProbeFailed_get_short_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PendingHTLCsForwardable_get_time_forwardable")] public static extern long LDKEvent_PendingHTLCsForwardable_get_time_forwardable(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_HTLCIntercepted_get_intercept_id")] public static extern byte[] LDKEvent_HTLCIntercepted_get_intercept_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_HTLCIntercepted_get_requested_next_hop_scid")] public static extern long LDKEvent_HTLCIntercepted_get_requested_next_hop_scid(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_HTLCIntercepted_get_payment_hash")] public static extern byte[] LDKEvent_HTLCIntercepted_get_payment_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_HTLCIntercepted_get_inbound_amount_msat")] public static extern long LDKEvent_HTLCIntercepted_get_inbound_amount_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_HTLCIntercepted_get_expected_outbound_amount_msat")] public static extern long LDKEvent_HTLCIntercepted_get_expected_outbound_amount_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_SpendableOutputs_get_outputs")] public static extern long[] LDKEvent_SpendableOutputs_get_outputs(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentForwarded_get_prev_channel_id")] public static extern byte[] LDKEvent_PaymentForwarded_get_prev_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentForwarded_get_next_channel_id")] public static extern byte[] LDKEvent_PaymentForwarded_get_next_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentForwarded_get_fee_earned_msat")] public static extern long LDKEvent_PaymentForwarded_get_fee_earned_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentForwarded_get_claim_from_onchain_tx")] public static extern bool LDKEvent_PaymentForwarded_get_claim_from_onchain_tx(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelReady_get_channel_id")] public static extern byte[] LDKEvent_ChannelReady_get_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelReady_get_user_channel_id")] public static extern byte[] LDKEvent_ChannelReady_get_user_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelReady_get_counterparty_node_id")] public static extern byte[] LDKEvent_ChannelReady_get_counterparty_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelReady_get_channel_type")] public static extern long LDKEvent_ChannelReady_get_channel_type(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelClosed_get_channel_id")] public static extern byte[] LDKEvent_ChannelClosed_get_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelClosed_get_user_channel_id")] public static extern byte[] LDKEvent_ChannelClosed_get_user_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelClosed_get_reason")] public static extern long LDKEvent_ChannelClosed_get_reason(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_DiscardFunding_get_channel_id")] public static extern byte[] LDKEvent_DiscardFunding_get_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_DiscardFunding_get_transaction")] public static extern byte[] LDKEvent_DiscardFunding_get_transaction(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_OpenChannelRequest_get_temporary_channel_id")] public static extern byte[] LDKEvent_OpenChannelRequest_get_temporary_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_OpenChannelRequest_get_counterparty_node_id")] public static extern byte[] LDKEvent_OpenChannelRequest_get_counterparty_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_OpenChannelRequest_get_funding_satoshis")] public static extern long LDKEvent_OpenChannelRequest_get_funding_satoshis(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_OpenChannelRequest_get_push_msat")] public static extern long LDKEvent_OpenChannelRequest_get_push_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_OpenChannelRequest_get_channel_type")] public static extern long LDKEvent_OpenChannelRequest_get_channel_type(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_HTLCHandlingFailed_get_prev_channel_id")] public static extern byte[] LDKEvent_HTLCHandlingFailed_get_prev_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_HTLCHandlingFailed_get_failed_next_destination")] public static extern long LDKEvent_HTLCHandlingFailed_get_failed_next_destination(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_EventZ_ty_from_ptr")] public static extern long LDKCOption_EventZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_EventZ_Some_get_some")] public static extern long LDKCOption_EventZ_Some_get_some(long ptr);
	// struct LDKCOption_EventZ CResult_COption_EventZDecodeErrorZ_get_ok(LDKCResult_COption_EventZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_EventZDecodeErrorZ_get_ok")] public static extern long CResult_COption_EventZDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_COption_EventZDecodeErrorZ_get_err(LDKCResult_COption_EventZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_EventZDecodeErrorZ_get_err")] public static extern long CResult_COption_EventZDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKErrorAction_ty_from_ptr")] public static extern long LDKErrorAction_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKErrorAction_DisconnectPeer_get_msg")] public static extern long LDKErrorAction_DisconnectPeer_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKErrorAction_IgnoreAndLog_get_ignore_and_log")] public static extern Level LDKErrorAction_IgnoreAndLog_get_ignore_and_log(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKErrorAction_SendErrorMessage_get_msg")] public static extern long LDKErrorAction_SendErrorMessage_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKErrorAction_SendWarningMessage_get_msg")] public static extern long LDKErrorAction_SendWarningMessage_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKErrorAction_SendWarningMessage_get_log_level")] public static extern Level LDKErrorAction_SendWarningMessage_get_log_level(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_ty_from_ptr")] public static extern long LDKMessageSendEvent_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendAcceptChannel_get_node_id")] public static extern byte[] LDKMessageSendEvent_SendAcceptChannel_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendAcceptChannel_get_msg")] public static extern long LDKMessageSendEvent_SendAcceptChannel_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendOpenChannel_get_node_id")] public static extern byte[] LDKMessageSendEvent_SendOpenChannel_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendOpenChannel_get_msg")] public static extern long LDKMessageSendEvent_SendOpenChannel_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendFundingCreated_get_node_id")] public static extern byte[] LDKMessageSendEvent_SendFundingCreated_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendFundingCreated_get_msg")] public static extern long LDKMessageSendEvent_SendFundingCreated_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendFundingSigned_get_node_id")] public static extern byte[] LDKMessageSendEvent_SendFundingSigned_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendFundingSigned_get_msg")] public static extern long LDKMessageSendEvent_SendFundingSigned_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelReady_get_node_id")] public static extern byte[] LDKMessageSendEvent_SendChannelReady_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelReady_get_msg")] public static extern long LDKMessageSendEvent_SendChannelReady_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendAnnouncementSignatures_get_node_id")] public static extern byte[] LDKMessageSendEvent_SendAnnouncementSignatures_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendAnnouncementSignatures_get_msg")] public static extern long LDKMessageSendEvent_SendAnnouncementSignatures_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_UpdateHTLCs_get_node_id")] public static extern byte[] LDKMessageSendEvent_UpdateHTLCs_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_UpdateHTLCs_get_updates")] public static extern long LDKMessageSendEvent_UpdateHTLCs_get_updates(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendRevokeAndACK_get_node_id")] public static extern byte[] LDKMessageSendEvent_SendRevokeAndACK_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendRevokeAndACK_get_msg")] public static extern long LDKMessageSendEvent_SendRevokeAndACK_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendClosingSigned_get_node_id")] public static extern byte[] LDKMessageSendEvent_SendClosingSigned_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendClosingSigned_get_msg")] public static extern long LDKMessageSendEvent_SendClosingSigned_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendShutdown_get_node_id")] public static extern byte[] LDKMessageSendEvent_SendShutdown_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendShutdown_get_msg")] public static extern long LDKMessageSendEvent_SendShutdown_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelReestablish_get_node_id")] public static extern byte[] LDKMessageSendEvent_SendChannelReestablish_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelReestablish_get_msg")] public static extern long LDKMessageSendEvent_SendChannelReestablish_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelAnnouncement_get_node_id")] public static extern byte[] LDKMessageSendEvent_SendChannelAnnouncement_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelAnnouncement_get_msg")] public static extern long LDKMessageSendEvent_SendChannelAnnouncement_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelAnnouncement_get_update_msg")] public static extern long LDKMessageSendEvent_SendChannelAnnouncement_get_update_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_BroadcastChannelAnnouncement_get_msg")] public static extern long LDKMessageSendEvent_BroadcastChannelAnnouncement_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_BroadcastChannelAnnouncement_get_update_msg")] public static extern long LDKMessageSendEvent_BroadcastChannelAnnouncement_get_update_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_BroadcastChannelUpdate_get_msg")] public static extern long LDKMessageSendEvent_BroadcastChannelUpdate_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelUpdate_get_node_id")] public static extern byte[] LDKMessageSendEvent_SendChannelUpdate_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelUpdate_get_msg")] public static extern long LDKMessageSendEvent_SendChannelUpdate_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_HandleError_get_node_id")] public static extern byte[] LDKMessageSendEvent_HandleError_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_HandleError_get_action")] public static extern long LDKMessageSendEvent_HandleError_get_action(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelRangeQuery_get_node_id")] public static extern byte[] LDKMessageSendEvent_SendChannelRangeQuery_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelRangeQuery_get_msg")] public static extern long LDKMessageSendEvent_SendChannelRangeQuery_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendShortIdsQuery_get_node_id")] public static extern byte[] LDKMessageSendEvent_SendShortIdsQuery_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendShortIdsQuery_get_msg")] public static extern long LDKMessageSendEvent_SendShortIdsQuery_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendReplyChannelRange_get_node_id")] public static extern byte[] LDKMessageSendEvent_SendReplyChannelRange_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendReplyChannelRange_get_msg")] public static extern long LDKMessageSendEvent_SendReplyChannelRange_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendGossipTimestampFilter_get_node_id")] public static extern byte[] LDKMessageSendEvent_SendGossipTimestampFilter_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendGossipTimestampFilter_get_msg")] public static extern long LDKMessageSendEvent_SendGossipTimestampFilter_get_msg(long ptr);
	// struct LDKTxOut CResult_TxOutAccessErrorZ_get_ok(LDKCResult_TxOutAccessErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxOutAccessErrorZ_get_ok")] public static extern long CResult_TxOutAccessErrorZ_get_ok(long _owner);
	// enum LDKAccessError CResult_TxOutAccessErrorZ_get_err(LDKCResult_TxOutAccessErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxOutAccessErrorZ_get_err")] public static extern AccessError CResult_TxOutAccessErrorZ_get_err(long _owner);
	// uintptr_t C2Tuple_usizeTransactionZ_get_a(LDKC2Tuple_usizeTransactionZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_usizeTransactionZ_get_a")] public static extern long C2Tuple_usizeTransactionZ_get_a(long _owner);
	// struct LDKTransaction C2Tuple_usizeTransactionZ_get_b(LDKC2Tuple_usizeTransactionZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_usizeTransactionZ_get_b")] public static extern byte[] C2Tuple_usizeTransactionZ_get_b(long _owner);
	// struct LDKThirtyTwoBytes C2Tuple_TxidBlockHashZ_get_a(LDKC2Tuple_TxidBlockHashZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_TxidBlockHashZ_get_a")] public static extern byte[] C2Tuple_TxidBlockHashZ_get_a(long _owner);
	// struct LDKThirtyTwoBytes C2Tuple_TxidBlockHashZ_get_b(LDKC2Tuple_TxidBlockHashZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_TxidBlockHashZ_get_b")] public static extern byte[] C2Tuple_TxidBlockHashZ_get_b(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMonitorEvent_ty_from_ptr")] public static extern long LDKMonitorEvent_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMonitorEvent_HTLCEvent_get_htlc_event")] public static extern long LDKMonitorEvent_HTLCEvent_get_htlc_event(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMonitorEvent_CommitmentTxConfirmed_get_commitment_tx_confirmed")] public static extern long LDKMonitorEvent_CommitmentTxConfirmed_get_commitment_tx_confirmed(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMonitorEvent_Completed_get_funding_txo")] public static extern long LDKMonitorEvent_Completed_get_funding_txo(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMonitorEvent_Completed_get_monitor_update_id")] public static extern long LDKMonitorEvent_Completed_get_monitor_update_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMonitorEvent_UpdateFailed_get_update_failed")] public static extern long LDKMonitorEvent_UpdateFailed_get_update_failed(long ptr);
	// struct LDKOutPoint C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_get_a(LDKC3Tuple_OutPointCVec_MonitorEventZPublicKeyZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_get_a")] public static extern long C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_get_a(long _owner);
	// struct LDKCVec_MonitorEventZ C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_get_b(LDKC3Tuple_OutPointCVec_MonitorEventZPublicKeyZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_get_b")] public static extern long[] C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_get_b(long _owner);
	// struct LDKPublicKey C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_get_c(LDKC3Tuple_OutPointCVec_MonitorEventZPublicKeyZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_get_c")] public static extern byte[] C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_get_c(long _owner);
	// struct LDKFixedPenaltyScorer CResult_FixedPenaltyScorerDecodeErrorZ_get_ok(LDKCResult_FixedPenaltyScorerDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FixedPenaltyScorerDecodeErrorZ_get_ok")] public static extern long CResult_FixedPenaltyScorerDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_FixedPenaltyScorerDecodeErrorZ_get_err(LDKCResult_FixedPenaltyScorerDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FixedPenaltyScorerDecodeErrorZ_get_err")] public static extern long CResult_FixedPenaltyScorerDecodeErrorZ_get_err(long _owner);
	// uint64_t C2Tuple_u64u64Z_get_a(LDKC2Tuple_u64u64Z *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u64Z_get_a")] public static extern long C2Tuple_u64u64Z_get_a(long _owner);
	// uint64_t C2Tuple_u64u64Z_get_b(LDKC2Tuple_u64u64Z *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u64Z_get_b")] public static extern long C2Tuple_u64u64Z_get_b(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C2Tuple_u64u64ZZ_ty_from_ptr")] public static extern long LDKCOption_C2Tuple_u64u64ZZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C2Tuple_u64u64ZZ_Some_get_some")] public static extern long LDKCOption_C2Tuple_u64u64ZZ_Some_get_some(long ptr);
	public interface LDKLogger {
		void log(long _record);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLogger_new")] public static extern long LDKLogger_new(LDKLogger impl);
	// struct LDKProbabilisticScorer CResult_ProbabilisticScorerDecodeErrorZ_get_ok(LDKCResult_ProbabilisticScorerDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ProbabilisticScorerDecodeErrorZ_get_ok")] public static extern long CResult_ProbabilisticScorerDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ProbabilisticScorerDecodeErrorZ_get_err(LDKCResult_ProbabilisticScorerDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ProbabilisticScorerDecodeErrorZ_get_err")] public static extern long CResult_ProbabilisticScorerDecodeErrorZ_get_err(long _owner);
	// struct LDKInitFeatures CResult_InitFeaturesDecodeErrorZ_get_ok(LDKCResult_InitFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitFeaturesDecodeErrorZ_get_ok")] public static extern long CResult_InitFeaturesDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_InitFeaturesDecodeErrorZ_get_err(LDKCResult_InitFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitFeaturesDecodeErrorZ_get_err")] public static extern long CResult_InitFeaturesDecodeErrorZ_get_err(long _owner);
	// struct LDKChannelFeatures CResult_ChannelFeaturesDecodeErrorZ_get_ok(LDKCResult_ChannelFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelFeaturesDecodeErrorZ_get_ok")] public static extern long CResult_ChannelFeaturesDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelFeaturesDecodeErrorZ_get_err(LDKCResult_ChannelFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelFeaturesDecodeErrorZ_get_err")] public static extern long CResult_ChannelFeaturesDecodeErrorZ_get_err(long _owner);
	// struct LDKNodeFeatures CResult_NodeFeaturesDecodeErrorZ_get_ok(LDKCResult_NodeFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeFeaturesDecodeErrorZ_get_ok")] public static extern long CResult_NodeFeaturesDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_NodeFeaturesDecodeErrorZ_get_err(LDKCResult_NodeFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeFeaturesDecodeErrorZ_get_err")] public static extern long CResult_NodeFeaturesDecodeErrorZ_get_err(long _owner);
	// struct LDKInvoiceFeatures CResult_InvoiceFeaturesDecodeErrorZ_get_ok(LDKCResult_InvoiceFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceFeaturesDecodeErrorZ_get_ok")] public static extern long CResult_InvoiceFeaturesDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_InvoiceFeaturesDecodeErrorZ_get_err(LDKCResult_InvoiceFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceFeaturesDecodeErrorZ_get_err")] public static extern long CResult_InvoiceFeaturesDecodeErrorZ_get_err(long _owner);
	// struct LDKChannelTypeFeatures CResult_ChannelTypeFeaturesDecodeErrorZ_get_ok(LDKCResult_ChannelTypeFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTypeFeaturesDecodeErrorZ_get_ok")] public static extern long CResult_ChannelTypeFeaturesDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelTypeFeaturesDecodeErrorZ_get_err(LDKCResult_ChannelTypeFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTypeFeaturesDecodeErrorZ_get_err")] public static extern long CResult_ChannelTypeFeaturesDecodeErrorZ_get_err(long _owner);
	// struct LDKOfferFeatures CResult_OfferFeaturesDecodeErrorZ_get_ok(LDKCResult_OfferFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferFeaturesDecodeErrorZ_get_ok")] public static extern long CResult_OfferFeaturesDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_OfferFeaturesDecodeErrorZ_get_err(LDKCResult_OfferFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferFeaturesDecodeErrorZ_get_err")] public static extern long CResult_OfferFeaturesDecodeErrorZ_get_err(long _owner);
	// struct LDKInvoiceRequestFeatures CResult_InvoiceRequestFeaturesDecodeErrorZ_get_ok(LDKCResult_InvoiceRequestFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestFeaturesDecodeErrorZ_get_ok")] public static extern long CResult_InvoiceRequestFeaturesDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_InvoiceRequestFeaturesDecodeErrorZ_get_err(LDKCResult_InvoiceRequestFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestFeaturesDecodeErrorZ_get_err")] public static extern long CResult_InvoiceRequestFeaturesDecodeErrorZ_get_err(long _owner);
	// struct LDKNodeId CResult_NodeIdDecodeErrorZ_get_ok(LDKCResult_NodeIdDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeIdDecodeErrorZ_get_ok")] public static extern long CResult_NodeIdDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_NodeIdDecodeErrorZ_get_err(LDKCResult_NodeIdDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeIdDecodeErrorZ_get_err")] public static extern long CResult_NodeIdDecodeErrorZ_get_err(long _owner);
	// struct LDKCOption_NetworkUpdateZ CResult_COption_NetworkUpdateZDecodeErrorZ_get_ok(LDKCResult_COption_NetworkUpdateZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_NetworkUpdateZDecodeErrorZ_get_ok")] public static extern long CResult_COption_NetworkUpdateZDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_COption_NetworkUpdateZDecodeErrorZ_get_err(LDKCResult_COption_NetworkUpdateZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_NetworkUpdateZDecodeErrorZ_get_err")] public static extern long CResult_COption_NetworkUpdateZDecodeErrorZ_get_err(long _owner);
	public interface LDKAccess {
		long get_utxo(byte[] _genesis_hash, long _short_channel_id);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAccess_new")] public static extern long LDKAccess_new(LDKAccess impl);
	// LDKCResult_TxOutAccessErrorZ Access_get_utxo LDKAccess *NONNULL_PTR this_arg, const uint8_t (*genesis_hash)[32], uint64_t short_channel_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Access_get_utxo")] public static extern long Access_get_utxo(long _this_arg, byte[] _genesis_hash, long _short_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_AccessZ_ty_from_ptr")] public static extern long LDKCOption_AccessZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_AccessZ_Some_get_some")] public static extern long LDKCOption_AccessZ_Some_get_some(long ptr);
	// bool CResult_boolLightningErrorZ_get_ok(LDKCResult_boolLightningErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolLightningErrorZ_get_ok")] public static extern bool CResult_boolLightningErrorZ_get_ok(long _owner);
	// struct LDKLightningError CResult_boolLightningErrorZ_get_err(LDKCResult_boolLightningErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolLightningErrorZ_get_err")] public static extern long CResult_boolLightningErrorZ_get_err(long _owner);
	// struct LDKChannelAnnouncement C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_a(LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_a")] public static extern long C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_a(long _owner);
	// struct LDKChannelUpdate C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_b(LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_b")] public static extern long C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_b(long _owner);
	// struct LDKChannelUpdate C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_c(LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_c")] public static extern long C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_c(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_ty_from_ptr")] public static extern long LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_Some_get_some")] public static extern long LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_Some_get_some(long ptr);
	// void CResult_NoneLightningErrorZ_get_ok(LDKCResult_NoneLightningErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneLightningErrorZ_get_ok")] public static extern void CResult_NoneLightningErrorZ_get_ok(long _owner);
	// struct LDKLightningError CResult_NoneLightningErrorZ_get_err(LDKCResult_NoneLightningErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneLightningErrorZ_get_err")] public static extern long CResult_NoneLightningErrorZ_get_err(long _owner);
	// struct LDKChannelUpdateInfo CResult_ChannelUpdateInfoDecodeErrorZ_get_ok(LDKCResult_ChannelUpdateInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateInfoDecodeErrorZ_get_ok")] public static extern long CResult_ChannelUpdateInfoDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelUpdateInfoDecodeErrorZ_get_err(LDKCResult_ChannelUpdateInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateInfoDecodeErrorZ_get_err")] public static extern long CResult_ChannelUpdateInfoDecodeErrorZ_get_err(long _owner);
	// struct LDKChannelInfo CResult_ChannelInfoDecodeErrorZ_get_ok(LDKCResult_ChannelInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelInfoDecodeErrorZ_get_ok")] public static extern long CResult_ChannelInfoDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelInfoDecodeErrorZ_get_err(LDKCResult_ChannelInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelInfoDecodeErrorZ_get_err")] public static extern long CResult_ChannelInfoDecodeErrorZ_get_err(long _owner);
	// struct LDKRoutingFees CResult_RoutingFeesDecodeErrorZ_get_ok(LDKCResult_RoutingFeesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RoutingFeesDecodeErrorZ_get_ok")] public static extern long CResult_RoutingFeesDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_RoutingFeesDecodeErrorZ_get_err(LDKCResult_RoutingFeesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RoutingFeesDecodeErrorZ_get_err")] public static extern long CResult_RoutingFeesDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetAddress_ty_from_ptr")] public static extern long LDKNetAddress_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetAddress_IPv4_get_addr")] public static extern byte[] LDKNetAddress_IPv4_get_addr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetAddress_IPv4_get_port")] public static extern short LDKNetAddress_IPv4_get_port(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetAddress_IPv6_get_addr")] public static extern byte[] LDKNetAddress_IPv6_get_addr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetAddress_IPv6_get_port")] public static extern short LDKNetAddress_IPv6_get_port(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetAddress_OnionV2_get_onion_v2")] public static extern byte[] LDKNetAddress_OnionV2_get_onion_v2(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetAddress_OnionV3_get_ed25519_pubkey")] public static extern byte[] LDKNetAddress_OnionV3_get_ed25519_pubkey(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetAddress_OnionV3_get_checksum")] public static extern short LDKNetAddress_OnionV3_get_checksum(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetAddress_OnionV3_get_version")] public static extern byte LDKNetAddress_OnionV3_get_version(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetAddress_OnionV3_get_port")] public static extern short LDKNetAddress_OnionV3_get_port(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetAddress_Hostname_get_hostname")] public static extern long LDKNetAddress_Hostname_get_hostname(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetAddress_Hostname_get_port")] public static extern short LDKNetAddress_Hostname_get_port(long ptr);
	// struct LDKNodeAnnouncementInfo CResult_NodeAnnouncementInfoDecodeErrorZ_get_ok(LDKCResult_NodeAnnouncementInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementInfoDecodeErrorZ_get_ok")] public static extern long CResult_NodeAnnouncementInfoDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_NodeAnnouncementInfoDecodeErrorZ_get_err(LDKCResult_NodeAnnouncementInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementInfoDecodeErrorZ_get_err")] public static extern long CResult_NodeAnnouncementInfoDecodeErrorZ_get_err(long _owner);
	// struct LDKNodeAlias CResult_NodeAliasDecodeErrorZ_get_ok(LDKCResult_NodeAliasDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAliasDecodeErrorZ_get_ok")] public static extern long CResult_NodeAliasDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_NodeAliasDecodeErrorZ_get_err(LDKCResult_NodeAliasDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAliasDecodeErrorZ_get_err")] public static extern long CResult_NodeAliasDecodeErrorZ_get_err(long _owner);
	// struct LDKNodeInfo CResult_NodeInfoDecodeErrorZ_get_ok(LDKCResult_NodeInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeInfoDecodeErrorZ_get_ok")] public static extern long CResult_NodeInfoDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_NodeInfoDecodeErrorZ_get_err(LDKCResult_NodeInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeInfoDecodeErrorZ_get_err")] public static extern long CResult_NodeInfoDecodeErrorZ_get_err(long _owner);
	// struct LDKNetworkGraph CResult_NetworkGraphDecodeErrorZ_get_ok(LDKCResult_NetworkGraphDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NetworkGraphDecodeErrorZ_get_ok")] public static extern long CResult_NetworkGraphDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_NetworkGraphDecodeErrorZ_get_err(LDKCResult_NetworkGraphDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NetworkGraphDecodeErrorZ_get_err")] public static extern long CResult_NetworkGraphDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_CVec_NetAddressZZ_ty_from_ptr")] public static extern long LDKCOption_CVec_NetAddressZZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_CVec_NetAddressZZ_Some_get_some")] public static extern long[] LDKCOption_CVec_NetAddressZZ_Some_get_some(long ptr);
	// struct LDKDelayedPaymentOutputDescriptor CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_get_ok(LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_get_ok")] public static extern long CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_get_err(LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_get_err")] public static extern long CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_get_err(long _owner);
	// struct LDKStaticPaymentOutputDescriptor CResult_StaticPaymentOutputDescriptorDecodeErrorZ_get_ok(LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StaticPaymentOutputDescriptorDecodeErrorZ_get_ok")] public static extern long CResult_StaticPaymentOutputDescriptorDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_StaticPaymentOutputDescriptorDecodeErrorZ_get_err(LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StaticPaymentOutputDescriptorDecodeErrorZ_get_err")] public static extern long CResult_StaticPaymentOutputDescriptorDecodeErrorZ_get_err(long _owner);
	// struct LDKSpendableOutputDescriptor CResult_SpendableOutputDescriptorDecodeErrorZ_get_ok(LDKCResult_SpendableOutputDescriptorDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpendableOutputDescriptorDecodeErrorZ_get_ok")] public static extern long CResult_SpendableOutputDescriptorDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_SpendableOutputDescriptorDecodeErrorZ_get_err(LDKCResult_SpendableOutputDescriptorDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpendableOutputDescriptorDecodeErrorZ_get_err")] public static extern long CResult_SpendableOutputDescriptorDecodeErrorZ_get_err(long _owner);
	// struct LDKSignature C2Tuple_SignatureCVec_SignatureZZ_get_a(LDKC2Tuple_SignatureCVec_SignatureZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_SignatureCVec_SignatureZZ_get_a")] public static extern byte[] C2Tuple_SignatureCVec_SignatureZZ_get_a(long _owner);
	// struct LDKCVec_SignatureZ C2Tuple_SignatureCVec_SignatureZZ_get_b(LDKC2Tuple_SignatureCVec_SignatureZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_SignatureCVec_SignatureZZ_get_b")] public static extern byte[][] C2Tuple_SignatureCVec_SignatureZZ_get_b(long _owner);
	// struct LDKC2Tuple_SignatureCVec_SignatureZZ CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_get_ok(LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_get_ok")] public static extern long CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_get_ok(long _owner);
	// void CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_get_err(LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_get_err")] public static extern void CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_get_err(long _owner);
	// struct LDKSignature CResult_SignatureNoneZ_get_ok(LDKCResult_SignatureNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignatureNoneZ_get_ok")] public static extern byte[] CResult_SignatureNoneZ_get_ok(long _owner);
	// void CResult_SignatureNoneZ_get_err(LDKCResult_SignatureNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignatureNoneZ_get_err")] public static extern void CResult_SignatureNoneZ_get_err(long _owner);
	// struct LDKSignature C2Tuple_SignatureSignatureZ_get_a(LDKC2Tuple_SignatureSignatureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_SignatureSignatureZ_get_a")] public static extern byte[] C2Tuple_SignatureSignatureZ_get_a(long _owner);
	// struct LDKSignature C2Tuple_SignatureSignatureZ_get_b(LDKC2Tuple_SignatureSignatureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_SignatureSignatureZ_get_b")] public static extern byte[] C2Tuple_SignatureSignatureZ_get_b(long _owner);
	// struct LDKC2Tuple_SignatureSignatureZ CResult_C2Tuple_SignatureSignatureZNoneZ_get_ok(LDKCResult_C2Tuple_SignatureSignatureZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_SignatureSignatureZNoneZ_get_ok")] public static extern long CResult_C2Tuple_SignatureSignatureZNoneZ_get_ok(long _owner);
	// void CResult_C2Tuple_SignatureSignatureZNoneZ_get_err(LDKCResult_C2Tuple_SignatureSignatureZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_SignatureSignatureZNoneZ_get_err")] public static extern void CResult_C2Tuple_SignatureSignatureZNoneZ_get_err(long _owner);
	// struct LDKSecretKey CResult_SecretKeyNoneZ_get_ok(LDKCResult_SecretKeyNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SecretKeyNoneZ_get_ok")] public static extern byte[] CResult_SecretKeyNoneZ_get_ok(long _owner);
	// void CResult_SecretKeyNoneZ_get_err(LDKCResult_SecretKeyNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SecretKeyNoneZ_get_err")] public static extern void CResult_SecretKeyNoneZ_get_err(long _owner);
	// struct LDKPublicKey CResult_PublicKeyNoneZ_get_ok(LDKCResult_PublicKeyNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyNoneZ_get_ok")] public static extern byte[] CResult_PublicKeyNoneZ_get_ok(long _owner);
	// void CResult_PublicKeyNoneZ_get_err(LDKCResult_PublicKeyNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyNoneZ_get_err")] public static extern void CResult_PublicKeyNoneZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_ScalarZ_ty_from_ptr")] public static extern long LDKCOption_ScalarZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_ScalarZ_Some_get_some")] public static extern long LDKCOption_ScalarZ_Some_get_some(long ptr);
	// struct LDKThirtyTwoBytes CResult_SharedSecretNoneZ_get_ok(LDKCResult_SharedSecretNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SharedSecretNoneZ_get_ok")] public static extern byte[] CResult_SharedSecretNoneZ_get_ok(long _owner);
	// void CResult_SharedSecretNoneZ_get_err(LDKCResult_SharedSecretNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SharedSecretNoneZ_get_err")] public static extern void CResult_SharedSecretNoneZ_get_err(long _owner);
	public interface LDKBaseSign {
		byte[] get_per_commitment_point(long _idx);
		byte[] release_commitment_secret(long _idx);
		long validate_holder_commitment(long _holder_tx, byte[][] _preimages);
		byte[] channel_keys_id();
		long sign_counterparty_commitment(long _commitment_tx, byte[][] _preimages);
		long validate_counterparty_revocation(long _idx, byte[] _secret);
		long sign_holder_commitment_and_htlcs(long _commitment_tx);
		long sign_justice_revoked_output(byte[] _justice_tx, long _input, long _amount, byte[] _per_commitment_key);
		long sign_justice_revoked_htlc(byte[] _justice_tx, long _input, long _amount, byte[] _per_commitment_key, long _htlc);
		long sign_counterparty_htlc_transaction(byte[] _htlc_tx, long _input, long _amount, byte[] _per_commitment_point, long _htlc);
		long sign_closing_transaction(long _closing_tx);
		long sign_holder_anchor_input(byte[] _anchor_tx, long _input);
		long sign_channel_announcement(long _msg);
		void provide_channel_parameters(long _channel_parameters);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBaseSign_new")] public static extern long LDKBaseSign_new(LDKBaseSign impl, long pubkeys);
	// LDKPublicKey BaseSign_get_per_commitment_point LDKBaseSign *NONNULL_PTR this_arg, uint64_t idx
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BaseSign_get_per_commitment_point")] public static extern byte[] BaseSign_get_per_commitment_point(long _this_arg, long _idx);
	// LDKThirtyTwoBytes BaseSign_release_commitment_secret LDKBaseSign *NONNULL_PTR this_arg, uint64_t idx
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BaseSign_release_commitment_secret")] public static extern byte[] BaseSign_release_commitment_secret(long _this_arg, long _idx);
	// LDKCResult_NoneNoneZ BaseSign_validate_holder_commitment LDKBaseSign *NONNULL_PTR this_arg, const struct LDKHolderCommitmentTransaction *NONNULL_PTR holder_tx, struct LDKCVec_PaymentPreimageZ preimages
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BaseSign_validate_holder_commitment")] public static extern long BaseSign_validate_holder_commitment(long _this_arg, long _holder_tx, byte[][] _preimages);
	// LDKThirtyTwoBytes BaseSign_channel_keys_id LDKBaseSign *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BaseSign_channel_keys_id")] public static extern byte[] BaseSign_channel_keys_id(long _this_arg);
	// LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ BaseSign_sign_counterparty_commitment LDKBaseSign *NONNULL_PTR this_arg, const struct LDKCommitmentTransaction *NONNULL_PTR commitment_tx, struct LDKCVec_PaymentPreimageZ preimages
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BaseSign_sign_counterparty_commitment")] public static extern long BaseSign_sign_counterparty_commitment(long _this_arg, long _commitment_tx, byte[][] _preimages);
	// LDKCResult_NoneNoneZ BaseSign_validate_counterparty_revocation LDKBaseSign *NONNULL_PTR this_arg, uint64_t idx, const uint8_t (*secret)[32]
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BaseSign_validate_counterparty_revocation")] public static extern long BaseSign_validate_counterparty_revocation(long _this_arg, long _idx, byte[] _secret);
	// LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ BaseSign_sign_holder_commitment_and_htlcs LDKBaseSign *NONNULL_PTR this_arg, const struct LDKHolderCommitmentTransaction *NONNULL_PTR commitment_tx
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BaseSign_sign_holder_commitment_and_htlcs")] public static extern long BaseSign_sign_holder_commitment_and_htlcs(long _this_arg, long _commitment_tx);
	// LDKCResult_SignatureNoneZ BaseSign_sign_justice_revoked_output LDKBaseSign *NONNULL_PTR this_arg, struct LDKTransaction justice_tx, uintptr_t input, uint64_t amount, const uint8_t (*per_commitment_key)[32]
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BaseSign_sign_justice_revoked_output")] public static extern long BaseSign_sign_justice_revoked_output(long _this_arg, byte[] _justice_tx, long _input, long _amount, byte[] _per_commitment_key);
	// LDKCResult_SignatureNoneZ BaseSign_sign_justice_revoked_htlc LDKBaseSign *NONNULL_PTR this_arg, struct LDKTransaction justice_tx, uintptr_t input, uint64_t amount, const uint8_t (*per_commitment_key)[32], const struct LDKHTLCOutputInCommitment *NONNULL_PTR htlc
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BaseSign_sign_justice_revoked_htlc")] public static extern long BaseSign_sign_justice_revoked_htlc(long _this_arg, byte[] _justice_tx, long _input, long _amount, byte[] _per_commitment_key, long _htlc);
	// LDKCResult_SignatureNoneZ BaseSign_sign_counterparty_htlc_transaction LDKBaseSign *NONNULL_PTR this_arg, struct LDKTransaction htlc_tx, uintptr_t input, uint64_t amount, struct LDKPublicKey per_commitment_point, const struct LDKHTLCOutputInCommitment *NONNULL_PTR htlc
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BaseSign_sign_counterparty_htlc_transaction")] public static extern long BaseSign_sign_counterparty_htlc_transaction(long _this_arg, byte[] _htlc_tx, long _input, long _amount, byte[] _per_commitment_point, long _htlc);
	// LDKCResult_SignatureNoneZ BaseSign_sign_closing_transaction LDKBaseSign *NONNULL_PTR this_arg, const struct LDKClosingTransaction *NONNULL_PTR closing_tx
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BaseSign_sign_closing_transaction")] public static extern long BaseSign_sign_closing_transaction(long _this_arg, long _closing_tx);
	// LDKCResult_SignatureNoneZ BaseSign_sign_holder_anchor_input LDKBaseSign *NONNULL_PTR this_arg, struct LDKTransaction anchor_tx, uintptr_t input
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BaseSign_sign_holder_anchor_input")] public static extern long BaseSign_sign_holder_anchor_input(long _this_arg, byte[] _anchor_tx, long _input);
	// LDKCResult_C2Tuple_SignatureSignatureZNoneZ BaseSign_sign_channel_announcement LDKBaseSign *NONNULL_PTR this_arg, const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BaseSign_sign_channel_announcement")] public static extern long BaseSign_sign_channel_announcement(long _this_arg, long _msg);
	// void BaseSign_provide_channel_parameters LDKBaseSign *NONNULL_PTR this_arg, const struct LDKChannelTransactionParameters *NONNULL_PTR channel_parameters
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BaseSign_provide_channel_parameters")] public static extern void BaseSign_provide_channel_parameters(long _this_arg, long _channel_parameters);
	// LDKChannelPublicKeys BaseSign_get_pubkeys LDKBaseSign *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BaseSign_get_pubkeys")] public static extern long BaseSign_get_pubkeys(long _this_arg);
	public interface LDKSign {
		byte[] write();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSign_new")] public static extern long LDKSign_new(LDKSign impl, LDKBaseSign BaseSign, long pubkeys);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSign_get_BaseSign")] public static extern long LDKSign_get_BaseSign(long arg);
	// LDKCVec_u8Z Sign_write LDKSign *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sign_write")] public static extern byte[] Sign_write(long _this_arg);
	// struct LDKSign CResult_SignDecodeErrorZ_get_ok(LDKCResult_SignDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignDecodeErrorZ_get_ok")] public static extern long CResult_SignDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_SignDecodeErrorZ_get_err(LDKCResult_SignDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignDecodeErrorZ_get_err")] public static extern long CResult_SignDecodeErrorZ_get_err(long _owner);
	// struct LDKRecoverableSignature CResult_RecoverableSignatureNoneZ_get_ok(LDKCResult_RecoverableSignatureNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecoverableSignatureNoneZ_get_ok")] public static extern byte[] CResult_RecoverableSignatureNoneZ_get_ok(long _owner);
	// void CResult_RecoverableSignatureNoneZ_get_err(LDKCResult_RecoverableSignatureNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecoverableSignatureNoneZ_get_err")] public static extern void CResult_RecoverableSignatureNoneZ_get_err(long _owner);
	// struct LDKCVec_CVec_u8ZZ CResult_CVec_CVec_u8ZZNoneZ_get_ok(LDKCResult_CVec_CVec_u8ZZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_CVec_u8ZZNoneZ_get_ok")] public static extern byte[][] CResult_CVec_CVec_u8ZZNoneZ_get_ok(long _owner);
	// void CResult_CVec_CVec_u8ZZNoneZ_get_err(LDKCResult_CVec_CVec_u8ZZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_CVec_u8ZZNoneZ_get_err")] public static extern void CResult_CVec_CVec_u8ZZNoneZ_get_err(long _owner);
	// struct LDKInMemorySigner CResult_InMemorySignerDecodeErrorZ_get_ok(LDKCResult_InMemorySignerDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InMemorySignerDecodeErrorZ_get_ok")] public static extern long CResult_InMemorySignerDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_InMemorySignerDecodeErrorZ_get_err(LDKCResult_InMemorySignerDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InMemorySignerDecodeErrorZ_get_err")] public static extern long CResult_InMemorySignerDecodeErrorZ_get_err(long _owner);
	// struct LDKTransaction CResult_TransactionNoneZ_get_ok(LDKCResult_TransactionNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionNoneZ_get_ok")] public static extern byte[] CResult_TransactionNoneZ_get_ok(long _owner);
	// void CResult_TransactionNoneZ_get_err(LDKCResult_TransactionNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionNoneZ_get_err")] public static extern void CResult_TransactionNoneZ_get_err(long _owner);
	// struct LDKThirtyTwoBytes C2Tuple_BlockHashChannelMonitorZ_get_a(LDKC2Tuple_BlockHashChannelMonitorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_BlockHashChannelMonitorZ_get_a")] public static extern byte[] C2Tuple_BlockHashChannelMonitorZ_get_a(long _owner);
	// struct LDKChannelMonitor C2Tuple_BlockHashChannelMonitorZ_get_b(LDKC2Tuple_BlockHashChannelMonitorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_BlockHashChannelMonitorZ_get_b")] public static extern long C2Tuple_BlockHashChannelMonitorZ_get_b(long _owner);
	// struct LDKCVec_C2Tuple_BlockHashChannelMonitorZZ CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_get_ok(LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_get_ok")] public static extern long[] CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_get_ok(long _owner);
	// enum LDKIOError CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_get_err(LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_get_err")] public static extern IOError CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_u16Z_ty_from_ptr")] public static extern long LDKCOption_u16Z_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_u16Z_Some_get_some")] public static extern short LDKCOption_u16Z_Some_get_some(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAPIError_ty_from_ptr")] public static extern long LDKAPIError_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAPIError_APIMisuseError_get_err")] public static extern string LDKAPIError_APIMisuseError_get_err(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAPIError_FeeRateTooHigh_get_err")] public static extern string LDKAPIError_FeeRateTooHigh_get_err(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAPIError_FeeRateTooHigh_get_feerate")] public static extern int LDKAPIError_FeeRateTooHigh_get_feerate(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAPIError_InvalidRoute_get_err")] public static extern string LDKAPIError_InvalidRoute_get_err(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAPIError_ChannelUnavailable_get_err")] public static extern string LDKAPIError_ChannelUnavailable_get_err(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAPIError_IncompatibleShutdownScript_get_script")] public static extern long LDKAPIError_IncompatibleShutdownScript_get_script(long ptr);
	// void CResult_NoneAPIErrorZ_get_ok(LDKCResult_NoneAPIErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneAPIErrorZ_get_ok")] public static extern void CResult_NoneAPIErrorZ_get_ok(long _owner);
	// struct LDKAPIError CResult_NoneAPIErrorZ_get_err(LDKCResult_NoneAPIErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneAPIErrorZ_get_err")] public static extern long CResult_NoneAPIErrorZ_get_err(long _owner);
	// struct LDKThirtyTwoBytes CResult__u832APIErrorZ_get_ok(LDKCResult__u832APIErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult__u832APIErrorZ_get_ok")] public static extern byte[] CResult__u832APIErrorZ_get_ok(long _owner);
	// struct LDKAPIError CResult__u832APIErrorZ_get_err(LDKCResult__u832APIErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult__u832APIErrorZ_get_err")] public static extern long CResult__u832APIErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentSendFailure_ty_from_ptr")] public static extern long LDKPaymentSendFailure_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentSendFailure_ParameterError_get_parameter_error")] public static extern long LDKPaymentSendFailure_ParameterError_get_parameter_error(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentSendFailure_PathParameterError_get_path_parameter_error")] public static extern long[] LDKPaymentSendFailure_PathParameterError_get_path_parameter_error(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentSendFailure_AllFailedResendSafe_get_all_failed_resend_safe")] public static extern long[] LDKPaymentSendFailure_AllFailedResendSafe_get_all_failed_resend_safe(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentSendFailure_PartialFailure_get_results")] public static extern long[] LDKPaymentSendFailure_PartialFailure_get_results(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentSendFailure_PartialFailure_get_failed_paths_retry")] public static extern long LDKPaymentSendFailure_PartialFailure_get_failed_paths_retry(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentSendFailure_PartialFailure_get_payment_id")] public static extern byte[] LDKPaymentSendFailure_PartialFailure_get_payment_id(long ptr);
	// void CResult_NonePaymentSendFailureZ_get_ok(LDKCResult_NonePaymentSendFailureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePaymentSendFailureZ_get_ok")] public static extern void CResult_NonePaymentSendFailureZ_get_ok(long _owner);
	// struct LDKPaymentSendFailure CResult_NonePaymentSendFailureZ_get_err(LDKCResult_NonePaymentSendFailureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePaymentSendFailureZ_get_err")] public static extern long CResult_NonePaymentSendFailureZ_get_err(long _owner);
	// struct LDKThirtyTwoBytes CResult_PaymentHashPaymentSendFailureZ_get_ok(LDKCResult_PaymentHashPaymentSendFailureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentHashPaymentSendFailureZ_get_ok")] public static extern byte[] CResult_PaymentHashPaymentSendFailureZ_get_ok(long _owner);
	// struct LDKPaymentSendFailure CResult_PaymentHashPaymentSendFailureZ_get_err(LDKCResult_PaymentHashPaymentSendFailureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentHashPaymentSendFailureZ_get_err")] public static extern long CResult_PaymentHashPaymentSendFailureZ_get_err(long _owner);
	// struct LDKThirtyTwoBytes C2Tuple_PaymentHashPaymentIdZ_get_a(LDKC2Tuple_PaymentHashPaymentIdZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PaymentHashPaymentIdZ_get_a")] public static extern byte[] C2Tuple_PaymentHashPaymentIdZ_get_a(long _owner);
	// struct LDKThirtyTwoBytes C2Tuple_PaymentHashPaymentIdZ_get_b(LDKC2Tuple_PaymentHashPaymentIdZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PaymentHashPaymentIdZ_get_b")] public static extern byte[] C2Tuple_PaymentHashPaymentIdZ_get_b(long _owner);
	// struct LDKC2Tuple_PaymentHashPaymentIdZ CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_get_ok(LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_get_ok")] public static extern long CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_get_ok(long _owner);
	// struct LDKPaymentSendFailure CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_get_err(LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_get_err")] public static extern long CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_get_err(long _owner);
	// struct LDKThirtyTwoBytes C2Tuple_PaymentHashPaymentSecretZ_get_a(LDKC2Tuple_PaymentHashPaymentSecretZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PaymentHashPaymentSecretZ_get_a")] public static extern byte[] C2Tuple_PaymentHashPaymentSecretZ_get_a(long _owner);
	// struct LDKThirtyTwoBytes C2Tuple_PaymentHashPaymentSecretZ_get_b(LDKC2Tuple_PaymentHashPaymentSecretZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PaymentHashPaymentSecretZ_get_b")] public static extern byte[] C2Tuple_PaymentHashPaymentSecretZ_get_b(long _owner);
	// struct LDKC2Tuple_PaymentHashPaymentSecretZ CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_get_ok(LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_get_ok")] public static extern long CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_get_ok(long _owner);
	// void CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_get_err(LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_get_err")] public static extern void CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_get_err(long _owner);
	// struct LDKC2Tuple_PaymentHashPaymentSecretZ CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_get_ok(LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_get_ok")] public static extern long CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_get_ok(long _owner);
	// struct LDKAPIError CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_get_err(LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_get_err")] public static extern long CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_get_err(long _owner);
	// struct LDKThirtyTwoBytes CResult_PaymentSecretNoneZ_get_ok(LDKCResult_PaymentSecretNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentSecretNoneZ_get_ok")] public static extern byte[] CResult_PaymentSecretNoneZ_get_ok(long _owner);
	// void CResult_PaymentSecretNoneZ_get_err(LDKCResult_PaymentSecretNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentSecretNoneZ_get_err")] public static extern void CResult_PaymentSecretNoneZ_get_err(long _owner);
	// struct LDKThirtyTwoBytes CResult_PaymentSecretAPIErrorZ_get_ok(LDKCResult_PaymentSecretAPIErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentSecretAPIErrorZ_get_ok")] public static extern byte[] CResult_PaymentSecretAPIErrorZ_get_ok(long _owner);
	// struct LDKAPIError CResult_PaymentSecretAPIErrorZ_get_err(LDKCResult_PaymentSecretAPIErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentSecretAPIErrorZ_get_err")] public static extern long CResult_PaymentSecretAPIErrorZ_get_err(long _owner);
	// struct LDKThirtyTwoBytes CResult_PaymentPreimageAPIErrorZ_get_ok(LDKCResult_PaymentPreimageAPIErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPreimageAPIErrorZ_get_ok")] public static extern byte[] CResult_PaymentPreimageAPIErrorZ_get_ok(long _owner);
	// struct LDKAPIError CResult_PaymentPreimageAPIErrorZ_get_err(LDKCResult_PaymentPreimageAPIErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPreimageAPIErrorZ_get_err")] public static extern long CResult_PaymentPreimageAPIErrorZ_get_err(long _owner);
	// struct LDKCounterpartyForwardingInfo CResult_CounterpartyForwardingInfoDecodeErrorZ_get_ok(LDKCResult_CounterpartyForwardingInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyForwardingInfoDecodeErrorZ_get_ok")] public static extern long CResult_CounterpartyForwardingInfoDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_CounterpartyForwardingInfoDecodeErrorZ_get_err(LDKCResult_CounterpartyForwardingInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyForwardingInfoDecodeErrorZ_get_err")] public static extern long CResult_CounterpartyForwardingInfoDecodeErrorZ_get_err(long _owner);
	// struct LDKChannelCounterparty CResult_ChannelCounterpartyDecodeErrorZ_get_ok(LDKCResult_ChannelCounterpartyDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelCounterpartyDecodeErrorZ_get_ok")] public static extern long CResult_ChannelCounterpartyDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelCounterpartyDecodeErrorZ_get_err(LDKCResult_ChannelCounterpartyDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelCounterpartyDecodeErrorZ_get_err")] public static extern long CResult_ChannelCounterpartyDecodeErrorZ_get_err(long _owner);
	// struct LDKChannelDetails CResult_ChannelDetailsDecodeErrorZ_get_ok(LDKCResult_ChannelDetailsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDetailsDecodeErrorZ_get_ok")] public static extern long CResult_ChannelDetailsDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelDetailsDecodeErrorZ_get_err(LDKCResult_ChannelDetailsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDetailsDecodeErrorZ_get_err")] public static extern long CResult_ChannelDetailsDecodeErrorZ_get_err(long _owner);
	// struct LDKPhantomRouteHints CResult_PhantomRouteHintsDecodeErrorZ_get_ok(LDKCResult_PhantomRouteHintsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PhantomRouteHintsDecodeErrorZ_get_ok")] public static extern long CResult_PhantomRouteHintsDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_PhantomRouteHintsDecodeErrorZ_get_err(LDKCResult_PhantomRouteHintsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PhantomRouteHintsDecodeErrorZ_get_err")] public static extern long CResult_PhantomRouteHintsDecodeErrorZ_get_err(long _owner);
	public interface LDKWatch {
		ChannelMonitorUpdateStatus watch_channel(long _funding_txo, long _monitor);
		ChannelMonitorUpdateStatus update_channel(long _funding_txo, long _update);
		long[] release_pending_monitor_events();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKWatch_new")] public static extern long LDKWatch_new(LDKWatch impl);
	// LDKChannelMonitorUpdateStatus Watch_watch_channel LDKWatch *NONNULL_PTR this_arg, struct LDKOutPoint funding_txo, struct LDKChannelMonitor monitor
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Watch_watch_channel")] public static extern ChannelMonitorUpdateStatus Watch_watch_channel(long _this_arg, long _funding_txo, long _monitor);
	// LDKChannelMonitorUpdateStatus Watch_update_channel LDKWatch *NONNULL_PTR this_arg, struct LDKOutPoint funding_txo, struct LDKChannelMonitorUpdate update
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Watch_update_channel")] public static extern ChannelMonitorUpdateStatus Watch_update_channel(long _this_arg, long _funding_txo, long _update);
	// LDKCVec_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZZ Watch_release_pending_monitor_events LDKWatch *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Watch_release_pending_monitor_events")] public static extern long[] Watch_release_pending_monitor_events(long _this_arg);
	public interface LDKBroadcasterInterface {
		void broadcast_transaction(byte[] _tx);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBroadcasterInterface_new")] public static extern long LDKBroadcasterInterface_new(LDKBroadcasterInterface impl);
	// void BroadcasterInterface_broadcast_transaction LDKBroadcasterInterface *NONNULL_PTR this_arg, struct LDKTransaction tx
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BroadcasterInterface_broadcast_transaction")] public static extern void BroadcasterInterface_broadcast_transaction(long _this_arg, byte[] _tx);
	public interface LDKKeysInterface {
		long get_node_secret(Recipient _recipient);
		long get_node_id(Recipient _recipient);
		long ecdh(Recipient _recipient, byte[] _other_key, long _tweak);
		byte[] get_destination_script();
		long get_shutdown_scriptpubkey();
		byte[] generate_channel_keys_id(bool _inbound, long _channel_value_satoshis, byte[] _user_channel_id);
		long derive_channel_signer(long _channel_value_satoshis, byte[] _channel_keys_id);
		byte[] get_secure_random_bytes();
		long read_chan_signer(byte[] _reader);
		long sign_invoice(byte[] _hrp_bytes, byte[] _invoice_data, Recipient _receipient);
		byte[] get_inbound_payment_key_material();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKKeysInterface_new")] public static extern long LDKKeysInterface_new(LDKKeysInterface impl);
	// LDKCResult_SecretKeyNoneZ KeysInterface_get_node_secret LDKKeysInterface *NONNULL_PTR this_arg, enum LDKRecipient recipient
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysInterface_get_node_secret")] public static extern long KeysInterface_get_node_secret(long _this_arg, Recipient _recipient);
	// LDKCResult_PublicKeyNoneZ KeysInterface_get_node_id LDKKeysInterface *NONNULL_PTR this_arg, enum LDKRecipient recipient
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysInterface_get_node_id")] public static extern long KeysInterface_get_node_id(long _this_arg, Recipient _recipient);
	// LDKCResult_SharedSecretNoneZ KeysInterface_ecdh LDKKeysInterface *NONNULL_PTR this_arg, enum LDKRecipient recipient, struct LDKPublicKey other_key, struct LDKCOption_ScalarZ tweak
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysInterface_ecdh")] public static extern long KeysInterface_ecdh(long _this_arg, Recipient _recipient, byte[] _other_key, long _tweak);
	// LDKCVec_u8Z KeysInterface_get_destination_script LDKKeysInterface *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysInterface_get_destination_script")] public static extern byte[] KeysInterface_get_destination_script(long _this_arg);
	// LDKShutdownScript KeysInterface_get_shutdown_scriptpubkey LDKKeysInterface *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysInterface_get_shutdown_scriptpubkey")] public static extern long KeysInterface_get_shutdown_scriptpubkey(long _this_arg);
	// LDKThirtyTwoBytes KeysInterface_generate_channel_keys_id LDKKeysInterface *NONNULL_PTR this_arg, bool inbound, uint64_t channel_value_satoshis, struct LDKU128 user_channel_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysInterface_generate_channel_keys_id")] public static extern byte[] KeysInterface_generate_channel_keys_id(long _this_arg, bool _inbound, long _channel_value_satoshis, byte[] _user_channel_id);
	// LDKSign KeysInterface_derive_channel_signer LDKKeysInterface *NONNULL_PTR this_arg, uint64_t channel_value_satoshis, struct LDKThirtyTwoBytes channel_keys_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysInterface_derive_channel_signer")] public static extern long KeysInterface_derive_channel_signer(long _this_arg, long _channel_value_satoshis, byte[] _channel_keys_id);
	// LDKThirtyTwoBytes KeysInterface_get_secure_random_bytes LDKKeysInterface *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysInterface_get_secure_random_bytes")] public static extern byte[] KeysInterface_get_secure_random_bytes(long _this_arg);
	// LDKCResult_SignDecodeErrorZ KeysInterface_read_chan_signer LDKKeysInterface *NONNULL_PTR this_arg, struct LDKu8slice reader
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysInterface_read_chan_signer")] public static extern long KeysInterface_read_chan_signer(long _this_arg, byte[] _reader);
	// LDKCResult_RecoverableSignatureNoneZ KeysInterface_sign_invoice LDKKeysInterface *NONNULL_PTR this_arg, struct LDKu8slice hrp_bytes, struct LDKCVec_U5Z invoice_data, enum LDKRecipient receipient
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysInterface_sign_invoice")] public static extern long KeysInterface_sign_invoice(long _this_arg, byte[] _hrp_bytes, byte[] _invoice_data, Recipient _receipient);
	// LDKThirtyTwoBytes KeysInterface_get_inbound_payment_key_material LDKKeysInterface *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysInterface_get_inbound_payment_key_material")] public static extern byte[] KeysInterface_get_inbound_payment_key_material(long _this_arg);
	public interface LDKFeeEstimator {
		int get_est_sat_per_1000_weight(ConfirmationTarget _confirmation_target);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFeeEstimator_new")] public static extern long LDKFeeEstimator_new(LDKFeeEstimator impl);
	// uint32_t FeeEstimator_get_est_sat_per_1000_weight LDKFeeEstimator *NONNULL_PTR this_arg, enum LDKConfirmationTarget confirmation_target
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FeeEstimator_get_est_sat_per_1000_weight")] public static extern int FeeEstimator_get_est_sat_per_1000_weight(long _this_arg, ConfirmationTarget _confirmation_target);
	// struct LDKThirtyTwoBytes C2Tuple_BlockHashChannelManagerZ_get_a(LDKC2Tuple_BlockHashChannelManagerZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_BlockHashChannelManagerZ_get_a")] public static extern byte[] C2Tuple_BlockHashChannelManagerZ_get_a(long _owner);
	// struct LDKChannelManager C2Tuple_BlockHashChannelManagerZ_get_b(LDKC2Tuple_BlockHashChannelManagerZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_BlockHashChannelManagerZ_get_b")] public static extern long C2Tuple_BlockHashChannelManagerZ_get_b(long _owner);
	// struct LDKC2Tuple_BlockHashChannelManagerZ *CResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ_get_ok(LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ_get_ok")] public static extern long CResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ_get_err(LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ_get_err")] public static extern long CResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ_get_err(long _owner);
	// struct LDKChannelConfig CResult_ChannelConfigDecodeErrorZ_get_ok(LDKCResult_ChannelConfigDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelConfigDecodeErrorZ_get_ok")] public static extern long CResult_ChannelConfigDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelConfigDecodeErrorZ_get_err(LDKCResult_ChannelConfigDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelConfigDecodeErrorZ_get_err")] public static extern long CResult_ChannelConfigDecodeErrorZ_get_err(long _owner);
	// struct LDKOutPoint CResult_OutPointDecodeErrorZ_get_ok(LDKCResult_OutPointDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutPointDecodeErrorZ_get_ok")] public static extern long CResult_OutPointDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_OutPointDecodeErrorZ_get_err(LDKCResult_OutPointDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutPointDecodeErrorZ_get_err")] public static extern long CResult_OutPointDecodeErrorZ_get_err(long _owner);
	public interface LDKType {
		short type_id();
		string debug_str();
		byte[] write();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKType_new")] public static extern long LDKType_new(LDKType impl);
	// uint16_t Type_type_id LDKType *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Type_type_id")] public static extern short Type_type_id(long _this_arg);
	// LDKStr Type_debug_str LDKType *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Type_debug_str")] public static extern string Type_debug_str(long _this_arg);
	// LDKCVec_u8Z Type_write LDKType *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Type_write")] public static extern byte[] Type_write(long _this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_TypeZ_ty_from_ptr")] public static extern long LDKCOption_TypeZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_TypeZ_Some_get_some")] public static extern long LDKCOption_TypeZ_Some_get_some(long ptr);
	// struct LDKCOption_TypeZ CResult_COption_TypeZDecodeErrorZ_get_ok(LDKCResult_COption_TypeZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_TypeZDecodeErrorZ_get_ok")] public static extern long CResult_COption_TypeZDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_COption_TypeZDecodeErrorZ_get_err(LDKCResult_COption_TypeZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_TypeZDecodeErrorZ_get_err")] public static extern long CResult_COption_TypeZDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentError_ty_from_ptr")] public static extern long LDKPaymentError_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentError_Invoice_get_invoice")] public static extern string LDKPaymentError_Invoice_get_invoice(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentError_Routing_get_routing")] public static extern long LDKPaymentError_Routing_get_routing(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentError_Sending_get_sending")] public static extern long LDKPaymentError_Sending_get_sending(long ptr);
	// struct LDKThirtyTwoBytes CResult_PaymentIdPaymentErrorZ_get_ok(LDKCResult_PaymentIdPaymentErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentIdPaymentErrorZ_get_ok")] public static extern byte[] CResult_PaymentIdPaymentErrorZ_get_ok(long _owner);
	// struct LDKPaymentError CResult_PaymentIdPaymentErrorZ_get_err(LDKCResult_PaymentIdPaymentErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentIdPaymentErrorZ_get_err")] public static extern long CResult_PaymentIdPaymentErrorZ_get_err(long _owner);
	// void CResult_NonePaymentErrorZ_get_ok(LDKCResult_NonePaymentErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePaymentErrorZ_get_ok")] public static extern void CResult_NonePaymentErrorZ_get_ok(long _owner);
	// struct LDKPaymentError CResult_NonePaymentErrorZ_get_err(LDKCResult_NonePaymentErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePaymentErrorZ_get_err")] public static extern long CResult_NonePaymentErrorZ_get_err(long _owner);
	// struct LDKStr CResult_StringErrorZ_get_ok(LDKCResult_StringErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StringErrorZ_get_ok")] public static extern string CResult_StringErrorZ_get_ok(long _owner);
	// enum LDKSecp256k1Error CResult_StringErrorZ_get_err(LDKCResult_StringErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StringErrorZ_get_err")] public static extern Secp256k1Error CResult_StringErrorZ_get_err(long _owner);
	// struct LDKPublicKey CResult_PublicKeyErrorZ_get_ok(LDKCResult_PublicKeyErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyErrorZ_get_ok")] public static extern byte[] CResult_PublicKeyErrorZ_get_ok(long _owner);
	// enum LDKSecp256k1Error CResult_PublicKeyErrorZ_get_err(LDKCResult_PublicKeyErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyErrorZ_get_err")] public static extern Secp256k1Error CResult_PublicKeyErrorZ_get_err(long _owner);
	// struct LDKChannelMonitorUpdate CResult_ChannelMonitorUpdateDecodeErrorZ_get_ok(LDKCResult_ChannelMonitorUpdateDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateDecodeErrorZ_get_ok")] public static extern long CResult_ChannelMonitorUpdateDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelMonitorUpdateDecodeErrorZ_get_err(LDKCResult_ChannelMonitorUpdateDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateDecodeErrorZ_get_err")] public static extern long CResult_ChannelMonitorUpdateDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_MonitorEventZ_ty_from_ptr")] public static extern long LDKCOption_MonitorEventZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_MonitorEventZ_Some_get_some")] public static extern long LDKCOption_MonitorEventZ_Some_get_some(long ptr);
	// struct LDKCOption_MonitorEventZ CResult_COption_MonitorEventZDecodeErrorZ_get_ok(LDKCResult_COption_MonitorEventZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_MonitorEventZDecodeErrorZ_get_ok")] public static extern long CResult_COption_MonitorEventZDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_COption_MonitorEventZDecodeErrorZ_get_err(LDKCResult_COption_MonitorEventZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_MonitorEventZDecodeErrorZ_get_err")] public static extern long CResult_COption_MonitorEventZDecodeErrorZ_get_err(long _owner);
	// struct LDKHTLCUpdate CResult_HTLCUpdateDecodeErrorZ_get_ok(LDKCResult_HTLCUpdateDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCUpdateDecodeErrorZ_get_ok")] public static extern long CResult_HTLCUpdateDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_HTLCUpdateDecodeErrorZ_get_err(LDKCResult_HTLCUpdateDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCUpdateDecodeErrorZ_get_err")] public static extern long CResult_HTLCUpdateDecodeErrorZ_get_err(long _owner);
	// struct LDKOutPoint C2Tuple_OutPointScriptZ_get_a(LDKC2Tuple_OutPointScriptZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointScriptZ_get_a")] public static extern long C2Tuple_OutPointScriptZ_get_a(long _owner);
	// struct LDKCVec_u8Z C2Tuple_OutPointScriptZ_get_b(LDKC2Tuple_OutPointScriptZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointScriptZ_get_b")] public static extern byte[] C2Tuple_OutPointScriptZ_get_b(long _owner);
	// uint32_t C2Tuple_u32ScriptZ_get_a(LDKC2Tuple_u32ScriptZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32ScriptZ_get_a")] public static extern int C2Tuple_u32ScriptZ_get_a(long _owner);
	// struct LDKCVec_u8Z C2Tuple_u32ScriptZ_get_b(LDKC2Tuple_u32ScriptZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32ScriptZ_get_b")] public static extern byte[] C2Tuple_u32ScriptZ_get_b(long _owner);
	// struct LDKThirtyTwoBytes C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_get_a(LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_get_a")] public static extern byte[] C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_get_a(long _owner);
	// struct LDKCVec_C2Tuple_u32ScriptZZ C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_get_b(LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_get_b")] public static extern long[] C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_get_b(long _owner);
	// uint32_t C2Tuple_u32TxOutZ_get_a(LDKC2Tuple_u32TxOutZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32TxOutZ_get_a")] public static extern int C2Tuple_u32TxOutZ_get_a(long _owner);
	// struct LDKTxOut C2Tuple_u32TxOutZ_get_b(LDKC2Tuple_u32TxOutZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32TxOutZ_get_b")] public static extern long C2Tuple_u32TxOutZ_get_b(long _owner);
	// struct LDKThirtyTwoBytes C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_get_a(LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_get_a")] public static extern byte[] C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_get_a(long _owner);
	// struct LDKCVec_C2Tuple_u32TxOutZZ C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_get_b(LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_get_b")] public static extern long[] C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_get_b(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_ty_from_ptr")] public static extern long LDKBalance_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_ClaimableOnChannelClose_get_claimable_amount_satoshis")] public static extern long LDKBalance_ClaimableOnChannelClose_get_claimable_amount_satoshis(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_ClaimableAwaitingConfirmations_get_claimable_amount_satoshis")] public static extern long LDKBalance_ClaimableAwaitingConfirmations_get_claimable_amount_satoshis(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_ClaimableAwaitingConfirmations_get_confirmation_height")] public static extern int LDKBalance_ClaimableAwaitingConfirmations_get_confirmation_height(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_ContentiousClaimable_get_claimable_amount_satoshis")] public static extern long LDKBalance_ContentiousClaimable_get_claimable_amount_satoshis(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_ContentiousClaimable_get_timeout_height")] public static extern int LDKBalance_ContentiousClaimable_get_timeout_height(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_MaybeTimeoutClaimableHTLC_get_claimable_amount_satoshis")] public static extern long LDKBalance_MaybeTimeoutClaimableHTLC_get_claimable_amount_satoshis(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_MaybeTimeoutClaimableHTLC_get_claimable_height")] public static extern int LDKBalance_MaybeTimeoutClaimableHTLC_get_claimable_height(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_MaybePreimageClaimableHTLC_get_claimable_amount_satoshis")] public static extern long LDKBalance_MaybePreimageClaimableHTLC_get_claimable_amount_satoshis(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_MaybePreimageClaimableHTLC_get_expiry_height")] public static extern int LDKBalance_MaybePreimageClaimableHTLC_get_expiry_height(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_CounterpartyRevokedOutputClaimable_get_claimable_amount_satoshis")] public static extern long LDKBalance_CounterpartyRevokedOutputClaimable_get_claimable_amount_satoshis(long ptr);
	// struct LDKC2Tuple_BlockHashChannelMonitorZ CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_get_ok(LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_get_ok")] public static extern long CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_get_err(LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_get_err")] public static extern long CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_get_err(long _owner);
	// struct LDKPublicKey C2Tuple_PublicKeyTypeZ_get_a(LDKC2Tuple_PublicKeyTypeZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyTypeZ_get_a")] public static extern byte[] C2Tuple_PublicKeyTypeZ_get_a(long _owner);
	// struct LDKType C2Tuple_PublicKeyTypeZ_get_b(LDKC2Tuple_PublicKeyTypeZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyTypeZ_get_b")] public static extern long C2Tuple_PublicKeyTypeZ_get_b(long _owner);
	public interface LDKCustomOnionMessageContents {
		long tlv_type();
		byte[] write();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCustomOnionMessageContents_new")] public static extern long LDKCustomOnionMessageContents_new(LDKCustomOnionMessageContents impl);
	// uint64_t CustomOnionMessageContents_tlv_type LDKCustomOnionMessageContents *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomOnionMessageContents_tlv_type")] public static extern long CustomOnionMessageContents_tlv_type(long _this_arg);
	// LDKCVec_u8Z CustomOnionMessageContents_write LDKCustomOnionMessageContents *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomOnionMessageContents_write")] public static extern byte[] CustomOnionMessageContents_write(long _this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_CustomOnionMessageContentsZ_ty_from_ptr")] public static extern long LDKCOption_CustomOnionMessageContentsZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_CustomOnionMessageContentsZ_Some_get_some")] public static extern long LDKCOption_CustomOnionMessageContentsZ_Some_get_some(long ptr);
	// struct LDKCOption_CustomOnionMessageContentsZ CResult_COption_CustomOnionMessageContentsZDecodeErrorZ_get_ok(LDKCResult_COption_CustomOnionMessageContentsZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_CustomOnionMessageContentsZDecodeErrorZ_get_ok")] public static extern long CResult_COption_CustomOnionMessageContentsZDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_COption_CustomOnionMessageContentsZDecodeErrorZ_get_err(LDKCResult_COption_CustomOnionMessageContentsZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_CustomOnionMessageContentsZDecodeErrorZ_get_err")] public static extern long CResult_COption_CustomOnionMessageContentsZDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_NetAddressZ_ty_from_ptr")] public static extern long LDKCOption_NetAddressZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_NetAddressZ_Some_get_some")] public static extern long LDKCOption_NetAddressZ_Some_get_some(long ptr);
	// struct LDKCVec_u8Z CResult_CVec_u8ZPeerHandleErrorZ_get_ok(LDKCResult_CVec_u8ZPeerHandleErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZPeerHandleErrorZ_get_ok")] public static extern byte[] CResult_CVec_u8ZPeerHandleErrorZ_get_ok(long _owner);
	// struct LDKPeerHandleError CResult_CVec_u8ZPeerHandleErrorZ_get_err(LDKCResult_CVec_u8ZPeerHandleErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZPeerHandleErrorZ_get_err")] public static extern long CResult_CVec_u8ZPeerHandleErrorZ_get_err(long _owner);
	// void CResult_NonePeerHandleErrorZ_get_ok(LDKCResult_NonePeerHandleErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePeerHandleErrorZ_get_ok")] public static extern void CResult_NonePeerHandleErrorZ_get_ok(long _owner);
	// struct LDKPeerHandleError CResult_NonePeerHandleErrorZ_get_err(LDKCResult_NonePeerHandleErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePeerHandleErrorZ_get_err")] public static extern long CResult_NonePeerHandleErrorZ_get_err(long _owner);
	// bool CResult_boolPeerHandleErrorZ_get_ok(LDKCResult_boolPeerHandleErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolPeerHandleErrorZ_get_ok")] public static extern bool CResult_boolPeerHandleErrorZ_get_ok(long _owner);
	// struct LDKPeerHandleError CResult_boolPeerHandleErrorZ_get_err(LDKCResult_boolPeerHandleErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolPeerHandleErrorZ_get_err")] public static extern long CResult_boolPeerHandleErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSendError_ty_from_ptr")] public static extern long LDKSendError_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSendError_Secp256k1_get_secp256k1")] public static extern Secp256k1Error LDKSendError_Secp256k1_get_secp256k1(long ptr);
	// void CResult_NoneSendErrorZ_get_ok(LDKCResult_NoneSendErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneSendErrorZ_get_ok")] public static extern void CResult_NoneSendErrorZ_get_ok(long _owner);
	// struct LDKSendError CResult_NoneSendErrorZ_get_err(LDKCResult_NoneSendErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneSendErrorZ_get_err")] public static extern long CResult_NoneSendErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKParseError_ty_from_ptr")] public static extern long LDKParseError_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKParseError_Bech32Error_get_bech32_error")] public static extern long LDKParseError_Bech32Error_get_bech32_error(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKParseError_ParseAmountError_get_parse_amount_error")] public static extern int LDKParseError_ParseAmountError_get_parse_amount_error(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKParseError_MalformedSignature_get_malformed_signature")] public static extern Secp256k1Error LDKParseError_MalformedSignature_get_malformed_signature(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKParseError_DescriptionDecodeError_get_description_decode_error")] public static extern int LDKParseError_DescriptionDecodeError_get_description_decode_error(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKParseError_InvalidSliceLength_get_invalid_slice_length")] public static extern string LDKParseError_InvalidSliceLength_get_invalid_slice_length(long ptr);
	// enum LDKSiPrefix CResult_SiPrefixParseErrorZ_get_ok(LDKCResult_SiPrefixParseErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SiPrefixParseErrorZ_get_ok")] public static extern SiPrefix CResult_SiPrefixParseErrorZ_get_ok(long _owner);
	// struct LDKParseError CResult_SiPrefixParseErrorZ_get_err(LDKCResult_SiPrefixParseErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SiPrefixParseErrorZ_get_err")] public static extern long CResult_SiPrefixParseErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKParseOrSemanticError_ty_from_ptr")] public static extern long LDKParseOrSemanticError_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKParseOrSemanticError_ParseError_get_parse_error")] public static extern long LDKParseOrSemanticError_ParseError_get_parse_error(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKParseOrSemanticError_SemanticError_get_semantic_error")] public static extern SemanticError LDKParseOrSemanticError_SemanticError_get_semantic_error(long ptr);
	// struct LDKInvoice CResult_InvoiceParseOrSemanticErrorZ_get_ok(LDKCResult_InvoiceParseOrSemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceParseOrSemanticErrorZ_get_ok")] public static extern long CResult_InvoiceParseOrSemanticErrorZ_get_ok(long _owner);
	// struct LDKParseOrSemanticError CResult_InvoiceParseOrSemanticErrorZ_get_err(LDKCResult_InvoiceParseOrSemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceParseOrSemanticErrorZ_get_err")] public static extern long CResult_InvoiceParseOrSemanticErrorZ_get_err(long _owner);
	// struct LDKSignedRawInvoice CResult_SignedRawInvoiceParseErrorZ_get_ok(LDKCResult_SignedRawInvoiceParseErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignedRawInvoiceParseErrorZ_get_ok")] public static extern long CResult_SignedRawInvoiceParseErrorZ_get_ok(long _owner);
	// struct LDKParseError CResult_SignedRawInvoiceParseErrorZ_get_err(LDKCResult_SignedRawInvoiceParseErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignedRawInvoiceParseErrorZ_get_err")] public static extern long CResult_SignedRawInvoiceParseErrorZ_get_err(long _owner);
	// struct LDKRawInvoice C3Tuple_RawInvoice_u832InvoiceSignatureZ_get_a(LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_RawInvoice_u832InvoiceSignatureZ_get_a")] public static extern long C3Tuple_RawInvoice_u832InvoiceSignatureZ_get_a(long _owner);
	// struct LDKThirtyTwoBytes C3Tuple_RawInvoice_u832InvoiceSignatureZ_get_b(LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_RawInvoice_u832InvoiceSignatureZ_get_b")] public static extern byte[] C3Tuple_RawInvoice_u832InvoiceSignatureZ_get_b(long _owner);
	// struct LDKInvoiceSignature C3Tuple_RawInvoice_u832InvoiceSignatureZ_get_c(LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_RawInvoice_u832InvoiceSignatureZ_get_c")] public static extern long C3Tuple_RawInvoice_u832InvoiceSignatureZ_get_c(long _owner);
	// struct LDKPayeePubKey CResult_PayeePubKeyErrorZ_get_ok(LDKCResult_PayeePubKeyErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PayeePubKeyErrorZ_get_ok")] public static extern long CResult_PayeePubKeyErrorZ_get_ok(long _owner);
	// enum LDKSecp256k1Error CResult_PayeePubKeyErrorZ_get_err(LDKCResult_PayeePubKeyErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PayeePubKeyErrorZ_get_err")] public static extern Secp256k1Error CResult_PayeePubKeyErrorZ_get_err(long _owner);
	// struct LDKPositiveTimestamp CResult_PositiveTimestampCreationErrorZ_get_ok(LDKCResult_PositiveTimestampCreationErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PositiveTimestampCreationErrorZ_get_ok")] public static extern long CResult_PositiveTimestampCreationErrorZ_get_ok(long _owner);
	// enum LDKCreationError CResult_PositiveTimestampCreationErrorZ_get_err(LDKCResult_PositiveTimestampCreationErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PositiveTimestampCreationErrorZ_get_err")] public static extern CreationError CResult_PositiveTimestampCreationErrorZ_get_err(long _owner);
	// void CResult_NoneSemanticErrorZ_get_ok(LDKCResult_NoneSemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneSemanticErrorZ_get_ok")] public static extern void CResult_NoneSemanticErrorZ_get_ok(long _owner);
	// enum LDKSemanticError CResult_NoneSemanticErrorZ_get_err(LDKCResult_NoneSemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneSemanticErrorZ_get_err")] public static extern SemanticError CResult_NoneSemanticErrorZ_get_err(long _owner);
	// struct LDKInvoice CResult_InvoiceSemanticErrorZ_get_ok(LDKCResult_InvoiceSemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceSemanticErrorZ_get_ok")] public static extern long CResult_InvoiceSemanticErrorZ_get_ok(long _owner);
	// enum LDKSemanticError CResult_InvoiceSemanticErrorZ_get_err(LDKCResult_InvoiceSemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceSemanticErrorZ_get_err")] public static extern SemanticError CResult_InvoiceSemanticErrorZ_get_err(long _owner);
	// struct LDKDescription CResult_DescriptionCreationErrorZ_get_ok(LDKCResult_DescriptionCreationErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DescriptionCreationErrorZ_get_ok")] public static extern long CResult_DescriptionCreationErrorZ_get_ok(long _owner);
	// enum LDKCreationError CResult_DescriptionCreationErrorZ_get_err(LDKCResult_DescriptionCreationErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DescriptionCreationErrorZ_get_err")] public static extern CreationError CResult_DescriptionCreationErrorZ_get_err(long _owner);
	// struct LDKPrivateRoute CResult_PrivateRouteCreationErrorZ_get_ok(LDKCResult_PrivateRouteCreationErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PrivateRouteCreationErrorZ_get_ok")] public static extern long CResult_PrivateRouteCreationErrorZ_get_ok(long _owner);
	// enum LDKCreationError CResult_PrivateRouteCreationErrorZ_get_err(LDKCResult_PrivateRouteCreationErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PrivateRouteCreationErrorZ_get_err")] public static extern CreationError CResult_PrivateRouteCreationErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKGraphSyncError_ty_from_ptr")] public static extern long LDKGraphSyncError_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKGraphSyncError_DecodeError_get_decode_error")] public static extern long LDKGraphSyncError_DecodeError_get_decode_error(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKGraphSyncError_LightningError_get_lightning_error")] public static extern long LDKGraphSyncError_LightningError_get_lightning_error(long ptr);
	// uint32_t CResult_u32GraphSyncErrorZ_get_ok(LDKCResult_u32GraphSyncErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u32GraphSyncErrorZ_get_ok")] public static extern int CResult_u32GraphSyncErrorZ_get_ok(long _owner);
	// struct LDKGraphSyncError CResult_u32GraphSyncErrorZ_get_err(LDKCResult_u32GraphSyncErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u32GraphSyncErrorZ_get_err")] public static extern long CResult_u32GraphSyncErrorZ_get_err(long _owner);
	// struct LDKNetAddress CResult_NetAddressDecodeErrorZ_get_ok(LDKCResult_NetAddressDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NetAddressDecodeErrorZ_get_ok")] public static extern long CResult_NetAddressDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_NetAddressDecodeErrorZ_get_err(LDKCResult_NetAddressDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NetAddressDecodeErrorZ_get_err")] public static extern long CResult_NetAddressDecodeErrorZ_get_err(long _owner);
	// struct LDKAcceptChannel CResult_AcceptChannelDecodeErrorZ_get_ok(LDKCResult_AcceptChannelDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelDecodeErrorZ_get_ok")] public static extern long CResult_AcceptChannelDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_AcceptChannelDecodeErrorZ_get_err(LDKCResult_AcceptChannelDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelDecodeErrorZ_get_err")] public static extern long CResult_AcceptChannelDecodeErrorZ_get_err(long _owner);
	// struct LDKAnnouncementSignatures CResult_AnnouncementSignaturesDecodeErrorZ_get_ok(LDKCResult_AnnouncementSignaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AnnouncementSignaturesDecodeErrorZ_get_ok")] public static extern long CResult_AnnouncementSignaturesDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_AnnouncementSignaturesDecodeErrorZ_get_err(LDKCResult_AnnouncementSignaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AnnouncementSignaturesDecodeErrorZ_get_err")] public static extern long CResult_AnnouncementSignaturesDecodeErrorZ_get_err(long _owner);
	// struct LDKChannelReestablish CResult_ChannelReestablishDecodeErrorZ_get_ok(LDKCResult_ChannelReestablishDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReestablishDecodeErrorZ_get_ok")] public static extern long CResult_ChannelReestablishDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelReestablishDecodeErrorZ_get_err(LDKCResult_ChannelReestablishDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReestablishDecodeErrorZ_get_err")] public static extern long CResult_ChannelReestablishDecodeErrorZ_get_err(long _owner);
	// struct LDKClosingSigned CResult_ClosingSignedDecodeErrorZ_get_ok(LDKCResult_ClosingSignedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedDecodeErrorZ_get_ok")] public static extern long CResult_ClosingSignedDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ClosingSignedDecodeErrorZ_get_err(LDKCResult_ClosingSignedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedDecodeErrorZ_get_err")] public static extern long CResult_ClosingSignedDecodeErrorZ_get_err(long _owner);
	// struct LDKClosingSignedFeeRange CResult_ClosingSignedFeeRangeDecodeErrorZ_get_ok(LDKCResult_ClosingSignedFeeRangeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedFeeRangeDecodeErrorZ_get_ok")] public static extern long CResult_ClosingSignedFeeRangeDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ClosingSignedFeeRangeDecodeErrorZ_get_err(LDKCResult_ClosingSignedFeeRangeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedFeeRangeDecodeErrorZ_get_err")] public static extern long CResult_ClosingSignedFeeRangeDecodeErrorZ_get_err(long _owner);
	// struct LDKCommitmentSigned CResult_CommitmentSignedDecodeErrorZ_get_ok(LDKCResult_CommitmentSignedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedDecodeErrorZ_get_ok")] public static extern long CResult_CommitmentSignedDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_CommitmentSignedDecodeErrorZ_get_err(LDKCResult_CommitmentSignedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedDecodeErrorZ_get_err")] public static extern long CResult_CommitmentSignedDecodeErrorZ_get_err(long _owner);
	// struct LDKFundingCreated CResult_FundingCreatedDecodeErrorZ_get_ok(LDKCResult_FundingCreatedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingCreatedDecodeErrorZ_get_ok")] public static extern long CResult_FundingCreatedDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_FundingCreatedDecodeErrorZ_get_err(LDKCResult_FundingCreatedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingCreatedDecodeErrorZ_get_err")] public static extern long CResult_FundingCreatedDecodeErrorZ_get_err(long _owner);
	// struct LDKFundingSigned CResult_FundingSignedDecodeErrorZ_get_ok(LDKCResult_FundingSignedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingSignedDecodeErrorZ_get_ok")] public static extern long CResult_FundingSignedDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_FundingSignedDecodeErrorZ_get_err(LDKCResult_FundingSignedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingSignedDecodeErrorZ_get_err")] public static extern long CResult_FundingSignedDecodeErrorZ_get_err(long _owner);
	// struct LDKChannelReady CResult_ChannelReadyDecodeErrorZ_get_ok(LDKCResult_ChannelReadyDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReadyDecodeErrorZ_get_ok")] public static extern long CResult_ChannelReadyDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelReadyDecodeErrorZ_get_err(LDKCResult_ChannelReadyDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReadyDecodeErrorZ_get_err")] public static extern long CResult_ChannelReadyDecodeErrorZ_get_err(long _owner);
	// struct LDKInit CResult_InitDecodeErrorZ_get_ok(LDKCResult_InitDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitDecodeErrorZ_get_ok")] public static extern long CResult_InitDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_InitDecodeErrorZ_get_err(LDKCResult_InitDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitDecodeErrorZ_get_err")] public static extern long CResult_InitDecodeErrorZ_get_err(long _owner);
	// struct LDKOpenChannel CResult_OpenChannelDecodeErrorZ_get_ok(LDKCResult_OpenChannelDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelDecodeErrorZ_get_ok")] public static extern long CResult_OpenChannelDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_OpenChannelDecodeErrorZ_get_err(LDKCResult_OpenChannelDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelDecodeErrorZ_get_err")] public static extern long CResult_OpenChannelDecodeErrorZ_get_err(long _owner);
	// struct LDKRevokeAndACK CResult_RevokeAndACKDecodeErrorZ_get_ok(LDKCResult_RevokeAndACKDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevokeAndACKDecodeErrorZ_get_ok")] public static extern long CResult_RevokeAndACKDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_RevokeAndACKDecodeErrorZ_get_err(LDKCResult_RevokeAndACKDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevokeAndACKDecodeErrorZ_get_err")] public static extern long CResult_RevokeAndACKDecodeErrorZ_get_err(long _owner);
	// struct LDKShutdown CResult_ShutdownDecodeErrorZ_get_ok(LDKCResult_ShutdownDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownDecodeErrorZ_get_ok")] public static extern long CResult_ShutdownDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ShutdownDecodeErrorZ_get_err(LDKCResult_ShutdownDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownDecodeErrorZ_get_err")] public static extern long CResult_ShutdownDecodeErrorZ_get_err(long _owner);
	// struct LDKUpdateFailHTLC CResult_UpdateFailHTLCDecodeErrorZ_get_ok(LDKCResult_UpdateFailHTLCDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailHTLCDecodeErrorZ_get_ok")] public static extern long CResult_UpdateFailHTLCDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_UpdateFailHTLCDecodeErrorZ_get_err(LDKCResult_UpdateFailHTLCDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailHTLCDecodeErrorZ_get_err")] public static extern long CResult_UpdateFailHTLCDecodeErrorZ_get_err(long _owner);
	// struct LDKUpdateFailMalformedHTLC CResult_UpdateFailMalformedHTLCDecodeErrorZ_get_ok(LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailMalformedHTLCDecodeErrorZ_get_ok")] public static extern long CResult_UpdateFailMalformedHTLCDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_UpdateFailMalformedHTLCDecodeErrorZ_get_err(LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailMalformedHTLCDecodeErrorZ_get_err")] public static extern long CResult_UpdateFailMalformedHTLCDecodeErrorZ_get_err(long _owner);
	// struct LDKUpdateFee CResult_UpdateFeeDecodeErrorZ_get_ok(LDKCResult_UpdateFeeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFeeDecodeErrorZ_get_ok")] public static extern long CResult_UpdateFeeDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_UpdateFeeDecodeErrorZ_get_err(LDKCResult_UpdateFeeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFeeDecodeErrorZ_get_err")] public static extern long CResult_UpdateFeeDecodeErrorZ_get_err(long _owner);
	// struct LDKUpdateFulfillHTLC CResult_UpdateFulfillHTLCDecodeErrorZ_get_ok(LDKCResult_UpdateFulfillHTLCDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFulfillHTLCDecodeErrorZ_get_ok")] public static extern long CResult_UpdateFulfillHTLCDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_UpdateFulfillHTLCDecodeErrorZ_get_err(LDKCResult_UpdateFulfillHTLCDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFulfillHTLCDecodeErrorZ_get_err")] public static extern long CResult_UpdateFulfillHTLCDecodeErrorZ_get_err(long _owner);
	// struct LDKUpdateAddHTLC CResult_UpdateAddHTLCDecodeErrorZ_get_ok(LDKCResult_UpdateAddHTLCDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateAddHTLCDecodeErrorZ_get_ok")] public static extern long CResult_UpdateAddHTLCDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_UpdateAddHTLCDecodeErrorZ_get_err(LDKCResult_UpdateAddHTLCDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateAddHTLCDecodeErrorZ_get_err")] public static extern long CResult_UpdateAddHTLCDecodeErrorZ_get_err(long _owner);
	// struct LDKOnionMessage CResult_OnionMessageDecodeErrorZ_get_ok(LDKCResult_OnionMessageDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessageDecodeErrorZ_get_ok")] public static extern long CResult_OnionMessageDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_OnionMessageDecodeErrorZ_get_err(LDKCResult_OnionMessageDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessageDecodeErrorZ_get_err")] public static extern long CResult_OnionMessageDecodeErrorZ_get_err(long _owner);
	// struct LDKPing CResult_PingDecodeErrorZ_get_ok(LDKCResult_PingDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PingDecodeErrorZ_get_ok")] public static extern long CResult_PingDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_PingDecodeErrorZ_get_err(LDKCResult_PingDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PingDecodeErrorZ_get_err")] public static extern long CResult_PingDecodeErrorZ_get_err(long _owner);
	// struct LDKPong CResult_PongDecodeErrorZ_get_ok(LDKCResult_PongDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PongDecodeErrorZ_get_ok")] public static extern long CResult_PongDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_PongDecodeErrorZ_get_err(LDKCResult_PongDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PongDecodeErrorZ_get_err")] public static extern long CResult_PongDecodeErrorZ_get_err(long _owner);
	// struct LDKUnsignedChannelAnnouncement CResult_UnsignedChannelAnnouncementDecodeErrorZ_get_ok(LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelAnnouncementDecodeErrorZ_get_ok")] public static extern long CResult_UnsignedChannelAnnouncementDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_UnsignedChannelAnnouncementDecodeErrorZ_get_err(LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelAnnouncementDecodeErrorZ_get_err")] public static extern long CResult_UnsignedChannelAnnouncementDecodeErrorZ_get_err(long _owner);
	// struct LDKChannelAnnouncement CResult_ChannelAnnouncementDecodeErrorZ_get_ok(LDKCResult_ChannelAnnouncementDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelAnnouncementDecodeErrorZ_get_ok")] public static extern long CResult_ChannelAnnouncementDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelAnnouncementDecodeErrorZ_get_err(LDKCResult_ChannelAnnouncementDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelAnnouncementDecodeErrorZ_get_err")] public static extern long CResult_ChannelAnnouncementDecodeErrorZ_get_err(long _owner);
	// struct LDKUnsignedChannelUpdate CResult_UnsignedChannelUpdateDecodeErrorZ_get_ok(LDKCResult_UnsignedChannelUpdateDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelUpdateDecodeErrorZ_get_ok")] public static extern long CResult_UnsignedChannelUpdateDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_UnsignedChannelUpdateDecodeErrorZ_get_err(LDKCResult_UnsignedChannelUpdateDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelUpdateDecodeErrorZ_get_err")] public static extern long CResult_UnsignedChannelUpdateDecodeErrorZ_get_err(long _owner);
	// struct LDKChannelUpdate CResult_ChannelUpdateDecodeErrorZ_get_ok(LDKCResult_ChannelUpdateDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateDecodeErrorZ_get_ok")] public static extern long CResult_ChannelUpdateDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelUpdateDecodeErrorZ_get_err(LDKCResult_ChannelUpdateDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateDecodeErrorZ_get_err")] public static extern long CResult_ChannelUpdateDecodeErrorZ_get_err(long _owner);
	// struct LDKErrorMessage CResult_ErrorMessageDecodeErrorZ_get_ok(LDKCResult_ErrorMessageDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ErrorMessageDecodeErrorZ_get_ok")] public static extern long CResult_ErrorMessageDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ErrorMessageDecodeErrorZ_get_err(LDKCResult_ErrorMessageDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ErrorMessageDecodeErrorZ_get_err")] public static extern long CResult_ErrorMessageDecodeErrorZ_get_err(long _owner);
	// struct LDKWarningMessage CResult_WarningMessageDecodeErrorZ_get_ok(LDKCResult_WarningMessageDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WarningMessageDecodeErrorZ_get_ok")] public static extern long CResult_WarningMessageDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_WarningMessageDecodeErrorZ_get_err(LDKCResult_WarningMessageDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WarningMessageDecodeErrorZ_get_err")] public static extern long CResult_WarningMessageDecodeErrorZ_get_err(long _owner);
	// struct LDKUnsignedNodeAnnouncement CResult_UnsignedNodeAnnouncementDecodeErrorZ_get_ok(LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedNodeAnnouncementDecodeErrorZ_get_ok")] public static extern long CResult_UnsignedNodeAnnouncementDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_UnsignedNodeAnnouncementDecodeErrorZ_get_err(LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedNodeAnnouncementDecodeErrorZ_get_err")] public static extern long CResult_UnsignedNodeAnnouncementDecodeErrorZ_get_err(long _owner);
	// struct LDKNodeAnnouncement CResult_NodeAnnouncementDecodeErrorZ_get_ok(LDKCResult_NodeAnnouncementDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementDecodeErrorZ_get_ok")] public static extern long CResult_NodeAnnouncementDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_NodeAnnouncementDecodeErrorZ_get_err(LDKCResult_NodeAnnouncementDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementDecodeErrorZ_get_err")] public static extern long CResult_NodeAnnouncementDecodeErrorZ_get_err(long _owner);
	// struct LDKQueryShortChannelIds CResult_QueryShortChannelIdsDecodeErrorZ_get_ok(LDKCResult_QueryShortChannelIdsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryShortChannelIdsDecodeErrorZ_get_ok")] public static extern long CResult_QueryShortChannelIdsDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_QueryShortChannelIdsDecodeErrorZ_get_err(LDKCResult_QueryShortChannelIdsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryShortChannelIdsDecodeErrorZ_get_err")] public static extern long CResult_QueryShortChannelIdsDecodeErrorZ_get_err(long _owner);
	// struct LDKReplyShortChannelIdsEnd CResult_ReplyShortChannelIdsEndDecodeErrorZ_get_ok(LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyShortChannelIdsEndDecodeErrorZ_get_ok")] public static extern long CResult_ReplyShortChannelIdsEndDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ReplyShortChannelIdsEndDecodeErrorZ_get_err(LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyShortChannelIdsEndDecodeErrorZ_get_err")] public static extern long CResult_ReplyShortChannelIdsEndDecodeErrorZ_get_err(long _owner);
	// struct LDKQueryChannelRange CResult_QueryChannelRangeDecodeErrorZ_get_ok(LDKCResult_QueryChannelRangeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryChannelRangeDecodeErrorZ_get_ok")] public static extern long CResult_QueryChannelRangeDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_QueryChannelRangeDecodeErrorZ_get_err(LDKCResult_QueryChannelRangeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryChannelRangeDecodeErrorZ_get_err")] public static extern long CResult_QueryChannelRangeDecodeErrorZ_get_err(long _owner);
	// struct LDKReplyChannelRange CResult_ReplyChannelRangeDecodeErrorZ_get_ok(LDKCResult_ReplyChannelRangeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyChannelRangeDecodeErrorZ_get_ok")] public static extern long CResult_ReplyChannelRangeDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ReplyChannelRangeDecodeErrorZ_get_err(LDKCResult_ReplyChannelRangeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyChannelRangeDecodeErrorZ_get_err")] public static extern long CResult_ReplyChannelRangeDecodeErrorZ_get_err(long _owner);
	// struct LDKGossipTimestampFilter CResult_GossipTimestampFilterDecodeErrorZ_get_ok(LDKCResult_GossipTimestampFilterDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_GossipTimestampFilterDecodeErrorZ_get_ok")] public static extern long CResult_GossipTimestampFilterDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_GossipTimestampFilterDecodeErrorZ_get_err(LDKCResult_GossipTimestampFilterDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_GossipTimestampFilterDecodeErrorZ_get_err")] public static extern long CResult_GossipTimestampFilterDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSignOrCreationError_ty_from_ptr")] public static extern long LDKSignOrCreationError_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSignOrCreationError_CreationError_get_creation_error")] public static extern CreationError LDKSignOrCreationError_CreationError_get_creation_error(long ptr);
	// struct LDKInvoice CResult_InvoiceSignOrCreationErrorZ_get_ok(LDKCResult_InvoiceSignOrCreationErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceSignOrCreationErrorZ_get_ok")] public static extern long CResult_InvoiceSignOrCreationErrorZ_get_ok(long _owner);
	// struct LDKSignOrCreationError CResult_InvoiceSignOrCreationErrorZ_get_err(LDKCResult_InvoiceSignOrCreationErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceSignOrCreationErrorZ_get_err")] public static extern long CResult_InvoiceSignOrCreationErrorZ_get_err(long _owner);
	public interface LDKFilter {
		void register_tx(byte[] _txid, byte[] _script_pubkey);
		void register_output(long _output);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFilter_new")] public static extern long LDKFilter_new(LDKFilter impl);
	// void Filter_register_tx LDKFilter *NONNULL_PTR this_arg, const uint8_t (*txid)[32], struct LDKu8slice script_pubkey
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Filter_register_tx")] public static extern void Filter_register_tx(long _this_arg, byte[] _txid, byte[] _script_pubkey);
	// void Filter_register_output LDKFilter *NONNULL_PTR this_arg, struct LDKWatchedOutput output
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Filter_register_output")] public static extern void Filter_register_output(long _this_arg, long _output);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_FilterZ_ty_from_ptr")] public static extern long LDKCOption_FilterZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_FilterZ_Some_get_some")] public static extern long LDKCOption_FilterZ_Some_get_some(long ptr);
	// struct LDKLockedChannelMonitor CResult_LockedChannelMonitorNoneZ_get_ok(LDKCResult_LockedChannelMonitorNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LockedChannelMonitorNoneZ_get_ok")] public static extern long CResult_LockedChannelMonitorNoneZ_get_ok(long _owner);
	// void CResult_LockedChannelMonitorNoneZ_get_err(LDKCResult_LockedChannelMonitorNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LockedChannelMonitorNoneZ_get_err")] public static extern void CResult_LockedChannelMonitorNoneZ_get_err(long _owner);
	// struct LDKOutPoint C2Tuple_OutPointCVec_MonitorUpdateIdZZ_get_a(LDKC2Tuple_OutPointCVec_MonitorUpdateIdZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_MonitorUpdateIdZZ_get_a")] public static extern long C2Tuple_OutPointCVec_MonitorUpdateIdZZ_get_a(long _owner);
	// struct LDKCVec_MonitorUpdateIdZ C2Tuple_OutPointCVec_MonitorUpdateIdZZ_get_b(LDKC2Tuple_OutPointCVec_MonitorUpdateIdZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_MonitorUpdateIdZZ_get_b")] public static extern long[] C2Tuple_OutPointCVec_MonitorUpdateIdZZ_get_b(long _owner);
	public interface LDKMessageSendEventsProvider {
		long[] get_and_clear_pending_msg_events();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEventsProvider_new")] public static extern long LDKMessageSendEventsProvider_new(LDKMessageSendEventsProvider impl);
	// LDKCVec_MessageSendEventZ MessageSendEventsProvider_get_and_clear_pending_msg_events LDKMessageSendEventsProvider *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEventsProvider_get_and_clear_pending_msg_events")] public static extern long[] MessageSendEventsProvider_get_and_clear_pending_msg_events(long _this_arg);
	public interface LDKOnionMessageProvider {
		long next_onion_message_for_peer(byte[] _peer_node_id);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOnionMessageProvider_new")] public static extern long LDKOnionMessageProvider_new(LDKOnionMessageProvider impl);
	// LDKOnionMessage OnionMessageProvider_next_onion_message_for_peer LDKOnionMessageProvider *NONNULL_PTR this_arg, struct LDKPublicKey peer_node_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageProvider_next_onion_message_for_peer")] public static extern long OnionMessageProvider_next_onion_message_for_peer(long _this_arg, byte[] _peer_node_id);
	public interface LDKEventHandler {
		void handle_event(long _event);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEventHandler_new")] public static extern long LDKEventHandler_new(LDKEventHandler impl);
	// void EventHandler_handle_event LDKEventHandler *NONNULL_PTR this_arg, struct LDKEvent event
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EventHandler_handle_event")] public static extern void EventHandler_handle_event(long _this_arg, long _event);
	public interface LDKEventsProvider {
		void process_pending_events(long _handler);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEventsProvider_new")] public static extern long LDKEventsProvider_new(LDKEventsProvider impl);
	// void EventsProvider_process_pending_events LDKEventsProvider *NONNULL_PTR this_arg, struct LDKEventHandler handler
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EventsProvider_process_pending_events")] public static extern void EventsProvider_process_pending_events(long _this_arg, long _handler);
	public interface LDKPersister {
		long persist_manager(long _channel_manager);
		long persist_graph(long _network_graph);
		long persist_scorer(long _scorer);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPersister_new")] public static extern long LDKPersister_new(LDKPersister impl);
	// LDKCResult_NoneErrorZ Persister_persist_manager LDKPersister *NONNULL_PTR this_arg, const struct LDKChannelManager *NONNULL_PTR channel_manager
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Persister_persist_manager")] public static extern long Persister_persist_manager(long _this_arg, long _channel_manager);
	// LDKCResult_NoneErrorZ Persister_persist_graph LDKPersister *NONNULL_PTR this_arg, const struct LDKNetworkGraph *NONNULL_PTR network_graph
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Persister_persist_graph")] public static extern long Persister_persist_graph(long _this_arg, long _network_graph);
	// LDKCResult_NoneErrorZ Persister_persist_scorer LDKPersister *NONNULL_PTR this_arg, const struct LDKWriteableScore *NONNULL_PTR scorer
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Persister_persist_scorer")] public static extern long Persister_persist_scorer(long _this_arg, long _scorer);
	public interface LDKFutureCallback {
		void call();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFutureCallback_new")] public static extern long LDKFutureCallback_new(LDKFutureCallback impl);
	// void FutureCallback_call LDKFutureCallback *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FutureCallback_call")] public static extern void FutureCallback_call(long _this_arg);
	public interface LDKListen {
		void filtered_block_connected(byte[] _header, long[] _txdata, int _height);
		void block_connected(byte[] _block, int _height);
		void block_disconnected(byte[] _header, int _height);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKListen_new")] public static extern long LDKListen_new(LDKListen impl);
	// void Listen_filtered_block_connected LDKListen *NONNULL_PTR this_arg, const uint8_t (*header)[80], struct LDKCVec_C2Tuple_usizeTransactionZZ txdata, uint32_t height
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Listen_filtered_block_connected")] public static extern void Listen_filtered_block_connected(long _this_arg, byte[] _header, long[] _txdata, int _height);
	// void Listen_block_connected LDKListen *NONNULL_PTR this_arg, struct LDKu8slice block, uint32_t height
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Listen_block_connected")] public static extern void Listen_block_connected(long _this_arg, byte[] _block, int _height);
	// void Listen_block_disconnected LDKListen *NONNULL_PTR this_arg, const uint8_t (*header)[80], uint32_t height
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Listen_block_disconnected")] public static extern void Listen_block_disconnected(long _this_arg, byte[] _header, int _height);
	public interface LDKConfirm {
		void transactions_confirmed(byte[] _header, long[] _txdata, int _height);
		void transaction_unconfirmed(byte[] _txid);
		void best_block_updated(byte[] _header, int _height);
		long[] get_relevant_txids();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKConfirm_new")] public static extern long LDKConfirm_new(LDKConfirm impl);
	// void Confirm_transactions_confirmed LDKConfirm *NONNULL_PTR this_arg, const uint8_t (*header)[80], struct LDKCVec_C2Tuple_usizeTransactionZZ txdata, uint32_t height
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Confirm_transactions_confirmed")] public static extern void Confirm_transactions_confirmed(long _this_arg, byte[] _header, long[] _txdata, int _height);
	// void Confirm_transaction_unconfirmed LDKConfirm *NONNULL_PTR this_arg, const uint8_t (*txid)[32]
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Confirm_transaction_unconfirmed")] public static extern void Confirm_transaction_unconfirmed(long _this_arg, byte[] _txid);
	// void Confirm_best_block_updated LDKConfirm *NONNULL_PTR this_arg, const uint8_t (*header)[80], uint32_t height
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Confirm_best_block_updated")] public static extern void Confirm_best_block_updated(long _this_arg, byte[] _header, int _height);
	// LDKCVec_C2Tuple_TxidBlockHashZZ Confirm_get_relevant_txids LDKConfirm *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Confirm_get_relevant_txids")] public static extern long[] Confirm_get_relevant_txids(long _this_arg);
	public interface LDKPersist {
		ChannelMonitorUpdateStatus persist_new_channel(long _channel_id, long _data, long _update_id);
		ChannelMonitorUpdateStatus update_persisted_channel(long _channel_id, long _update, long _data, long _update_id);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPersist_new")] public static extern long LDKPersist_new(LDKPersist impl);
	// LDKChannelMonitorUpdateStatus Persist_persist_new_channel LDKPersist *NONNULL_PTR this_arg, struct LDKOutPoint channel_id, const struct LDKChannelMonitor *NONNULL_PTR data, struct LDKMonitorUpdateId update_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Persist_persist_new_channel")] public static extern ChannelMonitorUpdateStatus Persist_persist_new_channel(long _this_arg, long _channel_id, long _data, long _update_id);
	// LDKChannelMonitorUpdateStatus Persist_update_persisted_channel LDKPersist *NONNULL_PTR this_arg, struct LDKOutPoint channel_id, const struct LDKChannelMonitorUpdate *NONNULL_PTR update, const struct LDKChannelMonitor *NONNULL_PTR data, struct LDKMonitorUpdateId update_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Persist_update_persisted_channel")] public static extern ChannelMonitorUpdateStatus Persist_update_persisted_channel(long _this_arg, long _channel_id, long _update, long _data, long _update_id);
	public interface LDKChannelMessageHandler {
		void handle_open_channel(byte[] _their_node_id, long _their_features, long _msg);
		void handle_accept_channel(byte[] _their_node_id, long _their_features, long _msg);
		void handle_funding_created(byte[] _their_node_id, long _msg);
		void handle_funding_signed(byte[] _their_node_id, long _msg);
		void handle_channel_ready(byte[] _their_node_id, long _msg);
		void handle_shutdown(byte[] _their_node_id, long _their_features, long _msg);
		void handle_closing_signed(byte[] _their_node_id, long _msg);
		void handle_update_add_htlc(byte[] _their_node_id, long _msg);
		void handle_update_fulfill_htlc(byte[] _their_node_id, long _msg);
		void handle_update_fail_htlc(byte[] _their_node_id, long _msg);
		void handle_update_fail_malformed_htlc(byte[] _their_node_id, long _msg);
		void handle_commitment_signed(byte[] _their_node_id, long _msg);
		void handle_revoke_and_ack(byte[] _their_node_id, long _msg);
		void handle_update_fee(byte[] _their_node_id, long _msg);
		void handle_announcement_signatures(byte[] _their_node_id, long _msg);
		void peer_disconnected(byte[] _their_node_id, bool _no_connection_possible);
		long peer_connected(byte[] _their_node_id, long _msg);
		void handle_channel_reestablish(byte[] _their_node_id, long _msg);
		void handle_channel_update(byte[] _their_node_id, long _msg);
		void handle_error(byte[] _their_node_id, long _msg);
		long provided_node_features();
		long provided_init_features(byte[] _their_node_id);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKChannelMessageHandler_new")] public static extern long LDKChannelMessageHandler_new(LDKChannelMessageHandler impl, LDKMessageSendEventsProvider MessageSendEventsProvider);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKChannelMessageHandler_get_MessageSendEventsProvider")] public static extern long LDKChannelMessageHandler_get_MessageSendEventsProvider(long arg);
	// void ChannelMessageHandler_handle_open_channel LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, struct LDKInitFeatures their_features, const struct LDKOpenChannel *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_open_channel")] public static extern void ChannelMessageHandler_handle_open_channel(long _this_arg, byte[] _their_node_id, long _their_features, long _msg);
	// void ChannelMessageHandler_handle_accept_channel LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, struct LDKInitFeatures their_features, const struct LDKAcceptChannel *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_accept_channel")] public static extern void ChannelMessageHandler_handle_accept_channel(long _this_arg, byte[] _their_node_id, long _their_features, long _msg);
	// void ChannelMessageHandler_handle_funding_created LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKFundingCreated *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_funding_created")] public static extern void ChannelMessageHandler_handle_funding_created(long _this_arg, byte[] _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_funding_signed LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKFundingSigned *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_funding_signed")] public static extern void ChannelMessageHandler_handle_funding_signed(long _this_arg, byte[] _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_channel_ready LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKChannelReady *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_channel_ready")] public static extern void ChannelMessageHandler_handle_channel_ready(long _this_arg, byte[] _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_shutdown LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKInitFeatures *NONNULL_PTR their_features, const struct LDKShutdown *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_shutdown")] public static extern void ChannelMessageHandler_handle_shutdown(long _this_arg, byte[] _their_node_id, long _their_features, long _msg);
	// void ChannelMessageHandler_handle_closing_signed LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKClosingSigned *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_closing_signed")] public static extern void ChannelMessageHandler_handle_closing_signed(long _this_arg, byte[] _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_update_add_htlc LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKUpdateAddHTLC *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_update_add_htlc")] public static extern void ChannelMessageHandler_handle_update_add_htlc(long _this_arg, byte[] _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_update_fulfill_htlc LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKUpdateFulfillHTLC *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_update_fulfill_htlc")] public static extern void ChannelMessageHandler_handle_update_fulfill_htlc(long _this_arg, byte[] _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_update_fail_htlc LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKUpdateFailHTLC *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_update_fail_htlc")] public static extern void ChannelMessageHandler_handle_update_fail_htlc(long _this_arg, byte[] _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_update_fail_malformed_htlc LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKUpdateFailMalformedHTLC *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_update_fail_malformed_htlc")] public static extern void ChannelMessageHandler_handle_update_fail_malformed_htlc(long _this_arg, byte[] _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_commitment_signed LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKCommitmentSigned *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_commitment_signed")] public static extern void ChannelMessageHandler_handle_commitment_signed(long _this_arg, byte[] _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_revoke_and_ack LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKRevokeAndACK *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_revoke_and_ack")] public static extern void ChannelMessageHandler_handle_revoke_and_ack(long _this_arg, byte[] _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_update_fee LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKUpdateFee *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_update_fee")] public static extern void ChannelMessageHandler_handle_update_fee(long _this_arg, byte[] _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_announcement_signatures LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKAnnouncementSignatures *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_announcement_signatures")] public static extern void ChannelMessageHandler_handle_announcement_signatures(long _this_arg, byte[] _their_node_id, long _msg);
	// void ChannelMessageHandler_peer_disconnected LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, bool no_connection_possible
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_peer_disconnected")] public static extern void ChannelMessageHandler_peer_disconnected(long _this_arg, byte[] _their_node_id, bool _no_connection_possible);
	// LDKCResult_NoneNoneZ ChannelMessageHandler_peer_connected LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKInit *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_peer_connected")] public static extern long ChannelMessageHandler_peer_connected(long _this_arg, byte[] _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_channel_reestablish LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKChannelReestablish *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_channel_reestablish")] public static extern void ChannelMessageHandler_handle_channel_reestablish(long _this_arg, byte[] _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_channel_update LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKChannelUpdate *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_channel_update")] public static extern void ChannelMessageHandler_handle_channel_update(long _this_arg, byte[] _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_error LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKErrorMessage *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_error")] public static extern void ChannelMessageHandler_handle_error(long _this_arg, byte[] _their_node_id, long _msg);
	// LDKNodeFeatures ChannelMessageHandler_provided_node_features LDKChannelMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_provided_node_features")] public static extern long ChannelMessageHandler_provided_node_features(long _this_arg);
	// LDKInitFeatures ChannelMessageHandler_provided_init_features LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_provided_init_features")] public static extern long ChannelMessageHandler_provided_init_features(long _this_arg, byte[] _their_node_id);
	public interface LDKRoutingMessageHandler {
		long handle_node_announcement(long _msg);
		long handle_channel_announcement(long _msg);
		long handle_channel_update(long _msg);
		long get_next_channel_announcement(long _starting_point);
		long get_next_node_announcement(byte[] _starting_point);
		long peer_connected(byte[] _their_node_id, long _init);
		long handle_reply_channel_range(byte[] _their_node_id, long _msg);
		long handle_reply_short_channel_ids_end(byte[] _their_node_id, long _msg);
		long handle_query_channel_range(byte[] _their_node_id, long _msg);
		long handle_query_short_channel_ids(byte[] _their_node_id, long _msg);
		long provided_node_features();
		long provided_init_features(byte[] _their_node_id);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRoutingMessageHandler_new")] public static extern long LDKRoutingMessageHandler_new(LDKRoutingMessageHandler impl, LDKMessageSendEventsProvider MessageSendEventsProvider);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRoutingMessageHandler_get_MessageSendEventsProvider")] public static extern long LDKRoutingMessageHandler_get_MessageSendEventsProvider(long arg);
	// LDKCResult_boolLightningErrorZ RoutingMessageHandler_handle_node_announcement LDKRoutingMessageHandler *NONNULL_PTR this_arg, const struct LDKNodeAnnouncement *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_handle_node_announcement")] public static extern long RoutingMessageHandler_handle_node_announcement(long _this_arg, long _msg);
	// LDKCResult_boolLightningErrorZ RoutingMessageHandler_handle_channel_announcement LDKRoutingMessageHandler *NONNULL_PTR this_arg, const struct LDKChannelAnnouncement *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_handle_channel_announcement")] public static extern long RoutingMessageHandler_handle_channel_announcement(long _this_arg, long _msg);
	// LDKCResult_boolLightningErrorZ RoutingMessageHandler_handle_channel_update LDKRoutingMessageHandler *NONNULL_PTR this_arg, const struct LDKChannelUpdate *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_handle_channel_update")] public static extern long RoutingMessageHandler_handle_channel_update(long _this_arg, long _msg);
	// LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ RoutingMessageHandler_get_next_channel_announcement LDKRoutingMessageHandler *NONNULL_PTR this_arg, uint64_t starting_point
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_get_next_channel_announcement")] public static extern long RoutingMessageHandler_get_next_channel_announcement(long _this_arg, long _starting_point);
	// LDKNodeAnnouncement RoutingMessageHandler_get_next_node_announcement LDKRoutingMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey starting_point
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_get_next_node_announcement")] public static extern long RoutingMessageHandler_get_next_node_announcement(long _this_arg, byte[] _starting_point);
	// LDKCResult_NoneNoneZ RoutingMessageHandler_peer_connected LDKRoutingMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKInit *NONNULL_PTR init
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_peer_connected")] public static extern long RoutingMessageHandler_peer_connected(long _this_arg, byte[] _their_node_id, long _init);
	// LDKCResult_NoneLightningErrorZ RoutingMessageHandler_handle_reply_channel_range LDKRoutingMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, struct LDKReplyChannelRange msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_handle_reply_channel_range")] public static extern long RoutingMessageHandler_handle_reply_channel_range(long _this_arg, byte[] _their_node_id, long _msg);
	// LDKCResult_NoneLightningErrorZ RoutingMessageHandler_handle_reply_short_channel_ids_end LDKRoutingMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, struct LDKReplyShortChannelIdsEnd msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_handle_reply_short_channel_ids_end")] public static extern long RoutingMessageHandler_handle_reply_short_channel_ids_end(long _this_arg, byte[] _their_node_id, long _msg);
	// LDKCResult_NoneLightningErrorZ RoutingMessageHandler_handle_query_channel_range LDKRoutingMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, struct LDKQueryChannelRange msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_handle_query_channel_range")] public static extern long RoutingMessageHandler_handle_query_channel_range(long _this_arg, byte[] _their_node_id, long _msg);
	// LDKCResult_NoneLightningErrorZ RoutingMessageHandler_handle_query_short_channel_ids LDKRoutingMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, struct LDKQueryShortChannelIds msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_handle_query_short_channel_ids")] public static extern long RoutingMessageHandler_handle_query_short_channel_ids(long _this_arg, byte[] _their_node_id, long _msg);
	// LDKNodeFeatures RoutingMessageHandler_provided_node_features LDKRoutingMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_provided_node_features")] public static extern long RoutingMessageHandler_provided_node_features(long _this_arg);
	// LDKInitFeatures RoutingMessageHandler_provided_init_features LDKRoutingMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_provided_init_features")] public static extern long RoutingMessageHandler_provided_init_features(long _this_arg, byte[] _their_node_id);
	public interface LDKOnionMessageHandler {
		void handle_onion_message(byte[] _peer_node_id, long _msg);
		long peer_connected(byte[] _their_node_id, long _init);
		void peer_disconnected(byte[] _their_node_id, bool _no_connection_possible);
		long provided_node_features();
		long provided_init_features(byte[] _their_node_id);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOnionMessageHandler_new")] public static extern long LDKOnionMessageHandler_new(LDKOnionMessageHandler impl, LDKOnionMessageProvider OnionMessageProvider);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOnionMessageHandler_get_OnionMessageProvider")] public static extern long LDKOnionMessageHandler_get_OnionMessageProvider(long arg);
	// void OnionMessageHandler_handle_onion_message LDKOnionMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey peer_node_id, const struct LDKOnionMessage *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageHandler_handle_onion_message")] public static extern void OnionMessageHandler_handle_onion_message(long _this_arg, byte[] _peer_node_id, long _msg);
	// LDKCResult_NoneNoneZ OnionMessageHandler_peer_connected LDKOnionMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKInit *NONNULL_PTR init
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageHandler_peer_connected")] public static extern long OnionMessageHandler_peer_connected(long _this_arg, byte[] _their_node_id, long _init);
	// void OnionMessageHandler_peer_disconnected LDKOnionMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, bool no_connection_possible
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageHandler_peer_disconnected")] public static extern void OnionMessageHandler_peer_disconnected(long _this_arg, byte[] _their_node_id, bool _no_connection_possible);
	// LDKNodeFeatures OnionMessageHandler_provided_node_features LDKOnionMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageHandler_provided_node_features")] public static extern long OnionMessageHandler_provided_node_features(long _this_arg);
	// LDKInitFeatures OnionMessageHandler_provided_init_features LDKOnionMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageHandler_provided_init_features")] public static extern long OnionMessageHandler_provided_init_features(long _this_arg, byte[] _their_node_id);
	public interface LDKCustomMessageReader {
		long read(short _message_type, byte[] _buffer);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCustomMessageReader_new")] public static extern long LDKCustomMessageReader_new(LDKCustomMessageReader impl);
	// LDKCResult_COption_TypeZDecodeErrorZ CustomMessageReader_read LDKCustomMessageReader *NONNULL_PTR this_arg, uint16_t message_type, struct LDKu8slice buffer
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomMessageReader_read")] public static extern long CustomMessageReader_read(long _this_arg, short _message_type, byte[] _buffer);
	public interface LDKCustomMessageHandler {
		long handle_custom_message(long _msg, byte[] _sender_node_id);
		long[] get_and_clear_pending_msg();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCustomMessageHandler_new")] public static extern long LDKCustomMessageHandler_new(LDKCustomMessageHandler impl, LDKCustomMessageReader CustomMessageReader);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCustomMessageHandler_get_CustomMessageReader")] public static extern long LDKCustomMessageHandler_get_CustomMessageReader(long arg);
	// LDKCResult_NoneLightningErrorZ CustomMessageHandler_handle_custom_message LDKCustomMessageHandler *NONNULL_PTR this_arg, struct LDKType msg, struct LDKPublicKey sender_node_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomMessageHandler_handle_custom_message")] public static extern long CustomMessageHandler_handle_custom_message(long _this_arg, long _msg, byte[] _sender_node_id);
	// LDKCVec_C2Tuple_PublicKeyTypeZZ CustomMessageHandler_get_and_clear_pending_msg LDKCustomMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomMessageHandler_get_and_clear_pending_msg")] public static extern long[] CustomMessageHandler_get_and_clear_pending_msg(long _this_arg);
	public interface LDKCustomOnionMessageHandler {
		void handle_custom_message(long _msg);
		long read_custom_message(long _message_type, byte[] _buffer);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCustomOnionMessageHandler_new")] public static extern long LDKCustomOnionMessageHandler_new(LDKCustomOnionMessageHandler impl);
	// void CustomOnionMessageHandler_handle_custom_message LDKCustomOnionMessageHandler *NONNULL_PTR this_arg, struct LDKCustomOnionMessageContents msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomOnionMessageHandler_handle_custom_message")] public static extern void CustomOnionMessageHandler_handle_custom_message(long _this_arg, long _msg);
	// LDKCResult_COption_CustomOnionMessageContentsZDecodeErrorZ CustomOnionMessageHandler_read_custom_message LDKCustomOnionMessageHandler *NONNULL_PTR this_arg, uint64_t message_type, struct LDKu8slice buffer
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomOnionMessageHandler_read_custom_message")] public static extern long CustomOnionMessageHandler_read_custom_message(long _this_arg, long _message_type, byte[] _buffer);
	public interface LDKSocketDescriptor {
		long send_data(byte[] _data, bool _resume_read);
		void disconnect_socket();
		bool eq(long _other_arg);
		long hash();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSocketDescriptor_new")] public static extern long LDKSocketDescriptor_new(LDKSocketDescriptor impl);
	// uintptr_t SocketDescriptor_send_data LDKSocketDescriptor *NONNULL_PTR this_arg, struct LDKu8slice data, bool resume_read
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketDescriptor_send_data")] public static extern long SocketDescriptor_send_data(long _this_arg, byte[] _data, bool _resume_read);
	// void SocketDescriptor_disconnect_socket LDKSocketDescriptor *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketDescriptor_disconnect_socket")] public static extern void SocketDescriptor_disconnect_socket(long _this_arg);
	// uint64_t SocketDescriptor_hash LDKSocketDescriptor *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketDescriptor_hash")] public static extern long SocketDescriptor_hash(long _this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEffectiveCapacity_ty_from_ptr")] public static extern long LDKEffectiveCapacity_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEffectiveCapacity_ExactLiquidity_get_liquidity_msat")] public static extern long LDKEffectiveCapacity_ExactLiquidity_get_liquidity_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEffectiveCapacity_MaximumHTLC_get_amount_msat")] public static extern long LDKEffectiveCapacity_MaximumHTLC_get_amount_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEffectiveCapacity_Total_get_capacity_msat")] public static extern long LDKEffectiveCapacity_Total_get_capacity_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEffectiveCapacity_Total_get_htlc_maximum_msat")] public static extern long LDKEffectiveCapacity_Total_get_htlc_maximum_msat(long ptr);
	public interface LDKRouter {
		long find_route(byte[] _payer, long _route_params, long[] _first_hops, long _inflight_htlcs);
		long find_route_with_id(byte[] _payer, long _route_params, long[] _first_hops, long _inflight_htlcs, byte[] __payment_hash, byte[] __payment_id);
		void notify_payment_path_failed(long[] _path, long _short_channel_id);
		void notify_payment_path_successful(long[] _path);
		void notify_payment_probe_successful(long[] _path);
		void notify_payment_probe_failed(long[] _path, long _short_channel_id);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRouter_new")] public static extern long LDKRouter_new(LDKRouter impl);
	// LDKCResult_RouteLightningErrorZ Router_find_route LDKRouter *NONNULL_PTR this_arg, struct LDKPublicKey payer, const struct LDKRouteParameters *NONNULL_PTR route_params, struct LDKCVec_ChannelDetailsZ *first_hops, struct LDKInFlightHtlcs inflight_htlcs
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Router_find_route")] public static extern long Router_find_route(long _this_arg, byte[] _payer, long _route_params, long[] _first_hops, long _inflight_htlcs);
	// LDKCResult_RouteLightningErrorZ Router_find_route_with_id LDKRouter *NONNULL_PTR this_arg, struct LDKPublicKey payer, const struct LDKRouteParameters *NONNULL_PTR route_params, struct LDKCVec_ChannelDetailsZ *first_hops, struct LDKInFlightHtlcs inflight_htlcs, struct LDKThirtyTwoBytes _payment_hash, struct LDKThirtyTwoBytes _payment_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Router_find_route_with_id")] public static extern long Router_find_route_with_id(long _this_arg, byte[] _payer, long _route_params, long[] _first_hops, long _inflight_htlcs, byte[] __payment_hash, byte[] __payment_id);
	// void Router_notify_payment_path_failed LDKRouter *NONNULL_PTR this_arg, struct LDKCVec_RouteHopZ path, uint64_t short_channel_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Router_notify_payment_path_failed")] public static extern void Router_notify_payment_path_failed(long _this_arg, long[] _path, long _short_channel_id);
	// void Router_notify_payment_path_successful LDKRouter *NONNULL_PTR this_arg, struct LDKCVec_RouteHopZ path
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Router_notify_payment_path_successful")] public static extern void Router_notify_payment_path_successful(long _this_arg, long[] _path);
	// void Router_notify_payment_probe_successful LDKRouter *NONNULL_PTR this_arg, struct LDKCVec_RouteHopZ path
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Router_notify_payment_probe_successful")] public static extern void Router_notify_payment_probe_successful(long _this_arg, long[] _path);
	// void Router_notify_payment_probe_failed LDKRouter *NONNULL_PTR this_arg, struct LDKCVec_RouteHopZ path, uint64_t short_channel_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Router_notify_payment_probe_failed")] public static extern void Router_notify_payment_probe_failed(long _this_arg, long[] _path, long _short_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKDestination_ty_from_ptr")] public static extern long LDKDestination_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKDestination_Node_get_node")] public static extern byte[] LDKDestination_Node_get_node(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKDestination_BlindedPath_get_blinded_path")] public static extern long LDKDestination_BlindedPath_get_blinded_path(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOnionMessageContents_ty_from_ptr")] public static extern long LDKOnionMessageContents_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOnionMessageContents_Custom_get_custom")] public static extern long LDKOnionMessageContents_Custom_get_custom(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKGossipSync_ty_from_ptr")] public static extern long LDKGossipSync_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKGossipSync_P2P_get_p2p")] public static extern long LDKGossipSync_P2P_get_p2p(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKGossipSync_Rapid_get_rapid")] public static extern long LDKGossipSync_Rapid_get_rapid(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFallback_ty_from_ptr")] public static extern long LDKFallback_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFallback_SegWitProgram_get_version")] public static extern byte LDKFallback_SegWitProgram_get_version(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFallback_SegWitProgram_get_program")] public static extern byte[] LDKFallback_SegWitProgram_get_program(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFallback_PubKeyHash_get_pub_key_hash")] public static extern byte[] LDKFallback_PubKeyHash_get_pub_key_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFallback_ScriptHash_get_script_hash")] public static extern byte[] LDKFallback_ScriptHash_get_script_hash(long ptr);
	public interface LDKPayer {
		byte[] node_id();
		long[] first_hops();
		long send_payment(long _route, byte[] _payment_hash, byte[] _payment_secret, byte[] _payment_id);
		long send_spontaneous_payment(long _route, byte[] _payment_preimage, byte[] _payment_id);
		long retry_payment(long _route, byte[] _payment_id);
		void abandon_payment(byte[] _payment_id);
		long inflight_htlcs();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPayer_new")] public static extern long LDKPayer_new(LDKPayer impl);
	// LDKPublicKey Payer_node_id LDKPayer *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Payer_node_id")] public static extern byte[] Payer_node_id(long _this_arg);
	// LDKCVec_ChannelDetailsZ Payer_first_hops LDKPayer *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Payer_first_hops")] public static extern long[] Payer_first_hops(long _this_arg);
	// LDKCResult_NonePaymentSendFailureZ Payer_send_payment LDKPayer *NONNULL_PTR this_arg, const struct LDKRoute *NONNULL_PTR route, struct LDKThirtyTwoBytes payment_hash, struct LDKThirtyTwoBytes payment_secret, struct LDKThirtyTwoBytes payment_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Payer_send_payment")] public static extern long Payer_send_payment(long _this_arg, long _route, byte[] _payment_hash, byte[] _payment_secret, byte[] _payment_id);
	// LDKCResult_NonePaymentSendFailureZ Payer_send_spontaneous_payment LDKPayer *NONNULL_PTR this_arg, const struct LDKRoute *NONNULL_PTR route, struct LDKThirtyTwoBytes payment_preimage, struct LDKThirtyTwoBytes payment_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Payer_send_spontaneous_payment")] public static extern long Payer_send_spontaneous_payment(long _this_arg, long _route, byte[] _payment_preimage, byte[] _payment_id);
	// LDKCResult_NonePaymentSendFailureZ Payer_retry_payment LDKPayer *NONNULL_PTR this_arg, const struct LDKRoute *NONNULL_PTR route, struct LDKThirtyTwoBytes payment_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Payer_retry_payment")] public static extern long Payer_retry_payment(long _this_arg, long _route, byte[] _payment_id);
	// void Payer_abandon_payment LDKPayer *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes payment_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Payer_abandon_payment")] public static extern void Payer_abandon_payment(long _this_arg, byte[] _payment_id);
	// LDKInFlightHtlcs Payer_inflight_htlcs LDKPayer *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Payer_inflight_htlcs")] public static extern long Payer_inflight_htlcs(long _this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRetry_ty_from_ptr")] public static extern long LDKRetry_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRetry_Attempts_get_attempts")] public static extern long LDKRetry_Attempts_get_attempts(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRetry_Timeout_get_timeout")] public static extern long LDKRetry_Timeout_get_timeout(long ptr);
	// struct LDKStr _ldk_get_compiled_version(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK__ldk_get_compiled_version")] public static extern string _ldk_get_compiled_version();
	// struct LDKStr _ldk_c_bindings_get_compiled_version(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK__ldk_c_bindings_get_compiled_version")] public static extern string _ldk_c_bindings_get_compiled_version();
	// struct LDKSixteenBytes U128_le_bytes(struct LDKU128 val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_U128_le_bytes")] public static extern byte[] U128_le_bytes(byte[] _val);
	// struct LDKU128 U128_new(struct LDKSixteenBytes le_bytes);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_U128_new")] public static extern byte[] U128_new(byte[] _le_bytes);
	// struct LDKBigEndianScalar BigEndianScalar_new(struct LDKThirtyTwoBytes big_endian_bytes);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigEndianScalar_new")] public static extern long BigEndianScalar_new(byte[] _big_endian_bytes);
	// uint64_t Bech32Error_clone_ptr(LDKBech32Error *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bech32Error_clone_ptr")] public static extern long Bech32Error_clone_ptr(long _arg);
	// struct LDKBech32Error Bech32Error_clone(const struct LDKBech32Error *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bech32Error_clone")] public static extern long Bech32Error_clone(long _orig);
	// void Bech32Error_free(struct LDKBech32Error o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bech32Error_free")] public static extern void Bech32Error_free(long _o);
	// void Transaction_free(struct LDKTransaction _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Transaction_free")] public static extern void Transaction_free(byte[] __res);
	// void Witness_free(struct LDKWitness _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Witness_free")] public static extern void Witness_free(byte[] __res);
	// struct LDKTxOut TxOut_new(struct LDKCVec_u8Z script_pubkey, uint64_t value);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxOut_new")] public static extern long TxOut_new(byte[] _script_pubkey, long _value);
	// void TxOut_free(struct LDKTxOut _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxOut_free")] public static extern void TxOut_free(long __res);
	// uint64_t TxOut_clone_ptr(LDKTxOut *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxOut_clone_ptr")] public static extern long TxOut_clone_ptr(long _arg);
	// struct LDKTxOut TxOut_clone(const struct LDKTxOut *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxOut_clone")] public static extern long TxOut_clone(long _orig);
	// void Str_free(struct LDKStr _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Str_free")] public static extern void Str_free(string __res);
	// struct LDKCOption_HTLCClaimZ COption_HTLCClaimZ_some(enum LDKHTLCClaim o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_HTLCClaimZ_some")] public static extern long COption_HTLCClaimZ_some(HTLCClaim _o);
	// struct LDKCOption_HTLCClaimZ COption_HTLCClaimZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_HTLCClaimZ_none")] public static extern long COption_HTLCClaimZ_none();
	// void COption_HTLCClaimZ_free(struct LDKCOption_HTLCClaimZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_HTLCClaimZ_free")] public static extern void COption_HTLCClaimZ_free(long __res);
	// struct LDKCResult_NoneNoneZ CResult_NoneNoneZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneNoneZ_ok")] public static extern long CResult_NoneNoneZ_ok();
	// struct LDKCResult_NoneNoneZ CResult_NoneNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneNoneZ_err")] public static extern long CResult_NoneNoneZ_err();
	// bool CResult_NoneNoneZ_is_ok(const struct LDKCResult_NoneNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneNoneZ_is_ok")] public static extern bool CResult_NoneNoneZ_is_ok(long _o);
	// void CResult_NoneNoneZ_free(struct LDKCResult_NoneNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneNoneZ_free")] public static extern void CResult_NoneNoneZ_free(long __res);
	// uint64_t CResult_NoneNoneZ_clone_ptr(LDKCResult_NoneNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneNoneZ_clone_ptr")] public static extern long CResult_NoneNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_NoneNoneZ CResult_NoneNoneZ_clone(const struct LDKCResult_NoneNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneNoneZ_clone")] public static extern long CResult_NoneNoneZ_clone(long _orig);
	// struct LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ CResult_CounterpartyCommitmentSecretsDecodeErrorZ_ok(struct LDKCounterpartyCommitmentSecrets o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyCommitmentSecretsDecodeErrorZ_ok")] public static extern long CResult_CounterpartyCommitmentSecretsDecodeErrorZ_ok(long _o);
	// struct LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ CResult_CounterpartyCommitmentSecretsDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyCommitmentSecretsDecodeErrorZ_err")] public static extern long CResult_CounterpartyCommitmentSecretsDecodeErrorZ_err(long _e);
	// bool CResult_CounterpartyCommitmentSecretsDecodeErrorZ_is_ok(const struct LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyCommitmentSecretsDecodeErrorZ_is_ok")] public static extern bool CResult_CounterpartyCommitmentSecretsDecodeErrorZ_is_ok(long _o);
	// void CResult_CounterpartyCommitmentSecretsDecodeErrorZ_free(struct LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyCommitmentSecretsDecodeErrorZ_free")] public static extern void CResult_CounterpartyCommitmentSecretsDecodeErrorZ_free(long __res);
	// uint64_t CResult_CounterpartyCommitmentSecretsDecodeErrorZ_clone_ptr(LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyCommitmentSecretsDecodeErrorZ_clone_ptr")] public static extern long CResult_CounterpartyCommitmentSecretsDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ CResult_CounterpartyCommitmentSecretsDecodeErrorZ_clone(const struct LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyCommitmentSecretsDecodeErrorZ_clone")] public static extern long CResult_CounterpartyCommitmentSecretsDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_TxCreationKeysDecodeErrorZ CResult_TxCreationKeysDecodeErrorZ_ok(struct LDKTxCreationKeys o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCreationKeysDecodeErrorZ_ok")] public static extern long CResult_TxCreationKeysDecodeErrorZ_ok(long _o);
	// struct LDKCResult_TxCreationKeysDecodeErrorZ CResult_TxCreationKeysDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCreationKeysDecodeErrorZ_err")] public static extern long CResult_TxCreationKeysDecodeErrorZ_err(long _e);
	// bool CResult_TxCreationKeysDecodeErrorZ_is_ok(const struct LDKCResult_TxCreationKeysDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCreationKeysDecodeErrorZ_is_ok")] public static extern bool CResult_TxCreationKeysDecodeErrorZ_is_ok(long _o);
	// void CResult_TxCreationKeysDecodeErrorZ_free(struct LDKCResult_TxCreationKeysDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCreationKeysDecodeErrorZ_free")] public static extern void CResult_TxCreationKeysDecodeErrorZ_free(long __res);
	// uint64_t CResult_TxCreationKeysDecodeErrorZ_clone_ptr(LDKCResult_TxCreationKeysDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCreationKeysDecodeErrorZ_clone_ptr")] public static extern long CResult_TxCreationKeysDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_TxCreationKeysDecodeErrorZ CResult_TxCreationKeysDecodeErrorZ_clone(const struct LDKCResult_TxCreationKeysDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCreationKeysDecodeErrorZ_clone")] public static extern long CResult_TxCreationKeysDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ChannelPublicKeysDecodeErrorZ CResult_ChannelPublicKeysDecodeErrorZ_ok(struct LDKChannelPublicKeys o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelPublicKeysDecodeErrorZ_ok")] public static extern long CResult_ChannelPublicKeysDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelPublicKeysDecodeErrorZ CResult_ChannelPublicKeysDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelPublicKeysDecodeErrorZ_err")] public static extern long CResult_ChannelPublicKeysDecodeErrorZ_err(long _e);
	// bool CResult_ChannelPublicKeysDecodeErrorZ_is_ok(const struct LDKCResult_ChannelPublicKeysDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelPublicKeysDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelPublicKeysDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelPublicKeysDecodeErrorZ_free(struct LDKCResult_ChannelPublicKeysDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelPublicKeysDecodeErrorZ_free")] public static extern void CResult_ChannelPublicKeysDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelPublicKeysDecodeErrorZ_clone_ptr(LDKCResult_ChannelPublicKeysDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelPublicKeysDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelPublicKeysDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelPublicKeysDecodeErrorZ CResult_ChannelPublicKeysDecodeErrorZ_clone(const struct LDKCResult_ChannelPublicKeysDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelPublicKeysDecodeErrorZ_clone")] public static extern long CResult_ChannelPublicKeysDecodeErrorZ_clone(long _orig);
	// struct LDKCOption_u32Z COption_u32Z_some(uint32_t o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u32Z_some")] public static extern long COption_u32Z_some(int _o);
	// struct LDKCOption_u32Z COption_u32Z_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u32Z_none")] public static extern long COption_u32Z_none();
	// void COption_u32Z_free(struct LDKCOption_u32Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u32Z_free")] public static extern void COption_u32Z_free(long __res);
	// uint64_t COption_u32Z_clone_ptr(LDKCOption_u32Z *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u32Z_clone_ptr")] public static extern long COption_u32Z_clone_ptr(long _arg);
	// struct LDKCOption_u32Z COption_u32Z_clone(const struct LDKCOption_u32Z *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u32Z_clone")] public static extern long COption_u32Z_clone(long _orig);
	// struct LDKCResult_HTLCOutputInCommitmentDecodeErrorZ CResult_HTLCOutputInCommitmentDecodeErrorZ_ok(struct LDKHTLCOutputInCommitment o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCOutputInCommitmentDecodeErrorZ_ok")] public static extern long CResult_HTLCOutputInCommitmentDecodeErrorZ_ok(long _o);
	// struct LDKCResult_HTLCOutputInCommitmentDecodeErrorZ CResult_HTLCOutputInCommitmentDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCOutputInCommitmentDecodeErrorZ_err")] public static extern long CResult_HTLCOutputInCommitmentDecodeErrorZ_err(long _e);
	// bool CResult_HTLCOutputInCommitmentDecodeErrorZ_is_ok(const struct LDKCResult_HTLCOutputInCommitmentDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCOutputInCommitmentDecodeErrorZ_is_ok")] public static extern bool CResult_HTLCOutputInCommitmentDecodeErrorZ_is_ok(long _o);
	// void CResult_HTLCOutputInCommitmentDecodeErrorZ_free(struct LDKCResult_HTLCOutputInCommitmentDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCOutputInCommitmentDecodeErrorZ_free")] public static extern void CResult_HTLCOutputInCommitmentDecodeErrorZ_free(long __res);
	// uint64_t CResult_HTLCOutputInCommitmentDecodeErrorZ_clone_ptr(LDKCResult_HTLCOutputInCommitmentDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCOutputInCommitmentDecodeErrorZ_clone_ptr")] public static extern long CResult_HTLCOutputInCommitmentDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_HTLCOutputInCommitmentDecodeErrorZ CResult_HTLCOutputInCommitmentDecodeErrorZ_clone(const struct LDKCResult_HTLCOutputInCommitmentDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCOutputInCommitmentDecodeErrorZ_clone")] public static extern long CResult_HTLCOutputInCommitmentDecodeErrorZ_clone(long _orig);
	// enum LDKCOption_NoneZ COption_NoneZ_some(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NoneZ_some")] public static extern COption_NoneZ COption_NoneZ_some();
	// enum LDKCOption_NoneZ COption_NoneZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NoneZ_none")] public static extern COption_NoneZ COption_NoneZ_none();
	// void COption_NoneZ_free(enum LDKCOption_NoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NoneZ_free")] public static extern void COption_NoneZ_free(COption_NoneZ __res);
	// struct LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_ok(struct LDKCounterpartyChannelTransactionParameters o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_ok")] public static extern long CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_ok(long _o);
	// struct LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_err")] public static extern long CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_err(long _e);
	// bool CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_is_ok(const struct LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_is_ok")] public static extern bool CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_is_ok(long _o);
	// void CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_free(struct LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_free")] public static extern void CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_free(long __res);
	// uint64_t CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_clone_ptr(LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_clone_ptr")] public static extern long CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_clone(const struct LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_clone")] public static extern long CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ChannelTransactionParametersDecodeErrorZ CResult_ChannelTransactionParametersDecodeErrorZ_ok(struct LDKChannelTransactionParameters o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTransactionParametersDecodeErrorZ_ok")] public static extern long CResult_ChannelTransactionParametersDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelTransactionParametersDecodeErrorZ CResult_ChannelTransactionParametersDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTransactionParametersDecodeErrorZ_err")] public static extern long CResult_ChannelTransactionParametersDecodeErrorZ_err(long _e);
	// bool CResult_ChannelTransactionParametersDecodeErrorZ_is_ok(const struct LDKCResult_ChannelTransactionParametersDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTransactionParametersDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelTransactionParametersDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelTransactionParametersDecodeErrorZ_free(struct LDKCResult_ChannelTransactionParametersDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTransactionParametersDecodeErrorZ_free")] public static extern void CResult_ChannelTransactionParametersDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelTransactionParametersDecodeErrorZ_clone_ptr(LDKCResult_ChannelTransactionParametersDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTransactionParametersDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelTransactionParametersDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelTransactionParametersDecodeErrorZ CResult_ChannelTransactionParametersDecodeErrorZ_clone(const struct LDKCResult_ChannelTransactionParametersDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTransactionParametersDecodeErrorZ_clone")] public static extern long CResult_ChannelTransactionParametersDecodeErrorZ_clone(long _orig);
	// void CVec_SignatureZ_free(struct LDKCVec_SignatureZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_SignatureZ_free")] public static extern void CVec_SignatureZ_free(byte[][] __res);
	// struct LDKCResult_HolderCommitmentTransactionDecodeErrorZ CResult_HolderCommitmentTransactionDecodeErrorZ_ok(struct LDKHolderCommitmentTransaction o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HolderCommitmentTransactionDecodeErrorZ_ok")] public static extern long CResult_HolderCommitmentTransactionDecodeErrorZ_ok(long _o);
	// struct LDKCResult_HolderCommitmentTransactionDecodeErrorZ CResult_HolderCommitmentTransactionDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HolderCommitmentTransactionDecodeErrorZ_err")] public static extern long CResult_HolderCommitmentTransactionDecodeErrorZ_err(long _e);
	// bool CResult_HolderCommitmentTransactionDecodeErrorZ_is_ok(const struct LDKCResult_HolderCommitmentTransactionDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HolderCommitmentTransactionDecodeErrorZ_is_ok")] public static extern bool CResult_HolderCommitmentTransactionDecodeErrorZ_is_ok(long _o);
	// void CResult_HolderCommitmentTransactionDecodeErrorZ_free(struct LDKCResult_HolderCommitmentTransactionDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HolderCommitmentTransactionDecodeErrorZ_free")] public static extern void CResult_HolderCommitmentTransactionDecodeErrorZ_free(long __res);
	// uint64_t CResult_HolderCommitmentTransactionDecodeErrorZ_clone_ptr(LDKCResult_HolderCommitmentTransactionDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HolderCommitmentTransactionDecodeErrorZ_clone_ptr")] public static extern long CResult_HolderCommitmentTransactionDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_HolderCommitmentTransactionDecodeErrorZ CResult_HolderCommitmentTransactionDecodeErrorZ_clone(const struct LDKCResult_HolderCommitmentTransactionDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HolderCommitmentTransactionDecodeErrorZ_clone")] public static extern long CResult_HolderCommitmentTransactionDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_BuiltCommitmentTransactionDecodeErrorZ CResult_BuiltCommitmentTransactionDecodeErrorZ_ok(struct LDKBuiltCommitmentTransaction o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BuiltCommitmentTransactionDecodeErrorZ_ok")] public static extern long CResult_BuiltCommitmentTransactionDecodeErrorZ_ok(long _o);
	// struct LDKCResult_BuiltCommitmentTransactionDecodeErrorZ CResult_BuiltCommitmentTransactionDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BuiltCommitmentTransactionDecodeErrorZ_err")] public static extern long CResult_BuiltCommitmentTransactionDecodeErrorZ_err(long _e);
	// bool CResult_BuiltCommitmentTransactionDecodeErrorZ_is_ok(const struct LDKCResult_BuiltCommitmentTransactionDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BuiltCommitmentTransactionDecodeErrorZ_is_ok")] public static extern bool CResult_BuiltCommitmentTransactionDecodeErrorZ_is_ok(long _o);
	// void CResult_BuiltCommitmentTransactionDecodeErrorZ_free(struct LDKCResult_BuiltCommitmentTransactionDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BuiltCommitmentTransactionDecodeErrorZ_free")] public static extern void CResult_BuiltCommitmentTransactionDecodeErrorZ_free(long __res);
	// uint64_t CResult_BuiltCommitmentTransactionDecodeErrorZ_clone_ptr(LDKCResult_BuiltCommitmentTransactionDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BuiltCommitmentTransactionDecodeErrorZ_clone_ptr")] public static extern long CResult_BuiltCommitmentTransactionDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_BuiltCommitmentTransactionDecodeErrorZ CResult_BuiltCommitmentTransactionDecodeErrorZ_clone(const struct LDKCResult_BuiltCommitmentTransactionDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BuiltCommitmentTransactionDecodeErrorZ_clone")] public static extern long CResult_BuiltCommitmentTransactionDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_TrustedClosingTransactionNoneZ CResult_TrustedClosingTransactionNoneZ_ok(struct LDKTrustedClosingTransaction o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedClosingTransactionNoneZ_ok")] public static extern long CResult_TrustedClosingTransactionNoneZ_ok(long _o);
	// struct LDKCResult_TrustedClosingTransactionNoneZ CResult_TrustedClosingTransactionNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedClosingTransactionNoneZ_err")] public static extern long CResult_TrustedClosingTransactionNoneZ_err();
	// bool CResult_TrustedClosingTransactionNoneZ_is_ok(const struct LDKCResult_TrustedClosingTransactionNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedClosingTransactionNoneZ_is_ok")] public static extern bool CResult_TrustedClosingTransactionNoneZ_is_ok(long _o);
	// void CResult_TrustedClosingTransactionNoneZ_free(struct LDKCResult_TrustedClosingTransactionNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedClosingTransactionNoneZ_free")] public static extern void CResult_TrustedClosingTransactionNoneZ_free(long __res);
	// struct LDKCResult_CommitmentTransactionDecodeErrorZ CResult_CommitmentTransactionDecodeErrorZ_ok(struct LDKCommitmentTransaction o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentTransactionDecodeErrorZ_ok")] public static extern long CResult_CommitmentTransactionDecodeErrorZ_ok(long _o);
	// struct LDKCResult_CommitmentTransactionDecodeErrorZ CResult_CommitmentTransactionDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentTransactionDecodeErrorZ_err")] public static extern long CResult_CommitmentTransactionDecodeErrorZ_err(long _e);
	// bool CResult_CommitmentTransactionDecodeErrorZ_is_ok(const struct LDKCResult_CommitmentTransactionDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentTransactionDecodeErrorZ_is_ok")] public static extern bool CResult_CommitmentTransactionDecodeErrorZ_is_ok(long _o);
	// void CResult_CommitmentTransactionDecodeErrorZ_free(struct LDKCResult_CommitmentTransactionDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentTransactionDecodeErrorZ_free")] public static extern void CResult_CommitmentTransactionDecodeErrorZ_free(long __res);
	// uint64_t CResult_CommitmentTransactionDecodeErrorZ_clone_ptr(LDKCResult_CommitmentTransactionDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentTransactionDecodeErrorZ_clone_ptr")] public static extern long CResult_CommitmentTransactionDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_CommitmentTransactionDecodeErrorZ CResult_CommitmentTransactionDecodeErrorZ_clone(const struct LDKCResult_CommitmentTransactionDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentTransactionDecodeErrorZ_clone")] public static extern long CResult_CommitmentTransactionDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_TrustedCommitmentTransactionNoneZ CResult_TrustedCommitmentTransactionNoneZ_ok(struct LDKTrustedCommitmentTransaction o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedCommitmentTransactionNoneZ_ok")] public static extern long CResult_TrustedCommitmentTransactionNoneZ_ok(long _o);
	// struct LDKCResult_TrustedCommitmentTransactionNoneZ CResult_TrustedCommitmentTransactionNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedCommitmentTransactionNoneZ_err")] public static extern long CResult_TrustedCommitmentTransactionNoneZ_err();
	// bool CResult_TrustedCommitmentTransactionNoneZ_is_ok(const struct LDKCResult_TrustedCommitmentTransactionNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedCommitmentTransactionNoneZ_is_ok")] public static extern bool CResult_TrustedCommitmentTransactionNoneZ_is_ok(long _o);
	// void CResult_TrustedCommitmentTransactionNoneZ_free(struct LDKCResult_TrustedCommitmentTransactionNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedCommitmentTransactionNoneZ_free")] public static extern void CResult_TrustedCommitmentTransactionNoneZ_free(long __res);
	// struct LDKCResult_CVec_SignatureZNoneZ CResult_CVec_SignatureZNoneZ_ok(struct LDKCVec_SignatureZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_SignatureZNoneZ_ok")] public static extern long CResult_CVec_SignatureZNoneZ_ok(byte[][] _o);
	// struct LDKCResult_CVec_SignatureZNoneZ CResult_CVec_SignatureZNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_SignatureZNoneZ_err")] public static extern long CResult_CVec_SignatureZNoneZ_err();
	// bool CResult_CVec_SignatureZNoneZ_is_ok(const struct LDKCResult_CVec_SignatureZNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_SignatureZNoneZ_is_ok")] public static extern bool CResult_CVec_SignatureZNoneZ_is_ok(long _o);
	// void CResult_CVec_SignatureZNoneZ_free(struct LDKCResult_CVec_SignatureZNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_SignatureZNoneZ_free")] public static extern void CResult_CVec_SignatureZNoneZ_free(long __res);
	// uint64_t CResult_CVec_SignatureZNoneZ_clone_ptr(LDKCResult_CVec_SignatureZNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_SignatureZNoneZ_clone_ptr")] public static extern long CResult_CVec_SignatureZNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_CVec_SignatureZNoneZ CResult_CVec_SignatureZNoneZ_clone(const struct LDKCResult_CVec_SignatureZNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_SignatureZNoneZ_clone")] public static extern long CResult_CVec_SignatureZNoneZ_clone(long _orig);
	// struct LDKCResult_ShutdownScriptDecodeErrorZ CResult_ShutdownScriptDecodeErrorZ_ok(struct LDKShutdownScript o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptDecodeErrorZ_ok")] public static extern long CResult_ShutdownScriptDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ShutdownScriptDecodeErrorZ CResult_ShutdownScriptDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptDecodeErrorZ_err")] public static extern long CResult_ShutdownScriptDecodeErrorZ_err(long _e);
	// bool CResult_ShutdownScriptDecodeErrorZ_is_ok(const struct LDKCResult_ShutdownScriptDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptDecodeErrorZ_is_ok")] public static extern bool CResult_ShutdownScriptDecodeErrorZ_is_ok(long _o);
	// void CResult_ShutdownScriptDecodeErrorZ_free(struct LDKCResult_ShutdownScriptDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptDecodeErrorZ_free")] public static extern void CResult_ShutdownScriptDecodeErrorZ_free(long __res);
	// uint64_t CResult_ShutdownScriptDecodeErrorZ_clone_ptr(LDKCResult_ShutdownScriptDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptDecodeErrorZ_clone_ptr")] public static extern long CResult_ShutdownScriptDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ShutdownScriptDecodeErrorZ CResult_ShutdownScriptDecodeErrorZ_clone(const struct LDKCResult_ShutdownScriptDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptDecodeErrorZ_clone")] public static extern long CResult_ShutdownScriptDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ShutdownScriptInvalidShutdownScriptZ CResult_ShutdownScriptInvalidShutdownScriptZ_ok(struct LDKShutdownScript o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptInvalidShutdownScriptZ_ok")] public static extern long CResult_ShutdownScriptInvalidShutdownScriptZ_ok(long _o);
	// struct LDKCResult_ShutdownScriptInvalidShutdownScriptZ CResult_ShutdownScriptInvalidShutdownScriptZ_err(struct LDKInvalidShutdownScript e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptInvalidShutdownScriptZ_err")] public static extern long CResult_ShutdownScriptInvalidShutdownScriptZ_err(long _e);
	// bool CResult_ShutdownScriptInvalidShutdownScriptZ_is_ok(const struct LDKCResult_ShutdownScriptInvalidShutdownScriptZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptInvalidShutdownScriptZ_is_ok")] public static extern bool CResult_ShutdownScriptInvalidShutdownScriptZ_is_ok(long _o);
	// void CResult_ShutdownScriptInvalidShutdownScriptZ_free(struct LDKCResult_ShutdownScriptInvalidShutdownScriptZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptInvalidShutdownScriptZ_free")] public static extern void CResult_ShutdownScriptInvalidShutdownScriptZ_free(long __res);
	// uint64_t CResult_ShutdownScriptInvalidShutdownScriptZ_clone_ptr(LDKCResult_ShutdownScriptInvalidShutdownScriptZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptInvalidShutdownScriptZ_clone_ptr")] public static extern long CResult_ShutdownScriptInvalidShutdownScriptZ_clone_ptr(long _arg);
	// struct LDKCResult_ShutdownScriptInvalidShutdownScriptZ CResult_ShutdownScriptInvalidShutdownScriptZ_clone(const struct LDKCResult_ShutdownScriptInvalidShutdownScriptZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptInvalidShutdownScriptZ_clone")] public static extern long CResult_ShutdownScriptInvalidShutdownScriptZ_clone(long _orig);
	// void CVec_PublicKeyZ_free(struct LDKCVec_PublicKeyZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_PublicKeyZ_free")] public static extern void CVec_PublicKeyZ_free(byte[][] __res);
	// struct LDKCResult_BlindedPathNoneZ CResult_BlindedPathNoneZ_ok(struct LDKBlindedPath o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathNoneZ_ok")] public static extern long CResult_BlindedPathNoneZ_ok(long _o);
	// struct LDKCResult_BlindedPathNoneZ CResult_BlindedPathNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathNoneZ_err")] public static extern long CResult_BlindedPathNoneZ_err();
	// bool CResult_BlindedPathNoneZ_is_ok(const struct LDKCResult_BlindedPathNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathNoneZ_is_ok")] public static extern bool CResult_BlindedPathNoneZ_is_ok(long _o);
	// void CResult_BlindedPathNoneZ_free(struct LDKCResult_BlindedPathNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathNoneZ_free")] public static extern void CResult_BlindedPathNoneZ_free(long __res);
	// uint64_t CResult_BlindedPathNoneZ_clone_ptr(LDKCResult_BlindedPathNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathNoneZ_clone_ptr")] public static extern long CResult_BlindedPathNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_BlindedPathNoneZ CResult_BlindedPathNoneZ_clone(const struct LDKCResult_BlindedPathNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathNoneZ_clone")] public static extern long CResult_BlindedPathNoneZ_clone(long _orig);
	// struct LDKCResult_BlindedPathDecodeErrorZ CResult_BlindedPathDecodeErrorZ_ok(struct LDKBlindedPath o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathDecodeErrorZ_ok")] public static extern long CResult_BlindedPathDecodeErrorZ_ok(long _o);
	// struct LDKCResult_BlindedPathDecodeErrorZ CResult_BlindedPathDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathDecodeErrorZ_err")] public static extern long CResult_BlindedPathDecodeErrorZ_err(long _e);
	// bool CResult_BlindedPathDecodeErrorZ_is_ok(const struct LDKCResult_BlindedPathDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathDecodeErrorZ_is_ok")] public static extern bool CResult_BlindedPathDecodeErrorZ_is_ok(long _o);
	// void CResult_BlindedPathDecodeErrorZ_free(struct LDKCResult_BlindedPathDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathDecodeErrorZ_free")] public static extern void CResult_BlindedPathDecodeErrorZ_free(long __res);
	// uint64_t CResult_BlindedPathDecodeErrorZ_clone_ptr(LDKCResult_BlindedPathDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathDecodeErrorZ_clone_ptr")] public static extern long CResult_BlindedPathDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_BlindedPathDecodeErrorZ CResult_BlindedPathDecodeErrorZ_clone(const struct LDKCResult_BlindedPathDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathDecodeErrorZ_clone")] public static extern long CResult_BlindedPathDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_BlindedHopDecodeErrorZ CResult_BlindedHopDecodeErrorZ_ok(struct LDKBlindedHop o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopDecodeErrorZ_ok")] public static extern long CResult_BlindedHopDecodeErrorZ_ok(long _o);
	// struct LDKCResult_BlindedHopDecodeErrorZ CResult_BlindedHopDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopDecodeErrorZ_err")] public static extern long CResult_BlindedHopDecodeErrorZ_err(long _e);
	// bool CResult_BlindedHopDecodeErrorZ_is_ok(const struct LDKCResult_BlindedHopDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopDecodeErrorZ_is_ok")] public static extern bool CResult_BlindedHopDecodeErrorZ_is_ok(long _o);
	// void CResult_BlindedHopDecodeErrorZ_free(struct LDKCResult_BlindedHopDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopDecodeErrorZ_free")] public static extern void CResult_BlindedHopDecodeErrorZ_free(long __res);
	// uint64_t CResult_BlindedHopDecodeErrorZ_clone_ptr(LDKCResult_BlindedHopDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopDecodeErrorZ_clone_ptr")] public static extern long CResult_BlindedHopDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_BlindedHopDecodeErrorZ CResult_BlindedHopDecodeErrorZ_clone(const struct LDKCResult_BlindedHopDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopDecodeErrorZ_clone")] public static extern long CResult_BlindedHopDecodeErrorZ_clone(long _orig);
	// struct LDKCOption_WriteableScoreZ COption_WriteableScoreZ_some(struct LDKWriteableScore o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_WriteableScoreZ_some")] public static extern long COption_WriteableScoreZ_some(long _o);
	// struct LDKCOption_WriteableScoreZ COption_WriteableScoreZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_WriteableScoreZ_none")] public static extern long COption_WriteableScoreZ_none();
	// void COption_WriteableScoreZ_free(struct LDKCOption_WriteableScoreZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_WriteableScoreZ_free")] public static extern void COption_WriteableScoreZ_free(long __res);
	// struct LDKCResult_NoneErrorZ CResult_NoneErrorZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneErrorZ_ok")] public static extern long CResult_NoneErrorZ_ok();
	// struct LDKCResult_NoneErrorZ CResult_NoneErrorZ_err(enum LDKIOError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneErrorZ_err")] public static extern long CResult_NoneErrorZ_err(IOError _e);
	// bool CResult_NoneErrorZ_is_ok(const struct LDKCResult_NoneErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneErrorZ_is_ok")] public static extern bool CResult_NoneErrorZ_is_ok(long _o);
	// void CResult_NoneErrorZ_free(struct LDKCResult_NoneErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneErrorZ_free")] public static extern void CResult_NoneErrorZ_free(long __res);
	// uint64_t CResult_NoneErrorZ_clone_ptr(LDKCResult_NoneErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneErrorZ_clone_ptr")] public static extern long CResult_NoneErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_NoneErrorZ CResult_NoneErrorZ_clone(const struct LDKCResult_NoneErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneErrorZ_clone")] public static extern long CResult_NoneErrorZ_clone(long _orig);
	// void CVec_ChannelDetailsZ_free(struct LDKCVec_ChannelDetailsZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_ChannelDetailsZ_free")] public static extern void CVec_ChannelDetailsZ_free(long[] __res);
	// struct LDKCResult_RouteLightningErrorZ CResult_RouteLightningErrorZ_ok(struct LDKRoute o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteLightningErrorZ_ok")] public static extern long CResult_RouteLightningErrorZ_ok(long _o);
	// struct LDKCResult_RouteLightningErrorZ CResult_RouteLightningErrorZ_err(struct LDKLightningError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteLightningErrorZ_err")] public static extern long CResult_RouteLightningErrorZ_err(long _e);
	// bool CResult_RouteLightningErrorZ_is_ok(const struct LDKCResult_RouteLightningErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteLightningErrorZ_is_ok")] public static extern bool CResult_RouteLightningErrorZ_is_ok(long _o);
	// void CResult_RouteLightningErrorZ_free(struct LDKCResult_RouteLightningErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteLightningErrorZ_free")] public static extern void CResult_RouteLightningErrorZ_free(long __res);
	// uint64_t CResult_RouteLightningErrorZ_clone_ptr(LDKCResult_RouteLightningErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteLightningErrorZ_clone_ptr")] public static extern long CResult_RouteLightningErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_RouteLightningErrorZ CResult_RouteLightningErrorZ_clone(const struct LDKCResult_RouteLightningErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteLightningErrorZ_clone")] public static extern long CResult_RouteLightningErrorZ_clone(long _orig);
	// void CVec_RouteHopZ_free(struct LDKCVec_RouteHopZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_RouteHopZ_free")] public static extern void CVec_RouteHopZ_free(long[] __res);
	// struct LDKCOption_u64Z COption_u64Z_some(uint64_t o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u64Z_some")] public static extern long COption_u64Z_some(long _o);
	// struct LDKCOption_u64Z COption_u64Z_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u64Z_none")] public static extern long COption_u64Z_none();
	// void COption_u64Z_free(struct LDKCOption_u64Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u64Z_free")] public static extern void COption_u64Z_free(long __res);
	// uint64_t COption_u64Z_clone_ptr(LDKCOption_u64Z *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u64Z_clone_ptr")] public static extern long COption_u64Z_clone_ptr(long _arg);
	// struct LDKCOption_u64Z COption_u64Z_clone(const struct LDKCOption_u64Z *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u64Z_clone")] public static extern long COption_u64Z_clone(long _orig);
	// struct LDKCResult_InFlightHtlcsDecodeErrorZ CResult_InFlightHtlcsDecodeErrorZ_ok(struct LDKInFlightHtlcs o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InFlightHtlcsDecodeErrorZ_ok")] public static extern long CResult_InFlightHtlcsDecodeErrorZ_ok(long _o);
	// struct LDKCResult_InFlightHtlcsDecodeErrorZ CResult_InFlightHtlcsDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InFlightHtlcsDecodeErrorZ_err")] public static extern long CResult_InFlightHtlcsDecodeErrorZ_err(long _e);
	// bool CResult_InFlightHtlcsDecodeErrorZ_is_ok(const struct LDKCResult_InFlightHtlcsDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InFlightHtlcsDecodeErrorZ_is_ok")] public static extern bool CResult_InFlightHtlcsDecodeErrorZ_is_ok(long _o);
	// void CResult_InFlightHtlcsDecodeErrorZ_free(struct LDKCResult_InFlightHtlcsDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InFlightHtlcsDecodeErrorZ_free")] public static extern void CResult_InFlightHtlcsDecodeErrorZ_free(long __res);
	// uint64_t CResult_InFlightHtlcsDecodeErrorZ_clone_ptr(LDKCResult_InFlightHtlcsDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InFlightHtlcsDecodeErrorZ_clone_ptr")] public static extern long CResult_InFlightHtlcsDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_InFlightHtlcsDecodeErrorZ CResult_InFlightHtlcsDecodeErrorZ_clone(const struct LDKCResult_InFlightHtlcsDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InFlightHtlcsDecodeErrorZ_clone")] public static extern long CResult_InFlightHtlcsDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_RouteHopDecodeErrorZ CResult_RouteHopDecodeErrorZ_ok(struct LDKRouteHop o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHopDecodeErrorZ_ok")] public static extern long CResult_RouteHopDecodeErrorZ_ok(long _o);
	// struct LDKCResult_RouteHopDecodeErrorZ CResult_RouteHopDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHopDecodeErrorZ_err")] public static extern long CResult_RouteHopDecodeErrorZ_err(long _e);
	// bool CResult_RouteHopDecodeErrorZ_is_ok(const struct LDKCResult_RouteHopDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHopDecodeErrorZ_is_ok")] public static extern bool CResult_RouteHopDecodeErrorZ_is_ok(long _o);
	// void CResult_RouteHopDecodeErrorZ_free(struct LDKCResult_RouteHopDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHopDecodeErrorZ_free")] public static extern void CResult_RouteHopDecodeErrorZ_free(long __res);
	// uint64_t CResult_RouteHopDecodeErrorZ_clone_ptr(LDKCResult_RouteHopDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHopDecodeErrorZ_clone_ptr")] public static extern long CResult_RouteHopDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_RouteHopDecodeErrorZ CResult_RouteHopDecodeErrorZ_clone(const struct LDKCResult_RouteHopDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHopDecodeErrorZ_clone")] public static extern long CResult_RouteHopDecodeErrorZ_clone(long _orig);
	// void CVec_CVec_RouteHopZZ_free(struct LDKCVec_CVec_RouteHopZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_CVec_RouteHopZZ_free")] public static extern void CVec_CVec_RouteHopZZ_free(long[][] __res);
	// struct LDKCResult_RouteDecodeErrorZ CResult_RouteDecodeErrorZ_ok(struct LDKRoute o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteDecodeErrorZ_ok")] public static extern long CResult_RouteDecodeErrorZ_ok(long _o);
	// struct LDKCResult_RouteDecodeErrorZ CResult_RouteDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteDecodeErrorZ_err")] public static extern long CResult_RouteDecodeErrorZ_err(long _e);
	// bool CResult_RouteDecodeErrorZ_is_ok(const struct LDKCResult_RouteDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteDecodeErrorZ_is_ok")] public static extern bool CResult_RouteDecodeErrorZ_is_ok(long _o);
	// void CResult_RouteDecodeErrorZ_free(struct LDKCResult_RouteDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteDecodeErrorZ_free")] public static extern void CResult_RouteDecodeErrorZ_free(long __res);
	// uint64_t CResult_RouteDecodeErrorZ_clone_ptr(LDKCResult_RouteDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteDecodeErrorZ_clone_ptr")] public static extern long CResult_RouteDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_RouteDecodeErrorZ CResult_RouteDecodeErrorZ_clone(const struct LDKCResult_RouteDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteDecodeErrorZ_clone")] public static extern long CResult_RouteDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_RouteParametersDecodeErrorZ CResult_RouteParametersDecodeErrorZ_ok(struct LDKRouteParameters o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteParametersDecodeErrorZ_ok")] public static extern long CResult_RouteParametersDecodeErrorZ_ok(long _o);
	// struct LDKCResult_RouteParametersDecodeErrorZ CResult_RouteParametersDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteParametersDecodeErrorZ_err")] public static extern long CResult_RouteParametersDecodeErrorZ_err(long _e);
	// bool CResult_RouteParametersDecodeErrorZ_is_ok(const struct LDKCResult_RouteParametersDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteParametersDecodeErrorZ_is_ok")] public static extern bool CResult_RouteParametersDecodeErrorZ_is_ok(long _o);
	// void CResult_RouteParametersDecodeErrorZ_free(struct LDKCResult_RouteParametersDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteParametersDecodeErrorZ_free")] public static extern void CResult_RouteParametersDecodeErrorZ_free(long __res);
	// uint64_t CResult_RouteParametersDecodeErrorZ_clone_ptr(LDKCResult_RouteParametersDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteParametersDecodeErrorZ_clone_ptr")] public static extern long CResult_RouteParametersDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_RouteParametersDecodeErrorZ CResult_RouteParametersDecodeErrorZ_clone(const struct LDKCResult_RouteParametersDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteParametersDecodeErrorZ_clone")] public static extern long CResult_RouteParametersDecodeErrorZ_clone(long _orig);
	// void CVec_RouteHintZ_free(struct LDKCVec_RouteHintZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_RouteHintZ_free")] public static extern void CVec_RouteHintZ_free(long[] __res);
	// void CVec_u64Z_free(struct LDKCVec_u64Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_u64Z_free")] public static extern void CVec_u64Z_free(long[] __res);
	// struct LDKCResult_PaymentParametersDecodeErrorZ CResult_PaymentParametersDecodeErrorZ_ok(struct LDKPaymentParameters o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentParametersDecodeErrorZ_ok")] public static extern long CResult_PaymentParametersDecodeErrorZ_ok(long _o);
	// struct LDKCResult_PaymentParametersDecodeErrorZ CResult_PaymentParametersDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentParametersDecodeErrorZ_err")] public static extern long CResult_PaymentParametersDecodeErrorZ_err(long _e);
	// bool CResult_PaymentParametersDecodeErrorZ_is_ok(const struct LDKCResult_PaymentParametersDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentParametersDecodeErrorZ_is_ok")] public static extern bool CResult_PaymentParametersDecodeErrorZ_is_ok(long _o);
	// void CResult_PaymentParametersDecodeErrorZ_free(struct LDKCResult_PaymentParametersDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentParametersDecodeErrorZ_free")] public static extern void CResult_PaymentParametersDecodeErrorZ_free(long __res);
	// uint64_t CResult_PaymentParametersDecodeErrorZ_clone_ptr(LDKCResult_PaymentParametersDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentParametersDecodeErrorZ_clone_ptr")] public static extern long CResult_PaymentParametersDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_PaymentParametersDecodeErrorZ CResult_PaymentParametersDecodeErrorZ_clone(const struct LDKCResult_PaymentParametersDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentParametersDecodeErrorZ_clone")] public static extern long CResult_PaymentParametersDecodeErrorZ_clone(long _orig);
	// void CVec_RouteHintHopZ_free(struct LDKCVec_RouteHintHopZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_RouteHintHopZ_free")] public static extern void CVec_RouteHintHopZ_free(long[] __res);
	// struct LDKCResult_RouteHintDecodeErrorZ CResult_RouteHintDecodeErrorZ_ok(struct LDKRouteHint o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintDecodeErrorZ_ok")] public static extern long CResult_RouteHintDecodeErrorZ_ok(long _o);
	// struct LDKCResult_RouteHintDecodeErrorZ CResult_RouteHintDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintDecodeErrorZ_err")] public static extern long CResult_RouteHintDecodeErrorZ_err(long _e);
	// bool CResult_RouteHintDecodeErrorZ_is_ok(const struct LDKCResult_RouteHintDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintDecodeErrorZ_is_ok")] public static extern bool CResult_RouteHintDecodeErrorZ_is_ok(long _o);
	// void CResult_RouteHintDecodeErrorZ_free(struct LDKCResult_RouteHintDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintDecodeErrorZ_free")] public static extern void CResult_RouteHintDecodeErrorZ_free(long __res);
	// uint64_t CResult_RouteHintDecodeErrorZ_clone_ptr(LDKCResult_RouteHintDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintDecodeErrorZ_clone_ptr")] public static extern long CResult_RouteHintDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_RouteHintDecodeErrorZ CResult_RouteHintDecodeErrorZ_clone(const struct LDKCResult_RouteHintDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintDecodeErrorZ_clone")] public static extern long CResult_RouteHintDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_RouteHintHopDecodeErrorZ CResult_RouteHintHopDecodeErrorZ_ok(struct LDKRouteHintHop o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintHopDecodeErrorZ_ok")] public static extern long CResult_RouteHintHopDecodeErrorZ_ok(long _o);
	// struct LDKCResult_RouteHintHopDecodeErrorZ CResult_RouteHintHopDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintHopDecodeErrorZ_err")] public static extern long CResult_RouteHintHopDecodeErrorZ_err(long _e);
	// bool CResult_RouteHintHopDecodeErrorZ_is_ok(const struct LDKCResult_RouteHintHopDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintHopDecodeErrorZ_is_ok")] public static extern bool CResult_RouteHintHopDecodeErrorZ_is_ok(long _o);
	// void CResult_RouteHintHopDecodeErrorZ_free(struct LDKCResult_RouteHintHopDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintHopDecodeErrorZ_free")] public static extern void CResult_RouteHintHopDecodeErrorZ_free(long __res);
	// uint64_t CResult_RouteHintHopDecodeErrorZ_clone_ptr(LDKCResult_RouteHintHopDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintHopDecodeErrorZ_clone_ptr")] public static extern long CResult_RouteHintHopDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_RouteHintHopDecodeErrorZ CResult_RouteHintHopDecodeErrorZ_clone(const struct LDKCResult_RouteHintHopDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintHopDecodeErrorZ_clone")] public static extern long CResult_RouteHintHopDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_PaymentPurposeDecodeErrorZ CResult_PaymentPurposeDecodeErrorZ_ok(struct LDKPaymentPurpose o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPurposeDecodeErrorZ_ok")] public static extern long CResult_PaymentPurposeDecodeErrorZ_ok(long _o);
	// struct LDKCResult_PaymentPurposeDecodeErrorZ CResult_PaymentPurposeDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPurposeDecodeErrorZ_err")] public static extern long CResult_PaymentPurposeDecodeErrorZ_err(long _e);
	// bool CResult_PaymentPurposeDecodeErrorZ_is_ok(const struct LDKCResult_PaymentPurposeDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPurposeDecodeErrorZ_is_ok")] public static extern bool CResult_PaymentPurposeDecodeErrorZ_is_ok(long _o);
	// void CResult_PaymentPurposeDecodeErrorZ_free(struct LDKCResult_PaymentPurposeDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPurposeDecodeErrorZ_free")] public static extern void CResult_PaymentPurposeDecodeErrorZ_free(long __res);
	// uint64_t CResult_PaymentPurposeDecodeErrorZ_clone_ptr(LDKCResult_PaymentPurposeDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPurposeDecodeErrorZ_clone_ptr")] public static extern long CResult_PaymentPurposeDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_PaymentPurposeDecodeErrorZ CResult_PaymentPurposeDecodeErrorZ_clone(const struct LDKCResult_PaymentPurposeDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPurposeDecodeErrorZ_clone")] public static extern long CResult_PaymentPurposeDecodeErrorZ_clone(long _orig);
	// struct LDKCOption_ClosureReasonZ COption_ClosureReasonZ_some(struct LDKClosureReason o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ClosureReasonZ_some")] public static extern long COption_ClosureReasonZ_some(long _o);
	// struct LDKCOption_ClosureReasonZ COption_ClosureReasonZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ClosureReasonZ_none")] public static extern long COption_ClosureReasonZ_none();
	// void COption_ClosureReasonZ_free(struct LDKCOption_ClosureReasonZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ClosureReasonZ_free")] public static extern void COption_ClosureReasonZ_free(long __res);
	// uint64_t COption_ClosureReasonZ_clone_ptr(LDKCOption_ClosureReasonZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ClosureReasonZ_clone_ptr")] public static extern long COption_ClosureReasonZ_clone_ptr(long _arg);
	// struct LDKCOption_ClosureReasonZ COption_ClosureReasonZ_clone(const struct LDKCOption_ClosureReasonZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ClosureReasonZ_clone")] public static extern long COption_ClosureReasonZ_clone(long _orig);
	// struct LDKCResult_COption_ClosureReasonZDecodeErrorZ CResult_COption_ClosureReasonZDecodeErrorZ_ok(struct LDKCOption_ClosureReasonZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_ClosureReasonZDecodeErrorZ_ok")] public static extern long CResult_COption_ClosureReasonZDecodeErrorZ_ok(long _o);
	// struct LDKCResult_COption_ClosureReasonZDecodeErrorZ CResult_COption_ClosureReasonZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_ClosureReasonZDecodeErrorZ_err")] public static extern long CResult_COption_ClosureReasonZDecodeErrorZ_err(long _e);
	// bool CResult_COption_ClosureReasonZDecodeErrorZ_is_ok(const struct LDKCResult_COption_ClosureReasonZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_ClosureReasonZDecodeErrorZ_is_ok")] public static extern bool CResult_COption_ClosureReasonZDecodeErrorZ_is_ok(long _o);
	// void CResult_COption_ClosureReasonZDecodeErrorZ_free(struct LDKCResult_COption_ClosureReasonZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_ClosureReasonZDecodeErrorZ_free")] public static extern void CResult_COption_ClosureReasonZDecodeErrorZ_free(long __res);
	// uint64_t CResult_COption_ClosureReasonZDecodeErrorZ_clone_ptr(LDKCResult_COption_ClosureReasonZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_ClosureReasonZDecodeErrorZ_clone_ptr")] public static extern long CResult_COption_ClosureReasonZDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_COption_ClosureReasonZDecodeErrorZ CResult_COption_ClosureReasonZDecodeErrorZ_clone(const struct LDKCResult_COption_ClosureReasonZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_ClosureReasonZDecodeErrorZ_clone")] public static extern long CResult_COption_ClosureReasonZDecodeErrorZ_clone(long _orig);
	// struct LDKCOption_HTLCDestinationZ COption_HTLCDestinationZ_some(struct LDKHTLCDestination o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_HTLCDestinationZ_some")] public static extern long COption_HTLCDestinationZ_some(long _o);
	// struct LDKCOption_HTLCDestinationZ COption_HTLCDestinationZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_HTLCDestinationZ_none")] public static extern long COption_HTLCDestinationZ_none();
	// void COption_HTLCDestinationZ_free(struct LDKCOption_HTLCDestinationZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_HTLCDestinationZ_free")] public static extern void COption_HTLCDestinationZ_free(long __res);
	// uint64_t COption_HTLCDestinationZ_clone_ptr(LDKCOption_HTLCDestinationZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_HTLCDestinationZ_clone_ptr")] public static extern long COption_HTLCDestinationZ_clone_ptr(long _arg);
	// struct LDKCOption_HTLCDestinationZ COption_HTLCDestinationZ_clone(const struct LDKCOption_HTLCDestinationZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_HTLCDestinationZ_clone")] public static extern long COption_HTLCDestinationZ_clone(long _orig);
	// struct LDKCResult_COption_HTLCDestinationZDecodeErrorZ CResult_COption_HTLCDestinationZDecodeErrorZ_ok(struct LDKCOption_HTLCDestinationZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_HTLCDestinationZDecodeErrorZ_ok")] public static extern long CResult_COption_HTLCDestinationZDecodeErrorZ_ok(long _o);
	// struct LDKCResult_COption_HTLCDestinationZDecodeErrorZ CResult_COption_HTLCDestinationZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_HTLCDestinationZDecodeErrorZ_err")] public static extern long CResult_COption_HTLCDestinationZDecodeErrorZ_err(long _e);
	// bool CResult_COption_HTLCDestinationZDecodeErrorZ_is_ok(const struct LDKCResult_COption_HTLCDestinationZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_HTLCDestinationZDecodeErrorZ_is_ok")] public static extern bool CResult_COption_HTLCDestinationZDecodeErrorZ_is_ok(long _o);
	// void CResult_COption_HTLCDestinationZDecodeErrorZ_free(struct LDKCResult_COption_HTLCDestinationZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_HTLCDestinationZDecodeErrorZ_free")] public static extern void CResult_COption_HTLCDestinationZDecodeErrorZ_free(long __res);
	// uint64_t CResult_COption_HTLCDestinationZDecodeErrorZ_clone_ptr(LDKCResult_COption_HTLCDestinationZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_HTLCDestinationZDecodeErrorZ_clone_ptr")] public static extern long CResult_COption_HTLCDestinationZDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_COption_HTLCDestinationZDecodeErrorZ CResult_COption_HTLCDestinationZDecodeErrorZ_clone(const struct LDKCResult_COption_HTLCDestinationZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_HTLCDestinationZDecodeErrorZ_clone")] public static extern long CResult_COption_HTLCDestinationZDecodeErrorZ_clone(long _orig);
	// struct LDKCOption_u128Z COption_u128Z_some(struct LDKU128 o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u128Z_some")] public static extern long COption_u128Z_some(byte[] _o);
	// struct LDKCOption_u128Z COption_u128Z_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u128Z_none")] public static extern long COption_u128Z_none();
	// void COption_u128Z_free(struct LDKCOption_u128Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u128Z_free")] public static extern void COption_u128Z_free(long __res);
	// uint64_t COption_u128Z_clone_ptr(LDKCOption_u128Z *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u128Z_clone_ptr")] public static extern long COption_u128Z_clone_ptr(long _arg);
	// struct LDKCOption_u128Z COption_u128Z_clone(const struct LDKCOption_u128Z *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u128Z_clone")] public static extern long COption_u128Z_clone(long _orig);
	// struct LDKCOption_NetworkUpdateZ COption_NetworkUpdateZ_some(struct LDKNetworkUpdate o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NetworkUpdateZ_some")] public static extern long COption_NetworkUpdateZ_some(long _o);
	// struct LDKCOption_NetworkUpdateZ COption_NetworkUpdateZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NetworkUpdateZ_none")] public static extern long COption_NetworkUpdateZ_none();
	// void COption_NetworkUpdateZ_free(struct LDKCOption_NetworkUpdateZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NetworkUpdateZ_free")] public static extern void COption_NetworkUpdateZ_free(long __res);
	// uint64_t COption_NetworkUpdateZ_clone_ptr(LDKCOption_NetworkUpdateZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NetworkUpdateZ_clone_ptr")] public static extern long COption_NetworkUpdateZ_clone_ptr(long _arg);
	// struct LDKCOption_NetworkUpdateZ COption_NetworkUpdateZ_clone(const struct LDKCOption_NetworkUpdateZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NetworkUpdateZ_clone")] public static extern long COption_NetworkUpdateZ_clone(long _orig);
	// void CVec_SpendableOutputDescriptorZ_free(struct LDKCVec_SpendableOutputDescriptorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_SpendableOutputDescriptorZ_free")] public static extern void CVec_SpendableOutputDescriptorZ_free(long[] __res);
	// struct LDKCOption_EventZ COption_EventZ_some(struct LDKEvent o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_EventZ_some")] public static extern long COption_EventZ_some(long _o);
	// struct LDKCOption_EventZ COption_EventZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_EventZ_none")] public static extern long COption_EventZ_none();
	// void COption_EventZ_free(struct LDKCOption_EventZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_EventZ_free")] public static extern void COption_EventZ_free(long __res);
	// uint64_t COption_EventZ_clone_ptr(LDKCOption_EventZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_EventZ_clone_ptr")] public static extern long COption_EventZ_clone_ptr(long _arg);
	// struct LDKCOption_EventZ COption_EventZ_clone(const struct LDKCOption_EventZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_EventZ_clone")] public static extern long COption_EventZ_clone(long _orig);
	// struct LDKCResult_COption_EventZDecodeErrorZ CResult_COption_EventZDecodeErrorZ_ok(struct LDKCOption_EventZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_EventZDecodeErrorZ_ok")] public static extern long CResult_COption_EventZDecodeErrorZ_ok(long _o);
	// struct LDKCResult_COption_EventZDecodeErrorZ CResult_COption_EventZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_EventZDecodeErrorZ_err")] public static extern long CResult_COption_EventZDecodeErrorZ_err(long _e);
	// bool CResult_COption_EventZDecodeErrorZ_is_ok(const struct LDKCResult_COption_EventZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_EventZDecodeErrorZ_is_ok")] public static extern bool CResult_COption_EventZDecodeErrorZ_is_ok(long _o);
	// void CResult_COption_EventZDecodeErrorZ_free(struct LDKCResult_COption_EventZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_EventZDecodeErrorZ_free")] public static extern void CResult_COption_EventZDecodeErrorZ_free(long __res);
	// uint64_t CResult_COption_EventZDecodeErrorZ_clone_ptr(LDKCResult_COption_EventZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_EventZDecodeErrorZ_clone_ptr")] public static extern long CResult_COption_EventZDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_COption_EventZDecodeErrorZ CResult_COption_EventZDecodeErrorZ_clone(const struct LDKCResult_COption_EventZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_EventZDecodeErrorZ_clone")] public static extern long CResult_COption_EventZDecodeErrorZ_clone(long _orig);
	// void CVec_MessageSendEventZ_free(struct LDKCVec_MessageSendEventZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_MessageSendEventZ_free")] public static extern void CVec_MessageSendEventZ_free(long[] __res);
	// struct LDKCResult_TxOutAccessErrorZ CResult_TxOutAccessErrorZ_ok(struct LDKTxOut o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxOutAccessErrorZ_ok")] public static extern long CResult_TxOutAccessErrorZ_ok(long _o);
	// struct LDKCResult_TxOutAccessErrorZ CResult_TxOutAccessErrorZ_err(enum LDKAccessError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxOutAccessErrorZ_err")] public static extern long CResult_TxOutAccessErrorZ_err(AccessError _e);
	// bool CResult_TxOutAccessErrorZ_is_ok(const struct LDKCResult_TxOutAccessErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxOutAccessErrorZ_is_ok")] public static extern bool CResult_TxOutAccessErrorZ_is_ok(long _o);
	// void CResult_TxOutAccessErrorZ_free(struct LDKCResult_TxOutAccessErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxOutAccessErrorZ_free")] public static extern void CResult_TxOutAccessErrorZ_free(long __res);
	// uint64_t CResult_TxOutAccessErrorZ_clone_ptr(LDKCResult_TxOutAccessErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxOutAccessErrorZ_clone_ptr")] public static extern long CResult_TxOutAccessErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_TxOutAccessErrorZ CResult_TxOutAccessErrorZ_clone(const struct LDKCResult_TxOutAccessErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxOutAccessErrorZ_clone")] public static extern long CResult_TxOutAccessErrorZ_clone(long _orig);
	// uint64_t C2Tuple_usizeTransactionZ_clone_ptr(LDKC2Tuple_usizeTransactionZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_usizeTransactionZ_clone_ptr")] public static extern long C2Tuple_usizeTransactionZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_usizeTransactionZ C2Tuple_usizeTransactionZ_clone(const struct LDKC2Tuple_usizeTransactionZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_usizeTransactionZ_clone")] public static extern long C2Tuple_usizeTransactionZ_clone(long _orig);
	// struct LDKC2Tuple_usizeTransactionZ C2Tuple_usizeTransactionZ_new(uintptr_t a, struct LDKTransaction b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_usizeTransactionZ_new")] public static extern long C2Tuple_usizeTransactionZ_new(long _a, byte[] _b);
	// void C2Tuple_usizeTransactionZ_free(struct LDKC2Tuple_usizeTransactionZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_usizeTransactionZ_free")] public static extern void C2Tuple_usizeTransactionZ_free(long __res);
	// void CVec_C2Tuple_usizeTransactionZZ_free(struct LDKCVec_C2Tuple_usizeTransactionZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_usizeTransactionZZ_free")] public static extern void CVec_C2Tuple_usizeTransactionZZ_free(long[] __res);
	// uint64_t C2Tuple_TxidBlockHashZ_clone_ptr(LDKC2Tuple_TxidBlockHashZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_TxidBlockHashZ_clone_ptr")] public static extern long C2Tuple_TxidBlockHashZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_TxidBlockHashZ C2Tuple_TxidBlockHashZ_clone(const struct LDKC2Tuple_TxidBlockHashZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_TxidBlockHashZ_clone")] public static extern long C2Tuple_TxidBlockHashZ_clone(long _orig);
	// struct LDKC2Tuple_TxidBlockHashZ C2Tuple_TxidBlockHashZ_new(struct LDKThirtyTwoBytes a, struct LDKThirtyTwoBytes b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_TxidBlockHashZ_new")] public static extern long C2Tuple_TxidBlockHashZ_new(byte[] _a, byte[] _b);
	// void C2Tuple_TxidBlockHashZ_free(struct LDKC2Tuple_TxidBlockHashZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_TxidBlockHashZ_free")] public static extern void C2Tuple_TxidBlockHashZ_free(long __res);
	// void CVec_C2Tuple_TxidBlockHashZZ_free(struct LDKCVec_C2Tuple_TxidBlockHashZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_TxidBlockHashZZ_free")] public static extern void CVec_C2Tuple_TxidBlockHashZZ_free(long[] __res);
	// void CVec_MonitorEventZ_free(struct LDKCVec_MonitorEventZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_MonitorEventZ_free")] public static extern void CVec_MonitorEventZ_free(long[] __res);
	// uint64_t C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_clone_ptr(LDKC3Tuple_OutPointCVec_MonitorEventZPublicKeyZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_clone_ptr")] public static extern long C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_clone_ptr(long _arg);
	// struct LDKC3Tuple_OutPointCVec_MonitorEventZPublicKeyZ C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_clone(const struct LDKC3Tuple_OutPointCVec_MonitorEventZPublicKeyZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_clone")] public static extern long C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_clone(long _orig);
	// struct LDKC3Tuple_OutPointCVec_MonitorEventZPublicKeyZ C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_new(struct LDKOutPoint a, struct LDKCVec_MonitorEventZ b, struct LDKPublicKey c);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_new")] public static extern long C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_new(long _a, long[] _b, byte[] _c);
	// void C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_free(struct LDKC3Tuple_OutPointCVec_MonitorEventZPublicKeyZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_free")] public static extern void C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_free(long __res);
	// void CVec_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZZ_free(struct LDKCVec_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZZ_free")] public static extern void CVec_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZZ_free(long[] __res);
	// struct LDKCResult_FixedPenaltyScorerDecodeErrorZ CResult_FixedPenaltyScorerDecodeErrorZ_ok(struct LDKFixedPenaltyScorer o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FixedPenaltyScorerDecodeErrorZ_ok")] public static extern long CResult_FixedPenaltyScorerDecodeErrorZ_ok(long _o);
	// struct LDKCResult_FixedPenaltyScorerDecodeErrorZ CResult_FixedPenaltyScorerDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FixedPenaltyScorerDecodeErrorZ_err")] public static extern long CResult_FixedPenaltyScorerDecodeErrorZ_err(long _e);
	// bool CResult_FixedPenaltyScorerDecodeErrorZ_is_ok(const struct LDKCResult_FixedPenaltyScorerDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FixedPenaltyScorerDecodeErrorZ_is_ok")] public static extern bool CResult_FixedPenaltyScorerDecodeErrorZ_is_ok(long _o);
	// void CResult_FixedPenaltyScorerDecodeErrorZ_free(struct LDKCResult_FixedPenaltyScorerDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FixedPenaltyScorerDecodeErrorZ_free")] public static extern void CResult_FixedPenaltyScorerDecodeErrorZ_free(long __res);
	// uint64_t CResult_FixedPenaltyScorerDecodeErrorZ_clone_ptr(LDKCResult_FixedPenaltyScorerDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FixedPenaltyScorerDecodeErrorZ_clone_ptr")] public static extern long CResult_FixedPenaltyScorerDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_FixedPenaltyScorerDecodeErrorZ CResult_FixedPenaltyScorerDecodeErrorZ_clone(const struct LDKCResult_FixedPenaltyScorerDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FixedPenaltyScorerDecodeErrorZ_clone")] public static extern long CResult_FixedPenaltyScorerDecodeErrorZ_clone(long _orig);
	// uint64_t C2Tuple_u64u64Z_clone_ptr(LDKC2Tuple_u64u64Z *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u64Z_clone_ptr")] public static extern long C2Tuple_u64u64Z_clone_ptr(long _arg);
	// struct LDKC2Tuple_u64u64Z C2Tuple_u64u64Z_clone(const struct LDKC2Tuple_u64u64Z *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u64Z_clone")] public static extern long C2Tuple_u64u64Z_clone(long _orig);
	// struct LDKC2Tuple_u64u64Z C2Tuple_u64u64Z_new(uint64_t a, uint64_t b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u64Z_new")] public static extern long C2Tuple_u64u64Z_new(long _a, long _b);
	// void C2Tuple_u64u64Z_free(struct LDKC2Tuple_u64u64Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u64Z_free")] public static extern void C2Tuple_u64u64Z_free(long __res);
	// struct LDKCOption_C2Tuple_u64u64ZZ COption_C2Tuple_u64u64ZZ_some(struct LDKC2Tuple_u64u64Z o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_u64u64ZZ_some")] public static extern long COption_C2Tuple_u64u64ZZ_some(long _o);
	// struct LDKCOption_C2Tuple_u64u64ZZ COption_C2Tuple_u64u64ZZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_u64u64ZZ_none")] public static extern long COption_C2Tuple_u64u64ZZ_none();
	// void COption_C2Tuple_u64u64ZZ_free(struct LDKCOption_C2Tuple_u64u64ZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_u64u64ZZ_free")] public static extern void COption_C2Tuple_u64u64ZZ_free(long __res);
	// uint64_t COption_C2Tuple_u64u64ZZ_clone_ptr(LDKCOption_C2Tuple_u64u64ZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_u64u64ZZ_clone_ptr")] public static extern long COption_C2Tuple_u64u64ZZ_clone_ptr(long _arg);
	// struct LDKCOption_C2Tuple_u64u64ZZ COption_C2Tuple_u64u64ZZ_clone(const struct LDKCOption_C2Tuple_u64u64ZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_u64u64ZZ_clone")] public static extern long COption_C2Tuple_u64u64ZZ_clone(long _orig);
	// void CVec_NodeIdZ_free(struct LDKCVec_NodeIdZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_NodeIdZ_free")] public static extern void CVec_NodeIdZ_free(long[] __res);
	// struct LDKCResult_ProbabilisticScorerDecodeErrorZ CResult_ProbabilisticScorerDecodeErrorZ_ok(struct LDKProbabilisticScorer o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ProbabilisticScorerDecodeErrorZ_ok")] public static extern long CResult_ProbabilisticScorerDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ProbabilisticScorerDecodeErrorZ CResult_ProbabilisticScorerDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ProbabilisticScorerDecodeErrorZ_err")] public static extern long CResult_ProbabilisticScorerDecodeErrorZ_err(long _e);
	// bool CResult_ProbabilisticScorerDecodeErrorZ_is_ok(const struct LDKCResult_ProbabilisticScorerDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ProbabilisticScorerDecodeErrorZ_is_ok")] public static extern bool CResult_ProbabilisticScorerDecodeErrorZ_is_ok(long _o);
	// void CResult_ProbabilisticScorerDecodeErrorZ_free(struct LDKCResult_ProbabilisticScorerDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ProbabilisticScorerDecodeErrorZ_free")] public static extern void CResult_ProbabilisticScorerDecodeErrorZ_free(long __res);
	// struct LDKCResult_InitFeaturesDecodeErrorZ CResult_InitFeaturesDecodeErrorZ_ok(struct LDKInitFeatures o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitFeaturesDecodeErrorZ_ok")] public static extern long CResult_InitFeaturesDecodeErrorZ_ok(long _o);
	// struct LDKCResult_InitFeaturesDecodeErrorZ CResult_InitFeaturesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitFeaturesDecodeErrorZ_err")] public static extern long CResult_InitFeaturesDecodeErrorZ_err(long _e);
	// bool CResult_InitFeaturesDecodeErrorZ_is_ok(const struct LDKCResult_InitFeaturesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitFeaturesDecodeErrorZ_is_ok")] public static extern bool CResult_InitFeaturesDecodeErrorZ_is_ok(long _o);
	// void CResult_InitFeaturesDecodeErrorZ_free(struct LDKCResult_InitFeaturesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitFeaturesDecodeErrorZ_free")] public static extern void CResult_InitFeaturesDecodeErrorZ_free(long __res);
	// uint64_t CResult_InitFeaturesDecodeErrorZ_clone_ptr(LDKCResult_InitFeaturesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitFeaturesDecodeErrorZ_clone_ptr")] public static extern long CResult_InitFeaturesDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_InitFeaturesDecodeErrorZ CResult_InitFeaturesDecodeErrorZ_clone(const struct LDKCResult_InitFeaturesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitFeaturesDecodeErrorZ_clone")] public static extern long CResult_InitFeaturesDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ChannelFeaturesDecodeErrorZ CResult_ChannelFeaturesDecodeErrorZ_ok(struct LDKChannelFeatures o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelFeaturesDecodeErrorZ_ok")] public static extern long CResult_ChannelFeaturesDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelFeaturesDecodeErrorZ CResult_ChannelFeaturesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelFeaturesDecodeErrorZ_err")] public static extern long CResult_ChannelFeaturesDecodeErrorZ_err(long _e);
	// bool CResult_ChannelFeaturesDecodeErrorZ_is_ok(const struct LDKCResult_ChannelFeaturesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelFeaturesDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelFeaturesDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelFeaturesDecodeErrorZ_free(struct LDKCResult_ChannelFeaturesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelFeaturesDecodeErrorZ_free")] public static extern void CResult_ChannelFeaturesDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelFeaturesDecodeErrorZ_clone_ptr(LDKCResult_ChannelFeaturesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelFeaturesDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelFeaturesDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelFeaturesDecodeErrorZ CResult_ChannelFeaturesDecodeErrorZ_clone(const struct LDKCResult_ChannelFeaturesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelFeaturesDecodeErrorZ_clone")] public static extern long CResult_ChannelFeaturesDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_NodeFeaturesDecodeErrorZ CResult_NodeFeaturesDecodeErrorZ_ok(struct LDKNodeFeatures o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeFeaturesDecodeErrorZ_ok")] public static extern long CResult_NodeFeaturesDecodeErrorZ_ok(long _o);
	// struct LDKCResult_NodeFeaturesDecodeErrorZ CResult_NodeFeaturesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeFeaturesDecodeErrorZ_err")] public static extern long CResult_NodeFeaturesDecodeErrorZ_err(long _e);
	// bool CResult_NodeFeaturesDecodeErrorZ_is_ok(const struct LDKCResult_NodeFeaturesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeFeaturesDecodeErrorZ_is_ok")] public static extern bool CResult_NodeFeaturesDecodeErrorZ_is_ok(long _o);
	// void CResult_NodeFeaturesDecodeErrorZ_free(struct LDKCResult_NodeFeaturesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeFeaturesDecodeErrorZ_free")] public static extern void CResult_NodeFeaturesDecodeErrorZ_free(long __res);
	// uint64_t CResult_NodeFeaturesDecodeErrorZ_clone_ptr(LDKCResult_NodeFeaturesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeFeaturesDecodeErrorZ_clone_ptr")] public static extern long CResult_NodeFeaturesDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_NodeFeaturesDecodeErrorZ CResult_NodeFeaturesDecodeErrorZ_clone(const struct LDKCResult_NodeFeaturesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeFeaturesDecodeErrorZ_clone")] public static extern long CResult_NodeFeaturesDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_InvoiceFeaturesDecodeErrorZ CResult_InvoiceFeaturesDecodeErrorZ_ok(struct LDKInvoiceFeatures o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceFeaturesDecodeErrorZ_ok")] public static extern long CResult_InvoiceFeaturesDecodeErrorZ_ok(long _o);
	// struct LDKCResult_InvoiceFeaturesDecodeErrorZ CResult_InvoiceFeaturesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceFeaturesDecodeErrorZ_err")] public static extern long CResult_InvoiceFeaturesDecodeErrorZ_err(long _e);
	// bool CResult_InvoiceFeaturesDecodeErrorZ_is_ok(const struct LDKCResult_InvoiceFeaturesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceFeaturesDecodeErrorZ_is_ok")] public static extern bool CResult_InvoiceFeaturesDecodeErrorZ_is_ok(long _o);
	// void CResult_InvoiceFeaturesDecodeErrorZ_free(struct LDKCResult_InvoiceFeaturesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceFeaturesDecodeErrorZ_free")] public static extern void CResult_InvoiceFeaturesDecodeErrorZ_free(long __res);
	// uint64_t CResult_InvoiceFeaturesDecodeErrorZ_clone_ptr(LDKCResult_InvoiceFeaturesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceFeaturesDecodeErrorZ_clone_ptr")] public static extern long CResult_InvoiceFeaturesDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_InvoiceFeaturesDecodeErrorZ CResult_InvoiceFeaturesDecodeErrorZ_clone(const struct LDKCResult_InvoiceFeaturesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceFeaturesDecodeErrorZ_clone")] public static extern long CResult_InvoiceFeaturesDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ChannelTypeFeaturesDecodeErrorZ CResult_ChannelTypeFeaturesDecodeErrorZ_ok(struct LDKChannelTypeFeatures o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTypeFeaturesDecodeErrorZ_ok")] public static extern long CResult_ChannelTypeFeaturesDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelTypeFeaturesDecodeErrorZ CResult_ChannelTypeFeaturesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTypeFeaturesDecodeErrorZ_err")] public static extern long CResult_ChannelTypeFeaturesDecodeErrorZ_err(long _e);
	// bool CResult_ChannelTypeFeaturesDecodeErrorZ_is_ok(const struct LDKCResult_ChannelTypeFeaturesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTypeFeaturesDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelTypeFeaturesDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelTypeFeaturesDecodeErrorZ_free(struct LDKCResult_ChannelTypeFeaturesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTypeFeaturesDecodeErrorZ_free")] public static extern void CResult_ChannelTypeFeaturesDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelTypeFeaturesDecodeErrorZ_clone_ptr(LDKCResult_ChannelTypeFeaturesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTypeFeaturesDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelTypeFeaturesDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelTypeFeaturesDecodeErrorZ CResult_ChannelTypeFeaturesDecodeErrorZ_clone(const struct LDKCResult_ChannelTypeFeaturesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTypeFeaturesDecodeErrorZ_clone")] public static extern long CResult_ChannelTypeFeaturesDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_OfferFeaturesDecodeErrorZ CResult_OfferFeaturesDecodeErrorZ_ok(struct LDKOfferFeatures o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferFeaturesDecodeErrorZ_ok")] public static extern long CResult_OfferFeaturesDecodeErrorZ_ok(long _o);
	// struct LDKCResult_OfferFeaturesDecodeErrorZ CResult_OfferFeaturesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferFeaturesDecodeErrorZ_err")] public static extern long CResult_OfferFeaturesDecodeErrorZ_err(long _e);
	// bool CResult_OfferFeaturesDecodeErrorZ_is_ok(const struct LDKCResult_OfferFeaturesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferFeaturesDecodeErrorZ_is_ok")] public static extern bool CResult_OfferFeaturesDecodeErrorZ_is_ok(long _o);
	// void CResult_OfferFeaturesDecodeErrorZ_free(struct LDKCResult_OfferFeaturesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferFeaturesDecodeErrorZ_free")] public static extern void CResult_OfferFeaturesDecodeErrorZ_free(long __res);
	// uint64_t CResult_OfferFeaturesDecodeErrorZ_clone_ptr(LDKCResult_OfferFeaturesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferFeaturesDecodeErrorZ_clone_ptr")] public static extern long CResult_OfferFeaturesDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_OfferFeaturesDecodeErrorZ CResult_OfferFeaturesDecodeErrorZ_clone(const struct LDKCResult_OfferFeaturesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferFeaturesDecodeErrorZ_clone")] public static extern long CResult_OfferFeaturesDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_InvoiceRequestFeaturesDecodeErrorZ CResult_InvoiceRequestFeaturesDecodeErrorZ_ok(struct LDKInvoiceRequestFeatures o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestFeaturesDecodeErrorZ_ok")] public static extern long CResult_InvoiceRequestFeaturesDecodeErrorZ_ok(long _o);
	// struct LDKCResult_InvoiceRequestFeaturesDecodeErrorZ CResult_InvoiceRequestFeaturesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestFeaturesDecodeErrorZ_err")] public static extern long CResult_InvoiceRequestFeaturesDecodeErrorZ_err(long _e);
	// bool CResult_InvoiceRequestFeaturesDecodeErrorZ_is_ok(const struct LDKCResult_InvoiceRequestFeaturesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestFeaturesDecodeErrorZ_is_ok")] public static extern bool CResult_InvoiceRequestFeaturesDecodeErrorZ_is_ok(long _o);
	// void CResult_InvoiceRequestFeaturesDecodeErrorZ_free(struct LDKCResult_InvoiceRequestFeaturesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestFeaturesDecodeErrorZ_free")] public static extern void CResult_InvoiceRequestFeaturesDecodeErrorZ_free(long __res);
	// uint64_t CResult_InvoiceRequestFeaturesDecodeErrorZ_clone_ptr(LDKCResult_InvoiceRequestFeaturesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestFeaturesDecodeErrorZ_clone_ptr")] public static extern long CResult_InvoiceRequestFeaturesDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_InvoiceRequestFeaturesDecodeErrorZ CResult_InvoiceRequestFeaturesDecodeErrorZ_clone(const struct LDKCResult_InvoiceRequestFeaturesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestFeaturesDecodeErrorZ_clone")] public static extern long CResult_InvoiceRequestFeaturesDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_NodeIdDecodeErrorZ CResult_NodeIdDecodeErrorZ_ok(struct LDKNodeId o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeIdDecodeErrorZ_ok")] public static extern long CResult_NodeIdDecodeErrorZ_ok(long _o);
	// struct LDKCResult_NodeIdDecodeErrorZ CResult_NodeIdDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeIdDecodeErrorZ_err")] public static extern long CResult_NodeIdDecodeErrorZ_err(long _e);
	// bool CResult_NodeIdDecodeErrorZ_is_ok(const struct LDKCResult_NodeIdDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeIdDecodeErrorZ_is_ok")] public static extern bool CResult_NodeIdDecodeErrorZ_is_ok(long _o);
	// void CResult_NodeIdDecodeErrorZ_free(struct LDKCResult_NodeIdDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeIdDecodeErrorZ_free")] public static extern void CResult_NodeIdDecodeErrorZ_free(long __res);
	// uint64_t CResult_NodeIdDecodeErrorZ_clone_ptr(LDKCResult_NodeIdDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeIdDecodeErrorZ_clone_ptr")] public static extern long CResult_NodeIdDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_NodeIdDecodeErrorZ CResult_NodeIdDecodeErrorZ_clone(const struct LDKCResult_NodeIdDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeIdDecodeErrorZ_clone")] public static extern long CResult_NodeIdDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_COption_NetworkUpdateZDecodeErrorZ CResult_COption_NetworkUpdateZDecodeErrorZ_ok(struct LDKCOption_NetworkUpdateZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_NetworkUpdateZDecodeErrorZ_ok")] public static extern long CResult_COption_NetworkUpdateZDecodeErrorZ_ok(long _o);
	// struct LDKCResult_COption_NetworkUpdateZDecodeErrorZ CResult_COption_NetworkUpdateZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_NetworkUpdateZDecodeErrorZ_err")] public static extern long CResult_COption_NetworkUpdateZDecodeErrorZ_err(long _e);
	// bool CResult_COption_NetworkUpdateZDecodeErrorZ_is_ok(const struct LDKCResult_COption_NetworkUpdateZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_NetworkUpdateZDecodeErrorZ_is_ok")] public static extern bool CResult_COption_NetworkUpdateZDecodeErrorZ_is_ok(long _o);
	// void CResult_COption_NetworkUpdateZDecodeErrorZ_free(struct LDKCResult_COption_NetworkUpdateZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_NetworkUpdateZDecodeErrorZ_free")] public static extern void CResult_COption_NetworkUpdateZDecodeErrorZ_free(long __res);
	// uint64_t CResult_COption_NetworkUpdateZDecodeErrorZ_clone_ptr(LDKCResult_COption_NetworkUpdateZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_NetworkUpdateZDecodeErrorZ_clone_ptr")] public static extern long CResult_COption_NetworkUpdateZDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_COption_NetworkUpdateZDecodeErrorZ CResult_COption_NetworkUpdateZDecodeErrorZ_clone(const struct LDKCResult_COption_NetworkUpdateZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_NetworkUpdateZDecodeErrorZ_clone")] public static extern long CResult_COption_NetworkUpdateZDecodeErrorZ_clone(long _orig);
	// struct LDKCOption_AccessZ COption_AccessZ_some(struct LDKAccess o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_AccessZ_some")] public static extern long COption_AccessZ_some(long _o);
	// struct LDKCOption_AccessZ COption_AccessZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_AccessZ_none")] public static extern long COption_AccessZ_none();
	// void COption_AccessZ_free(struct LDKCOption_AccessZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_AccessZ_free")] public static extern void COption_AccessZ_free(long __res);
	// struct LDKCResult_boolLightningErrorZ CResult_boolLightningErrorZ_ok(bool o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolLightningErrorZ_ok")] public static extern long CResult_boolLightningErrorZ_ok(bool _o);
	// struct LDKCResult_boolLightningErrorZ CResult_boolLightningErrorZ_err(struct LDKLightningError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolLightningErrorZ_err")] public static extern long CResult_boolLightningErrorZ_err(long _e);
	// bool CResult_boolLightningErrorZ_is_ok(const struct LDKCResult_boolLightningErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolLightningErrorZ_is_ok")] public static extern bool CResult_boolLightningErrorZ_is_ok(long _o);
	// void CResult_boolLightningErrorZ_free(struct LDKCResult_boolLightningErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolLightningErrorZ_free")] public static extern void CResult_boolLightningErrorZ_free(long __res);
	// uint64_t CResult_boolLightningErrorZ_clone_ptr(LDKCResult_boolLightningErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolLightningErrorZ_clone_ptr")] public static extern long CResult_boolLightningErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_boolLightningErrorZ CResult_boolLightningErrorZ_clone(const struct LDKCResult_boolLightningErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolLightningErrorZ_clone")] public static extern long CResult_boolLightningErrorZ_clone(long _orig);
	// uint64_t C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_clone_ptr(LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_clone_ptr")] public static extern long C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_clone_ptr(long _arg);
	// struct LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_clone(const struct LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_clone")] public static extern long C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_clone(long _orig);
	// struct LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_new(struct LDKChannelAnnouncement a, struct LDKChannelUpdate b, struct LDKChannelUpdate c);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_new")] public static extern long C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_new(long _a, long _b, long _c);
	// void C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_free(struct LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_free")] public static extern void C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_free(long __res);
	// struct LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_some(struct LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_some")] public static extern long COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_some(long _o);
	// struct LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_none")] public static extern long COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_none();
	// void COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_free(struct LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_free")] public static extern void COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_free(long __res);
	// uint64_t COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_clone_ptr(LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_clone_ptr")] public static extern long COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_clone_ptr(long _arg);
	// struct LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_clone(const struct LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_clone")] public static extern long COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_clone(long _orig);
	// struct LDKCResult_NoneLightningErrorZ CResult_NoneLightningErrorZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneLightningErrorZ_ok")] public static extern long CResult_NoneLightningErrorZ_ok();
	// struct LDKCResult_NoneLightningErrorZ CResult_NoneLightningErrorZ_err(struct LDKLightningError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneLightningErrorZ_err")] public static extern long CResult_NoneLightningErrorZ_err(long _e);
	// bool CResult_NoneLightningErrorZ_is_ok(const struct LDKCResult_NoneLightningErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneLightningErrorZ_is_ok")] public static extern bool CResult_NoneLightningErrorZ_is_ok(long _o);
	// void CResult_NoneLightningErrorZ_free(struct LDKCResult_NoneLightningErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneLightningErrorZ_free")] public static extern void CResult_NoneLightningErrorZ_free(long __res);
	// uint64_t CResult_NoneLightningErrorZ_clone_ptr(LDKCResult_NoneLightningErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneLightningErrorZ_clone_ptr")] public static extern long CResult_NoneLightningErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_NoneLightningErrorZ CResult_NoneLightningErrorZ_clone(const struct LDKCResult_NoneLightningErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneLightningErrorZ_clone")] public static extern long CResult_NoneLightningErrorZ_clone(long _orig);
	// struct LDKCResult_ChannelUpdateInfoDecodeErrorZ CResult_ChannelUpdateInfoDecodeErrorZ_ok(struct LDKChannelUpdateInfo o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateInfoDecodeErrorZ_ok")] public static extern long CResult_ChannelUpdateInfoDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelUpdateInfoDecodeErrorZ CResult_ChannelUpdateInfoDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateInfoDecodeErrorZ_err")] public static extern long CResult_ChannelUpdateInfoDecodeErrorZ_err(long _e);
	// bool CResult_ChannelUpdateInfoDecodeErrorZ_is_ok(const struct LDKCResult_ChannelUpdateInfoDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateInfoDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelUpdateInfoDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelUpdateInfoDecodeErrorZ_free(struct LDKCResult_ChannelUpdateInfoDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateInfoDecodeErrorZ_free")] public static extern void CResult_ChannelUpdateInfoDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelUpdateInfoDecodeErrorZ_clone_ptr(LDKCResult_ChannelUpdateInfoDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateInfoDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelUpdateInfoDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelUpdateInfoDecodeErrorZ CResult_ChannelUpdateInfoDecodeErrorZ_clone(const struct LDKCResult_ChannelUpdateInfoDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateInfoDecodeErrorZ_clone")] public static extern long CResult_ChannelUpdateInfoDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ChannelInfoDecodeErrorZ CResult_ChannelInfoDecodeErrorZ_ok(struct LDKChannelInfo o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelInfoDecodeErrorZ_ok")] public static extern long CResult_ChannelInfoDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelInfoDecodeErrorZ CResult_ChannelInfoDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelInfoDecodeErrorZ_err")] public static extern long CResult_ChannelInfoDecodeErrorZ_err(long _e);
	// bool CResult_ChannelInfoDecodeErrorZ_is_ok(const struct LDKCResult_ChannelInfoDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelInfoDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelInfoDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelInfoDecodeErrorZ_free(struct LDKCResult_ChannelInfoDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelInfoDecodeErrorZ_free")] public static extern void CResult_ChannelInfoDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelInfoDecodeErrorZ_clone_ptr(LDKCResult_ChannelInfoDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelInfoDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelInfoDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelInfoDecodeErrorZ CResult_ChannelInfoDecodeErrorZ_clone(const struct LDKCResult_ChannelInfoDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelInfoDecodeErrorZ_clone")] public static extern long CResult_ChannelInfoDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_RoutingFeesDecodeErrorZ CResult_RoutingFeesDecodeErrorZ_ok(struct LDKRoutingFees o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RoutingFeesDecodeErrorZ_ok")] public static extern long CResult_RoutingFeesDecodeErrorZ_ok(long _o);
	// struct LDKCResult_RoutingFeesDecodeErrorZ CResult_RoutingFeesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RoutingFeesDecodeErrorZ_err")] public static extern long CResult_RoutingFeesDecodeErrorZ_err(long _e);
	// bool CResult_RoutingFeesDecodeErrorZ_is_ok(const struct LDKCResult_RoutingFeesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RoutingFeesDecodeErrorZ_is_ok")] public static extern bool CResult_RoutingFeesDecodeErrorZ_is_ok(long _o);
	// void CResult_RoutingFeesDecodeErrorZ_free(struct LDKCResult_RoutingFeesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RoutingFeesDecodeErrorZ_free")] public static extern void CResult_RoutingFeesDecodeErrorZ_free(long __res);
	// uint64_t CResult_RoutingFeesDecodeErrorZ_clone_ptr(LDKCResult_RoutingFeesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RoutingFeesDecodeErrorZ_clone_ptr")] public static extern long CResult_RoutingFeesDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_RoutingFeesDecodeErrorZ CResult_RoutingFeesDecodeErrorZ_clone(const struct LDKCResult_RoutingFeesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RoutingFeesDecodeErrorZ_clone")] public static extern long CResult_RoutingFeesDecodeErrorZ_clone(long _orig);
	// void CVec_NetAddressZ_free(struct LDKCVec_NetAddressZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_NetAddressZ_free")] public static extern void CVec_NetAddressZ_free(long[] __res);
	// struct LDKCResult_NodeAnnouncementInfoDecodeErrorZ CResult_NodeAnnouncementInfoDecodeErrorZ_ok(struct LDKNodeAnnouncementInfo o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementInfoDecodeErrorZ_ok")] public static extern long CResult_NodeAnnouncementInfoDecodeErrorZ_ok(long _o);
	// struct LDKCResult_NodeAnnouncementInfoDecodeErrorZ CResult_NodeAnnouncementInfoDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementInfoDecodeErrorZ_err")] public static extern long CResult_NodeAnnouncementInfoDecodeErrorZ_err(long _e);
	// bool CResult_NodeAnnouncementInfoDecodeErrorZ_is_ok(const struct LDKCResult_NodeAnnouncementInfoDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementInfoDecodeErrorZ_is_ok")] public static extern bool CResult_NodeAnnouncementInfoDecodeErrorZ_is_ok(long _o);
	// void CResult_NodeAnnouncementInfoDecodeErrorZ_free(struct LDKCResult_NodeAnnouncementInfoDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementInfoDecodeErrorZ_free")] public static extern void CResult_NodeAnnouncementInfoDecodeErrorZ_free(long __res);
	// uint64_t CResult_NodeAnnouncementInfoDecodeErrorZ_clone_ptr(LDKCResult_NodeAnnouncementInfoDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementInfoDecodeErrorZ_clone_ptr")] public static extern long CResult_NodeAnnouncementInfoDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_NodeAnnouncementInfoDecodeErrorZ CResult_NodeAnnouncementInfoDecodeErrorZ_clone(const struct LDKCResult_NodeAnnouncementInfoDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementInfoDecodeErrorZ_clone")] public static extern long CResult_NodeAnnouncementInfoDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_NodeAliasDecodeErrorZ CResult_NodeAliasDecodeErrorZ_ok(struct LDKNodeAlias o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAliasDecodeErrorZ_ok")] public static extern long CResult_NodeAliasDecodeErrorZ_ok(long _o);
	// struct LDKCResult_NodeAliasDecodeErrorZ CResult_NodeAliasDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAliasDecodeErrorZ_err")] public static extern long CResult_NodeAliasDecodeErrorZ_err(long _e);
	// bool CResult_NodeAliasDecodeErrorZ_is_ok(const struct LDKCResult_NodeAliasDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAliasDecodeErrorZ_is_ok")] public static extern bool CResult_NodeAliasDecodeErrorZ_is_ok(long _o);
	// void CResult_NodeAliasDecodeErrorZ_free(struct LDKCResult_NodeAliasDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAliasDecodeErrorZ_free")] public static extern void CResult_NodeAliasDecodeErrorZ_free(long __res);
	// uint64_t CResult_NodeAliasDecodeErrorZ_clone_ptr(LDKCResult_NodeAliasDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAliasDecodeErrorZ_clone_ptr")] public static extern long CResult_NodeAliasDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_NodeAliasDecodeErrorZ CResult_NodeAliasDecodeErrorZ_clone(const struct LDKCResult_NodeAliasDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAliasDecodeErrorZ_clone")] public static extern long CResult_NodeAliasDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_NodeInfoDecodeErrorZ CResult_NodeInfoDecodeErrorZ_ok(struct LDKNodeInfo o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeInfoDecodeErrorZ_ok")] public static extern long CResult_NodeInfoDecodeErrorZ_ok(long _o);
	// struct LDKCResult_NodeInfoDecodeErrorZ CResult_NodeInfoDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeInfoDecodeErrorZ_err")] public static extern long CResult_NodeInfoDecodeErrorZ_err(long _e);
	// bool CResult_NodeInfoDecodeErrorZ_is_ok(const struct LDKCResult_NodeInfoDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeInfoDecodeErrorZ_is_ok")] public static extern bool CResult_NodeInfoDecodeErrorZ_is_ok(long _o);
	// void CResult_NodeInfoDecodeErrorZ_free(struct LDKCResult_NodeInfoDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeInfoDecodeErrorZ_free")] public static extern void CResult_NodeInfoDecodeErrorZ_free(long __res);
	// uint64_t CResult_NodeInfoDecodeErrorZ_clone_ptr(LDKCResult_NodeInfoDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeInfoDecodeErrorZ_clone_ptr")] public static extern long CResult_NodeInfoDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_NodeInfoDecodeErrorZ CResult_NodeInfoDecodeErrorZ_clone(const struct LDKCResult_NodeInfoDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeInfoDecodeErrorZ_clone")] public static extern long CResult_NodeInfoDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_NetworkGraphDecodeErrorZ CResult_NetworkGraphDecodeErrorZ_ok(struct LDKNetworkGraph o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NetworkGraphDecodeErrorZ_ok")] public static extern long CResult_NetworkGraphDecodeErrorZ_ok(long _o);
	// struct LDKCResult_NetworkGraphDecodeErrorZ CResult_NetworkGraphDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NetworkGraphDecodeErrorZ_err")] public static extern long CResult_NetworkGraphDecodeErrorZ_err(long _e);
	// bool CResult_NetworkGraphDecodeErrorZ_is_ok(const struct LDKCResult_NetworkGraphDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NetworkGraphDecodeErrorZ_is_ok")] public static extern bool CResult_NetworkGraphDecodeErrorZ_is_ok(long _o);
	// void CResult_NetworkGraphDecodeErrorZ_free(struct LDKCResult_NetworkGraphDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NetworkGraphDecodeErrorZ_free")] public static extern void CResult_NetworkGraphDecodeErrorZ_free(long __res);
	// struct LDKCOption_CVec_NetAddressZZ COption_CVec_NetAddressZZ_some(struct LDKCVec_NetAddressZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_NetAddressZZ_some")] public static extern long COption_CVec_NetAddressZZ_some(long[] _o);
	// struct LDKCOption_CVec_NetAddressZZ COption_CVec_NetAddressZZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_NetAddressZZ_none")] public static extern long COption_CVec_NetAddressZZ_none();
	// void COption_CVec_NetAddressZZ_free(struct LDKCOption_CVec_NetAddressZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_NetAddressZZ_free")] public static extern void COption_CVec_NetAddressZZ_free(long __res);
	// uint64_t COption_CVec_NetAddressZZ_clone_ptr(LDKCOption_CVec_NetAddressZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_NetAddressZZ_clone_ptr")] public static extern long COption_CVec_NetAddressZZ_clone_ptr(long _arg);
	// struct LDKCOption_CVec_NetAddressZZ COption_CVec_NetAddressZZ_clone(const struct LDKCOption_CVec_NetAddressZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_NetAddressZZ_clone")] public static extern long COption_CVec_NetAddressZZ_clone(long _orig);
	// struct LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_ok(struct LDKDelayedPaymentOutputDescriptor o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_ok")] public static extern long CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_ok(long _o);
	// struct LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_err")] public static extern long CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_err(long _e);
	// bool CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_is_ok(const struct LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_is_ok")] public static extern bool CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_is_ok(long _o);
	// void CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_free(struct LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_free")] public static extern void CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_free(long __res);
	// uint64_t CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_clone_ptr(LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_clone_ptr")] public static extern long CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_clone(const struct LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_clone")] public static extern long CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ CResult_StaticPaymentOutputDescriptorDecodeErrorZ_ok(struct LDKStaticPaymentOutputDescriptor o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StaticPaymentOutputDescriptorDecodeErrorZ_ok")] public static extern long CResult_StaticPaymentOutputDescriptorDecodeErrorZ_ok(long _o);
	// struct LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ CResult_StaticPaymentOutputDescriptorDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StaticPaymentOutputDescriptorDecodeErrorZ_err")] public static extern long CResult_StaticPaymentOutputDescriptorDecodeErrorZ_err(long _e);
	// bool CResult_StaticPaymentOutputDescriptorDecodeErrorZ_is_ok(const struct LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StaticPaymentOutputDescriptorDecodeErrorZ_is_ok")] public static extern bool CResult_StaticPaymentOutputDescriptorDecodeErrorZ_is_ok(long _o);
	// void CResult_StaticPaymentOutputDescriptorDecodeErrorZ_free(struct LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StaticPaymentOutputDescriptorDecodeErrorZ_free")] public static extern void CResult_StaticPaymentOutputDescriptorDecodeErrorZ_free(long __res);
	// uint64_t CResult_StaticPaymentOutputDescriptorDecodeErrorZ_clone_ptr(LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StaticPaymentOutputDescriptorDecodeErrorZ_clone_ptr")] public static extern long CResult_StaticPaymentOutputDescriptorDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ CResult_StaticPaymentOutputDescriptorDecodeErrorZ_clone(const struct LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StaticPaymentOutputDescriptorDecodeErrorZ_clone")] public static extern long CResult_StaticPaymentOutputDescriptorDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_SpendableOutputDescriptorDecodeErrorZ CResult_SpendableOutputDescriptorDecodeErrorZ_ok(struct LDKSpendableOutputDescriptor o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpendableOutputDescriptorDecodeErrorZ_ok")] public static extern long CResult_SpendableOutputDescriptorDecodeErrorZ_ok(long _o);
	// struct LDKCResult_SpendableOutputDescriptorDecodeErrorZ CResult_SpendableOutputDescriptorDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpendableOutputDescriptorDecodeErrorZ_err")] public static extern long CResult_SpendableOutputDescriptorDecodeErrorZ_err(long _e);
	// bool CResult_SpendableOutputDescriptorDecodeErrorZ_is_ok(const struct LDKCResult_SpendableOutputDescriptorDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpendableOutputDescriptorDecodeErrorZ_is_ok")] public static extern bool CResult_SpendableOutputDescriptorDecodeErrorZ_is_ok(long _o);
	// void CResult_SpendableOutputDescriptorDecodeErrorZ_free(struct LDKCResult_SpendableOutputDescriptorDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpendableOutputDescriptorDecodeErrorZ_free")] public static extern void CResult_SpendableOutputDescriptorDecodeErrorZ_free(long __res);
	// uint64_t CResult_SpendableOutputDescriptorDecodeErrorZ_clone_ptr(LDKCResult_SpendableOutputDescriptorDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpendableOutputDescriptorDecodeErrorZ_clone_ptr")] public static extern long CResult_SpendableOutputDescriptorDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_SpendableOutputDescriptorDecodeErrorZ CResult_SpendableOutputDescriptorDecodeErrorZ_clone(const struct LDKCResult_SpendableOutputDescriptorDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpendableOutputDescriptorDecodeErrorZ_clone")] public static extern long CResult_SpendableOutputDescriptorDecodeErrorZ_clone(long _orig);
	// void CVec_PaymentPreimageZ_free(struct LDKCVec_PaymentPreimageZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_PaymentPreimageZ_free")] public static extern void CVec_PaymentPreimageZ_free(byte[][] __res);
	// uint64_t C2Tuple_SignatureCVec_SignatureZZ_clone_ptr(LDKC2Tuple_SignatureCVec_SignatureZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_SignatureCVec_SignatureZZ_clone_ptr")] public static extern long C2Tuple_SignatureCVec_SignatureZZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_SignatureCVec_SignatureZZ C2Tuple_SignatureCVec_SignatureZZ_clone(const struct LDKC2Tuple_SignatureCVec_SignatureZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_SignatureCVec_SignatureZZ_clone")] public static extern long C2Tuple_SignatureCVec_SignatureZZ_clone(long _orig);
	// struct LDKC2Tuple_SignatureCVec_SignatureZZ C2Tuple_SignatureCVec_SignatureZZ_new(struct LDKSignature a, struct LDKCVec_SignatureZ b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_SignatureCVec_SignatureZZ_new")] public static extern long C2Tuple_SignatureCVec_SignatureZZ_new(byte[] _a, byte[][] _b);
	// void C2Tuple_SignatureCVec_SignatureZZ_free(struct LDKC2Tuple_SignatureCVec_SignatureZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_SignatureCVec_SignatureZZ_free")] public static extern void C2Tuple_SignatureCVec_SignatureZZ_free(long __res);
	// struct LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_ok(struct LDKC2Tuple_SignatureCVec_SignatureZZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_ok")] public static extern long CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_ok(long _o);
	// struct LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_err")] public static extern long CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_err();
	// bool CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_is_ok(const struct LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_is_ok")] public static extern bool CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_is_ok(long _o);
	// void CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_free(struct LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_free")] public static extern void CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_free(long __res);
	// uint64_t CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_clone_ptr(LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_clone_ptr")] public static extern long CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_clone(const struct LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_clone")] public static extern long CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_clone(long _orig);
	// struct LDKCResult_SignatureNoneZ CResult_SignatureNoneZ_ok(struct LDKSignature o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignatureNoneZ_ok")] public static extern long CResult_SignatureNoneZ_ok(byte[] _o);
	// struct LDKCResult_SignatureNoneZ CResult_SignatureNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignatureNoneZ_err")] public static extern long CResult_SignatureNoneZ_err();
	// bool CResult_SignatureNoneZ_is_ok(const struct LDKCResult_SignatureNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignatureNoneZ_is_ok")] public static extern bool CResult_SignatureNoneZ_is_ok(long _o);
	// void CResult_SignatureNoneZ_free(struct LDKCResult_SignatureNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignatureNoneZ_free")] public static extern void CResult_SignatureNoneZ_free(long __res);
	// uint64_t CResult_SignatureNoneZ_clone_ptr(LDKCResult_SignatureNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignatureNoneZ_clone_ptr")] public static extern long CResult_SignatureNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_SignatureNoneZ CResult_SignatureNoneZ_clone(const struct LDKCResult_SignatureNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignatureNoneZ_clone")] public static extern long CResult_SignatureNoneZ_clone(long _orig);
	// uint64_t C2Tuple_SignatureSignatureZ_clone_ptr(LDKC2Tuple_SignatureSignatureZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_SignatureSignatureZ_clone_ptr")] public static extern long C2Tuple_SignatureSignatureZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_SignatureSignatureZ C2Tuple_SignatureSignatureZ_clone(const struct LDKC2Tuple_SignatureSignatureZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_SignatureSignatureZ_clone")] public static extern long C2Tuple_SignatureSignatureZ_clone(long _orig);
	// struct LDKC2Tuple_SignatureSignatureZ C2Tuple_SignatureSignatureZ_new(struct LDKSignature a, struct LDKSignature b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_SignatureSignatureZ_new")] public static extern long C2Tuple_SignatureSignatureZ_new(byte[] _a, byte[] _b);
	// void C2Tuple_SignatureSignatureZ_free(struct LDKC2Tuple_SignatureSignatureZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_SignatureSignatureZ_free")] public static extern void C2Tuple_SignatureSignatureZ_free(long __res);
	// struct LDKCResult_C2Tuple_SignatureSignatureZNoneZ CResult_C2Tuple_SignatureSignatureZNoneZ_ok(struct LDKC2Tuple_SignatureSignatureZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_SignatureSignatureZNoneZ_ok")] public static extern long CResult_C2Tuple_SignatureSignatureZNoneZ_ok(long _o);
	// struct LDKCResult_C2Tuple_SignatureSignatureZNoneZ CResult_C2Tuple_SignatureSignatureZNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_SignatureSignatureZNoneZ_err")] public static extern long CResult_C2Tuple_SignatureSignatureZNoneZ_err();
	// bool CResult_C2Tuple_SignatureSignatureZNoneZ_is_ok(const struct LDKCResult_C2Tuple_SignatureSignatureZNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_SignatureSignatureZNoneZ_is_ok")] public static extern bool CResult_C2Tuple_SignatureSignatureZNoneZ_is_ok(long _o);
	// void CResult_C2Tuple_SignatureSignatureZNoneZ_free(struct LDKCResult_C2Tuple_SignatureSignatureZNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_SignatureSignatureZNoneZ_free")] public static extern void CResult_C2Tuple_SignatureSignatureZNoneZ_free(long __res);
	// uint64_t CResult_C2Tuple_SignatureSignatureZNoneZ_clone_ptr(LDKCResult_C2Tuple_SignatureSignatureZNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_SignatureSignatureZNoneZ_clone_ptr")] public static extern long CResult_C2Tuple_SignatureSignatureZNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_C2Tuple_SignatureSignatureZNoneZ CResult_C2Tuple_SignatureSignatureZNoneZ_clone(const struct LDKCResult_C2Tuple_SignatureSignatureZNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_SignatureSignatureZNoneZ_clone")] public static extern long CResult_C2Tuple_SignatureSignatureZNoneZ_clone(long _orig);
	// struct LDKCResult_SecretKeyNoneZ CResult_SecretKeyNoneZ_ok(struct LDKSecretKey o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SecretKeyNoneZ_ok")] public static extern long CResult_SecretKeyNoneZ_ok(byte[] _o);
	// struct LDKCResult_SecretKeyNoneZ CResult_SecretKeyNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SecretKeyNoneZ_err")] public static extern long CResult_SecretKeyNoneZ_err();
	// bool CResult_SecretKeyNoneZ_is_ok(const struct LDKCResult_SecretKeyNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SecretKeyNoneZ_is_ok")] public static extern bool CResult_SecretKeyNoneZ_is_ok(long _o);
	// void CResult_SecretKeyNoneZ_free(struct LDKCResult_SecretKeyNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SecretKeyNoneZ_free")] public static extern void CResult_SecretKeyNoneZ_free(long __res);
	// uint64_t CResult_SecretKeyNoneZ_clone_ptr(LDKCResult_SecretKeyNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SecretKeyNoneZ_clone_ptr")] public static extern long CResult_SecretKeyNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_SecretKeyNoneZ CResult_SecretKeyNoneZ_clone(const struct LDKCResult_SecretKeyNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SecretKeyNoneZ_clone")] public static extern long CResult_SecretKeyNoneZ_clone(long _orig);
	// struct LDKCResult_PublicKeyNoneZ CResult_PublicKeyNoneZ_ok(struct LDKPublicKey o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyNoneZ_ok")] public static extern long CResult_PublicKeyNoneZ_ok(byte[] _o);
	// struct LDKCResult_PublicKeyNoneZ CResult_PublicKeyNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyNoneZ_err")] public static extern long CResult_PublicKeyNoneZ_err();
	// bool CResult_PublicKeyNoneZ_is_ok(const struct LDKCResult_PublicKeyNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyNoneZ_is_ok")] public static extern bool CResult_PublicKeyNoneZ_is_ok(long _o);
	// void CResult_PublicKeyNoneZ_free(struct LDKCResult_PublicKeyNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyNoneZ_free")] public static extern void CResult_PublicKeyNoneZ_free(long __res);
	// uint64_t CResult_PublicKeyNoneZ_clone_ptr(LDKCResult_PublicKeyNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyNoneZ_clone_ptr")] public static extern long CResult_PublicKeyNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_PublicKeyNoneZ CResult_PublicKeyNoneZ_clone(const struct LDKCResult_PublicKeyNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyNoneZ_clone")] public static extern long CResult_PublicKeyNoneZ_clone(long _orig);
	// struct LDKCOption_ScalarZ COption_ScalarZ_some(struct LDKBigEndianScalar o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ScalarZ_some")] public static extern long COption_ScalarZ_some(long _o);
	// struct LDKCOption_ScalarZ COption_ScalarZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ScalarZ_none")] public static extern long COption_ScalarZ_none();
	// void COption_ScalarZ_free(struct LDKCOption_ScalarZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ScalarZ_free")] public static extern void COption_ScalarZ_free(long __res);
	// struct LDKCResult_SharedSecretNoneZ CResult_SharedSecretNoneZ_ok(struct LDKThirtyTwoBytes o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SharedSecretNoneZ_ok")] public static extern long CResult_SharedSecretNoneZ_ok(byte[] _o);
	// struct LDKCResult_SharedSecretNoneZ CResult_SharedSecretNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SharedSecretNoneZ_err")] public static extern long CResult_SharedSecretNoneZ_err();
	// bool CResult_SharedSecretNoneZ_is_ok(const struct LDKCResult_SharedSecretNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SharedSecretNoneZ_is_ok")] public static extern bool CResult_SharedSecretNoneZ_is_ok(long _o);
	// void CResult_SharedSecretNoneZ_free(struct LDKCResult_SharedSecretNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SharedSecretNoneZ_free")] public static extern void CResult_SharedSecretNoneZ_free(long __res);
	// uint64_t CResult_SharedSecretNoneZ_clone_ptr(LDKCResult_SharedSecretNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SharedSecretNoneZ_clone_ptr")] public static extern long CResult_SharedSecretNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_SharedSecretNoneZ CResult_SharedSecretNoneZ_clone(const struct LDKCResult_SharedSecretNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SharedSecretNoneZ_clone")] public static extern long CResult_SharedSecretNoneZ_clone(long _orig);
	// struct LDKCResult_SignDecodeErrorZ CResult_SignDecodeErrorZ_ok(struct LDKSign o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignDecodeErrorZ_ok")] public static extern long CResult_SignDecodeErrorZ_ok(long _o);
	// struct LDKCResult_SignDecodeErrorZ CResult_SignDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignDecodeErrorZ_err")] public static extern long CResult_SignDecodeErrorZ_err(long _e);
	// bool CResult_SignDecodeErrorZ_is_ok(const struct LDKCResult_SignDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignDecodeErrorZ_is_ok")] public static extern bool CResult_SignDecodeErrorZ_is_ok(long _o);
	// void CResult_SignDecodeErrorZ_free(struct LDKCResult_SignDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignDecodeErrorZ_free")] public static extern void CResult_SignDecodeErrorZ_free(long __res);
	// uint64_t CResult_SignDecodeErrorZ_clone_ptr(LDKCResult_SignDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignDecodeErrorZ_clone_ptr")] public static extern long CResult_SignDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_SignDecodeErrorZ CResult_SignDecodeErrorZ_clone(const struct LDKCResult_SignDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignDecodeErrorZ_clone")] public static extern long CResult_SignDecodeErrorZ_clone(long _orig);
	// void CVec_U5Z_free(struct LDKCVec_U5Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_U5Z_free")] public static extern void CVec_U5Z_free(byte[] __res);
	// struct LDKCResult_RecoverableSignatureNoneZ CResult_RecoverableSignatureNoneZ_ok(struct LDKRecoverableSignature o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecoverableSignatureNoneZ_ok")] public static extern long CResult_RecoverableSignatureNoneZ_ok(byte[] _o);
	// struct LDKCResult_RecoverableSignatureNoneZ CResult_RecoverableSignatureNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecoverableSignatureNoneZ_err")] public static extern long CResult_RecoverableSignatureNoneZ_err();
	// bool CResult_RecoverableSignatureNoneZ_is_ok(const struct LDKCResult_RecoverableSignatureNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecoverableSignatureNoneZ_is_ok")] public static extern bool CResult_RecoverableSignatureNoneZ_is_ok(long _o);
	// void CResult_RecoverableSignatureNoneZ_free(struct LDKCResult_RecoverableSignatureNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecoverableSignatureNoneZ_free")] public static extern void CResult_RecoverableSignatureNoneZ_free(long __res);
	// uint64_t CResult_RecoverableSignatureNoneZ_clone_ptr(LDKCResult_RecoverableSignatureNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecoverableSignatureNoneZ_clone_ptr")] public static extern long CResult_RecoverableSignatureNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_RecoverableSignatureNoneZ CResult_RecoverableSignatureNoneZ_clone(const struct LDKCResult_RecoverableSignatureNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecoverableSignatureNoneZ_clone")] public static extern long CResult_RecoverableSignatureNoneZ_clone(long _orig);
	// void CVec_u8Z_free(struct LDKCVec_u8Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_u8Z_free")] public static extern void CVec_u8Z_free(byte[] __res);
	// void CVec_CVec_u8ZZ_free(struct LDKCVec_CVec_u8ZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_CVec_u8ZZ_free")] public static extern void CVec_CVec_u8ZZ_free(byte[][] __res);
	// struct LDKCResult_CVec_CVec_u8ZZNoneZ CResult_CVec_CVec_u8ZZNoneZ_ok(struct LDKCVec_CVec_u8ZZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_CVec_u8ZZNoneZ_ok")] public static extern long CResult_CVec_CVec_u8ZZNoneZ_ok(byte[][] _o);
	// struct LDKCResult_CVec_CVec_u8ZZNoneZ CResult_CVec_CVec_u8ZZNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_CVec_u8ZZNoneZ_err")] public static extern long CResult_CVec_CVec_u8ZZNoneZ_err();
	// bool CResult_CVec_CVec_u8ZZNoneZ_is_ok(const struct LDKCResult_CVec_CVec_u8ZZNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_CVec_u8ZZNoneZ_is_ok")] public static extern bool CResult_CVec_CVec_u8ZZNoneZ_is_ok(long _o);
	// void CResult_CVec_CVec_u8ZZNoneZ_free(struct LDKCResult_CVec_CVec_u8ZZNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_CVec_u8ZZNoneZ_free")] public static extern void CResult_CVec_CVec_u8ZZNoneZ_free(long __res);
	// uint64_t CResult_CVec_CVec_u8ZZNoneZ_clone_ptr(LDKCResult_CVec_CVec_u8ZZNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_CVec_u8ZZNoneZ_clone_ptr")] public static extern long CResult_CVec_CVec_u8ZZNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_CVec_CVec_u8ZZNoneZ CResult_CVec_CVec_u8ZZNoneZ_clone(const struct LDKCResult_CVec_CVec_u8ZZNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_CVec_u8ZZNoneZ_clone")] public static extern long CResult_CVec_CVec_u8ZZNoneZ_clone(long _orig);
	// struct LDKCResult_InMemorySignerDecodeErrorZ CResult_InMemorySignerDecodeErrorZ_ok(struct LDKInMemorySigner o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InMemorySignerDecodeErrorZ_ok")] public static extern long CResult_InMemorySignerDecodeErrorZ_ok(long _o);
	// struct LDKCResult_InMemorySignerDecodeErrorZ CResult_InMemorySignerDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InMemorySignerDecodeErrorZ_err")] public static extern long CResult_InMemorySignerDecodeErrorZ_err(long _e);
	// bool CResult_InMemorySignerDecodeErrorZ_is_ok(const struct LDKCResult_InMemorySignerDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InMemorySignerDecodeErrorZ_is_ok")] public static extern bool CResult_InMemorySignerDecodeErrorZ_is_ok(long _o);
	// void CResult_InMemorySignerDecodeErrorZ_free(struct LDKCResult_InMemorySignerDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InMemorySignerDecodeErrorZ_free")] public static extern void CResult_InMemorySignerDecodeErrorZ_free(long __res);
	// uint64_t CResult_InMemorySignerDecodeErrorZ_clone_ptr(LDKCResult_InMemorySignerDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InMemorySignerDecodeErrorZ_clone_ptr")] public static extern long CResult_InMemorySignerDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_InMemorySignerDecodeErrorZ CResult_InMemorySignerDecodeErrorZ_clone(const struct LDKCResult_InMemorySignerDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InMemorySignerDecodeErrorZ_clone")] public static extern long CResult_InMemorySignerDecodeErrorZ_clone(long _orig);
	// void CVec_TxOutZ_free(struct LDKCVec_TxOutZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_TxOutZ_free")] public static extern void CVec_TxOutZ_free(long[] __res);
	// struct LDKCResult_TransactionNoneZ CResult_TransactionNoneZ_ok(struct LDKTransaction o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionNoneZ_ok")] public static extern long CResult_TransactionNoneZ_ok(byte[] _o);
	// struct LDKCResult_TransactionNoneZ CResult_TransactionNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionNoneZ_err")] public static extern long CResult_TransactionNoneZ_err();
	// bool CResult_TransactionNoneZ_is_ok(const struct LDKCResult_TransactionNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionNoneZ_is_ok")] public static extern bool CResult_TransactionNoneZ_is_ok(long _o);
	// void CResult_TransactionNoneZ_free(struct LDKCResult_TransactionNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionNoneZ_free")] public static extern void CResult_TransactionNoneZ_free(long __res);
	// uint64_t CResult_TransactionNoneZ_clone_ptr(LDKCResult_TransactionNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionNoneZ_clone_ptr")] public static extern long CResult_TransactionNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_TransactionNoneZ CResult_TransactionNoneZ_clone(const struct LDKCResult_TransactionNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionNoneZ_clone")] public static extern long CResult_TransactionNoneZ_clone(long _orig);
	// uint64_t C2Tuple_BlockHashChannelMonitorZ_clone_ptr(LDKC2Tuple_BlockHashChannelMonitorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_BlockHashChannelMonitorZ_clone_ptr")] public static extern long C2Tuple_BlockHashChannelMonitorZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_BlockHashChannelMonitorZ C2Tuple_BlockHashChannelMonitorZ_clone(const struct LDKC2Tuple_BlockHashChannelMonitorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_BlockHashChannelMonitorZ_clone")] public static extern long C2Tuple_BlockHashChannelMonitorZ_clone(long _orig);
	// struct LDKC2Tuple_BlockHashChannelMonitorZ C2Tuple_BlockHashChannelMonitorZ_new(struct LDKThirtyTwoBytes a, struct LDKChannelMonitor b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_BlockHashChannelMonitorZ_new")] public static extern long C2Tuple_BlockHashChannelMonitorZ_new(byte[] _a, long _b);
	// void C2Tuple_BlockHashChannelMonitorZ_free(struct LDKC2Tuple_BlockHashChannelMonitorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_BlockHashChannelMonitorZ_free")] public static extern void C2Tuple_BlockHashChannelMonitorZ_free(long __res);
	// void CVec_C2Tuple_BlockHashChannelMonitorZZ_free(struct LDKCVec_C2Tuple_BlockHashChannelMonitorZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_BlockHashChannelMonitorZZ_free")] public static extern void CVec_C2Tuple_BlockHashChannelMonitorZZ_free(long[] __res);
	// struct LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_ok(struct LDKCVec_C2Tuple_BlockHashChannelMonitorZZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_ok")] public static extern long CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_ok(long[] _o);
	// struct LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_err(enum LDKIOError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_err")] public static extern long CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_err(IOError _e);
	// bool CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_is_ok(const struct LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_is_ok")] public static extern bool CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_is_ok(long _o);
	// void CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_free(struct LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_free")] public static extern void CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_free(long __res);
	// uint64_t CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_clone_ptr(LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_clone_ptr")] public static extern long CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_clone(const struct LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_clone")] public static extern long CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_clone(long _orig);
	// struct LDKCOption_u16Z COption_u16Z_some(uint16_t o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u16Z_some")] public static extern long COption_u16Z_some(short _o);
	// struct LDKCOption_u16Z COption_u16Z_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u16Z_none")] public static extern long COption_u16Z_none();
	// void COption_u16Z_free(struct LDKCOption_u16Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u16Z_free")] public static extern void COption_u16Z_free(long __res);
	// uint64_t COption_u16Z_clone_ptr(LDKCOption_u16Z *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u16Z_clone_ptr")] public static extern long COption_u16Z_clone_ptr(long _arg);
	// struct LDKCOption_u16Z COption_u16Z_clone(const struct LDKCOption_u16Z *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u16Z_clone")] public static extern long COption_u16Z_clone(long _orig);
	// struct LDKCResult_NoneAPIErrorZ CResult_NoneAPIErrorZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneAPIErrorZ_ok")] public static extern long CResult_NoneAPIErrorZ_ok();
	// struct LDKCResult_NoneAPIErrorZ CResult_NoneAPIErrorZ_err(struct LDKAPIError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneAPIErrorZ_err")] public static extern long CResult_NoneAPIErrorZ_err(long _e);
	// bool CResult_NoneAPIErrorZ_is_ok(const struct LDKCResult_NoneAPIErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneAPIErrorZ_is_ok")] public static extern bool CResult_NoneAPIErrorZ_is_ok(long _o);
	// void CResult_NoneAPIErrorZ_free(struct LDKCResult_NoneAPIErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneAPIErrorZ_free")] public static extern void CResult_NoneAPIErrorZ_free(long __res);
	// uint64_t CResult_NoneAPIErrorZ_clone_ptr(LDKCResult_NoneAPIErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneAPIErrorZ_clone_ptr")] public static extern long CResult_NoneAPIErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_NoneAPIErrorZ CResult_NoneAPIErrorZ_clone(const struct LDKCResult_NoneAPIErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneAPIErrorZ_clone")] public static extern long CResult_NoneAPIErrorZ_clone(long _orig);
	// void CVec_CResult_NoneAPIErrorZZ_free(struct LDKCVec_CResult_NoneAPIErrorZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_CResult_NoneAPIErrorZZ_free")] public static extern void CVec_CResult_NoneAPIErrorZZ_free(long[] __res);
	// void CVec_APIErrorZ_free(struct LDKCVec_APIErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_APIErrorZ_free")] public static extern void CVec_APIErrorZ_free(long[] __res);
	// struct LDKCResult__u832APIErrorZ CResult__u832APIErrorZ_ok(struct LDKThirtyTwoBytes o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult__u832APIErrorZ_ok")] public static extern long CResult__u832APIErrorZ_ok(byte[] _o);
	// struct LDKCResult__u832APIErrorZ CResult__u832APIErrorZ_err(struct LDKAPIError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult__u832APIErrorZ_err")] public static extern long CResult__u832APIErrorZ_err(long _e);
	// bool CResult__u832APIErrorZ_is_ok(const struct LDKCResult__u832APIErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult__u832APIErrorZ_is_ok")] public static extern bool CResult__u832APIErrorZ_is_ok(long _o);
	// void CResult__u832APIErrorZ_free(struct LDKCResult__u832APIErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult__u832APIErrorZ_free")] public static extern void CResult__u832APIErrorZ_free(long __res);
	// uint64_t CResult__u832APIErrorZ_clone_ptr(LDKCResult__u832APIErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult__u832APIErrorZ_clone_ptr")] public static extern long CResult__u832APIErrorZ_clone_ptr(long _arg);
	// struct LDKCResult__u832APIErrorZ CResult__u832APIErrorZ_clone(const struct LDKCResult__u832APIErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult__u832APIErrorZ_clone")] public static extern long CResult__u832APIErrorZ_clone(long _orig);
	// struct LDKCResult_NonePaymentSendFailureZ CResult_NonePaymentSendFailureZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePaymentSendFailureZ_ok")] public static extern long CResult_NonePaymentSendFailureZ_ok();
	// struct LDKCResult_NonePaymentSendFailureZ CResult_NonePaymentSendFailureZ_err(struct LDKPaymentSendFailure e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePaymentSendFailureZ_err")] public static extern long CResult_NonePaymentSendFailureZ_err(long _e);
	// bool CResult_NonePaymentSendFailureZ_is_ok(const struct LDKCResult_NonePaymentSendFailureZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePaymentSendFailureZ_is_ok")] public static extern bool CResult_NonePaymentSendFailureZ_is_ok(long _o);
	// void CResult_NonePaymentSendFailureZ_free(struct LDKCResult_NonePaymentSendFailureZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePaymentSendFailureZ_free")] public static extern void CResult_NonePaymentSendFailureZ_free(long __res);
	// uint64_t CResult_NonePaymentSendFailureZ_clone_ptr(LDKCResult_NonePaymentSendFailureZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePaymentSendFailureZ_clone_ptr")] public static extern long CResult_NonePaymentSendFailureZ_clone_ptr(long _arg);
	// struct LDKCResult_NonePaymentSendFailureZ CResult_NonePaymentSendFailureZ_clone(const struct LDKCResult_NonePaymentSendFailureZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePaymentSendFailureZ_clone")] public static extern long CResult_NonePaymentSendFailureZ_clone(long _orig);
	// struct LDKCResult_PaymentHashPaymentSendFailureZ CResult_PaymentHashPaymentSendFailureZ_ok(struct LDKThirtyTwoBytes o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentHashPaymentSendFailureZ_ok")] public static extern long CResult_PaymentHashPaymentSendFailureZ_ok(byte[] _o);
	// struct LDKCResult_PaymentHashPaymentSendFailureZ CResult_PaymentHashPaymentSendFailureZ_err(struct LDKPaymentSendFailure e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentHashPaymentSendFailureZ_err")] public static extern long CResult_PaymentHashPaymentSendFailureZ_err(long _e);
	// bool CResult_PaymentHashPaymentSendFailureZ_is_ok(const struct LDKCResult_PaymentHashPaymentSendFailureZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentHashPaymentSendFailureZ_is_ok")] public static extern bool CResult_PaymentHashPaymentSendFailureZ_is_ok(long _o);
	// void CResult_PaymentHashPaymentSendFailureZ_free(struct LDKCResult_PaymentHashPaymentSendFailureZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentHashPaymentSendFailureZ_free")] public static extern void CResult_PaymentHashPaymentSendFailureZ_free(long __res);
	// uint64_t CResult_PaymentHashPaymentSendFailureZ_clone_ptr(LDKCResult_PaymentHashPaymentSendFailureZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentHashPaymentSendFailureZ_clone_ptr")] public static extern long CResult_PaymentHashPaymentSendFailureZ_clone_ptr(long _arg);
	// struct LDKCResult_PaymentHashPaymentSendFailureZ CResult_PaymentHashPaymentSendFailureZ_clone(const struct LDKCResult_PaymentHashPaymentSendFailureZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentHashPaymentSendFailureZ_clone")] public static extern long CResult_PaymentHashPaymentSendFailureZ_clone(long _orig);
	// uint64_t C2Tuple_PaymentHashPaymentIdZ_clone_ptr(LDKC2Tuple_PaymentHashPaymentIdZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PaymentHashPaymentIdZ_clone_ptr")] public static extern long C2Tuple_PaymentHashPaymentIdZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_PaymentHashPaymentIdZ C2Tuple_PaymentHashPaymentIdZ_clone(const struct LDKC2Tuple_PaymentHashPaymentIdZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PaymentHashPaymentIdZ_clone")] public static extern long C2Tuple_PaymentHashPaymentIdZ_clone(long _orig);
	// struct LDKC2Tuple_PaymentHashPaymentIdZ C2Tuple_PaymentHashPaymentIdZ_new(struct LDKThirtyTwoBytes a, struct LDKThirtyTwoBytes b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PaymentHashPaymentIdZ_new")] public static extern long C2Tuple_PaymentHashPaymentIdZ_new(byte[] _a, byte[] _b);
	// void C2Tuple_PaymentHashPaymentIdZ_free(struct LDKC2Tuple_PaymentHashPaymentIdZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PaymentHashPaymentIdZ_free")] public static extern void C2Tuple_PaymentHashPaymentIdZ_free(long __res);
	// struct LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_ok(struct LDKC2Tuple_PaymentHashPaymentIdZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_ok")] public static extern long CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_ok(long _o);
	// struct LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_err(struct LDKPaymentSendFailure e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_err")] public static extern long CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_err(long _e);
	// bool CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_is_ok(const struct LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_is_ok")] public static extern bool CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_is_ok(long _o);
	// void CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_free(struct LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_free")] public static extern void CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_free(long __res);
	// uint64_t CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_clone_ptr(LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_clone_ptr")] public static extern long CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_clone_ptr(long _arg);
	// struct LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_clone(const struct LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_clone")] public static extern long CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_clone(long _orig);
	// void CVec_ThirtyTwoBytesZ_free(struct LDKCVec_ThirtyTwoBytesZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_ThirtyTwoBytesZ_free")] public static extern void CVec_ThirtyTwoBytesZ_free(byte[][] __res);
	// uint64_t C2Tuple_PaymentHashPaymentSecretZ_clone_ptr(LDKC2Tuple_PaymentHashPaymentSecretZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PaymentHashPaymentSecretZ_clone_ptr")] public static extern long C2Tuple_PaymentHashPaymentSecretZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_PaymentHashPaymentSecretZ C2Tuple_PaymentHashPaymentSecretZ_clone(const struct LDKC2Tuple_PaymentHashPaymentSecretZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PaymentHashPaymentSecretZ_clone")] public static extern long C2Tuple_PaymentHashPaymentSecretZ_clone(long _orig);
	// struct LDKC2Tuple_PaymentHashPaymentSecretZ C2Tuple_PaymentHashPaymentSecretZ_new(struct LDKThirtyTwoBytes a, struct LDKThirtyTwoBytes b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PaymentHashPaymentSecretZ_new")] public static extern long C2Tuple_PaymentHashPaymentSecretZ_new(byte[] _a, byte[] _b);
	// void C2Tuple_PaymentHashPaymentSecretZ_free(struct LDKC2Tuple_PaymentHashPaymentSecretZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PaymentHashPaymentSecretZ_free")] public static extern void C2Tuple_PaymentHashPaymentSecretZ_free(long __res);
	// struct LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_ok(struct LDKC2Tuple_PaymentHashPaymentSecretZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_ok")] public static extern long CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_ok(long _o);
	// struct LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_err")] public static extern long CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_err();
	// bool CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_is_ok(const struct LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_is_ok")] public static extern bool CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_is_ok(long _o);
	// void CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_free(struct LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_free")] public static extern void CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_free(long __res);
	// uint64_t CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_clone_ptr(LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_clone_ptr")] public static extern long CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_clone(const struct LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_clone")] public static extern long CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_clone(long _orig);
	// struct LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_ok(struct LDKC2Tuple_PaymentHashPaymentSecretZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_ok")] public static extern long CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_ok(long _o);
	// struct LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_err(struct LDKAPIError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_err")] public static extern long CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_err(long _e);
	// bool CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_is_ok(const struct LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_is_ok")] public static extern bool CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_is_ok(long _o);
	// void CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_free(struct LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_free")] public static extern void CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_free(long __res);
	// uint64_t CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_clone_ptr(LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_clone_ptr")] public static extern long CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_clone(const struct LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_clone")] public static extern long CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_clone(long _orig);
	// struct LDKCResult_PaymentSecretNoneZ CResult_PaymentSecretNoneZ_ok(struct LDKThirtyTwoBytes o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentSecretNoneZ_ok")] public static extern long CResult_PaymentSecretNoneZ_ok(byte[] _o);
	// struct LDKCResult_PaymentSecretNoneZ CResult_PaymentSecretNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentSecretNoneZ_err")] public static extern long CResult_PaymentSecretNoneZ_err();
	// bool CResult_PaymentSecretNoneZ_is_ok(const struct LDKCResult_PaymentSecretNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentSecretNoneZ_is_ok")] public static extern bool CResult_PaymentSecretNoneZ_is_ok(long _o);
	// void CResult_PaymentSecretNoneZ_free(struct LDKCResult_PaymentSecretNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentSecretNoneZ_free")] public static extern void CResult_PaymentSecretNoneZ_free(long __res);
	// uint64_t CResult_PaymentSecretNoneZ_clone_ptr(LDKCResult_PaymentSecretNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentSecretNoneZ_clone_ptr")] public static extern long CResult_PaymentSecretNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_PaymentSecretNoneZ CResult_PaymentSecretNoneZ_clone(const struct LDKCResult_PaymentSecretNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentSecretNoneZ_clone")] public static extern long CResult_PaymentSecretNoneZ_clone(long _orig);
	// struct LDKCResult_PaymentSecretAPIErrorZ CResult_PaymentSecretAPIErrorZ_ok(struct LDKThirtyTwoBytes o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentSecretAPIErrorZ_ok")] public static extern long CResult_PaymentSecretAPIErrorZ_ok(byte[] _o);
	// struct LDKCResult_PaymentSecretAPIErrorZ CResult_PaymentSecretAPIErrorZ_err(struct LDKAPIError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentSecretAPIErrorZ_err")] public static extern long CResult_PaymentSecretAPIErrorZ_err(long _e);
	// bool CResult_PaymentSecretAPIErrorZ_is_ok(const struct LDKCResult_PaymentSecretAPIErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentSecretAPIErrorZ_is_ok")] public static extern bool CResult_PaymentSecretAPIErrorZ_is_ok(long _o);
	// void CResult_PaymentSecretAPIErrorZ_free(struct LDKCResult_PaymentSecretAPIErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentSecretAPIErrorZ_free")] public static extern void CResult_PaymentSecretAPIErrorZ_free(long __res);
	// uint64_t CResult_PaymentSecretAPIErrorZ_clone_ptr(LDKCResult_PaymentSecretAPIErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentSecretAPIErrorZ_clone_ptr")] public static extern long CResult_PaymentSecretAPIErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_PaymentSecretAPIErrorZ CResult_PaymentSecretAPIErrorZ_clone(const struct LDKCResult_PaymentSecretAPIErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentSecretAPIErrorZ_clone")] public static extern long CResult_PaymentSecretAPIErrorZ_clone(long _orig);
	// struct LDKCResult_PaymentPreimageAPIErrorZ CResult_PaymentPreimageAPIErrorZ_ok(struct LDKThirtyTwoBytes o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPreimageAPIErrorZ_ok")] public static extern long CResult_PaymentPreimageAPIErrorZ_ok(byte[] _o);
	// struct LDKCResult_PaymentPreimageAPIErrorZ CResult_PaymentPreimageAPIErrorZ_err(struct LDKAPIError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPreimageAPIErrorZ_err")] public static extern long CResult_PaymentPreimageAPIErrorZ_err(long _e);
	// bool CResult_PaymentPreimageAPIErrorZ_is_ok(const struct LDKCResult_PaymentPreimageAPIErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPreimageAPIErrorZ_is_ok")] public static extern bool CResult_PaymentPreimageAPIErrorZ_is_ok(long _o);
	// void CResult_PaymentPreimageAPIErrorZ_free(struct LDKCResult_PaymentPreimageAPIErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPreimageAPIErrorZ_free")] public static extern void CResult_PaymentPreimageAPIErrorZ_free(long __res);
	// uint64_t CResult_PaymentPreimageAPIErrorZ_clone_ptr(LDKCResult_PaymentPreimageAPIErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPreimageAPIErrorZ_clone_ptr")] public static extern long CResult_PaymentPreimageAPIErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_PaymentPreimageAPIErrorZ CResult_PaymentPreimageAPIErrorZ_clone(const struct LDKCResult_PaymentPreimageAPIErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPreimageAPIErrorZ_clone")] public static extern long CResult_PaymentPreimageAPIErrorZ_clone(long _orig);
	// struct LDKCResult_CounterpartyForwardingInfoDecodeErrorZ CResult_CounterpartyForwardingInfoDecodeErrorZ_ok(struct LDKCounterpartyForwardingInfo o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyForwardingInfoDecodeErrorZ_ok")] public static extern long CResult_CounterpartyForwardingInfoDecodeErrorZ_ok(long _o);
	// struct LDKCResult_CounterpartyForwardingInfoDecodeErrorZ CResult_CounterpartyForwardingInfoDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyForwardingInfoDecodeErrorZ_err")] public static extern long CResult_CounterpartyForwardingInfoDecodeErrorZ_err(long _e);
	// bool CResult_CounterpartyForwardingInfoDecodeErrorZ_is_ok(const struct LDKCResult_CounterpartyForwardingInfoDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyForwardingInfoDecodeErrorZ_is_ok")] public static extern bool CResult_CounterpartyForwardingInfoDecodeErrorZ_is_ok(long _o);
	// void CResult_CounterpartyForwardingInfoDecodeErrorZ_free(struct LDKCResult_CounterpartyForwardingInfoDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyForwardingInfoDecodeErrorZ_free")] public static extern void CResult_CounterpartyForwardingInfoDecodeErrorZ_free(long __res);
	// uint64_t CResult_CounterpartyForwardingInfoDecodeErrorZ_clone_ptr(LDKCResult_CounterpartyForwardingInfoDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyForwardingInfoDecodeErrorZ_clone_ptr")] public static extern long CResult_CounterpartyForwardingInfoDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_CounterpartyForwardingInfoDecodeErrorZ CResult_CounterpartyForwardingInfoDecodeErrorZ_clone(const struct LDKCResult_CounterpartyForwardingInfoDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyForwardingInfoDecodeErrorZ_clone")] public static extern long CResult_CounterpartyForwardingInfoDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ChannelCounterpartyDecodeErrorZ CResult_ChannelCounterpartyDecodeErrorZ_ok(struct LDKChannelCounterparty o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelCounterpartyDecodeErrorZ_ok")] public static extern long CResult_ChannelCounterpartyDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelCounterpartyDecodeErrorZ CResult_ChannelCounterpartyDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelCounterpartyDecodeErrorZ_err")] public static extern long CResult_ChannelCounterpartyDecodeErrorZ_err(long _e);
	// bool CResult_ChannelCounterpartyDecodeErrorZ_is_ok(const struct LDKCResult_ChannelCounterpartyDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelCounterpartyDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelCounterpartyDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelCounterpartyDecodeErrorZ_free(struct LDKCResult_ChannelCounterpartyDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelCounterpartyDecodeErrorZ_free")] public static extern void CResult_ChannelCounterpartyDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelCounterpartyDecodeErrorZ_clone_ptr(LDKCResult_ChannelCounterpartyDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelCounterpartyDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelCounterpartyDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelCounterpartyDecodeErrorZ CResult_ChannelCounterpartyDecodeErrorZ_clone(const struct LDKCResult_ChannelCounterpartyDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelCounterpartyDecodeErrorZ_clone")] public static extern long CResult_ChannelCounterpartyDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ChannelDetailsDecodeErrorZ CResult_ChannelDetailsDecodeErrorZ_ok(struct LDKChannelDetails o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDetailsDecodeErrorZ_ok")] public static extern long CResult_ChannelDetailsDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelDetailsDecodeErrorZ CResult_ChannelDetailsDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDetailsDecodeErrorZ_err")] public static extern long CResult_ChannelDetailsDecodeErrorZ_err(long _e);
	// bool CResult_ChannelDetailsDecodeErrorZ_is_ok(const struct LDKCResult_ChannelDetailsDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDetailsDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelDetailsDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelDetailsDecodeErrorZ_free(struct LDKCResult_ChannelDetailsDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDetailsDecodeErrorZ_free")] public static extern void CResult_ChannelDetailsDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelDetailsDecodeErrorZ_clone_ptr(LDKCResult_ChannelDetailsDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDetailsDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelDetailsDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelDetailsDecodeErrorZ CResult_ChannelDetailsDecodeErrorZ_clone(const struct LDKCResult_ChannelDetailsDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDetailsDecodeErrorZ_clone")] public static extern long CResult_ChannelDetailsDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_PhantomRouteHintsDecodeErrorZ CResult_PhantomRouteHintsDecodeErrorZ_ok(struct LDKPhantomRouteHints o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PhantomRouteHintsDecodeErrorZ_ok")] public static extern long CResult_PhantomRouteHintsDecodeErrorZ_ok(long _o);
	// struct LDKCResult_PhantomRouteHintsDecodeErrorZ CResult_PhantomRouteHintsDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PhantomRouteHintsDecodeErrorZ_err")] public static extern long CResult_PhantomRouteHintsDecodeErrorZ_err(long _e);
	// bool CResult_PhantomRouteHintsDecodeErrorZ_is_ok(const struct LDKCResult_PhantomRouteHintsDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PhantomRouteHintsDecodeErrorZ_is_ok")] public static extern bool CResult_PhantomRouteHintsDecodeErrorZ_is_ok(long _o);
	// void CResult_PhantomRouteHintsDecodeErrorZ_free(struct LDKCResult_PhantomRouteHintsDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PhantomRouteHintsDecodeErrorZ_free")] public static extern void CResult_PhantomRouteHintsDecodeErrorZ_free(long __res);
	// uint64_t CResult_PhantomRouteHintsDecodeErrorZ_clone_ptr(LDKCResult_PhantomRouteHintsDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PhantomRouteHintsDecodeErrorZ_clone_ptr")] public static extern long CResult_PhantomRouteHintsDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_PhantomRouteHintsDecodeErrorZ CResult_PhantomRouteHintsDecodeErrorZ_clone(const struct LDKCResult_PhantomRouteHintsDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PhantomRouteHintsDecodeErrorZ_clone")] public static extern long CResult_PhantomRouteHintsDecodeErrorZ_clone(long _orig);
	// void CVec_ChannelMonitorZ_free(struct LDKCVec_ChannelMonitorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_ChannelMonitorZ_free")] public static extern void CVec_ChannelMonitorZ_free(long[] __res);
	// struct LDKC2Tuple_BlockHashChannelManagerZ C2Tuple_BlockHashChannelManagerZ_new(struct LDKThirtyTwoBytes a, struct LDKChannelManager b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_BlockHashChannelManagerZ_new")] public static extern long C2Tuple_BlockHashChannelManagerZ_new(byte[] _a, long _b);
	// void C2Tuple_BlockHashChannelManagerZ_free(struct LDKC2Tuple_BlockHashChannelManagerZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_BlockHashChannelManagerZ_free")] public static extern void C2Tuple_BlockHashChannelManagerZ_free(long __res);
	// struct LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ CResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ_ok(struct LDKC2Tuple_BlockHashChannelManagerZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ_ok")] public static extern long CResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ_ok(long _o);
	// struct LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ CResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ_err")] public static extern long CResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ_err(long _e);
	// bool CResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ_is_ok(const struct LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ_is_ok")] public static extern bool CResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ_is_ok(long _o);
	// void CResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ_free(struct LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ_free")] public static extern void CResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ_free(long __res);
	// struct LDKCResult_ChannelConfigDecodeErrorZ CResult_ChannelConfigDecodeErrorZ_ok(struct LDKChannelConfig o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelConfigDecodeErrorZ_ok")] public static extern long CResult_ChannelConfigDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelConfigDecodeErrorZ CResult_ChannelConfigDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelConfigDecodeErrorZ_err")] public static extern long CResult_ChannelConfigDecodeErrorZ_err(long _e);
	// bool CResult_ChannelConfigDecodeErrorZ_is_ok(const struct LDKCResult_ChannelConfigDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelConfigDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelConfigDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelConfigDecodeErrorZ_free(struct LDKCResult_ChannelConfigDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelConfigDecodeErrorZ_free")] public static extern void CResult_ChannelConfigDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelConfigDecodeErrorZ_clone_ptr(LDKCResult_ChannelConfigDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelConfigDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelConfigDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelConfigDecodeErrorZ CResult_ChannelConfigDecodeErrorZ_clone(const struct LDKCResult_ChannelConfigDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelConfigDecodeErrorZ_clone")] public static extern long CResult_ChannelConfigDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_OutPointDecodeErrorZ CResult_OutPointDecodeErrorZ_ok(struct LDKOutPoint o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutPointDecodeErrorZ_ok")] public static extern long CResult_OutPointDecodeErrorZ_ok(long _o);
	// struct LDKCResult_OutPointDecodeErrorZ CResult_OutPointDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutPointDecodeErrorZ_err")] public static extern long CResult_OutPointDecodeErrorZ_err(long _e);
	// bool CResult_OutPointDecodeErrorZ_is_ok(const struct LDKCResult_OutPointDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutPointDecodeErrorZ_is_ok")] public static extern bool CResult_OutPointDecodeErrorZ_is_ok(long _o);
	// void CResult_OutPointDecodeErrorZ_free(struct LDKCResult_OutPointDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutPointDecodeErrorZ_free")] public static extern void CResult_OutPointDecodeErrorZ_free(long __res);
	// uint64_t CResult_OutPointDecodeErrorZ_clone_ptr(LDKCResult_OutPointDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutPointDecodeErrorZ_clone_ptr")] public static extern long CResult_OutPointDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_OutPointDecodeErrorZ CResult_OutPointDecodeErrorZ_clone(const struct LDKCResult_OutPointDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutPointDecodeErrorZ_clone")] public static extern long CResult_OutPointDecodeErrorZ_clone(long _orig);
	// struct LDKCOption_TypeZ COption_TypeZ_some(struct LDKType o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_TypeZ_some")] public static extern long COption_TypeZ_some(long _o);
	// struct LDKCOption_TypeZ COption_TypeZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_TypeZ_none")] public static extern long COption_TypeZ_none();
	// void COption_TypeZ_free(struct LDKCOption_TypeZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_TypeZ_free")] public static extern void COption_TypeZ_free(long __res);
	// uint64_t COption_TypeZ_clone_ptr(LDKCOption_TypeZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_TypeZ_clone_ptr")] public static extern long COption_TypeZ_clone_ptr(long _arg);
	// struct LDKCOption_TypeZ COption_TypeZ_clone(const struct LDKCOption_TypeZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_TypeZ_clone")] public static extern long COption_TypeZ_clone(long _orig);
	// struct LDKCResult_COption_TypeZDecodeErrorZ CResult_COption_TypeZDecodeErrorZ_ok(struct LDKCOption_TypeZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_TypeZDecodeErrorZ_ok")] public static extern long CResult_COption_TypeZDecodeErrorZ_ok(long _o);
	// struct LDKCResult_COption_TypeZDecodeErrorZ CResult_COption_TypeZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_TypeZDecodeErrorZ_err")] public static extern long CResult_COption_TypeZDecodeErrorZ_err(long _e);
	// bool CResult_COption_TypeZDecodeErrorZ_is_ok(const struct LDKCResult_COption_TypeZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_TypeZDecodeErrorZ_is_ok")] public static extern bool CResult_COption_TypeZDecodeErrorZ_is_ok(long _o);
	// void CResult_COption_TypeZDecodeErrorZ_free(struct LDKCResult_COption_TypeZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_TypeZDecodeErrorZ_free")] public static extern void CResult_COption_TypeZDecodeErrorZ_free(long __res);
	// uint64_t CResult_COption_TypeZDecodeErrorZ_clone_ptr(LDKCResult_COption_TypeZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_TypeZDecodeErrorZ_clone_ptr")] public static extern long CResult_COption_TypeZDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_COption_TypeZDecodeErrorZ CResult_COption_TypeZDecodeErrorZ_clone(const struct LDKCResult_COption_TypeZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_TypeZDecodeErrorZ_clone")] public static extern long CResult_COption_TypeZDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_PaymentIdPaymentErrorZ CResult_PaymentIdPaymentErrorZ_ok(struct LDKThirtyTwoBytes o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentIdPaymentErrorZ_ok")] public static extern long CResult_PaymentIdPaymentErrorZ_ok(byte[] _o);
	// struct LDKCResult_PaymentIdPaymentErrorZ CResult_PaymentIdPaymentErrorZ_err(struct LDKPaymentError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentIdPaymentErrorZ_err")] public static extern long CResult_PaymentIdPaymentErrorZ_err(long _e);
	// bool CResult_PaymentIdPaymentErrorZ_is_ok(const struct LDKCResult_PaymentIdPaymentErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentIdPaymentErrorZ_is_ok")] public static extern bool CResult_PaymentIdPaymentErrorZ_is_ok(long _o);
	// void CResult_PaymentIdPaymentErrorZ_free(struct LDKCResult_PaymentIdPaymentErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentIdPaymentErrorZ_free")] public static extern void CResult_PaymentIdPaymentErrorZ_free(long __res);
	// uint64_t CResult_PaymentIdPaymentErrorZ_clone_ptr(LDKCResult_PaymentIdPaymentErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentIdPaymentErrorZ_clone_ptr")] public static extern long CResult_PaymentIdPaymentErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_PaymentIdPaymentErrorZ CResult_PaymentIdPaymentErrorZ_clone(const struct LDKCResult_PaymentIdPaymentErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentIdPaymentErrorZ_clone")] public static extern long CResult_PaymentIdPaymentErrorZ_clone(long _orig);
	// struct LDKCResult_NonePaymentErrorZ CResult_NonePaymentErrorZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePaymentErrorZ_ok")] public static extern long CResult_NonePaymentErrorZ_ok();
	// struct LDKCResult_NonePaymentErrorZ CResult_NonePaymentErrorZ_err(struct LDKPaymentError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePaymentErrorZ_err")] public static extern long CResult_NonePaymentErrorZ_err(long _e);
	// bool CResult_NonePaymentErrorZ_is_ok(const struct LDKCResult_NonePaymentErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePaymentErrorZ_is_ok")] public static extern bool CResult_NonePaymentErrorZ_is_ok(long _o);
	// void CResult_NonePaymentErrorZ_free(struct LDKCResult_NonePaymentErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePaymentErrorZ_free")] public static extern void CResult_NonePaymentErrorZ_free(long __res);
	// uint64_t CResult_NonePaymentErrorZ_clone_ptr(LDKCResult_NonePaymentErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePaymentErrorZ_clone_ptr")] public static extern long CResult_NonePaymentErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_NonePaymentErrorZ CResult_NonePaymentErrorZ_clone(const struct LDKCResult_NonePaymentErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePaymentErrorZ_clone")] public static extern long CResult_NonePaymentErrorZ_clone(long _orig);
	// struct LDKCResult_StringErrorZ CResult_StringErrorZ_ok(struct LDKStr o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StringErrorZ_ok")] public static extern long CResult_StringErrorZ_ok(string _o);
	// struct LDKCResult_StringErrorZ CResult_StringErrorZ_err(enum LDKSecp256k1Error e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StringErrorZ_err")] public static extern long CResult_StringErrorZ_err(Secp256k1Error _e);
	// bool CResult_StringErrorZ_is_ok(const struct LDKCResult_StringErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StringErrorZ_is_ok")] public static extern bool CResult_StringErrorZ_is_ok(long _o);
	// void CResult_StringErrorZ_free(struct LDKCResult_StringErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StringErrorZ_free")] public static extern void CResult_StringErrorZ_free(long __res);
	// uint64_t CResult_StringErrorZ_clone_ptr(LDKCResult_StringErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StringErrorZ_clone_ptr")] public static extern long CResult_StringErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_StringErrorZ CResult_StringErrorZ_clone(const struct LDKCResult_StringErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StringErrorZ_clone")] public static extern long CResult_StringErrorZ_clone(long _orig);
	// struct LDKCResult_PublicKeyErrorZ CResult_PublicKeyErrorZ_ok(struct LDKPublicKey o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyErrorZ_ok")] public static extern long CResult_PublicKeyErrorZ_ok(byte[] _o);
	// struct LDKCResult_PublicKeyErrorZ CResult_PublicKeyErrorZ_err(enum LDKSecp256k1Error e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyErrorZ_err")] public static extern long CResult_PublicKeyErrorZ_err(Secp256k1Error _e);
	// bool CResult_PublicKeyErrorZ_is_ok(const struct LDKCResult_PublicKeyErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyErrorZ_is_ok")] public static extern bool CResult_PublicKeyErrorZ_is_ok(long _o);
	// void CResult_PublicKeyErrorZ_free(struct LDKCResult_PublicKeyErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyErrorZ_free")] public static extern void CResult_PublicKeyErrorZ_free(long __res);
	// uint64_t CResult_PublicKeyErrorZ_clone_ptr(LDKCResult_PublicKeyErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyErrorZ_clone_ptr")] public static extern long CResult_PublicKeyErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_PublicKeyErrorZ CResult_PublicKeyErrorZ_clone(const struct LDKCResult_PublicKeyErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyErrorZ_clone")] public static extern long CResult_PublicKeyErrorZ_clone(long _orig);
	// struct LDKCResult_ChannelMonitorUpdateDecodeErrorZ CResult_ChannelMonitorUpdateDecodeErrorZ_ok(struct LDKChannelMonitorUpdate o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateDecodeErrorZ_ok")] public static extern long CResult_ChannelMonitorUpdateDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelMonitorUpdateDecodeErrorZ CResult_ChannelMonitorUpdateDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateDecodeErrorZ_err")] public static extern long CResult_ChannelMonitorUpdateDecodeErrorZ_err(long _e);
	// bool CResult_ChannelMonitorUpdateDecodeErrorZ_is_ok(const struct LDKCResult_ChannelMonitorUpdateDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelMonitorUpdateDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelMonitorUpdateDecodeErrorZ_free(struct LDKCResult_ChannelMonitorUpdateDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateDecodeErrorZ_free")] public static extern void CResult_ChannelMonitorUpdateDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelMonitorUpdateDecodeErrorZ_clone_ptr(LDKCResult_ChannelMonitorUpdateDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelMonitorUpdateDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelMonitorUpdateDecodeErrorZ CResult_ChannelMonitorUpdateDecodeErrorZ_clone(const struct LDKCResult_ChannelMonitorUpdateDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateDecodeErrorZ_clone")] public static extern long CResult_ChannelMonitorUpdateDecodeErrorZ_clone(long _orig);
	// struct LDKCOption_MonitorEventZ COption_MonitorEventZ_some(struct LDKMonitorEvent o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MonitorEventZ_some")] public static extern long COption_MonitorEventZ_some(long _o);
	// struct LDKCOption_MonitorEventZ COption_MonitorEventZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MonitorEventZ_none")] public static extern long COption_MonitorEventZ_none();
	// void COption_MonitorEventZ_free(struct LDKCOption_MonitorEventZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MonitorEventZ_free")] public static extern void COption_MonitorEventZ_free(long __res);
	// uint64_t COption_MonitorEventZ_clone_ptr(LDKCOption_MonitorEventZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MonitorEventZ_clone_ptr")] public static extern long COption_MonitorEventZ_clone_ptr(long _arg);
	// struct LDKCOption_MonitorEventZ COption_MonitorEventZ_clone(const struct LDKCOption_MonitorEventZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MonitorEventZ_clone")] public static extern long COption_MonitorEventZ_clone(long _orig);
	// struct LDKCResult_COption_MonitorEventZDecodeErrorZ CResult_COption_MonitorEventZDecodeErrorZ_ok(struct LDKCOption_MonitorEventZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_MonitorEventZDecodeErrorZ_ok")] public static extern long CResult_COption_MonitorEventZDecodeErrorZ_ok(long _o);
	// struct LDKCResult_COption_MonitorEventZDecodeErrorZ CResult_COption_MonitorEventZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_MonitorEventZDecodeErrorZ_err")] public static extern long CResult_COption_MonitorEventZDecodeErrorZ_err(long _e);
	// bool CResult_COption_MonitorEventZDecodeErrorZ_is_ok(const struct LDKCResult_COption_MonitorEventZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_MonitorEventZDecodeErrorZ_is_ok")] public static extern bool CResult_COption_MonitorEventZDecodeErrorZ_is_ok(long _o);
	// void CResult_COption_MonitorEventZDecodeErrorZ_free(struct LDKCResult_COption_MonitorEventZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_MonitorEventZDecodeErrorZ_free")] public static extern void CResult_COption_MonitorEventZDecodeErrorZ_free(long __res);
	// uint64_t CResult_COption_MonitorEventZDecodeErrorZ_clone_ptr(LDKCResult_COption_MonitorEventZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_MonitorEventZDecodeErrorZ_clone_ptr")] public static extern long CResult_COption_MonitorEventZDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_COption_MonitorEventZDecodeErrorZ CResult_COption_MonitorEventZDecodeErrorZ_clone(const struct LDKCResult_COption_MonitorEventZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_MonitorEventZDecodeErrorZ_clone")] public static extern long CResult_COption_MonitorEventZDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_HTLCUpdateDecodeErrorZ CResult_HTLCUpdateDecodeErrorZ_ok(struct LDKHTLCUpdate o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCUpdateDecodeErrorZ_ok")] public static extern long CResult_HTLCUpdateDecodeErrorZ_ok(long _o);
	// struct LDKCResult_HTLCUpdateDecodeErrorZ CResult_HTLCUpdateDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCUpdateDecodeErrorZ_err")] public static extern long CResult_HTLCUpdateDecodeErrorZ_err(long _e);
	// bool CResult_HTLCUpdateDecodeErrorZ_is_ok(const struct LDKCResult_HTLCUpdateDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCUpdateDecodeErrorZ_is_ok")] public static extern bool CResult_HTLCUpdateDecodeErrorZ_is_ok(long _o);
	// void CResult_HTLCUpdateDecodeErrorZ_free(struct LDKCResult_HTLCUpdateDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCUpdateDecodeErrorZ_free")] public static extern void CResult_HTLCUpdateDecodeErrorZ_free(long __res);
	// uint64_t CResult_HTLCUpdateDecodeErrorZ_clone_ptr(LDKCResult_HTLCUpdateDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCUpdateDecodeErrorZ_clone_ptr")] public static extern long CResult_HTLCUpdateDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_HTLCUpdateDecodeErrorZ CResult_HTLCUpdateDecodeErrorZ_clone(const struct LDKCResult_HTLCUpdateDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCUpdateDecodeErrorZ_clone")] public static extern long CResult_HTLCUpdateDecodeErrorZ_clone(long _orig);
	// uint64_t C2Tuple_OutPointScriptZ_clone_ptr(LDKC2Tuple_OutPointScriptZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointScriptZ_clone_ptr")] public static extern long C2Tuple_OutPointScriptZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_OutPointScriptZ C2Tuple_OutPointScriptZ_clone(const struct LDKC2Tuple_OutPointScriptZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointScriptZ_clone")] public static extern long C2Tuple_OutPointScriptZ_clone(long _orig);
	// struct LDKC2Tuple_OutPointScriptZ C2Tuple_OutPointScriptZ_new(struct LDKOutPoint a, struct LDKCVec_u8Z b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointScriptZ_new")] public static extern long C2Tuple_OutPointScriptZ_new(long _a, byte[] _b);
	// void C2Tuple_OutPointScriptZ_free(struct LDKC2Tuple_OutPointScriptZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointScriptZ_free")] public static extern void C2Tuple_OutPointScriptZ_free(long __res);
	// uint64_t C2Tuple_u32ScriptZ_clone_ptr(LDKC2Tuple_u32ScriptZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32ScriptZ_clone_ptr")] public static extern long C2Tuple_u32ScriptZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_u32ScriptZ C2Tuple_u32ScriptZ_clone(const struct LDKC2Tuple_u32ScriptZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32ScriptZ_clone")] public static extern long C2Tuple_u32ScriptZ_clone(long _orig);
	// struct LDKC2Tuple_u32ScriptZ C2Tuple_u32ScriptZ_new(uint32_t a, struct LDKCVec_u8Z b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32ScriptZ_new")] public static extern long C2Tuple_u32ScriptZ_new(int _a, byte[] _b);
	// void C2Tuple_u32ScriptZ_free(struct LDKC2Tuple_u32ScriptZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32ScriptZ_free")] public static extern void C2Tuple_u32ScriptZ_free(long __res);
	// void CVec_C2Tuple_u32ScriptZZ_free(struct LDKCVec_C2Tuple_u32ScriptZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_u32ScriptZZ_free")] public static extern void CVec_C2Tuple_u32ScriptZZ_free(long[] __res);
	// uint64_t C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_clone_ptr(LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_clone_ptr")] public static extern long C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_clone(const struct LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_clone")] public static extern long C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_clone(long _orig);
	// struct LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_new(struct LDKThirtyTwoBytes a, struct LDKCVec_C2Tuple_u32ScriptZZ b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_new")] public static extern long C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_new(byte[] _a, long[] _b);
	// void C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_free(struct LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_free")] public static extern void C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ_free(long __res);
	// void CVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZ_free(struct LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZ_free")] public static extern void CVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZ_free(long[] __res);
	// void CVec_EventZ_free(struct LDKCVec_EventZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_EventZ_free")] public static extern void CVec_EventZ_free(long[] __res);
	// void CVec_TransactionZ_free(struct LDKCVec_TransactionZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_TransactionZ_free")] public static extern void CVec_TransactionZ_free(byte[][] __res);
	// uint64_t C2Tuple_u32TxOutZ_clone_ptr(LDKC2Tuple_u32TxOutZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32TxOutZ_clone_ptr")] public static extern long C2Tuple_u32TxOutZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_u32TxOutZ C2Tuple_u32TxOutZ_clone(const struct LDKC2Tuple_u32TxOutZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32TxOutZ_clone")] public static extern long C2Tuple_u32TxOutZ_clone(long _orig);
	// struct LDKC2Tuple_u32TxOutZ C2Tuple_u32TxOutZ_new(uint32_t a, struct LDKTxOut b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32TxOutZ_new")] public static extern long C2Tuple_u32TxOutZ_new(int _a, long _b);
	// void C2Tuple_u32TxOutZ_free(struct LDKC2Tuple_u32TxOutZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32TxOutZ_free")] public static extern void C2Tuple_u32TxOutZ_free(long __res);
	// void CVec_C2Tuple_u32TxOutZZ_free(struct LDKCVec_C2Tuple_u32TxOutZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_u32TxOutZZ_free")] public static extern void CVec_C2Tuple_u32TxOutZZ_free(long[] __res);
	// uint64_t C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_clone_ptr(LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_clone_ptr")] public static extern long C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_clone(const struct LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_clone")] public static extern long C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_clone(long _orig);
	// struct LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_new(struct LDKThirtyTwoBytes a, struct LDKCVec_C2Tuple_u32TxOutZZ b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_new")] public static extern long C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_new(byte[] _a, long[] _b);
	// void C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_free(struct LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_free")] public static extern void C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ_free(long __res);
	// void CVec_C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZZ_free(struct LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZZ_free")] public static extern void CVec_C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZZ_free(long[] __res);
	// void CVec_BalanceZ_free(struct LDKCVec_BalanceZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_BalanceZ_free")] public static extern void CVec_BalanceZ_free(long[] __res);
	// struct LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_ok(struct LDKC2Tuple_BlockHashChannelMonitorZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_ok")] public static extern long CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_ok(long _o);
	// struct LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_err")] public static extern long CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_err(long _e);
	// bool CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_is_ok(const struct LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_is_ok")] public static extern bool CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_is_ok(long _o);
	// void CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_free(struct LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_free")] public static extern void CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_free(long __res);
	// uint64_t CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_clone_ptr(LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_clone_ptr")] public static extern long CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_clone(const struct LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_clone")] public static extern long CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_clone(long _orig);
	// uint64_t C2Tuple_PublicKeyTypeZ_clone_ptr(LDKC2Tuple_PublicKeyTypeZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyTypeZ_clone_ptr")] public static extern long C2Tuple_PublicKeyTypeZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_PublicKeyTypeZ C2Tuple_PublicKeyTypeZ_clone(const struct LDKC2Tuple_PublicKeyTypeZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyTypeZ_clone")] public static extern long C2Tuple_PublicKeyTypeZ_clone(long _orig);
	// struct LDKC2Tuple_PublicKeyTypeZ C2Tuple_PublicKeyTypeZ_new(struct LDKPublicKey a, struct LDKType b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyTypeZ_new")] public static extern long C2Tuple_PublicKeyTypeZ_new(byte[] _a, long _b);
	// void C2Tuple_PublicKeyTypeZ_free(struct LDKC2Tuple_PublicKeyTypeZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyTypeZ_free")] public static extern void C2Tuple_PublicKeyTypeZ_free(long __res);
	// void CVec_C2Tuple_PublicKeyTypeZZ_free(struct LDKCVec_C2Tuple_PublicKeyTypeZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_PublicKeyTypeZZ_free")] public static extern void CVec_C2Tuple_PublicKeyTypeZZ_free(long[] __res);
	// struct LDKCOption_CustomOnionMessageContentsZ COption_CustomOnionMessageContentsZ_some(struct LDKCustomOnionMessageContents o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CustomOnionMessageContentsZ_some")] public static extern long COption_CustomOnionMessageContentsZ_some(long _o);
	// struct LDKCOption_CustomOnionMessageContentsZ COption_CustomOnionMessageContentsZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CustomOnionMessageContentsZ_none")] public static extern long COption_CustomOnionMessageContentsZ_none();
	// void COption_CustomOnionMessageContentsZ_free(struct LDKCOption_CustomOnionMessageContentsZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CustomOnionMessageContentsZ_free")] public static extern void COption_CustomOnionMessageContentsZ_free(long __res);
	// uint64_t COption_CustomOnionMessageContentsZ_clone_ptr(LDKCOption_CustomOnionMessageContentsZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CustomOnionMessageContentsZ_clone_ptr")] public static extern long COption_CustomOnionMessageContentsZ_clone_ptr(long _arg);
	// struct LDKCOption_CustomOnionMessageContentsZ COption_CustomOnionMessageContentsZ_clone(const struct LDKCOption_CustomOnionMessageContentsZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CustomOnionMessageContentsZ_clone")] public static extern long COption_CustomOnionMessageContentsZ_clone(long _orig);
	// struct LDKCResult_COption_CustomOnionMessageContentsZDecodeErrorZ CResult_COption_CustomOnionMessageContentsZDecodeErrorZ_ok(struct LDKCOption_CustomOnionMessageContentsZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_CustomOnionMessageContentsZDecodeErrorZ_ok")] public static extern long CResult_COption_CustomOnionMessageContentsZDecodeErrorZ_ok(long _o);
	// struct LDKCResult_COption_CustomOnionMessageContentsZDecodeErrorZ CResult_COption_CustomOnionMessageContentsZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_CustomOnionMessageContentsZDecodeErrorZ_err")] public static extern long CResult_COption_CustomOnionMessageContentsZDecodeErrorZ_err(long _e);
	// bool CResult_COption_CustomOnionMessageContentsZDecodeErrorZ_is_ok(const struct LDKCResult_COption_CustomOnionMessageContentsZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_CustomOnionMessageContentsZDecodeErrorZ_is_ok")] public static extern bool CResult_COption_CustomOnionMessageContentsZDecodeErrorZ_is_ok(long _o);
	// void CResult_COption_CustomOnionMessageContentsZDecodeErrorZ_free(struct LDKCResult_COption_CustomOnionMessageContentsZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_CustomOnionMessageContentsZDecodeErrorZ_free")] public static extern void CResult_COption_CustomOnionMessageContentsZDecodeErrorZ_free(long __res);
	// uint64_t CResult_COption_CustomOnionMessageContentsZDecodeErrorZ_clone_ptr(LDKCResult_COption_CustomOnionMessageContentsZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_CustomOnionMessageContentsZDecodeErrorZ_clone_ptr")] public static extern long CResult_COption_CustomOnionMessageContentsZDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_COption_CustomOnionMessageContentsZDecodeErrorZ CResult_COption_CustomOnionMessageContentsZDecodeErrorZ_clone(const struct LDKCResult_COption_CustomOnionMessageContentsZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_CustomOnionMessageContentsZDecodeErrorZ_clone")] public static extern long CResult_COption_CustomOnionMessageContentsZDecodeErrorZ_clone(long _orig);
	// struct LDKCOption_NetAddressZ COption_NetAddressZ_some(struct LDKNetAddress o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NetAddressZ_some")] public static extern long COption_NetAddressZ_some(long _o);
	// struct LDKCOption_NetAddressZ COption_NetAddressZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NetAddressZ_none")] public static extern long COption_NetAddressZ_none();
	// void COption_NetAddressZ_free(struct LDKCOption_NetAddressZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NetAddressZ_free")] public static extern void COption_NetAddressZ_free(long __res);
	// uint64_t COption_NetAddressZ_clone_ptr(LDKCOption_NetAddressZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NetAddressZ_clone_ptr")] public static extern long COption_NetAddressZ_clone_ptr(long _arg);
	// struct LDKCOption_NetAddressZ COption_NetAddressZ_clone(const struct LDKCOption_NetAddressZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NetAddressZ_clone")] public static extern long COption_NetAddressZ_clone(long _orig);
	// struct LDKCResult_CVec_u8ZPeerHandleErrorZ CResult_CVec_u8ZPeerHandleErrorZ_ok(struct LDKCVec_u8Z o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZPeerHandleErrorZ_ok")] public static extern long CResult_CVec_u8ZPeerHandleErrorZ_ok(byte[] _o);
	// struct LDKCResult_CVec_u8ZPeerHandleErrorZ CResult_CVec_u8ZPeerHandleErrorZ_err(struct LDKPeerHandleError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZPeerHandleErrorZ_err")] public static extern long CResult_CVec_u8ZPeerHandleErrorZ_err(long _e);
	// bool CResult_CVec_u8ZPeerHandleErrorZ_is_ok(const struct LDKCResult_CVec_u8ZPeerHandleErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZPeerHandleErrorZ_is_ok")] public static extern bool CResult_CVec_u8ZPeerHandleErrorZ_is_ok(long _o);
	// void CResult_CVec_u8ZPeerHandleErrorZ_free(struct LDKCResult_CVec_u8ZPeerHandleErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZPeerHandleErrorZ_free")] public static extern void CResult_CVec_u8ZPeerHandleErrorZ_free(long __res);
	// uint64_t CResult_CVec_u8ZPeerHandleErrorZ_clone_ptr(LDKCResult_CVec_u8ZPeerHandleErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZPeerHandleErrorZ_clone_ptr")] public static extern long CResult_CVec_u8ZPeerHandleErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_CVec_u8ZPeerHandleErrorZ CResult_CVec_u8ZPeerHandleErrorZ_clone(const struct LDKCResult_CVec_u8ZPeerHandleErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZPeerHandleErrorZ_clone")] public static extern long CResult_CVec_u8ZPeerHandleErrorZ_clone(long _orig);
	// struct LDKCResult_NonePeerHandleErrorZ CResult_NonePeerHandleErrorZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePeerHandleErrorZ_ok")] public static extern long CResult_NonePeerHandleErrorZ_ok();
	// struct LDKCResult_NonePeerHandleErrorZ CResult_NonePeerHandleErrorZ_err(struct LDKPeerHandleError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePeerHandleErrorZ_err")] public static extern long CResult_NonePeerHandleErrorZ_err(long _e);
	// bool CResult_NonePeerHandleErrorZ_is_ok(const struct LDKCResult_NonePeerHandleErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePeerHandleErrorZ_is_ok")] public static extern bool CResult_NonePeerHandleErrorZ_is_ok(long _o);
	// void CResult_NonePeerHandleErrorZ_free(struct LDKCResult_NonePeerHandleErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePeerHandleErrorZ_free")] public static extern void CResult_NonePeerHandleErrorZ_free(long __res);
	// uint64_t CResult_NonePeerHandleErrorZ_clone_ptr(LDKCResult_NonePeerHandleErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePeerHandleErrorZ_clone_ptr")] public static extern long CResult_NonePeerHandleErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_NonePeerHandleErrorZ CResult_NonePeerHandleErrorZ_clone(const struct LDKCResult_NonePeerHandleErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePeerHandleErrorZ_clone")] public static extern long CResult_NonePeerHandleErrorZ_clone(long _orig);
	// struct LDKCResult_boolPeerHandleErrorZ CResult_boolPeerHandleErrorZ_ok(bool o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolPeerHandleErrorZ_ok")] public static extern long CResult_boolPeerHandleErrorZ_ok(bool _o);
	// struct LDKCResult_boolPeerHandleErrorZ CResult_boolPeerHandleErrorZ_err(struct LDKPeerHandleError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolPeerHandleErrorZ_err")] public static extern long CResult_boolPeerHandleErrorZ_err(long _e);
	// bool CResult_boolPeerHandleErrorZ_is_ok(const struct LDKCResult_boolPeerHandleErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolPeerHandleErrorZ_is_ok")] public static extern bool CResult_boolPeerHandleErrorZ_is_ok(long _o);
	// void CResult_boolPeerHandleErrorZ_free(struct LDKCResult_boolPeerHandleErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolPeerHandleErrorZ_free")] public static extern void CResult_boolPeerHandleErrorZ_free(long __res);
	// uint64_t CResult_boolPeerHandleErrorZ_clone_ptr(LDKCResult_boolPeerHandleErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolPeerHandleErrorZ_clone_ptr")] public static extern long CResult_boolPeerHandleErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_boolPeerHandleErrorZ CResult_boolPeerHandleErrorZ_clone(const struct LDKCResult_boolPeerHandleErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolPeerHandleErrorZ_clone")] public static extern long CResult_boolPeerHandleErrorZ_clone(long _orig);
	// struct LDKCResult_NoneSendErrorZ CResult_NoneSendErrorZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneSendErrorZ_ok")] public static extern long CResult_NoneSendErrorZ_ok();
	// struct LDKCResult_NoneSendErrorZ CResult_NoneSendErrorZ_err(struct LDKSendError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneSendErrorZ_err")] public static extern long CResult_NoneSendErrorZ_err(long _e);
	// bool CResult_NoneSendErrorZ_is_ok(const struct LDKCResult_NoneSendErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneSendErrorZ_is_ok")] public static extern bool CResult_NoneSendErrorZ_is_ok(long _o);
	// void CResult_NoneSendErrorZ_free(struct LDKCResult_NoneSendErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneSendErrorZ_free")] public static extern void CResult_NoneSendErrorZ_free(long __res);
	// struct LDKCResult_SiPrefixParseErrorZ CResult_SiPrefixParseErrorZ_ok(enum LDKSiPrefix o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SiPrefixParseErrorZ_ok")] public static extern long CResult_SiPrefixParseErrorZ_ok(SiPrefix _o);
	// struct LDKCResult_SiPrefixParseErrorZ CResult_SiPrefixParseErrorZ_err(struct LDKParseError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SiPrefixParseErrorZ_err")] public static extern long CResult_SiPrefixParseErrorZ_err(long _e);
	// bool CResult_SiPrefixParseErrorZ_is_ok(const struct LDKCResult_SiPrefixParseErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SiPrefixParseErrorZ_is_ok")] public static extern bool CResult_SiPrefixParseErrorZ_is_ok(long _o);
	// void CResult_SiPrefixParseErrorZ_free(struct LDKCResult_SiPrefixParseErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SiPrefixParseErrorZ_free")] public static extern void CResult_SiPrefixParseErrorZ_free(long __res);
	// uint64_t CResult_SiPrefixParseErrorZ_clone_ptr(LDKCResult_SiPrefixParseErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SiPrefixParseErrorZ_clone_ptr")] public static extern long CResult_SiPrefixParseErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_SiPrefixParseErrorZ CResult_SiPrefixParseErrorZ_clone(const struct LDKCResult_SiPrefixParseErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SiPrefixParseErrorZ_clone")] public static extern long CResult_SiPrefixParseErrorZ_clone(long _orig);
	// struct LDKCResult_InvoiceParseOrSemanticErrorZ CResult_InvoiceParseOrSemanticErrorZ_ok(struct LDKInvoice o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceParseOrSemanticErrorZ_ok")] public static extern long CResult_InvoiceParseOrSemanticErrorZ_ok(long _o);
	// struct LDKCResult_InvoiceParseOrSemanticErrorZ CResult_InvoiceParseOrSemanticErrorZ_err(struct LDKParseOrSemanticError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceParseOrSemanticErrorZ_err")] public static extern long CResult_InvoiceParseOrSemanticErrorZ_err(long _e);
	// bool CResult_InvoiceParseOrSemanticErrorZ_is_ok(const struct LDKCResult_InvoiceParseOrSemanticErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceParseOrSemanticErrorZ_is_ok")] public static extern bool CResult_InvoiceParseOrSemanticErrorZ_is_ok(long _o);
	// void CResult_InvoiceParseOrSemanticErrorZ_free(struct LDKCResult_InvoiceParseOrSemanticErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceParseOrSemanticErrorZ_free")] public static extern void CResult_InvoiceParseOrSemanticErrorZ_free(long __res);
	// uint64_t CResult_InvoiceParseOrSemanticErrorZ_clone_ptr(LDKCResult_InvoiceParseOrSemanticErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceParseOrSemanticErrorZ_clone_ptr")] public static extern long CResult_InvoiceParseOrSemanticErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_InvoiceParseOrSemanticErrorZ CResult_InvoiceParseOrSemanticErrorZ_clone(const struct LDKCResult_InvoiceParseOrSemanticErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceParseOrSemanticErrorZ_clone")] public static extern long CResult_InvoiceParseOrSemanticErrorZ_clone(long _orig);
	// struct LDKCResult_SignedRawInvoiceParseErrorZ CResult_SignedRawInvoiceParseErrorZ_ok(struct LDKSignedRawInvoice o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignedRawInvoiceParseErrorZ_ok")] public static extern long CResult_SignedRawInvoiceParseErrorZ_ok(long _o);
	// struct LDKCResult_SignedRawInvoiceParseErrorZ CResult_SignedRawInvoiceParseErrorZ_err(struct LDKParseError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignedRawInvoiceParseErrorZ_err")] public static extern long CResult_SignedRawInvoiceParseErrorZ_err(long _e);
	// bool CResult_SignedRawInvoiceParseErrorZ_is_ok(const struct LDKCResult_SignedRawInvoiceParseErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignedRawInvoiceParseErrorZ_is_ok")] public static extern bool CResult_SignedRawInvoiceParseErrorZ_is_ok(long _o);
	// void CResult_SignedRawInvoiceParseErrorZ_free(struct LDKCResult_SignedRawInvoiceParseErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignedRawInvoiceParseErrorZ_free")] public static extern void CResult_SignedRawInvoiceParseErrorZ_free(long __res);
	// uint64_t CResult_SignedRawInvoiceParseErrorZ_clone_ptr(LDKCResult_SignedRawInvoiceParseErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignedRawInvoiceParseErrorZ_clone_ptr")] public static extern long CResult_SignedRawInvoiceParseErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_SignedRawInvoiceParseErrorZ CResult_SignedRawInvoiceParseErrorZ_clone(const struct LDKCResult_SignedRawInvoiceParseErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignedRawInvoiceParseErrorZ_clone")] public static extern long CResult_SignedRawInvoiceParseErrorZ_clone(long _orig);
	// uint64_t C3Tuple_RawInvoice_u832InvoiceSignatureZ_clone_ptr(LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_RawInvoice_u832InvoiceSignatureZ_clone_ptr")] public static extern long C3Tuple_RawInvoice_u832InvoiceSignatureZ_clone_ptr(long _arg);
	// struct LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ C3Tuple_RawInvoice_u832InvoiceSignatureZ_clone(const struct LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_RawInvoice_u832InvoiceSignatureZ_clone")] public static extern long C3Tuple_RawInvoice_u832InvoiceSignatureZ_clone(long _orig);
	// struct LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ C3Tuple_RawInvoice_u832InvoiceSignatureZ_new(struct LDKRawInvoice a, struct LDKThirtyTwoBytes b, struct LDKInvoiceSignature c);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_RawInvoice_u832InvoiceSignatureZ_new")] public static extern long C3Tuple_RawInvoice_u832InvoiceSignatureZ_new(long _a, byte[] _b, long _c);
	// void C3Tuple_RawInvoice_u832InvoiceSignatureZ_free(struct LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_RawInvoice_u832InvoiceSignatureZ_free")] public static extern void C3Tuple_RawInvoice_u832InvoiceSignatureZ_free(long __res);
	// struct LDKCResult_PayeePubKeyErrorZ CResult_PayeePubKeyErrorZ_ok(struct LDKPayeePubKey o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PayeePubKeyErrorZ_ok")] public static extern long CResult_PayeePubKeyErrorZ_ok(long _o);
	// struct LDKCResult_PayeePubKeyErrorZ CResult_PayeePubKeyErrorZ_err(enum LDKSecp256k1Error e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PayeePubKeyErrorZ_err")] public static extern long CResult_PayeePubKeyErrorZ_err(Secp256k1Error _e);
	// bool CResult_PayeePubKeyErrorZ_is_ok(const struct LDKCResult_PayeePubKeyErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PayeePubKeyErrorZ_is_ok")] public static extern bool CResult_PayeePubKeyErrorZ_is_ok(long _o);
	// void CResult_PayeePubKeyErrorZ_free(struct LDKCResult_PayeePubKeyErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PayeePubKeyErrorZ_free")] public static extern void CResult_PayeePubKeyErrorZ_free(long __res);
	// uint64_t CResult_PayeePubKeyErrorZ_clone_ptr(LDKCResult_PayeePubKeyErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PayeePubKeyErrorZ_clone_ptr")] public static extern long CResult_PayeePubKeyErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_PayeePubKeyErrorZ CResult_PayeePubKeyErrorZ_clone(const struct LDKCResult_PayeePubKeyErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PayeePubKeyErrorZ_clone")] public static extern long CResult_PayeePubKeyErrorZ_clone(long _orig);
	// void CVec_PrivateRouteZ_free(struct LDKCVec_PrivateRouteZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_PrivateRouteZ_free")] public static extern void CVec_PrivateRouteZ_free(long[] __res);
	// struct LDKCResult_PositiveTimestampCreationErrorZ CResult_PositiveTimestampCreationErrorZ_ok(struct LDKPositiveTimestamp o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PositiveTimestampCreationErrorZ_ok")] public static extern long CResult_PositiveTimestampCreationErrorZ_ok(long _o);
	// struct LDKCResult_PositiveTimestampCreationErrorZ CResult_PositiveTimestampCreationErrorZ_err(enum LDKCreationError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PositiveTimestampCreationErrorZ_err")] public static extern long CResult_PositiveTimestampCreationErrorZ_err(CreationError _e);
	// bool CResult_PositiveTimestampCreationErrorZ_is_ok(const struct LDKCResult_PositiveTimestampCreationErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PositiveTimestampCreationErrorZ_is_ok")] public static extern bool CResult_PositiveTimestampCreationErrorZ_is_ok(long _o);
	// void CResult_PositiveTimestampCreationErrorZ_free(struct LDKCResult_PositiveTimestampCreationErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PositiveTimestampCreationErrorZ_free")] public static extern void CResult_PositiveTimestampCreationErrorZ_free(long __res);
	// uint64_t CResult_PositiveTimestampCreationErrorZ_clone_ptr(LDKCResult_PositiveTimestampCreationErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PositiveTimestampCreationErrorZ_clone_ptr")] public static extern long CResult_PositiveTimestampCreationErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_PositiveTimestampCreationErrorZ CResult_PositiveTimestampCreationErrorZ_clone(const struct LDKCResult_PositiveTimestampCreationErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PositiveTimestampCreationErrorZ_clone")] public static extern long CResult_PositiveTimestampCreationErrorZ_clone(long _orig);
	// struct LDKCResult_NoneSemanticErrorZ CResult_NoneSemanticErrorZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneSemanticErrorZ_ok")] public static extern long CResult_NoneSemanticErrorZ_ok();
	// struct LDKCResult_NoneSemanticErrorZ CResult_NoneSemanticErrorZ_err(enum LDKSemanticError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneSemanticErrorZ_err")] public static extern long CResult_NoneSemanticErrorZ_err(SemanticError _e);
	// bool CResult_NoneSemanticErrorZ_is_ok(const struct LDKCResult_NoneSemanticErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneSemanticErrorZ_is_ok")] public static extern bool CResult_NoneSemanticErrorZ_is_ok(long _o);
	// void CResult_NoneSemanticErrorZ_free(struct LDKCResult_NoneSemanticErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneSemanticErrorZ_free")] public static extern void CResult_NoneSemanticErrorZ_free(long __res);
	// uint64_t CResult_NoneSemanticErrorZ_clone_ptr(LDKCResult_NoneSemanticErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneSemanticErrorZ_clone_ptr")] public static extern long CResult_NoneSemanticErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_NoneSemanticErrorZ CResult_NoneSemanticErrorZ_clone(const struct LDKCResult_NoneSemanticErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneSemanticErrorZ_clone")] public static extern long CResult_NoneSemanticErrorZ_clone(long _orig);
	// struct LDKCResult_InvoiceSemanticErrorZ CResult_InvoiceSemanticErrorZ_ok(struct LDKInvoice o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceSemanticErrorZ_ok")] public static extern long CResult_InvoiceSemanticErrorZ_ok(long _o);
	// struct LDKCResult_InvoiceSemanticErrorZ CResult_InvoiceSemanticErrorZ_err(enum LDKSemanticError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceSemanticErrorZ_err")] public static extern long CResult_InvoiceSemanticErrorZ_err(SemanticError _e);
	// bool CResult_InvoiceSemanticErrorZ_is_ok(const struct LDKCResult_InvoiceSemanticErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceSemanticErrorZ_is_ok")] public static extern bool CResult_InvoiceSemanticErrorZ_is_ok(long _o);
	// void CResult_InvoiceSemanticErrorZ_free(struct LDKCResult_InvoiceSemanticErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceSemanticErrorZ_free")] public static extern void CResult_InvoiceSemanticErrorZ_free(long __res);
	// uint64_t CResult_InvoiceSemanticErrorZ_clone_ptr(LDKCResult_InvoiceSemanticErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceSemanticErrorZ_clone_ptr")] public static extern long CResult_InvoiceSemanticErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_InvoiceSemanticErrorZ CResult_InvoiceSemanticErrorZ_clone(const struct LDKCResult_InvoiceSemanticErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceSemanticErrorZ_clone")] public static extern long CResult_InvoiceSemanticErrorZ_clone(long _orig);
	// struct LDKCResult_DescriptionCreationErrorZ CResult_DescriptionCreationErrorZ_ok(struct LDKDescription o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DescriptionCreationErrorZ_ok")] public static extern long CResult_DescriptionCreationErrorZ_ok(long _o);
	// struct LDKCResult_DescriptionCreationErrorZ CResult_DescriptionCreationErrorZ_err(enum LDKCreationError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DescriptionCreationErrorZ_err")] public static extern long CResult_DescriptionCreationErrorZ_err(CreationError _e);
	// bool CResult_DescriptionCreationErrorZ_is_ok(const struct LDKCResult_DescriptionCreationErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DescriptionCreationErrorZ_is_ok")] public static extern bool CResult_DescriptionCreationErrorZ_is_ok(long _o);
	// void CResult_DescriptionCreationErrorZ_free(struct LDKCResult_DescriptionCreationErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DescriptionCreationErrorZ_free")] public static extern void CResult_DescriptionCreationErrorZ_free(long __res);
	// uint64_t CResult_DescriptionCreationErrorZ_clone_ptr(LDKCResult_DescriptionCreationErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DescriptionCreationErrorZ_clone_ptr")] public static extern long CResult_DescriptionCreationErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_DescriptionCreationErrorZ CResult_DescriptionCreationErrorZ_clone(const struct LDKCResult_DescriptionCreationErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DescriptionCreationErrorZ_clone")] public static extern long CResult_DescriptionCreationErrorZ_clone(long _orig);
	// struct LDKCResult_PrivateRouteCreationErrorZ CResult_PrivateRouteCreationErrorZ_ok(struct LDKPrivateRoute o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PrivateRouteCreationErrorZ_ok")] public static extern long CResult_PrivateRouteCreationErrorZ_ok(long _o);
	// struct LDKCResult_PrivateRouteCreationErrorZ CResult_PrivateRouteCreationErrorZ_err(enum LDKCreationError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PrivateRouteCreationErrorZ_err")] public static extern long CResult_PrivateRouteCreationErrorZ_err(CreationError _e);
	// bool CResult_PrivateRouteCreationErrorZ_is_ok(const struct LDKCResult_PrivateRouteCreationErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PrivateRouteCreationErrorZ_is_ok")] public static extern bool CResult_PrivateRouteCreationErrorZ_is_ok(long _o);
	// void CResult_PrivateRouteCreationErrorZ_free(struct LDKCResult_PrivateRouteCreationErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PrivateRouteCreationErrorZ_free")] public static extern void CResult_PrivateRouteCreationErrorZ_free(long __res);
	// uint64_t CResult_PrivateRouteCreationErrorZ_clone_ptr(LDKCResult_PrivateRouteCreationErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PrivateRouteCreationErrorZ_clone_ptr")] public static extern long CResult_PrivateRouteCreationErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_PrivateRouteCreationErrorZ CResult_PrivateRouteCreationErrorZ_clone(const struct LDKCResult_PrivateRouteCreationErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PrivateRouteCreationErrorZ_clone")] public static extern long CResult_PrivateRouteCreationErrorZ_clone(long _orig);
	// struct LDKCResult_u32GraphSyncErrorZ CResult_u32GraphSyncErrorZ_ok(uint32_t o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u32GraphSyncErrorZ_ok")] public static extern long CResult_u32GraphSyncErrorZ_ok(int _o);
	// struct LDKCResult_u32GraphSyncErrorZ CResult_u32GraphSyncErrorZ_err(struct LDKGraphSyncError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u32GraphSyncErrorZ_err")] public static extern long CResult_u32GraphSyncErrorZ_err(long _e);
	// bool CResult_u32GraphSyncErrorZ_is_ok(const struct LDKCResult_u32GraphSyncErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u32GraphSyncErrorZ_is_ok")] public static extern bool CResult_u32GraphSyncErrorZ_is_ok(long _o);
	// void CResult_u32GraphSyncErrorZ_free(struct LDKCResult_u32GraphSyncErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u32GraphSyncErrorZ_free")] public static extern void CResult_u32GraphSyncErrorZ_free(long __res);
	// struct LDKCResult_NetAddressDecodeErrorZ CResult_NetAddressDecodeErrorZ_ok(struct LDKNetAddress o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NetAddressDecodeErrorZ_ok")] public static extern long CResult_NetAddressDecodeErrorZ_ok(long _o);
	// struct LDKCResult_NetAddressDecodeErrorZ CResult_NetAddressDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NetAddressDecodeErrorZ_err")] public static extern long CResult_NetAddressDecodeErrorZ_err(long _e);
	// bool CResult_NetAddressDecodeErrorZ_is_ok(const struct LDKCResult_NetAddressDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NetAddressDecodeErrorZ_is_ok")] public static extern bool CResult_NetAddressDecodeErrorZ_is_ok(long _o);
	// void CResult_NetAddressDecodeErrorZ_free(struct LDKCResult_NetAddressDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NetAddressDecodeErrorZ_free")] public static extern void CResult_NetAddressDecodeErrorZ_free(long __res);
	// uint64_t CResult_NetAddressDecodeErrorZ_clone_ptr(LDKCResult_NetAddressDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NetAddressDecodeErrorZ_clone_ptr")] public static extern long CResult_NetAddressDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_NetAddressDecodeErrorZ CResult_NetAddressDecodeErrorZ_clone(const struct LDKCResult_NetAddressDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NetAddressDecodeErrorZ_clone")] public static extern long CResult_NetAddressDecodeErrorZ_clone(long _orig);
	// void CVec_UpdateAddHTLCZ_free(struct LDKCVec_UpdateAddHTLCZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_UpdateAddHTLCZ_free")] public static extern void CVec_UpdateAddHTLCZ_free(long[] __res);
	// void CVec_UpdateFulfillHTLCZ_free(struct LDKCVec_UpdateFulfillHTLCZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_UpdateFulfillHTLCZ_free")] public static extern void CVec_UpdateFulfillHTLCZ_free(long[] __res);
	// void CVec_UpdateFailHTLCZ_free(struct LDKCVec_UpdateFailHTLCZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_UpdateFailHTLCZ_free")] public static extern void CVec_UpdateFailHTLCZ_free(long[] __res);
	// void CVec_UpdateFailMalformedHTLCZ_free(struct LDKCVec_UpdateFailMalformedHTLCZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_UpdateFailMalformedHTLCZ_free")] public static extern void CVec_UpdateFailMalformedHTLCZ_free(long[] __res);
	// struct LDKCResult_AcceptChannelDecodeErrorZ CResult_AcceptChannelDecodeErrorZ_ok(struct LDKAcceptChannel o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelDecodeErrorZ_ok")] public static extern long CResult_AcceptChannelDecodeErrorZ_ok(long _o);
	// struct LDKCResult_AcceptChannelDecodeErrorZ CResult_AcceptChannelDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelDecodeErrorZ_err")] public static extern long CResult_AcceptChannelDecodeErrorZ_err(long _e);
	// bool CResult_AcceptChannelDecodeErrorZ_is_ok(const struct LDKCResult_AcceptChannelDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelDecodeErrorZ_is_ok")] public static extern bool CResult_AcceptChannelDecodeErrorZ_is_ok(long _o);
	// void CResult_AcceptChannelDecodeErrorZ_free(struct LDKCResult_AcceptChannelDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelDecodeErrorZ_free")] public static extern void CResult_AcceptChannelDecodeErrorZ_free(long __res);
	// uint64_t CResult_AcceptChannelDecodeErrorZ_clone_ptr(LDKCResult_AcceptChannelDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelDecodeErrorZ_clone_ptr")] public static extern long CResult_AcceptChannelDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_AcceptChannelDecodeErrorZ CResult_AcceptChannelDecodeErrorZ_clone(const struct LDKCResult_AcceptChannelDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelDecodeErrorZ_clone")] public static extern long CResult_AcceptChannelDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_AnnouncementSignaturesDecodeErrorZ CResult_AnnouncementSignaturesDecodeErrorZ_ok(struct LDKAnnouncementSignatures o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AnnouncementSignaturesDecodeErrorZ_ok")] public static extern long CResult_AnnouncementSignaturesDecodeErrorZ_ok(long _o);
	// struct LDKCResult_AnnouncementSignaturesDecodeErrorZ CResult_AnnouncementSignaturesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AnnouncementSignaturesDecodeErrorZ_err")] public static extern long CResult_AnnouncementSignaturesDecodeErrorZ_err(long _e);
	// bool CResult_AnnouncementSignaturesDecodeErrorZ_is_ok(const struct LDKCResult_AnnouncementSignaturesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AnnouncementSignaturesDecodeErrorZ_is_ok")] public static extern bool CResult_AnnouncementSignaturesDecodeErrorZ_is_ok(long _o);
	// void CResult_AnnouncementSignaturesDecodeErrorZ_free(struct LDKCResult_AnnouncementSignaturesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AnnouncementSignaturesDecodeErrorZ_free")] public static extern void CResult_AnnouncementSignaturesDecodeErrorZ_free(long __res);
	// uint64_t CResult_AnnouncementSignaturesDecodeErrorZ_clone_ptr(LDKCResult_AnnouncementSignaturesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AnnouncementSignaturesDecodeErrorZ_clone_ptr")] public static extern long CResult_AnnouncementSignaturesDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_AnnouncementSignaturesDecodeErrorZ CResult_AnnouncementSignaturesDecodeErrorZ_clone(const struct LDKCResult_AnnouncementSignaturesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AnnouncementSignaturesDecodeErrorZ_clone")] public static extern long CResult_AnnouncementSignaturesDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ChannelReestablishDecodeErrorZ CResult_ChannelReestablishDecodeErrorZ_ok(struct LDKChannelReestablish o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReestablishDecodeErrorZ_ok")] public static extern long CResult_ChannelReestablishDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelReestablishDecodeErrorZ CResult_ChannelReestablishDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReestablishDecodeErrorZ_err")] public static extern long CResult_ChannelReestablishDecodeErrorZ_err(long _e);
	// bool CResult_ChannelReestablishDecodeErrorZ_is_ok(const struct LDKCResult_ChannelReestablishDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReestablishDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelReestablishDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelReestablishDecodeErrorZ_free(struct LDKCResult_ChannelReestablishDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReestablishDecodeErrorZ_free")] public static extern void CResult_ChannelReestablishDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelReestablishDecodeErrorZ_clone_ptr(LDKCResult_ChannelReestablishDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReestablishDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelReestablishDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelReestablishDecodeErrorZ CResult_ChannelReestablishDecodeErrorZ_clone(const struct LDKCResult_ChannelReestablishDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReestablishDecodeErrorZ_clone")] public static extern long CResult_ChannelReestablishDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ClosingSignedDecodeErrorZ CResult_ClosingSignedDecodeErrorZ_ok(struct LDKClosingSigned o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedDecodeErrorZ_ok")] public static extern long CResult_ClosingSignedDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ClosingSignedDecodeErrorZ CResult_ClosingSignedDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedDecodeErrorZ_err")] public static extern long CResult_ClosingSignedDecodeErrorZ_err(long _e);
	// bool CResult_ClosingSignedDecodeErrorZ_is_ok(const struct LDKCResult_ClosingSignedDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedDecodeErrorZ_is_ok")] public static extern bool CResult_ClosingSignedDecodeErrorZ_is_ok(long _o);
	// void CResult_ClosingSignedDecodeErrorZ_free(struct LDKCResult_ClosingSignedDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedDecodeErrorZ_free")] public static extern void CResult_ClosingSignedDecodeErrorZ_free(long __res);
	// uint64_t CResult_ClosingSignedDecodeErrorZ_clone_ptr(LDKCResult_ClosingSignedDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedDecodeErrorZ_clone_ptr")] public static extern long CResult_ClosingSignedDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ClosingSignedDecodeErrorZ CResult_ClosingSignedDecodeErrorZ_clone(const struct LDKCResult_ClosingSignedDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedDecodeErrorZ_clone")] public static extern long CResult_ClosingSignedDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ClosingSignedFeeRangeDecodeErrorZ CResult_ClosingSignedFeeRangeDecodeErrorZ_ok(struct LDKClosingSignedFeeRange o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedFeeRangeDecodeErrorZ_ok")] public static extern long CResult_ClosingSignedFeeRangeDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ClosingSignedFeeRangeDecodeErrorZ CResult_ClosingSignedFeeRangeDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedFeeRangeDecodeErrorZ_err")] public static extern long CResult_ClosingSignedFeeRangeDecodeErrorZ_err(long _e);
	// bool CResult_ClosingSignedFeeRangeDecodeErrorZ_is_ok(const struct LDKCResult_ClosingSignedFeeRangeDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedFeeRangeDecodeErrorZ_is_ok")] public static extern bool CResult_ClosingSignedFeeRangeDecodeErrorZ_is_ok(long _o);
	// void CResult_ClosingSignedFeeRangeDecodeErrorZ_free(struct LDKCResult_ClosingSignedFeeRangeDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedFeeRangeDecodeErrorZ_free")] public static extern void CResult_ClosingSignedFeeRangeDecodeErrorZ_free(long __res);
	// uint64_t CResult_ClosingSignedFeeRangeDecodeErrorZ_clone_ptr(LDKCResult_ClosingSignedFeeRangeDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedFeeRangeDecodeErrorZ_clone_ptr")] public static extern long CResult_ClosingSignedFeeRangeDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ClosingSignedFeeRangeDecodeErrorZ CResult_ClosingSignedFeeRangeDecodeErrorZ_clone(const struct LDKCResult_ClosingSignedFeeRangeDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedFeeRangeDecodeErrorZ_clone")] public static extern long CResult_ClosingSignedFeeRangeDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_CommitmentSignedDecodeErrorZ CResult_CommitmentSignedDecodeErrorZ_ok(struct LDKCommitmentSigned o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedDecodeErrorZ_ok")] public static extern long CResult_CommitmentSignedDecodeErrorZ_ok(long _o);
	// struct LDKCResult_CommitmentSignedDecodeErrorZ CResult_CommitmentSignedDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedDecodeErrorZ_err")] public static extern long CResult_CommitmentSignedDecodeErrorZ_err(long _e);
	// bool CResult_CommitmentSignedDecodeErrorZ_is_ok(const struct LDKCResult_CommitmentSignedDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedDecodeErrorZ_is_ok")] public static extern bool CResult_CommitmentSignedDecodeErrorZ_is_ok(long _o);
	// void CResult_CommitmentSignedDecodeErrorZ_free(struct LDKCResult_CommitmentSignedDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedDecodeErrorZ_free")] public static extern void CResult_CommitmentSignedDecodeErrorZ_free(long __res);
	// uint64_t CResult_CommitmentSignedDecodeErrorZ_clone_ptr(LDKCResult_CommitmentSignedDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedDecodeErrorZ_clone_ptr")] public static extern long CResult_CommitmentSignedDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_CommitmentSignedDecodeErrorZ CResult_CommitmentSignedDecodeErrorZ_clone(const struct LDKCResult_CommitmentSignedDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedDecodeErrorZ_clone")] public static extern long CResult_CommitmentSignedDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_FundingCreatedDecodeErrorZ CResult_FundingCreatedDecodeErrorZ_ok(struct LDKFundingCreated o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingCreatedDecodeErrorZ_ok")] public static extern long CResult_FundingCreatedDecodeErrorZ_ok(long _o);
	// struct LDKCResult_FundingCreatedDecodeErrorZ CResult_FundingCreatedDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingCreatedDecodeErrorZ_err")] public static extern long CResult_FundingCreatedDecodeErrorZ_err(long _e);
	// bool CResult_FundingCreatedDecodeErrorZ_is_ok(const struct LDKCResult_FundingCreatedDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingCreatedDecodeErrorZ_is_ok")] public static extern bool CResult_FundingCreatedDecodeErrorZ_is_ok(long _o);
	// void CResult_FundingCreatedDecodeErrorZ_free(struct LDKCResult_FundingCreatedDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingCreatedDecodeErrorZ_free")] public static extern void CResult_FundingCreatedDecodeErrorZ_free(long __res);
	// uint64_t CResult_FundingCreatedDecodeErrorZ_clone_ptr(LDKCResult_FundingCreatedDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingCreatedDecodeErrorZ_clone_ptr")] public static extern long CResult_FundingCreatedDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_FundingCreatedDecodeErrorZ CResult_FundingCreatedDecodeErrorZ_clone(const struct LDKCResult_FundingCreatedDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingCreatedDecodeErrorZ_clone")] public static extern long CResult_FundingCreatedDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_FundingSignedDecodeErrorZ CResult_FundingSignedDecodeErrorZ_ok(struct LDKFundingSigned o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingSignedDecodeErrorZ_ok")] public static extern long CResult_FundingSignedDecodeErrorZ_ok(long _o);
	// struct LDKCResult_FundingSignedDecodeErrorZ CResult_FundingSignedDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingSignedDecodeErrorZ_err")] public static extern long CResult_FundingSignedDecodeErrorZ_err(long _e);
	// bool CResult_FundingSignedDecodeErrorZ_is_ok(const struct LDKCResult_FundingSignedDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingSignedDecodeErrorZ_is_ok")] public static extern bool CResult_FundingSignedDecodeErrorZ_is_ok(long _o);
	// void CResult_FundingSignedDecodeErrorZ_free(struct LDKCResult_FundingSignedDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingSignedDecodeErrorZ_free")] public static extern void CResult_FundingSignedDecodeErrorZ_free(long __res);
	// uint64_t CResult_FundingSignedDecodeErrorZ_clone_ptr(LDKCResult_FundingSignedDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingSignedDecodeErrorZ_clone_ptr")] public static extern long CResult_FundingSignedDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_FundingSignedDecodeErrorZ CResult_FundingSignedDecodeErrorZ_clone(const struct LDKCResult_FundingSignedDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingSignedDecodeErrorZ_clone")] public static extern long CResult_FundingSignedDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ChannelReadyDecodeErrorZ CResult_ChannelReadyDecodeErrorZ_ok(struct LDKChannelReady o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReadyDecodeErrorZ_ok")] public static extern long CResult_ChannelReadyDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelReadyDecodeErrorZ CResult_ChannelReadyDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReadyDecodeErrorZ_err")] public static extern long CResult_ChannelReadyDecodeErrorZ_err(long _e);
	// bool CResult_ChannelReadyDecodeErrorZ_is_ok(const struct LDKCResult_ChannelReadyDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReadyDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelReadyDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelReadyDecodeErrorZ_free(struct LDKCResult_ChannelReadyDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReadyDecodeErrorZ_free")] public static extern void CResult_ChannelReadyDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelReadyDecodeErrorZ_clone_ptr(LDKCResult_ChannelReadyDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReadyDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelReadyDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelReadyDecodeErrorZ CResult_ChannelReadyDecodeErrorZ_clone(const struct LDKCResult_ChannelReadyDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReadyDecodeErrorZ_clone")] public static extern long CResult_ChannelReadyDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_InitDecodeErrorZ CResult_InitDecodeErrorZ_ok(struct LDKInit o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitDecodeErrorZ_ok")] public static extern long CResult_InitDecodeErrorZ_ok(long _o);
	// struct LDKCResult_InitDecodeErrorZ CResult_InitDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitDecodeErrorZ_err")] public static extern long CResult_InitDecodeErrorZ_err(long _e);
	// bool CResult_InitDecodeErrorZ_is_ok(const struct LDKCResult_InitDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitDecodeErrorZ_is_ok")] public static extern bool CResult_InitDecodeErrorZ_is_ok(long _o);
	// void CResult_InitDecodeErrorZ_free(struct LDKCResult_InitDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitDecodeErrorZ_free")] public static extern void CResult_InitDecodeErrorZ_free(long __res);
	// uint64_t CResult_InitDecodeErrorZ_clone_ptr(LDKCResult_InitDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitDecodeErrorZ_clone_ptr")] public static extern long CResult_InitDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_InitDecodeErrorZ CResult_InitDecodeErrorZ_clone(const struct LDKCResult_InitDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitDecodeErrorZ_clone")] public static extern long CResult_InitDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_OpenChannelDecodeErrorZ CResult_OpenChannelDecodeErrorZ_ok(struct LDKOpenChannel o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelDecodeErrorZ_ok")] public static extern long CResult_OpenChannelDecodeErrorZ_ok(long _o);
	// struct LDKCResult_OpenChannelDecodeErrorZ CResult_OpenChannelDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelDecodeErrorZ_err")] public static extern long CResult_OpenChannelDecodeErrorZ_err(long _e);
	// bool CResult_OpenChannelDecodeErrorZ_is_ok(const struct LDKCResult_OpenChannelDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelDecodeErrorZ_is_ok")] public static extern bool CResult_OpenChannelDecodeErrorZ_is_ok(long _o);
	// void CResult_OpenChannelDecodeErrorZ_free(struct LDKCResult_OpenChannelDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelDecodeErrorZ_free")] public static extern void CResult_OpenChannelDecodeErrorZ_free(long __res);
	// uint64_t CResult_OpenChannelDecodeErrorZ_clone_ptr(LDKCResult_OpenChannelDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelDecodeErrorZ_clone_ptr")] public static extern long CResult_OpenChannelDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_OpenChannelDecodeErrorZ CResult_OpenChannelDecodeErrorZ_clone(const struct LDKCResult_OpenChannelDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelDecodeErrorZ_clone")] public static extern long CResult_OpenChannelDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_RevokeAndACKDecodeErrorZ CResult_RevokeAndACKDecodeErrorZ_ok(struct LDKRevokeAndACK o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevokeAndACKDecodeErrorZ_ok")] public static extern long CResult_RevokeAndACKDecodeErrorZ_ok(long _o);
	// struct LDKCResult_RevokeAndACKDecodeErrorZ CResult_RevokeAndACKDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevokeAndACKDecodeErrorZ_err")] public static extern long CResult_RevokeAndACKDecodeErrorZ_err(long _e);
	// bool CResult_RevokeAndACKDecodeErrorZ_is_ok(const struct LDKCResult_RevokeAndACKDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevokeAndACKDecodeErrorZ_is_ok")] public static extern bool CResult_RevokeAndACKDecodeErrorZ_is_ok(long _o);
	// void CResult_RevokeAndACKDecodeErrorZ_free(struct LDKCResult_RevokeAndACKDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevokeAndACKDecodeErrorZ_free")] public static extern void CResult_RevokeAndACKDecodeErrorZ_free(long __res);
	// uint64_t CResult_RevokeAndACKDecodeErrorZ_clone_ptr(LDKCResult_RevokeAndACKDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevokeAndACKDecodeErrorZ_clone_ptr")] public static extern long CResult_RevokeAndACKDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_RevokeAndACKDecodeErrorZ CResult_RevokeAndACKDecodeErrorZ_clone(const struct LDKCResult_RevokeAndACKDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevokeAndACKDecodeErrorZ_clone")] public static extern long CResult_RevokeAndACKDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ShutdownDecodeErrorZ CResult_ShutdownDecodeErrorZ_ok(struct LDKShutdown o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownDecodeErrorZ_ok")] public static extern long CResult_ShutdownDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ShutdownDecodeErrorZ CResult_ShutdownDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownDecodeErrorZ_err")] public static extern long CResult_ShutdownDecodeErrorZ_err(long _e);
	// bool CResult_ShutdownDecodeErrorZ_is_ok(const struct LDKCResult_ShutdownDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownDecodeErrorZ_is_ok")] public static extern bool CResult_ShutdownDecodeErrorZ_is_ok(long _o);
	// void CResult_ShutdownDecodeErrorZ_free(struct LDKCResult_ShutdownDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownDecodeErrorZ_free")] public static extern void CResult_ShutdownDecodeErrorZ_free(long __res);
	// uint64_t CResult_ShutdownDecodeErrorZ_clone_ptr(LDKCResult_ShutdownDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownDecodeErrorZ_clone_ptr")] public static extern long CResult_ShutdownDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ShutdownDecodeErrorZ CResult_ShutdownDecodeErrorZ_clone(const struct LDKCResult_ShutdownDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownDecodeErrorZ_clone")] public static extern long CResult_ShutdownDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_UpdateFailHTLCDecodeErrorZ CResult_UpdateFailHTLCDecodeErrorZ_ok(struct LDKUpdateFailHTLC o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailHTLCDecodeErrorZ_ok")] public static extern long CResult_UpdateFailHTLCDecodeErrorZ_ok(long _o);
	// struct LDKCResult_UpdateFailHTLCDecodeErrorZ CResult_UpdateFailHTLCDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailHTLCDecodeErrorZ_err")] public static extern long CResult_UpdateFailHTLCDecodeErrorZ_err(long _e);
	// bool CResult_UpdateFailHTLCDecodeErrorZ_is_ok(const struct LDKCResult_UpdateFailHTLCDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailHTLCDecodeErrorZ_is_ok")] public static extern bool CResult_UpdateFailHTLCDecodeErrorZ_is_ok(long _o);
	// void CResult_UpdateFailHTLCDecodeErrorZ_free(struct LDKCResult_UpdateFailHTLCDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailHTLCDecodeErrorZ_free")] public static extern void CResult_UpdateFailHTLCDecodeErrorZ_free(long __res);
	// uint64_t CResult_UpdateFailHTLCDecodeErrorZ_clone_ptr(LDKCResult_UpdateFailHTLCDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailHTLCDecodeErrorZ_clone_ptr")] public static extern long CResult_UpdateFailHTLCDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_UpdateFailHTLCDecodeErrorZ CResult_UpdateFailHTLCDecodeErrorZ_clone(const struct LDKCResult_UpdateFailHTLCDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailHTLCDecodeErrorZ_clone")] public static extern long CResult_UpdateFailHTLCDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ CResult_UpdateFailMalformedHTLCDecodeErrorZ_ok(struct LDKUpdateFailMalformedHTLC o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailMalformedHTLCDecodeErrorZ_ok")] public static extern long CResult_UpdateFailMalformedHTLCDecodeErrorZ_ok(long _o);
	// struct LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ CResult_UpdateFailMalformedHTLCDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailMalformedHTLCDecodeErrorZ_err")] public static extern long CResult_UpdateFailMalformedHTLCDecodeErrorZ_err(long _e);
	// bool CResult_UpdateFailMalformedHTLCDecodeErrorZ_is_ok(const struct LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailMalformedHTLCDecodeErrorZ_is_ok")] public static extern bool CResult_UpdateFailMalformedHTLCDecodeErrorZ_is_ok(long _o);
	// void CResult_UpdateFailMalformedHTLCDecodeErrorZ_free(struct LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailMalformedHTLCDecodeErrorZ_free")] public static extern void CResult_UpdateFailMalformedHTLCDecodeErrorZ_free(long __res);
	// uint64_t CResult_UpdateFailMalformedHTLCDecodeErrorZ_clone_ptr(LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailMalformedHTLCDecodeErrorZ_clone_ptr")] public static extern long CResult_UpdateFailMalformedHTLCDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ CResult_UpdateFailMalformedHTLCDecodeErrorZ_clone(const struct LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailMalformedHTLCDecodeErrorZ_clone")] public static extern long CResult_UpdateFailMalformedHTLCDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_UpdateFeeDecodeErrorZ CResult_UpdateFeeDecodeErrorZ_ok(struct LDKUpdateFee o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFeeDecodeErrorZ_ok")] public static extern long CResult_UpdateFeeDecodeErrorZ_ok(long _o);
	// struct LDKCResult_UpdateFeeDecodeErrorZ CResult_UpdateFeeDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFeeDecodeErrorZ_err")] public static extern long CResult_UpdateFeeDecodeErrorZ_err(long _e);
	// bool CResult_UpdateFeeDecodeErrorZ_is_ok(const struct LDKCResult_UpdateFeeDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFeeDecodeErrorZ_is_ok")] public static extern bool CResult_UpdateFeeDecodeErrorZ_is_ok(long _o);
	// void CResult_UpdateFeeDecodeErrorZ_free(struct LDKCResult_UpdateFeeDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFeeDecodeErrorZ_free")] public static extern void CResult_UpdateFeeDecodeErrorZ_free(long __res);
	// uint64_t CResult_UpdateFeeDecodeErrorZ_clone_ptr(LDKCResult_UpdateFeeDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFeeDecodeErrorZ_clone_ptr")] public static extern long CResult_UpdateFeeDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_UpdateFeeDecodeErrorZ CResult_UpdateFeeDecodeErrorZ_clone(const struct LDKCResult_UpdateFeeDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFeeDecodeErrorZ_clone")] public static extern long CResult_UpdateFeeDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_UpdateFulfillHTLCDecodeErrorZ CResult_UpdateFulfillHTLCDecodeErrorZ_ok(struct LDKUpdateFulfillHTLC o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFulfillHTLCDecodeErrorZ_ok")] public static extern long CResult_UpdateFulfillHTLCDecodeErrorZ_ok(long _o);
	// struct LDKCResult_UpdateFulfillHTLCDecodeErrorZ CResult_UpdateFulfillHTLCDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFulfillHTLCDecodeErrorZ_err")] public static extern long CResult_UpdateFulfillHTLCDecodeErrorZ_err(long _e);
	// bool CResult_UpdateFulfillHTLCDecodeErrorZ_is_ok(const struct LDKCResult_UpdateFulfillHTLCDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFulfillHTLCDecodeErrorZ_is_ok")] public static extern bool CResult_UpdateFulfillHTLCDecodeErrorZ_is_ok(long _o);
	// void CResult_UpdateFulfillHTLCDecodeErrorZ_free(struct LDKCResult_UpdateFulfillHTLCDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFulfillHTLCDecodeErrorZ_free")] public static extern void CResult_UpdateFulfillHTLCDecodeErrorZ_free(long __res);
	// uint64_t CResult_UpdateFulfillHTLCDecodeErrorZ_clone_ptr(LDKCResult_UpdateFulfillHTLCDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFulfillHTLCDecodeErrorZ_clone_ptr")] public static extern long CResult_UpdateFulfillHTLCDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_UpdateFulfillHTLCDecodeErrorZ CResult_UpdateFulfillHTLCDecodeErrorZ_clone(const struct LDKCResult_UpdateFulfillHTLCDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFulfillHTLCDecodeErrorZ_clone")] public static extern long CResult_UpdateFulfillHTLCDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_UpdateAddHTLCDecodeErrorZ CResult_UpdateAddHTLCDecodeErrorZ_ok(struct LDKUpdateAddHTLC o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateAddHTLCDecodeErrorZ_ok")] public static extern long CResult_UpdateAddHTLCDecodeErrorZ_ok(long _o);
	// struct LDKCResult_UpdateAddHTLCDecodeErrorZ CResult_UpdateAddHTLCDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateAddHTLCDecodeErrorZ_err")] public static extern long CResult_UpdateAddHTLCDecodeErrorZ_err(long _e);
	// bool CResult_UpdateAddHTLCDecodeErrorZ_is_ok(const struct LDKCResult_UpdateAddHTLCDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateAddHTLCDecodeErrorZ_is_ok")] public static extern bool CResult_UpdateAddHTLCDecodeErrorZ_is_ok(long _o);
	// void CResult_UpdateAddHTLCDecodeErrorZ_free(struct LDKCResult_UpdateAddHTLCDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateAddHTLCDecodeErrorZ_free")] public static extern void CResult_UpdateAddHTLCDecodeErrorZ_free(long __res);
	// uint64_t CResult_UpdateAddHTLCDecodeErrorZ_clone_ptr(LDKCResult_UpdateAddHTLCDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateAddHTLCDecodeErrorZ_clone_ptr")] public static extern long CResult_UpdateAddHTLCDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_UpdateAddHTLCDecodeErrorZ CResult_UpdateAddHTLCDecodeErrorZ_clone(const struct LDKCResult_UpdateAddHTLCDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateAddHTLCDecodeErrorZ_clone")] public static extern long CResult_UpdateAddHTLCDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_OnionMessageDecodeErrorZ CResult_OnionMessageDecodeErrorZ_ok(struct LDKOnionMessage o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessageDecodeErrorZ_ok")] public static extern long CResult_OnionMessageDecodeErrorZ_ok(long _o);
	// struct LDKCResult_OnionMessageDecodeErrorZ CResult_OnionMessageDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessageDecodeErrorZ_err")] public static extern long CResult_OnionMessageDecodeErrorZ_err(long _e);
	// bool CResult_OnionMessageDecodeErrorZ_is_ok(const struct LDKCResult_OnionMessageDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessageDecodeErrorZ_is_ok")] public static extern bool CResult_OnionMessageDecodeErrorZ_is_ok(long _o);
	// void CResult_OnionMessageDecodeErrorZ_free(struct LDKCResult_OnionMessageDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessageDecodeErrorZ_free")] public static extern void CResult_OnionMessageDecodeErrorZ_free(long __res);
	// uint64_t CResult_OnionMessageDecodeErrorZ_clone_ptr(LDKCResult_OnionMessageDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessageDecodeErrorZ_clone_ptr")] public static extern long CResult_OnionMessageDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_OnionMessageDecodeErrorZ CResult_OnionMessageDecodeErrorZ_clone(const struct LDKCResult_OnionMessageDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessageDecodeErrorZ_clone")] public static extern long CResult_OnionMessageDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_PingDecodeErrorZ CResult_PingDecodeErrorZ_ok(struct LDKPing o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PingDecodeErrorZ_ok")] public static extern long CResult_PingDecodeErrorZ_ok(long _o);
	// struct LDKCResult_PingDecodeErrorZ CResult_PingDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PingDecodeErrorZ_err")] public static extern long CResult_PingDecodeErrorZ_err(long _e);
	// bool CResult_PingDecodeErrorZ_is_ok(const struct LDKCResult_PingDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PingDecodeErrorZ_is_ok")] public static extern bool CResult_PingDecodeErrorZ_is_ok(long _o);
	// void CResult_PingDecodeErrorZ_free(struct LDKCResult_PingDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PingDecodeErrorZ_free")] public static extern void CResult_PingDecodeErrorZ_free(long __res);
	// uint64_t CResult_PingDecodeErrorZ_clone_ptr(LDKCResult_PingDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PingDecodeErrorZ_clone_ptr")] public static extern long CResult_PingDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_PingDecodeErrorZ CResult_PingDecodeErrorZ_clone(const struct LDKCResult_PingDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PingDecodeErrorZ_clone")] public static extern long CResult_PingDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_PongDecodeErrorZ CResult_PongDecodeErrorZ_ok(struct LDKPong o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PongDecodeErrorZ_ok")] public static extern long CResult_PongDecodeErrorZ_ok(long _o);
	// struct LDKCResult_PongDecodeErrorZ CResult_PongDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PongDecodeErrorZ_err")] public static extern long CResult_PongDecodeErrorZ_err(long _e);
	// bool CResult_PongDecodeErrorZ_is_ok(const struct LDKCResult_PongDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PongDecodeErrorZ_is_ok")] public static extern bool CResult_PongDecodeErrorZ_is_ok(long _o);
	// void CResult_PongDecodeErrorZ_free(struct LDKCResult_PongDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PongDecodeErrorZ_free")] public static extern void CResult_PongDecodeErrorZ_free(long __res);
	// uint64_t CResult_PongDecodeErrorZ_clone_ptr(LDKCResult_PongDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PongDecodeErrorZ_clone_ptr")] public static extern long CResult_PongDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_PongDecodeErrorZ CResult_PongDecodeErrorZ_clone(const struct LDKCResult_PongDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PongDecodeErrorZ_clone")] public static extern long CResult_PongDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ CResult_UnsignedChannelAnnouncementDecodeErrorZ_ok(struct LDKUnsignedChannelAnnouncement o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelAnnouncementDecodeErrorZ_ok")] public static extern long CResult_UnsignedChannelAnnouncementDecodeErrorZ_ok(long _o);
	// struct LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ CResult_UnsignedChannelAnnouncementDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelAnnouncementDecodeErrorZ_err")] public static extern long CResult_UnsignedChannelAnnouncementDecodeErrorZ_err(long _e);
	// bool CResult_UnsignedChannelAnnouncementDecodeErrorZ_is_ok(const struct LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelAnnouncementDecodeErrorZ_is_ok")] public static extern bool CResult_UnsignedChannelAnnouncementDecodeErrorZ_is_ok(long _o);
	// void CResult_UnsignedChannelAnnouncementDecodeErrorZ_free(struct LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelAnnouncementDecodeErrorZ_free")] public static extern void CResult_UnsignedChannelAnnouncementDecodeErrorZ_free(long __res);
	// uint64_t CResult_UnsignedChannelAnnouncementDecodeErrorZ_clone_ptr(LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelAnnouncementDecodeErrorZ_clone_ptr")] public static extern long CResult_UnsignedChannelAnnouncementDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ CResult_UnsignedChannelAnnouncementDecodeErrorZ_clone(const struct LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelAnnouncementDecodeErrorZ_clone")] public static extern long CResult_UnsignedChannelAnnouncementDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ChannelAnnouncementDecodeErrorZ CResult_ChannelAnnouncementDecodeErrorZ_ok(struct LDKChannelAnnouncement o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelAnnouncementDecodeErrorZ_ok")] public static extern long CResult_ChannelAnnouncementDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelAnnouncementDecodeErrorZ CResult_ChannelAnnouncementDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelAnnouncementDecodeErrorZ_err")] public static extern long CResult_ChannelAnnouncementDecodeErrorZ_err(long _e);
	// bool CResult_ChannelAnnouncementDecodeErrorZ_is_ok(const struct LDKCResult_ChannelAnnouncementDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelAnnouncementDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelAnnouncementDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelAnnouncementDecodeErrorZ_free(struct LDKCResult_ChannelAnnouncementDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelAnnouncementDecodeErrorZ_free")] public static extern void CResult_ChannelAnnouncementDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelAnnouncementDecodeErrorZ_clone_ptr(LDKCResult_ChannelAnnouncementDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelAnnouncementDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelAnnouncementDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelAnnouncementDecodeErrorZ CResult_ChannelAnnouncementDecodeErrorZ_clone(const struct LDKCResult_ChannelAnnouncementDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelAnnouncementDecodeErrorZ_clone")] public static extern long CResult_ChannelAnnouncementDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_UnsignedChannelUpdateDecodeErrorZ CResult_UnsignedChannelUpdateDecodeErrorZ_ok(struct LDKUnsignedChannelUpdate o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelUpdateDecodeErrorZ_ok")] public static extern long CResult_UnsignedChannelUpdateDecodeErrorZ_ok(long _o);
	// struct LDKCResult_UnsignedChannelUpdateDecodeErrorZ CResult_UnsignedChannelUpdateDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelUpdateDecodeErrorZ_err")] public static extern long CResult_UnsignedChannelUpdateDecodeErrorZ_err(long _e);
	// bool CResult_UnsignedChannelUpdateDecodeErrorZ_is_ok(const struct LDKCResult_UnsignedChannelUpdateDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelUpdateDecodeErrorZ_is_ok")] public static extern bool CResult_UnsignedChannelUpdateDecodeErrorZ_is_ok(long _o);
	// void CResult_UnsignedChannelUpdateDecodeErrorZ_free(struct LDKCResult_UnsignedChannelUpdateDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelUpdateDecodeErrorZ_free")] public static extern void CResult_UnsignedChannelUpdateDecodeErrorZ_free(long __res);
	// uint64_t CResult_UnsignedChannelUpdateDecodeErrorZ_clone_ptr(LDKCResult_UnsignedChannelUpdateDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelUpdateDecodeErrorZ_clone_ptr")] public static extern long CResult_UnsignedChannelUpdateDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_UnsignedChannelUpdateDecodeErrorZ CResult_UnsignedChannelUpdateDecodeErrorZ_clone(const struct LDKCResult_UnsignedChannelUpdateDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelUpdateDecodeErrorZ_clone")] public static extern long CResult_UnsignedChannelUpdateDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ChannelUpdateDecodeErrorZ CResult_ChannelUpdateDecodeErrorZ_ok(struct LDKChannelUpdate o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateDecodeErrorZ_ok")] public static extern long CResult_ChannelUpdateDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelUpdateDecodeErrorZ CResult_ChannelUpdateDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateDecodeErrorZ_err")] public static extern long CResult_ChannelUpdateDecodeErrorZ_err(long _e);
	// bool CResult_ChannelUpdateDecodeErrorZ_is_ok(const struct LDKCResult_ChannelUpdateDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelUpdateDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelUpdateDecodeErrorZ_free(struct LDKCResult_ChannelUpdateDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateDecodeErrorZ_free")] public static extern void CResult_ChannelUpdateDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelUpdateDecodeErrorZ_clone_ptr(LDKCResult_ChannelUpdateDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelUpdateDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelUpdateDecodeErrorZ CResult_ChannelUpdateDecodeErrorZ_clone(const struct LDKCResult_ChannelUpdateDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateDecodeErrorZ_clone")] public static extern long CResult_ChannelUpdateDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ErrorMessageDecodeErrorZ CResult_ErrorMessageDecodeErrorZ_ok(struct LDKErrorMessage o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ErrorMessageDecodeErrorZ_ok")] public static extern long CResult_ErrorMessageDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ErrorMessageDecodeErrorZ CResult_ErrorMessageDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ErrorMessageDecodeErrorZ_err")] public static extern long CResult_ErrorMessageDecodeErrorZ_err(long _e);
	// bool CResult_ErrorMessageDecodeErrorZ_is_ok(const struct LDKCResult_ErrorMessageDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ErrorMessageDecodeErrorZ_is_ok")] public static extern bool CResult_ErrorMessageDecodeErrorZ_is_ok(long _o);
	// void CResult_ErrorMessageDecodeErrorZ_free(struct LDKCResult_ErrorMessageDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ErrorMessageDecodeErrorZ_free")] public static extern void CResult_ErrorMessageDecodeErrorZ_free(long __res);
	// uint64_t CResult_ErrorMessageDecodeErrorZ_clone_ptr(LDKCResult_ErrorMessageDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ErrorMessageDecodeErrorZ_clone_ptr")] public static extern long CResult_ErrorMessageDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ErrorMessageDecodeErrorZ CResult_ErrorMessageDecodeErrorZ_clone(const struct LDKCResult_ErrorMessageDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ErrorMessageDecodeErrorZ_clone")] public static extern long CResult_ErrorMessageDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_WarningMessageDecodeErrorZ CResult_WarningMessageDecodeErrorZ_ok(struct LDKWarningMessage o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WarningMessageDecodeErrorZ_ok")] public static extern long CResult_WarningMessageDecodeErrorZ_ok(long _o);
	// struct LDKCResult_WarningMessageDecodeErrorZ CResult_WarningMessageDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WarningMessageDecodeErrorZ_err")] public static extern long CResult_WarningMessageDecodeErrorZ_err(long _e);
	// bool CResult_WarningMessageDecodeErrorZ_is_ok(const struct LDKCResult_WarningMessageDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WarningMessageDecodeErrorZ_is_ok")] public static extern bool CResult_WarningMessageDecodeErrorZ_is_ok(long _o);
	// void CResult_WarningMessageDecodeErrorZ_free(struct LDKCResult_WarningMessageDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WarningMessageDecodeErrorZ_free")] public static extern void CResult_WarningMessageDecodeErrorZ_free(long __res);
	// uint64_t CResult_WarningMessageDecodeErrorZ_clone_ptr(LDKCResult_WarningMessageDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WarningMessageDecodeErrorZ_clone_ptr")] public static extern long CResult_WarningMessageDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_WarningMessageDecodeErrorZ CResult_WarningMessageDecodeErrorZ_clone(const struct LDKCResult_WarningMessageDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WarningMessageDecodeErrorZ_clone")] public static extern long CResult_WarningMessageDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ CResult_UnsignedNodeAnnouncementDecodeErrorZ_ok(struct LDKUnsignedNodeAnnouncement o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedNodeAnnouncementDecodeErrorZ_ok")] public static extern long CResult_UnsignedNodeAnnouncementDecodeErrorZ_ok(long _o);
	// struct LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ CResult_UnsignedNodeAnnouncementDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedNodeAnnouncementDecodeErrorZ_err")] public static extern long CResult_UnsignedNodeAnnouncementDecodeErrorZ_err(long _e);
	// bool CResult_UnsignedNodeAnnouncementDecodeErrorZ_is_ok(const struct LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedNodeAnnouncementDecodeErrorZ_is_ok")] public static extern bool CResult_UnsignedNodeAnnouncementDecodeErrorZ_is_ok(long _o);
	// void CResult_UnsignedNodeAnnouncementDecodeErrorZ_free(struct LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedNodeAnnouncementDecodeErrorZ_free")] public static extern void CResult_UnsignedNodeAnnouncementDecodeErrorZ_free(long __res);
	// uint64_t CResult_UnsignedNodeAnnouncementDecodeErrorZ_clone_ptr(LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedNodeAnnouncementDecodeErrorZ_clone_ptr")] public static extern long CResult_UnsignedNodeAnnouncementDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ CResult_UnsignedNodeAnnouncementDecodeErrorZ_clone(const struct LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedNodeAnnouncementDecodeErrorZ_clone")] public static extern long CResult_UnsignedNodeAnnouncementDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_NodeAnnouncementDecodeErrorZ CResult_NodeAnnouncementDecodeErrorZ_ok(struct LDKNodeAnnouncement o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementDecodeErrorZ_ok")] public static extern long CResult_NodeAnnouncementDecodeErrorZ_ok(long _o);
	// struct LDKCResult_NodeAnnouncementDecodeErrorZ CResult_NodeAnnouncementDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementDecodeErrorZ_err")] public static extern long CResult_NodeAnnouncementDecodeErrorZ_err(long _e);
	// bool CResult_NodeAnnouncementDecodeErrorZ_is_ok(const struct LDKCResult_NodeAnnouncementDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementDecodeErrorZ_is_ok")] public static extern bool CResult_NodeAnnouncementDecodeErrorZ_is_ok(long _o);
	// void CResult_NodeAnnouncementDecodeErrorZ_free(struct LDKCResult_NodeAnnouncementDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementDecodeErrorZ_free")] public static extern void CResult_NodeAnnouncementDecodeErrorZ_free(long __res);
	// uint64_t CResult_NodeAnnouncementDecodeErrorZ_clone_ptr(LDKCResult_NodeAnnouncementDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementDecodeErrorZ_clone_ptr")] public static extern long CResult_NodeAnnouncementDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_NodeAnnouncementDecodeErrorZ CResult_NodeAnnouncementDecodeErrorZ_clone(const struct LDKCResult_NodeAnnouncementDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementDecodeErrorZ_clone")] public static extern long CResult_NodeAnnouncementDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_QueryShortChannelIdsDecodeErrorZ CResult_QueryShortChannelIdsDecodeErrorZ_ok(struct LDKQueryShortChannelIds o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryShortChannelIdsDecodeErrorZ_ok")] public static extern long CResult_QueryShortChannelIdsDecodeErrorZ_ok(long _o);
	// struct LDKCResult_QueryShortChannelIdsDecodeErrorZ CResult_QueryShortChannelIdsDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryShortChannelIdsDecodeErrorZ_err")] public static extern long CResult_QueryShortChannelIdsDecodeErrorZ_err(long _e);
	// bool CResult_QueryShortChannelIdsDecodeErrorZ_is_ok(const struct LDKCResult_QueryShortChannelIdsDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryShortChannelIdsDecodeErrorZ_is_ok")] public static extern bool CResult_QueryShortChannelIdsDecodeErrorZ_is_ok(long _o);
	// void CResult_QueryShortChannelIdsDecodeErrorZ_free(struct LDKCResult_QueryShortChannelIdsDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryShortChannelIdsDecodeErrorZ_free")] public static extern void CResult_QueryShortChannelIdsDecodeErrorZ_free(long __res);
	// uint64_t CResult_QueryShortChannelIdsDecodeErrorZ_clone_ptr(LDKCResult_QueryShortChannelIdsDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryShortChannelIdsDecodeErrorZ_clone_ptr")] public static extern long CResult_QueryShortChannelIdsDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_QueryShortChannelIdsDecodeErrorZ CResult_QueryShortChannelIdsDecodeErrorZ_clone(const struct LDKCResult_QueryShortChannelIdsDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryShortChannelIdsDecodeErrorZ_clone")] public static extern long CResult_QueryShortChannelIdsDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ CResult_ReplyShortChannelIdsEndDecodeErrorZ_ok(struct LDKReplyShortChannelIdsEnd o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyShortChannelIdsEndDecodeErrorZ_ok")] public static extern long CResult_ReplyShortChannelIdsEndDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ CResult_ReplyShortChannelIdsEndDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyShortChannelIdsEndDecodeErrorZ_err")] public static extern long CResult_ReplyShortChannelIdsEndDecodeErrorZ_err(long _e);
	// bool CResult_ReplyShortChannelIdsEndDecodeErrorZ_is_ok(const struct LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyShortChannelIdsEndDecodeErrorZ_is_ok")] public static extern bool CResult_ReplyShortChannelIdsEndDecodeErrorZ_is_ok(long _o);
	// void CResult_ReplyShortChannelIdsEndDecodeErrorZ_free(struct LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyShortChannelIdsEndDecodeErrorZ_free")] public static extern void CResult_ReplyShortChannelIdsEndDecodeErrorZ_free(long __res);
	// uint64_t CResult_ReplyShortChannelIdsEndDecodeErrorZ_clone_ptr(LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyShortChannelIdsEndDecodeErrorZ_clone_ptr")] public static extern long CResult_ReplyShortChannelIdsEndDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ CResult_ReplyShortChannelIdsEndDecodeErrorZ_clone(const struct LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyShortChannelIdsEndDecodeErrorZ_clone")] public static extern long CResult_ReplyShortChannelIdsEndDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_QueryChannelRangeDecodeErrorZ CResult_QueryChannelRangeDecodeErrorZ_ok(struct LDKQueryChannelRange o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryChannelRangeDecodeErrorZ_ok")] public static extern long CResult_QueryChannelRangeDecodeErrorZ_ok(long _o);
	// struct LDKCResult_QueryChannelRangeDecodeErrorZ CResult_QueryChannelRangeDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryChannelRangeDecodeErrorZ_err")] public static extern long CResult_QueryChannelRangeDecodeErrorZ_err(long _e);
	// bool CResult_QueryChannelRangeDecodeErrorZ_is_ok(const struct LDKCResult_QueryChannelRangeDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryChannelRangeDecodeErrorZ_is_ok")] public static extern bool CResult_QueryChannelRangeDecodeErrorZ_is_ok(long _o);
	// void CResult_QueryChannelRangeDecodeErrorZ_free(struct LDKCResult_QueryChannelRangeDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryChannelRangeDecodeErrorZ_free")] public static extern void CResult_QueryChannelRangeDecodeErrorZ_free(long __res);
	// uint64_t CResult_QueryChannelRangeDecodeErrorZ_clone_ptr(LDKCResult_QueryChannelRangeDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryChannelRangeDecodeErrorZ_clone_ptr")] public static extern long CResult_QueryChannelRangeDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_QueryChannelRangeDecodeErrorZ CResult_QueryChannelRangeDecodeErrorZ_clone(const struct LDKCResult_QueryChannelRangeDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryChannelRangeDecodeErrorZ_clone")] public static extern long CResult_QueryChannelRangeDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ReplyChannelRangeDecodeErrorZ CResult_ReplyChannelRangeDecodeErrorZ_ok(struct LDKReplyChannelRange o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyChannelRangeDecodeErrorZ_ok")] public static extern long CResult_ReplyChannelRangeDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ReplyChannelRangeDecodeErrorZ CResult_ReplyChannelRangeDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyChannelRangeDecodeErrorZ_err")] public static extern long CResult_ReplyChannelRangeDecodeErrorZ_err(long _e);
	// bool CResult_ReplyChannelRangeDecodeErrorZ_is_ok(const struct LDKCResult_ReplyChannelRangeDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyChannelRangeDecodeErrorZ_is_ok")] public static extern bool CResult_ReplyChannelRangeDecodeErrorZ_is_ok(long _o);
	// void CResult_ReplyChannelRangeDecodeErrorZ_free(struct LDKCResult_ReplyChannelRangeDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyChannelRangeDecodeErrorZ_free")] public static extern void CResult_ReplyChannelRangeDecodeErrorZ_free(long __res);
	// uint64_t CResult_ReplyChannelRangeDecodeErrorZ_clone_ptr(LDKCResult_ReplyChannelRangeDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyChannelRangeDecodeErrorZ_clone_ptr")] public static extern long CResult_ReplyChannelRangeDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ReplyChannelRangeDecodeErrorZ CResult_ReplyChannelRangeDecodeErrorZ_clone(const struct LDKCResult_ReplyChannelRangeDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyChannelRangeDecodeErrorZ_clone")] public static extern long CResult_ReplyChannelRangeDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_GossipTimestampFilterDecodeErrorZ CResult_GossipTimestampFilterDecodeErrorZ_ok(struct LDKGossipTimestampFilter o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_GossipTimestampFilterDecodeErrorZ_ok")] public static extern long CResult_GossipTimestampFilterDecodeErrorZ_ok(long _o);
	// struct LDKCResult_GossipTimestampFilterDecodeErrorZ CResult_GossipTimestampFilterDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_GossipTimestampFilterDecodeErrorZ_err")] public static extern long CResult_GossipTimestampFilterDecodeErrorZ_err(long _e);
	// bool CResult_GossipTimestampFilterDecodeErrorZ_is_ok(const struct LDKCResult_GossipTimestampFilterDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_GossipTimestampFilterDecodeErrorZ_is_ok")] public static extern bool CResult_GossipTimestampFilterDecodeErrorZ_is_ok(long _o);
	// void CResult_GossipTimestampFilterDecodeErrorZ_free(struct LDKCResult_GossipTimestampFilterDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_GossipTimestampFilterDecodeErrorZ_free")] public static extern void CResult_GossipTimestampFilterDecodeErrorZ_free(long __res);
	// uint64_t CResult_GossipTimestampFilterDecodeErrorZ_clone_ptr(LDKCResult_GossipTimestampFilterDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_GossipTimestampFilterDecodeErrorZ_clone_ptr")] public static extern long CResult_GossipTimestampFilterDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_GossipTimestampFilterDecodeErrorZ CResult_GossipTimestampFilterDecodeErrorZ_clone(const struct LDKCResult_GossipTimestampFilterDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_GossipTimestampFilterDecodeErrorZ_clone")] public static extern long CResult_GossipTimestampFilterDecodeErrorZ_clone(long _orig);
	// void CVec_PhantomRouteHintsZ_free(struct LDKCVec_PhantomRouteHintsZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_PhantomRouteHintsZ_free")] public static extern void CVec_PhantomRouteHintsZ_free(long[] __res);
	// struct LDKCResult_InvoiceSignOrCreationErrorZ CResult_InvoiceSignOrCreationErrorZ_ok(struct LDKInvoice o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceSignOrCreationErrorZ_ok")] public static extern long CResult_InvoiceSignOrCreationErrorZ_ok(long _o);
	// struct LDKCResult_InvoiceSignOrCreationErrorZ CResult_InvoiceSignOrCreationErrorZ_err(struct LDKSignOrCreationError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceSignOrCreationErrorZ_err")] public static extern long CResult_InvoiceSignOrCreationErrorZ_err(long _e);
	// bool CResult_InvoiceSignOrCreationErrorZ_is_ok(const struct LDKCResult_InvoiceSignOrCreationErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceSignOrCreationErrorZ_is_ok")] public static extern bool CResult_InvoiceSignOrCreationErrorZ_is_ok(long _o);
	// void CResult_InvoiceSignOrCreationErrorZ_free(struct LDKCResult_InvoiceSignOrCreationErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceSignOrCreationErrorZ_free")] public static extern void CResult_InvoiceSignOrCreationErrorZ_free(long __res);
	// uint64_t CResult_InvoiceSignOrCreationErrorZ_clone_ptr(LDKCResult_InvoiceSignOrCreationErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceSignOrCreationErrorZ_clone_ptr")] public static extern long CResult_InvoiceSignOrCreationErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_InvoiceSignOrCreationErrorZ CResult_InvoiceSignOrCreationErrorZ_clone(const struct LDKCResult_InvoiceSignOrCreationErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceSignOrCreationErrorZ_clone")] public static extern long CResult_InvoiceSignOrCreationErrorZ_clone(long _orig);
	// struct LDKCOption_FilterZ COption_FilterZ_some(struct LDKFilter o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_FilterZ_some")] public static extern long COption_FilterZ_some(long _o);
	// struct LDKCOption_FilterZ COption_FilterZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_FilterZ_none")] public static extern long COption_FilterZ_none();
	// void COption_FilterZ_free(struct LDKCOption_FilterZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_FilterZ_free")] public static extern void COption_FilterZ_free(long __res);
	// struct LDKCResult_LockedChannelMonitorNoneZ CResult_LockedChannelMonitorNoneZ_ok(struct LDKLockedChannelMonitor o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LockedChannelMonitorNoneZ_ok")] public static extern long CResult_LockedChannelMonitorNoneZ_ok(long _o);
	// struct LDKCResult_LockedChannelMonitorNoneZ CResult_LockedChannelMonitorNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LockedChannelMonitorNoneZ_err")] public static extern long CResult_LockedChannelMonitorNoneZ_err();
	// bool CResult_LockedChannelMonitorNoneZ_is_ok(const struct LDKCResult_LockedChannelMonitorNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LockedChannelMonitorNoneZ_is_ok")] public static extern bool CResult_LockedChannelMonitorNoneZ_is_ok(long _o);
	// void CResult_LockedChannelMonitorNoneZ_free(struct LDKCResult_LockedChannelMonitorNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LockedChannelMonitorNoneZ_free")] public static extern void CResult_LockedChannelMonitorNoneZ_free(long __res);
	// void CVec_OutPointZ_free(struct LDKCVec_OutPointZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_OutPointZ_free")] public static extern void CVec_OutPointZ_free(long[] __res);
	// void CVec_MonitorUpdateIdZ_free(struct LDKCVec_MonitorUpdateIdZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_MonitorUpdateIdZ_free")] public static extern void CVec_MonitorUpdateIdZ_free(long[] __res);
	// uint64_t C2Tuple_OutPointCVec_MonitorUpdateIdZZ_clone_ptr(LDKC2Tuple_OutPointCVec_MonitorUpdateIdZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_MonitorUpdateIdZZ_clone_ptr")] public static extern long C2Tuple_OutPointCVec_MonitorUpdateIdZZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_OutPointCVec_MonitorUpdateIdZZ C2Tuple_OutPointCVec_MonitorUpdateIdZZ_clone(const struct LDKC2Tuple_OutPointCVec_MonitorUpdateIdZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_MonitorUpdateIdZZ_clone")] public static extern long C2Tuple_OutPointCVec_MonitorUpdateIdZZ_clone(long _orig);
	// struct LDKC2Tuple_OutPointCVec_MonitorUpdateIdZZ C2Tuple_OutPointCVec_MonitorUpdateIdZZ_new(struct LDKOutPoint a, struct LDKCVec_MonitorUpdateIdZ b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_MonitorUpdateIdZZ_new")] public static extern long C2Tuple_OutPointCVec_MonitorUpdateIdZZ_new(long _a, long[] _b);
	// void C2Tuple_OutPointCVec_MonitorUpdateIdZZ_free(struct LDKC2Tuple_OutPointCVec_MonitorUpdateIdZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_MonitorUpdateIdZZ_free")] public static extern void C2Tuple_OutPointCVec_MonitorUpdateIdZZ_free(long __res);
	// void CVec_C2Tuple_OutPointCVec_MonitorUpdateIdZZZ_free(struct LDKCVec_C2Tuple_OutPointCVec_MonitorUpdateIdZZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_OutPointCVec_MonitorUpdateIdZZZ_free")] public static extern void CVec_C2Tuple_OutPointCVec_MonitorUpdateIdZZZ_free(long[] __res);
	// void PaymentPurpose_free(struct LDKPaymentPurpose this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentPurpose_free")] public static extern void PaymentPurpose_free(long _this_ptr);
	// uint64_t PaymentPurpose_clone_ptr(LDKPaymentPurpose *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentPurpose_clone_ptr")] public static extern long PaymentPurpose_clone_ptr(long _arg);
	// struct LDKPaymentPurpose PaymentPurpose_clone(const struct LDKPaymentPurpose *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentPurpose_clone")] public static extern long PaymentPurpose_clone(long _orig);
	// struct LDKPaymentPurpose PaymentPurpose_invoice_payment(struct LDKThirtyTwoBytes payment_preimage, struct LDKThirtyTwoBytes payment_secret);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentPurpose_invoice_payment")] public static extern long PaymentPurpose_invoice_payment(byte[] _payment_preimage, byte[] _payment_secret);
	// struct LDKPaymentPurpose PaymentPurpose_spontaneous_payment(struct LDKThirtyTwoBytes a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentPurpose_spontaneous_payment")] public static extern long PaymentPurpose_spontaneous_payment(byte[] _a);
	// struct LDKCVec_u8Z PaymentPurpose_write(const struct LDKPaymentPurpose *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentPurpose_write")] public static extern byte[] PaymentPurpose_write(long _obj);
	// struct LDKCResult_PaymentPurposeDecodeErrorZ PaymentPurpose_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentPurpose_read")] public static extern long PaymentPurpose_read(byte[] _ser);
	// void ClosureReason_free(struct LDKClosureReason this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_free")] public static extern void ClosureReason_free(long _this_ptr);
	// uint64_t ClosureReason_clone_ptr(LDKClosureReason *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_clone_ptr")] public static extern long ClosureReason_clone_ptr(long _arg);
	// struct LDKClosureReason ClosureReason_clone(const struct LDKClosureReason *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_clone")] public static extern long ClosureReason_clone(long _orig);
	// struct LDKClosureReason ClosureReason_counterparty_force_closed(struct LDKStr peer_msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_counterparty_force_closed")] public static extern long ClosureReason_counterparty_force_closed(string _peer_msg);
	// struct LDKClosureReason ClosureReason_holder_force_closed(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_holder_force_closed")] public static extern long ClosureReason_holder_force_closed();
	// struct LDKClosureReason ClosureReason_cooperative_closure(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_cooperative_closure")] public static extern long ClosureReason_cooperative_closure();
	// struct LDKClosureReason ClosureReason_commitment_tx_confirmed(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_commitment_tx_confirmed")] public static extern long ClosureReason_commitment_tx_confirmed();
	// struct LDKClosureReason ClosureReason_funding_timed_out(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_funding_timed_out")] public static extern long ClosureReason_funding_timed_out();
	// struct LDKClosureReason ClosureReason_processing_error(struct LDKStr err);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_processing_error")] public static extern long ClosureReason_processing_error(string _err);
	// struct LDKClosureReason ClosureReason_disconnected_peer(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_disconnected_peer")] public static extern long ClosureReason_disconnected_peer();
	// struct LDKClosureReason ClosureReason_outdated_channel_manager(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_outdated_channel_manager")] public static extern long ClosureReason_outdated_channel_manager();
	// bool ClosureReason_eq(const struct LDKClosureReason *NONNULL_PTR a, const struct LDKClosureReason *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_eq")] public static extern bool ClosureReason_eq(long _a, long _b);
	// struct LDKCVec_u8Z ClosureReason_write(const struct LDKClosureReason *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_write")] public static extern byte[] ClosureReason_write(long _obj);
	// struct LDKCResult_COption_ClosureReasonZDecodeErrorZ ClosureReason_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_read")] public static extern long ClosureReason_read(byte[] _ser);
	// void HTLCDestination_free(struct LDKHTLCDestination this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_free")] public static extern void HTLCDestination_free(long _this_ptr);
	// uint64_t HTLCDestination_clone_ptr(LDKHTLCDestination *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_clone_ptr")] public static extern long HTLCDestination_clone_ptr(long _arg);
	// struct LDKHTLCDestination HTLCDestination_clone(const struct LDKHTLCDestination *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_clone")] public static extern long HTLCDestination_clone(long _orig);
	// struct LDKHTLCDestination HTLCDestination_next_hop_channel(struct LDKPublicKey node_id, struct LDKThirtyTwoBytes channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_next_hop_channel")] public static extern long HTLCDestination_next_hop_channel(byte[] _node_id, byte[] _channel_id);
	// struct LDKHTLCDestination HTLCDestination_unknown_next_hop(uint64_t requested_forward_scid);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_unknown_next_hop")] public static extern long HTLCDestination_unknown_next_hop(long _requested_forward_scid);
	// struct LDKHTLCDestination HTLCDestination_invalid_forward(uint64_t requested_forward_scid);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_invalid_forward")] public static extern long HTLCDestination_invalid_forward(long _requested_forward_scid);
	// struct LDKHTLCDestination HTLCDestination_failed_payment(struct LDKThirtyTwoBytes payment_hash);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_failed_payment")] public static extern long HTLCDestination_failed_payment(byte[] _payment_hash);
	// bool HTLCDestination_eq(const struct LDKHTLCDestination *NONNULL_PTR a, const struct LDKHTLCDestination *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_eq")] public static extern bool HTLCDestination_eq(long _a, long _b);
	// struct LDKCVec_u8Z HTLCDestination_write(const struct LDKHTLCDestination *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_write")] public static extern byte[] HTLCDestination_write(long _obj);
	// struct LDKCResult_COption_HTLCDestinationZDecodeErrorZ HTLCDestination_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_read")] public static extern long HTLCDestination_read(byte[] _ser);
	// void Event_free(struct LDKEvent this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_free")] public static extern void Event_free(long _this_ptr);
	// uint64_t Event_clone_ptr(LDKEvent *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_clone_ptr")] public static extern long Event_clone_ptr(long _arg);
	// struct LDKEvent Event_clone(const struct LDKEvent *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_clone")] public static extern long Event_clone(long _orig);
	// struct LDKEvent Event_funding_generation_ready(struct LDKThirtyTwoBytes temporary_channel_id, struct LDKPublicKey counterparty_node_id, uint64_t channel_value_satoshis, struct LDKCVec_u8Z output_script, struct LDKU128 user_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_funding_generation_ready")] public static extern long Event_funding_generation_ready(byte[] _temporary_channel_id, byte[] _counterparty_node_id, long _channel_value_satoshis, byte[] _output_script, byte[] _user_channel_id);
	// struct LDKEvent Event_payment_claimable(struct LDKPublicKey receiver_node_id, struct LDKThirtyTwoBytes payment_hash, uint64_t amount_msat, struct LDKPaymentPurpose purpose, struct LDKThirtyTwoBytes via_channel_id, struct LDKCOption_u128Z via_user_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_payment_claimable")] public static extern long Event_payment_claimable(byte[] _receiver_node_id, byte[] _payment_hash, long _amount_msat, long _purpose, byte[] _via_channel_id, long _via_user_channel_id);
	// struct LDKEvent Event_payment_claimed(struct LDKPublicKey receiver_node_id, struct LDKThirtyTwoBytes payment_hash, uint64_t amount_msat, struct LDKPaymentPurpose purpose);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_payment_claimed")] public static extern long Event_payment_claimed(byte[] _receiver_node_id, byte[] _payment_hash, long _amount_msat, long _purpose);
	// struct LDKEvent Event_payment_sent(struct LDKThirtyTwoBytes payment_id, struct LDKThirtyTwoBytes payment_preimage, struct LDKThirtyTwoBytes payment_hash, struct LDKCOption_u64Z fee_paid_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_payment_sent")] public static extern long Event_payment_sent(byte[] _payment_id, byte[] _payment_preimage, byte[] _payment_hash, long _fee_paid_msat);
	// struct LDKEvent Event_payment_failed(struct LDKThirtyTwoBytes payment_id, struct LDKThirtyTwoBytes payment_hash);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_payment_failed")] public static extern long Event_payment_failed(byte[] _payment_id, byte[] _payment_hash);
	// struct LDKEvent Event_payment_path_successful(struct LDKThirtyTwoBytes payment_id, struct LDKThirtyTwoBytes payment_hash, struct LDKCVec_RouteHopZ path);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_payment_path_successful")] public static extern long Event_payment_path_successful(byte[] _payment_id, byte[] _payment_hash, long[] _path);
	// struct LDKEvent Event_payment_path_failed(struct LDKThirtyTwoBytes payment_id, struct LDKThirtyTwoBytes payment_hash, bool payment_failed_permanently, struct LDKCOption_NetworkUpdateZ network_update, bool all_paths_failed, struct LDKCVec_RouteHopZ path, struct LDKCOption_u64Z short_channel_id, struct LDKRouteParameters retry);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_payment_path_failed")] public static extern long Event_payment_path_failed(byte[] _payment_id, byte[] _payment_hash, bool _payment_failed_permanently, long _network_update, bool _all_paths_failed, long[] _path, long _short_channel_id, long _retry);
	// struct LDKEvent Event_probe_successful(struct LDKThirtyTwoBytes payment_id, struct LDKThirtyTwoBytes payment_hash, struct LDKCVec_RouteHopZ path);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_probe_successful")] public static extern long Event_probe_successful(byte[] _payment_id, byte[] _payment_hash, long[] _path);
	// struct LDKEvent Event_probe_failed(struct LDKThirtyTwoBytes payment_id, struct LDKThirtyTwoBytes payment_hash, struct LDKCVec_RouteHopZ path, struct LDKCOption_u64Z short_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_probe_failed")] public static extern long Event_probe_failed(byte[] _payment_id, byte[] _payment_hash, long[] _path, long _short_channel_id);
	// struct LDKEvent Event_pending_htlcs_forwardable(uint64_t time_forwardable);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_pending_htlcs_forwardable")] public static extern long Event_pending_htlcs_forwardable(long _time_forwardable);
	// struct LDKEvent Event_htlcintercepted(struct LDKThirtyTwoBytes intercept_id, uint64_t requested_next_hop_scid, struct LDKThirtyTwoBytes payment_hash, uint64_t inbound_amount_msat, uint64_t expected_outbound_amount_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_htlcintercepted")] public static extern long Event_htlcintercepted(byte[] _intercept_id, long _requested_next_hop_scid, byte[] _payment_hash, long _inbound_amount_msat, long _expected_outbound_amount_msat);
	// struct LDKEvent Event_spendable_outputs(struct LDKCVec_SpendableOutputDescriptorZ outputs);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_spendable_outputs")] public static extern long Event_spendable_outputs(long[] _outputs);
	// struct LDKEvent Event_payment_forwarded(struct LDKThirtyTwoBytes prev_channel_id, struct LDKThirtyTwoBytes next_channel_id, struct LDKCOption_u64Z fee_earned_msat, bool claim_from_onchain_tx);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_payment_forwarded")] public static extern long Event_payment_forwarded(byte[] _prev_channel_id, byte[] _next_channel_id, long _fee_earned_msat, bool _claim_from_onchain_tx);
	// struct LDKEvent Event_channel_ready(struct LDKThirtyTwoBytes channel_id, struct LDKU128 user_channel_id, struct LDKPublicKey counterparty_node_id, struct LDKChannelTypeFeatures channel_type);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_channel_ready")] public static extern long Event_channel_ready(byte[] _channel_id, byte[] _user_channel_id, byte[] _counterparty_node_id, long _channel_type);
	// struct LDKEvent Event_channel_closed(struct LDKThirtyTwoBytes channel_id, struct LDKU128 user_channel_id, struct LDKClosureReason reason);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_channel_closed")] public static extern long Event_channel_closed(byte[] _channel_id, byte[] _user_channel_id, long _reason);
	// struct LDKEvent Event_discard_funding(struct LDKThirtyTwoBytes channel_id, struct LDKTransaction transaction);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_discard_funding")] public static extern long Event_discard_funding(byte[] _channel_id, byte[] _transaction);
	// struct LDKEvent Event_open_channel_request(struct LDKThirtyTwoBytes temporary_channel_id, struct LDKPublicKey counterparty_node_id, uint64_t funding_satoshis, uint64_t push_msat, struct LDKChannelTypeFeatures channel_type);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_open_channel_request")] public static extern long Event_open_channel_request(byte[] _temporary_channel_id, byte[] _counterparty_node_id, long _funding_satoshis, long _push_msat, long _channel_type);
	// struct LDKEvent Event_htlchandling_failed(struct LDKThirtyTwoBytes prev_channel_id, struct LDKHTLCDestination failed_next_destination);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_htlchandling_failed")] public static extern long Event_htlchandling_failed(byte[] _prev_channel_id, long _failed_next_destination);
	// struct LDKCVec_u8Z Event_write(const struct LDKEvent *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_write")] public static extern byte[] Event_write(long _obj);
	// struct LDKCResult_COption_EventZDecodeErrorZ Event_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_read")] public static extern long Event_read(byte[] _ser);
	// void MessageSendEvent_free(struct LDKMessageSendEvent this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_free")] public static extern void MessageSendEvent_free(long _this_ptr);
	// uint64_t MessageSendEvent_clone_ptr(LDKMessageSendEvent *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_clone_ptr")] public static extern long MessageSendEvent_clone_ptr(long _arg);
	// struct LDKMessageSendEvent MessageSendEvent_clone(const struct LDKMessageSendEvent *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_clone")] public static extern long MessageSendEvent_clone(long _orig);
	// struct LDKMessageSendEvent MessageSendEvent_send_accept_channel(struct LDKPublicKey node_id, struct LDKAcceptChannel msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_accept_channel")] public static extern long MessageSendEvent_send_accept_channel(byte[] _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_open_channel(struct LDKPublicKey node_id, struct LDKOpenChannel msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_open_channel")] public static extern long MessageSendEvent_send_open_channel(byte[] _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_funding_created(struct LDKPublicKey node_id, struct LDKFundingCreated msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_funding_created")] public static extern long MessageSendEvent_send_funding_created(byte[] _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_funding_signed(struct LDKPublicKey node_id, struct LDKFundingSigned msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_funding_signed")] public static extern long MessageSendEvent_send_funding_signed(byte[] _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_channel_ready(struct LDKPublicKey node_id, struct LDKChannelReady msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_channel_ready")] public static extern long MessageSendEvent_send_channel_ready(byte[] _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_announcement_signatures(struct LDKPublicKey node_id, struct LDKAnnouncementSignatures msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_announcement_signatures")] public static extern long MessageSendEvent_send_announcement_signatures(byte[] _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_update_htlcs(struct LDKPublicKey node_id, struct LDKCommitmentUpdate updates);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_update_htlcs")] public static extern long MessageSendEvent_update_htlcs(byte[] _node_id, long _updates);
	// struct LDKMessageSendEvent MessageSendEvent_send_revoke_and_ack(struct LDKPublicKey node_id, struct LDKRevokeAndACK msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_revoke_and_ack")] public static extern long MessageSendEvent_send_revoke_and_ack(byte[] _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_closing_signed(struct LDKPublicKey node_id, struct LDKClosingSigned msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_closing_signed")] public static extern long MessageSendEvent_send_closing_signed(byte[] _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_shutdown(struct LDKPublicKey node_id, struct LDKShutdown msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_shutdown")] public static extern long MessageSendEvent_send_shutdown(byte[] _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_channel_reestablish(struct LDKPublicKey node_id, struct LDKChannelReestablish msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_channel_reestablish")] public static extern long MessageSendEvent_send_channel_reestablish(byte[] _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_channel_announcement(struct LDKPublicKey node_id, struct LDKChannelAnnouncement msg, struct LDKChannelUpdate update_msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_channel_announcement")] public static extern long MessageSendEvent_send_channel_announcement(byte[] _node_id, long _msg, long _update_msg);
	// struct LDKMessageSendEvent MessageSendEvent_broadcast_channel_announcement(struct LDKChannelAnnouncement msg, struct LDKChannelUpdate update_msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_broadcast_channel_announcement")] public static extern long MessageSendEvent_broadcast_channel_announcement(long _msg, long _update_msg);
	// struct LDKMessageSendEvent MessageSendEvent_broadcast_channel_update(struct LDKChannelUpdate msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_broadcast_channel_update")] public static extern long MessageSendEvent_broadcast_channel_update(long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_channel_update(struct LDKPublicKey node_id, struct LDKChannelUpdate msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_channel_update")] public static extern long MessageSendEvent_send_channel_update(byte[] _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_handle_error(struct LDKPublicKey node_id, struct LDKErrorAction action);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_handle_error")] public static extern long MessageSendEvent_handle_error(byte[] _node_id, long _action);
	// struct LDKMessageSendEvent MessageSendEvent_send_channel_range_query(struct LDKPublicKey node_id, struct LDKQueryChannelRange msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_channel_range_query")] public static extern long MessageSendEvent_send_channel_range_query(byte[] _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_short_ids_query(struct LDKPublicKey node_id, struct LDKQueryShortChannelIds msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_short_ids_query")] public static extern long MessageSendEvent_send_short_ids_query(byte[] _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_reply_channel_range(struct LDKPublicKey node_id, struct LDKReplyChannelRange msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_reply_channel_range")] public static extern long MessageSendEvent_send_reply_channel_range(byte[] _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_gossip_timestamp_filter(struct LDKPublicKey node_id, struct LDKGossipTimestampFilter msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_gossip_timestamp_filter")] public static extern long MessageSendEvent_send_gossip_timestamp_filter(byte[] _node_id, long _msg);
	// void MessageSendEventsProvider_free(struct LDKMessageSendEventsProvider this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEventsProvider_free")] public static extern void MessageSendEventsProvider_free(long _this_ptr);
	// void OnionMessageProvider_free(struct LDKOnionMessageProvider this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageProvider_free")] public static extern void OnionMessageProvider_free(long _this_ptr);
	// void EventsProvider_free(struct LDKEventsProvider this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EventsProvider_free")] public static extern void EventsProvider_free(long _this_ptr);
	// void EventHandler_free(struct LDKEventHandler this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EventHandler_free")] public static extern void EventHandler_free(long _this_ptr);
	// void APIError_free(struct LDKAPIError this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_free")] public static extern void APIError_free(long _this_ptr);
	// uint64_t APIError_clone_ptr(LDKAPIError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_clone_ptr")] public static extern long APIError_clone_ptr(long _arg);
	// struct LDKAPIError APIError_clone(const struct LDKAPIError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_clone")] public static extern long APIError_clone(long _orig);
	// struct LDKAPIError APIError_apimisuse_error(struct LDKStr err);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_apimisuse_error")] public static extern long APIError_apimisuse_error(string _err);
	// struct LDKAPIError APIError_fee_rate_too_high(struct LDKStr err, uint32_t feerate);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_fee_rate_too_high")] public static extern long APIError_fee_rate_too_high(string _err, int _feerate);
	// struct LDKAPIError APIError_invalid_route(struct LDKStr err);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_invalid_route")] public static extern long APIError_invalid_route(string _err);
	// struct LDKAPIError APIError_channel_unavailable(struct LDKStr err);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_channel_unavailable")] public static extern long APIError_channel_unavailable(string _err);
	// struct LDKAPIError APIError_monitor_update_in_progress(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_monitor_update_in_progress")] public static extern long APIError_monitor_update_in_progress();
	// struct LDKAPIError APIError_incompatible_shutdown_script(struct LDKShutdownScript script);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_incompatible_shutdown_script")] public static extern long APIError_incompatible_shutdown_script(long _script);
	// bool APIError_eq(const struct LDKAPIError *NONNULL_PTR a, const struct LDKAPIError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_eq")] public static extern bool APIError_eq(long _a, long _b);
	// void BigSize_free(struct LDKBigSize this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigSize_free")] public static extern void BigSize_free(long _this_obj);
	// uint64_t BigSize_get_a(const struct LDKBigSize *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigSize_get_a")] public static extern long BigSize_get_a(long _this_ptr);
	// void BigSize_set_a(struct LDKBigSize *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigSize_set_a")] public static extern void BigSize_set_a(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKBigSize BigSize_new(uint64_t a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigSize_new")] public static extern long BigSize_new(long _a_arg);
	// void Hostname_free(struct LDKHostname this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Hostname_free")] public static extern void Hostname_free(long _this_obj);
	// uint64_t Hostname_clone_ptr(LDKHostname *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Hostname_clone_ptr")] public static extern long Hostname_clone_ptr(long _arg);
	// struct LDKHostname Hostname_clone(const struct LDKHostname *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Hostname_clone")] public static extern long Hostname_clone(long _orig);
	// bool Hostname_eq(const struct LDKHostname *NONNULL_PTR a, const struct LDKHostname *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Hostname_eq")] public static extern bool Hostname_eq(long _a, long _b);
	// MUST_USE_RES uint8_t Hostname_len(const struct LDKHostname *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Hostname_len")] public static extern byte Hostname_len(long _this_arg);
	// struct LDKCResult_StringErrorZ sign(struct LDKu8slice msg, const uint8_t (*sk)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_sign")] public static extern long sign(byte[] _msg, byte[] _sk);
	// struct LDKCResult_PublicKeyErrorZ recover_pk(struct LDKu8slice msg, struct LDKStr sig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_recover_pk")] public static extern long recover_pk(byte[] _msg, string _sig);
	// bool verify(struct LDKu8slice msg, struct LDKStr sig, struct LDKPublicKey pk);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_verify")] public static extern bool verify(byte[] _msg, string _sig, byte[] _pk);
	// struct LDKCVec_u8Z construct_invoice_preimage(struct LDKu8slice hrp_bytes, struct LDKCVec_U5Z data_without_signature);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_construct_invoice_preimage")] public static extern byte[] construct_invoice_preimage(byte[] _hrp_bytes, byte[] _data_without_signature);
	// void Persister_free(struct LDKPersister this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Persister_free")] public static extern void Persister_free(long _this_ptr);
	// void PrintableString_free(struct LDKPrintableString this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrintableString_free")] public static extern void PrintableString_free(long _this_obj);
	// struct LDKStr PrintableString_get_a(const struct LDKPrintableString *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrintableString_get_a")] public static extern string PrintableString_get_a(long _this_ptr);
	// void PrintableString_set_a(struct LDKPrintableString *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrintableString_set_a")] public static extern void PrintableString_set_a(long _this_ptr, string _val);
	// MUST_USE_RES struct LDKPrintableString PrintableString_new(struct LDKStr a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrintableString_new")] public static extern long PrintableString_new(string _a_arg);
	// void FutureCallback_free(struct LDKFutureCallback this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FutureCallback_free")] public static extern void FutureCallback_free(long _this_ptr);
	// void Future_free(struct LDKFuture this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Future_free")] public static extern void Future_free(long _this_obj);
	// void Future_register_callback_fn(const struct LDKFuture *NONNULL_PTR this_arg, struct LDKFutureCallback callback);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Future_register_callback_fn")] public static extern void Future_register_callback_fn(long _this_arg, long _callback);
	// enum LDKLevel Level_clone(const enum LDKLevel *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_clone")] public static extern Level Level_clone(long _orig);
	// enum LDKLevel Level_gossip(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_gossip")] public static extern Level Level_gossip();
	// enum LDKLevel Level_trace(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_trace")] public static extern Level Level_trace();
	// enum LDKLevel Level_debug(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_debug")] public static extern Level Level_debug();
	// enum LDKLevel Level_info(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_info")] public static extern Level Level_info();
	// enum LDKLevel Level_warn(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_warn")] public static extern Level Level_warn();
	// enum LDKLevel Level_error(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_error")] public static extern Level Level_error();
	// bool Level_eq(const enum LDKLevel *NONNULL_PTR a, const enum LDKLevel *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_eq")] public static extern bool Level_eq(long _a, long _b);
	// uint64_t Level_hash(const enum LDKLevel *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_hash")] public static extern long Level_hash(long _o);
	// MUST_USE_RES enum LDKLevel Level_max(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_max")] public static extern Level Level_max();
	// void Record_free(struct LDKRecord this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_free")] public static extern void Record_free(long _this_obj);
	// enum LDKLevel Record_get_level(const struct LDKRecord *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_get_level")] public static extern Level Record_get_level(long _this_ptr);
	// void Record_set_level(struct LDKRecord *NONNULL_PTR this_ptr, enum LDKLevel val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_set_level")] public static extern void Record_set_level(long _this_ptr, Level _val);
	// struct LDKStr Record_get_args(const struct LDKRecord *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_get_args")] public static extern string Record_get_args(long _this_ptr);
	// void Record_set_args(struct LDKRecord *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_set_args")] public static extern void Record_set_args(long _this_ptr, string _val);
	// struct LDKStr Record_get_module_path(const struct LDKRecord *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_get_module_path")] public static extern string Record_get_module_path(long _this_ptr);
	// void Record_set_module_path(struct LDKRecord *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_set_module_path")] public static extern void Record_set_module_path(long _this_ptr, string _val);
	// struct LDKStr Record_get_file(const struct LDKRecord *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_get_file")] public static extern string Record_get_file(long _this_ptr);
	// void Record_set_file(struct LDKRecord *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_set_file")] public static extern void Record_set_file(long _this_ptr, string _val);
	// uint32_t Record_get_line(const struct LDKRecord *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_get_line")] public static extern int Record_get_line(long _this_ptr);
	// void Record_set_line(struct LDKRecord *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_set_line")] public static extern void Record_set_line(long _this_ptr, int _val);
	// uint64_t Record_clone_ptr(LDKRecord *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_clone_ptr")] public static extern long Record_clone_ptr(long _arg);
	// struct LDKRecord Record_clone(const struct LDKRecord *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_clone")] public static extern long Record_clone(long _orig);
	// void Logger_free(struct LDKLogger this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Logger_free")] public static extern void Logger_free(long _this_ptr);
	// void ChannelHandshakeConfig_free(struct LDKChannelHandshakeConfig this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_free")] public static extern void ChannelHandshakeConfig_free(long _this_obj);
	// uint32_t ChannelHandshakeConfig_get_minimum_depth(const struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_get_minimum_depth")] public static extern int ChannelHandshakeConfig_get_minimum_depth(long _this_ptr);
	// void ChannelHandshakeConfig_set_minimum_depth(struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_set_minimum_depth")] public static extern void ChannelHandshakeConfig_set_minimum_depth(long _this_ptr, int _val);
	// uint16_t ChannelHandshakeConfig_get_our_to_self_delay(const struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_get_our_to_self_delay")] public static extern short ChannelHandshakeConfig_get_our_to_self_delay(long _this_ptr);
	// void ChannelHandshakeConfig_set_our_to_self_delay(struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_set_our_to_self_delay")] public static extern void ChannelHandshakeConfig_set_our_to_self_delay(long _this_ptr, short _val);
	// uint64_t ChannelHandshakeConfig_get_our_htlc_minimum_msat(const struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_get_our_htlc_minimum_msat")] public static extern long ChannelHandshakeConfig_get_our_htlc_minimum_msat(long _this_ptr);
	// void ChannelHandshakeConfig_set_our_htlc_minimum_msat(struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_set_our_htlc_minimum_msat")] public static extern void ChannelHandshakeConfig_set_our_htlc_minimum_msat(long _this_ptr, long _val);
	// uint8_t ChannelHandshakeConfig_get_max_inbound_htlc_value_in_flight_percent_of_channel(const struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_get_max_inbound_htlc_value_in_flight_percent_of_channel")] public static extern byte ChannelHandshakeConfig_get_max_inbound_htlc_value_in_flight_percent_of_channel(long _this_ptr);
	// void ChannelHandshakeConfig_set_max_inbound_htlc_value_in_flight_percent_of_channel(struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr, uint8_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_set_max_inbound_htlc_value_in_flight_percent_of_channel")] public static extern void ChannelHandshakeConfig_set_max_inbound_htlc_value_in_flight_percent_of_channel(long _this_ptr, byte _val);
	// bool ChannelHandshakeConfig_get_negotiate_scid_privacy(const struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_get_negotiate_scid_privacy")] public static extern bool ChannelHandshakeConfig_get_negotiate_scid_privacy(long _this_ptr);
	// void ChannelHandshakeConfig_set_negotiate_scid_privacy(struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_set_negotiate_scid_privacy")] public static extern void ChannelHandshakeConfig_set_negotiate_scid_privacy(long _this_ptr, bool _val);
	// bool ChannelHandshakeConfig_get_announced_channel(const struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_get_announced_channel")] public static extern bool ChannelHandshakeConfig_get_announced_channel(long _this_ptr);
	// void ChannelHandshakeConfig_set_announced_channel(struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_set_announced_channel")] public static extern void ChannelHandshakeConfig_set_announced_channel(long _this_ptr, bool _val);
	// bool ChannelHandshakeConfig_get_commit_upfront_shutdown_pubkey(const struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_get_commit_upfront_shutdown_pubkey")] public static extern bool ChannelHandshakeConfig_get_commit_upfront_shutdown_pubkey(long _this_ptr);
	// void ChannelHandshakeConfig_set_commit_upfront_shutdown_pubkey(struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_set_commit_upfront_shutdown_pubkey")] public static extern void ChannelHandshakeConfig_set_commit_upfront_shutdown_pubkey(long _this_ptr, bool _val);
	// uint32_t ChannelHandshakeConfig_get_their_channel_reserve_proportional_millionths(const struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_get_their_channel_reserve_proportional_millionths")] public static extern int ChannelHandshakeConfig_get_their_channel_reserve_proportional_millionths(long _this_ptr);
	// void ChannelHandshakeConfig_set_their_channel_reserve_proportional_millionths(struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_set_their_channel_reserve_proportional_millionths")] public static extern void ChannelHandshakeConfig_set_their_channel_reserve_proportional_millionths(long _this_ptr, int _val);
	// MUST_USE_RES struct LDKChannelHandshakeConfig ChannelHandshakeConfig_new(uint32_t minimum_depth_arg, uint16_t our_to_self_delay_arg, uint64_t our_htlc_minimum_msat_arg, uint8_t max_inbound_htlc_value_in_flight_percent_of_channel_arg, bool negotiate_scid_privacy_arg, bool announced_channel_arg, bool commit_upfront_shutdown_pubkey_arg, uint32_t their_channel_reserve_proportional_millionths_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_new")] public static extern long ChannelHandshakeConfig_new(int _minimum_depth_arg, short _our_to_self_delay_arg, long _our_htlc_minimum_msat_arg, byte _max_inbound_htlc_value_in_flight_percent_of_channel_arg, bool _negotiate_scid_privacy_arg, bool _announced_channel_arg, bool _commit_upfront_shutdown_pubkey_arg, int _their_channel_reserve_proportional_millionths_arg);
	// uint64_t ChannelHandshakeConfig_clone_ptr(LDKChannelHandshakeConfig *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_clone_ptr")] public static extern long ChannelHandshakeConfig_clone_ptr(long _arg);
	// struct LDKChannelHandshakeConfig ChannelHandshakeConfig_clone(const struct LDKChannelHandshakeConfig *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_clone")] public static extern long ChannelHandshakeConfig_clone(long _orig);
	// MUST_USE_RES struct LDKChannelHandshakeConfig ChannelHandshakeConfig_default(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_default")] public static extern long ChannelHandshakeConfig_default();
	// void ChannelHandshakeLimits_free(struct LDKChannelHandshakeLimits this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_free")] public static extern void ChannelHandshakeLimits_free(long _this_obj);
	// uint64_t ChannelHandshakeLimits_get_min_funding_satoshis(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_min_funding_satoshis")] public static extern long ChannelHandshakeLimits_get_min_funding_satoshis(long _this_ptr);
	// void ChannelHandshakeLimits_set_min_funding_satoshis(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_min_funding_satoshis")] public static extern void ChannelHandshakeLimits_set_min_funding_satoshis(long _this_ptr, long _val);
	// uint64_t ChannelHandshakeLimits_get_max_funding_satoshis(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_max_funding_satoshis")] public static extern long ChannelHandshakeLimits_get_max_funding_satoshis(long _this_ptr);
	// void ChannelHandshakeLimits_set_max_funding_satoshis(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_max_funding_satoshis")] public static extern void ChannelHandshakeLimits_set_max_funding_satoshis(long _this_ptr, long _val);
	// uint64_t ChannelHandshakeLimits_get_max_htlc_minimum_msat(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_max_htlc_minimum_msat")] public static extern long ChannelHandshakeLimits_get_max_htlc_minimum_msat(long _this_ptr);
	// void ChannelHandshakeLimits_set_max_htlc_minimum_msat(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_max_htlc_minimum_msat")] public static extern void ChannelHandshakeLimits_set_max_htlc_minimum_msat(long _this_ptr, long _val);
	// uint64_t ChannelHandshakeLimits_get_min_max_htlc_value_in_flight_msat(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_min_max_htlc_value_in_flight_msat")] public static extern long ChannelHandshakeLimits_get_min_max_htlc_value_in_flight_msat(long _this_ptr);
	// void ChannelHandshakeLimits_set_min_max_htlc_value_in_flight_msat(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_min_max_htlc_value_in_flight_msat")] public static extern void ChannelHandshakeLimits_set_min_max_htlc_value_in_flight_msat(long _this_ptr, long _val);
	// uint64_t ChannelHandshakeLimits_get_max_channel_reserve_satoshis(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_max_channel_reserve_satoshis")] public static extern long ChannelHandshakeLimits_get_max_channel_reserve_satoshis(long _this_ptr);
	// void ChannelHandshakeLimits_set_max_channel_reserve_satoshis(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_max_channel_reserve_satoshis")] public static extern void ChannelHandshakeLimits_set_max_channel_reserve_satoshis(long _this_ptr, long _val);
	// uint16_t ChannelHandshakeLimits_get_min_max_accepted_htlcs(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_min_max_accepted_htlcs")] public static extern short ChannelHandshakeLimits_get_min_max_accepted_htlcs(long _this_ptr);
	// void ChannelHandshakeLimits_set_min_max_accepted_htlcs(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_min_max_accepted_htlcs")] public static extern void ChannelHandshakeLimits_set_min_max_accepted_htlcs(long _this_ptr, short _val);
	// uint32_t ChannelHandshakeLimits_get_max_minimum_depth(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_max_minimum_depth")] public static extern int ChannelHandshakeLimits_get_max_minimum_depth(long _this_ptr);
	// void ChannelHandshakeLimits_set_max_minimum_depth(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_max_minimum_depth")] public static extern void ChannelHandshakeLimits_set_max_minimum_depth(long _this_ptr, int _val);
	// bool ChannelHandshakeLimits_get_trust_own_funding_0conf(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_trust_own_funding_0conf")] public static extern bool ChannelHandshakeLimits_get_trust_own_funding_0conf(long _this_ptr);
	// void ChannelHandshakeLimits_set_trust_own_funding_0conf(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_trust_own_funding_0conf")] public static extern void ChannelHandshakeLimits_set_trust_own_funding_0conf(long _this_ptr, bool _val);
	// bool ChannelHandshakeLimits_get_force_announced_channel_preference(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_force_announced_channel_preference")] public static extern bool ChannelHandshakeLimits_get_force_announced_channel_preference(long _this_ptr);
	// void ChannelHandshakeLimits_set_force_announced_channel_preference(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_force_announced_channel_preference")] public static extern void ChannelHandshakeLimits_set_force_announced_channel_preference(long _this_ptr, bool _val);
	// uint16_t ChannelHandshakeLimits_get_their_to_self_delay(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_their_to_self_delay")] public static extern short ChannelHandshakeLimits_get_their_to_self_delay(long _this_ptr);
	// void ChannelHandshakeLimits_set_their_to_self_delay(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_their_to_self_delay")] public static extern void ChannelHandshakeLimits_set_their_to_self_delay(long _this_ptr, short _val);
	// MUST_USE_RES struct LDKChannelHandshakeLimits ChannelHandshakeLimits_new(uint64_t min_funding_satoshis_arg, uint64_t max_funding_satoshis_arg, uint64_t max_htlc_minimum_msat_arg, uint64_t min_max_htlc_value_in_flight_msat_arg, uint64_t max_channel_reserve_satoshis_arg, uint16_t min_max_accepted_htlcs_arg, uint32_t max_minimum_depth_arg, bool trust_own_funding_0conf_arg, bool force_announced_channel_preference_arg, uint16_t their_to_self_delay_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_new")] public static extern long ChannelHandshakeLimits_new(long _min_funding_satoshis_arg, long _max_funding_satoshis_arg, long _max_htlc_minimum_msat_arg, long _min_max_htlc_value_in_flight_msat_arg, long _max_channel_reserve_satoshis_arg, short _min_max_accepted_htlcs_arg, int _max_minimum_depth_arg, bool _trust_own_funding_0conf_arg, bool _force_announced_channel_preference_arg, short _their_to_self_delay_arg);
	// uint64_t ChannelHandshakeLimits_clone_ptr(LDKChannelHandshakeLimits *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_clone_ptr")] public static extern long ChannelHandshakeLimits_clone_ptr(long _arg);
	// struct LDKChannelHandshakeLimits ChannelHandshakeLimits_clone(const struct LDKChannelHandshakeLimits *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_clone")] public static extern long ChannelHandshakeLimits_clone(long _orig);
	// MUST_USE_RES struct LDKChannelHandshakeLimits ChannelHandshakeLimits_default(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_default")] public static extern long ChannelHandshakeLimits_default();
	// void ChannelConfig_free(struct LDKChannelConfig this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_free")] public static extern void ChannelConfig_free(long _this_obj);
	// uint32_t ChannelConfig_get_forwarding_fee_proportional_millionths(const struct LDKChannelConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_get_forwarding_fee_proportional_millionths")] public static extern int ChannelConfig_get_forwarding_fee_proportional_millionths(long _this_ptr);
	// void ChannelConfig_set_forwarding_fee_proportional_millionths(struct LDKChannelConfig *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_set_forwarding_fee_proportional_millionths")] public static extern void ChannelConfig_set_forwarding_fee_proportional_millionths(long _this_ptr, int _val);
	// uint32_t ChannelConfig_get_forwarding_fee_base_msat(const struct LDKChannelConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_get_forwarding_fee_base_msat")] public static extern int ChannelConfig_get_forwarding_fee_base_msat(long _this_ptr);
	// void ChannelConfig_set_forwarding_fee_base_msat(struct LDKChannelConfig *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_set_forwarding_fee_base_msat")] public static extern void ChannelConfig_set_forwarding_fee_base_msat(long _this_ptr, int _val);
	// uint16_t ChannelConfig_get_cltv_expiry_delta(const struct LDKChannelConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_get_cltv_expiry_delta")] public static extern short ChannelConfig_get_cltv_expiry_delta(long _this_ptr);
	// void ChannelConfig_set_cltv_expiry_delta(struct LDKChannelConfig *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_set_cltv_expiry_delta")] public static extern void ChannelConfig_set_cltv_expiry_delta(long _this_ptr, short _val);
	// uint64_t ChannelConfig_get_max_dust_htlc_exposure_msat(const struct LDKChannelConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_get_max_dust_htlc_exposure_msat")] public static extern long ChannelConfig_get_max_dust_htlc_exposure_msat(long _this_ptr);
	// void ChannelConfig_set_max_dust_htlc_exposure_msat(struct LDKChannelConfig *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_set_max_dust_htlc_exposure_msat")] public static extern void ChannelConfig_set_max_dust_htlc_exposure_msat(long _this_ptr, long _val);
	// uint64_t ChannelConfig_get_force_close_avoidance_max_fee_satoshis(const struct LDKChannelConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_get_force_close_avoidance_max_fee_satoshis")] public static extern long ChannelConfig_get_force_close_avoidance_max_fee_satoshis(long _this_ptr);
	// void ChannelConfig_set_force_close_avoidance_max_fee_satoshis(struct LDKChannelConfig *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_set_force_close_avoidance_max_fee_satoshis")] public static extern void ChannelConfig_set_force_close_avoidance_max_fee_satoshis(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelConfig ChannelConfig_new(uint32_t forwarding_fee_proportional_millionths_arg, uint32_t forwarding_fee_base_msat_arg, uint16_t cltv_expiry_delta_arg, uint64_t max_dust_htlc_exposure_msat_arg, uint64_t force_close_avoidance_max_fee_satoshis_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_new")] public static extern long ChannelConfig_new(int _forwarding_fee_proportional_millionths_arg, int _forwarding_fee_base_msat_arg, short _cltv_expiry_delta_arg, long _max_dust_htlc_exposure_msat_arg, long _force_close_avoidance_max_fee_satoshis_arg);
	// uint64_t ChannelConfig_clone_ptr(LDKChannelConfig *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_clone_ptr")] public static extern long ChannelConfig_clone_ptr(long _arg);
	// struct LDKChannelConfig ChannelConfig_clone(const struct LDKChannelConfig *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_clone")] public static extern long ChannelConfig_clone(long _orig);
	// bool ChannelConfig_eq(const struct LDKChannelConfig *NONNULL_PTR a, const struct LDKChannelConfig *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_eq")] public static extern bool ChannelConfig_eq(long _a, long _b);
	// MUST_USE_RES struct LDKChannelConfig ChannelConfig_default(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_default")] public static extern long ChannelConfig_default();
	// struct LDKCVec_u8Z ChannelConfig_write(const struct LDKChannelConfig *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_write")] public static extern byte[] ChannelConfig_write(long _obj);
	// struct LDKCResult_ChannelConfigDecodeErrorZ ChannelConfig_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_read")] public static extern long ChannelConfig_read(byte[] _ser);
	// void UserConfig_free(struct LDKUserConfig this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_free")] public static extern void UserConfig_free(long _this_obj);
	// struct LDKChannelHandshakeConfig UserConfig_get_channel_handshake_config(const struct LDKUserConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_get_channel_handshake_config")] public static extern long UserConfig_get_channel_handshake_config(long _this_ptr);
	// void UserConfig_set_channel_handshake_config(struct LDKUserConfig *NONNULL_PTR this_ptr, struct LDKChannelHandshakeConfig val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_set_channel_handshake_config")] public static extern void UserConfig_set_channel_handshake_config(long _this_ptr, long _val);
	// struct LDKChannelHandshakeLimits UserConfig_get_channel_handshake_limits(const struct LDKUserConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_get_channel_handshake_limits")] public static extern long UserConfig_get_channel_handshake_limits(long _this_ptr);
	// void UserConfig_set_channel_handshake_limits(struct LDKUserConfig *NONNULL_PTR this_ptr, struct LDKChannelHandshakeLimits val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_set_channel_handshake_limits")] public static extern void UserConfig_set_channel_handshake_limits(long _this_ptr, long _val);
	// struct LDKChannelConfig UserConfig_get_channel_config(const struct LDKUserConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_get_channel_config")] public static extern long UserConfig_get_channel_config(long _this_ptr);
	// void UserConfig_set_channel_config(struct LDKUserConfig *NONNULL_PTR this_ptr, struct LDKChannelConfig val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_set_channel_config")] public static extern void UserConfig_set_channel_config(long _this_ptr, long _val);
	// bool UserConfig_get_accept_forwards_to_priv_channels(const struct LDKUserConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_get_accept_forwards_to_priv_channels")] public static extern bool UserConfig_get_accept_forwards_to_priv_channels(long _this_ptr);
	// void UserConfig_set_accept_forwards_to_priv_channels(struct LDKUserConfig *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_set_accept_forwards_to_priv_channels")] public static extern void UserConfig_set_accept_forwards_to_priv_channels(long _this_ptr, bool _val);
	// bool UserConfig_get_accept_inbound_channels(const struct LDKUserConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_get_accept_inbound_channels")] public static extern bool UserConfig_get_accept_inbound_channels(long _this_ptr);
	// void UserConfig_set_accept_inbound_channels(struct LDKUserConfig *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_set_accept_inbound_channels")] public static extern void UserConfig_set_accept_inbound_channels(long _this_ptr, bool _val);
	// bool UserConfig_get_manually_accept_inbound_channels(const struct LDKUserConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_get_manually_accept_inbound_channels")] public static extern bool UserConfig_get_manually_accept_inbound_channels(long _this_ptr);
	// void UserConfig_set_manually_accept_inbound_channels(struct LDKUserConfig *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_set_manually_accept_inbound_channels")] public static extern void UserConfig_set_manually_accept_inbound_channels(long _this_ptr, bool _val);
	// bool UserConfig_get_accept_intercept_htlcs(const struct LDKUserConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_get_accept_intercept_htlcs")] public static extern bool UserConfig_get_accept_intercept_htlcs(long _this_ptr);
	// void UserConfig_set_accept_intercept_htlcs(struct LDKUserConfig *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_set_accept_intercept_htlcs")] public static extern void UserConfig_set_accept_intercept_htlcs(long _this_ptr, bool _val);
	// MUST_USE_RES struct LDKUserConfig UserConfig_new(struct LDKChannelHandshakeConfig channel_handshake_config_arg, struct LDKChannelHandshakeLimits channel_handshake_limits_arg, struct LDKChannelConfig channel_config_arg, bool accept_forwards_to_priv_channels_arg, bool accept_inbound_channels_arg, bool manually_accept_inbound_channels_arg, bool accept_intercept_htlcs_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_new")] public static extern long UserConfig_new(long _channel_handshake_config_arg, long _channel_handshake_limits_arg, long _channel_config_arg, bool _accept_forwards_to_priv_channels_arg, bool _accept_inbound_channels_arg, bool _manually_accept_inbound_channels_arg, bool _accept_intercept_htlcs_arg);
	// uint64_t UserConfig_clone_ptr(LDKUserConfig *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_clone_ptr")] public static extern long UserConfig_clone_ptr(long _arg);
	// struct LDKUserConfig UserConfig_clone(const struct LDKUserConfig *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_clone")] public static extern long UserConfig_clone(long _orig);
	// MUST_USE_RES struct LDKUserConfig UserConfig_default(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_default")] public static extern long UserConfig_default();
	// void BestBlock_free(struct LDKBestBlock this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_free")] public static extern void BestBlock_free(long _this_obj);
	// uint64_t BestBlock_clone_ptr(LDKBestBlock *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_clone_ptr")] public static extern long BestBlock_clone_ptr(long _arg);
	// struct LDKBestBlock BestBlock_clone(const struct LDKBestBlock *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_clone")] public static extern long BestBlock_clone(long _orig);
	// bool BestBlock_eq(const struct LDKBestBlock *NONNULL_PTR a, const struct LDKBestBlock *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_eq")] public static extern bool BestBlock_eq(long _a, long _b);
	// MUST_USE_RES struct LDKBestBlock BestBlock_from_genesis(enum LDKNetwork network);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_from_genesis")] public static extern long BestBlock_from_genesis(Network _network);
	// MUST_USE_RES struct LDKBestBlock BestBlock_new(struct LDKThirtyTwoBytes block_hash, uint32_t height);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_new")] public static extern long BestBlock_new(byte[] _block_hash, int _height);
	// MUST_USE_RES struct LDKThirtyTwoBytes BestBlock_block_hash(const struct LDKBestBlock *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_block_hash")] public static extern byte[] BestBlock_block_hash(long _this_arg);
	// MUST_USE_RES uint32_t BestBlock_height(const struct LDKBestBlock *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_height")] public static extern int BestBlock_height(long _this_arg);
	// enum LDKAccessError AccessError_clone(const enum LDKAccessError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AccessError_clone")] public static extern AccessError AccessError_clone(long _orig);
	// enum LDKAccessError AccessError_unknown_chain(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AccessError_unknown_chain")] public static extern AccessError AccessError_unknown_chain();
	// enum LDKAccessError AccessError_unknown_tx(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AccessError_unknown_tx")] public static extern AccessError AccessError_unknown_tx();
	// void Access_free(struct LDKAccess this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Access_free")] public static extern void Access_free(long _this_ptr);
	// void Listen_free(struct LDKListen this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Listen_free")] public static extern void Listen_free(long _this_ptr);
	// void Confirm_free(struct LDKConfirm this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Confirm_free")] public static extern void Confirm_free(long _this_ptr);
	// enum LDKChannelMonitorUpdateStatus ChannelMonitorUpdateStatus_clone(const enum LDKChannelMonitorUpdateStatus *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdateStatus_clone")] public static extern ChannelMonitorUpdateStatus ChannelMonitorUpdateStatus_clone(long _orig);
	// enum LDKChannelMonitorUpdateStatus ChannelMonitorUpdateStatus_completed(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdateStatus_completed")] public static extern ChannelMonitorUpdateStatus ChannelMonitorUpdateStatus_completed();
	// enum LDKChannelMonitorUpdateStatus ChannelMonitorUpdateStatus_in_progress(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdateStatus_in_progress")] public static extern ChannelMonitorUpdateStatus ChannelMonitorUpdateStatus_in_progress();
	// enum LDKChannelMonitorUpdateStatus ChannelMonitorUpdateStatus_permanent_failure(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdateStatus_permanent_failure")] public static extern ChannelMonitorUpdateStatus ChannelMonitorUpdateStatus_permanent_failure();
	// bool ChannelMonitorUpdateStatus_eq(const enum LDKChannelMonitorUpdateStatus *NONNULL_PTR a, const enum LDKChannelMonitorUpdateStatus *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdateStatus_eq")] public static extern bool ChannelMonitorUpdateStatus_eq(long _a, long _b);
	// void Watch_free(struct LDKWatch this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Watch_free")] public static extern void Watch_free(long _this_ptr);
	// void Filter_free(struct LDKFilter this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Filter_free")] public static extern void Filter_free(long _this_ptr);
	// void WatchedOutput_free(struct LDKWatchedOutput this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_free")] public static extern void WatchedOutput_free(long _this_obj);
	// struct LDKThirtyTwoBytes WatchedOutput_get_block_hash(const struct LDKWatchedOutput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_get_block_hash")] public static extern byte[] WatchedOutput_get_block_hash(long _this_ptr);
	// void WatchedOutput_set_block_hash(struct LDKWatchedOutput *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_set_block_hash")] public static extern void WatchedOutput_set_block_hash(long _this_ptr, byte[] _val);
	// struct LDKOutPoint WatchedOutput_get_outpoint(const struct LDKWatchedOutput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_get_outpoint")] public static extern long WatchedOutput_get_outpoint(long _this_ptr);
	// void WatchedOutput_set_outpoint(struct LDKWatchedOutput *NONNULL_PTR this_ptr, struct LDKOutPoint val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_set_outpoint")] public static extern void WatchedOutput_set_outpoint(long _this_ptr, long _val);
	// struct LDKu8slice WatchedOutput_get_script_pubkey(const struct LDKWatchedOutput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_get_script_pubkey")] public static extern byte[] WatchedOutput_get_script_pubkey(long _this_ptr);
	// void WatchedOutput_set_script_pubkey(struct LDKWatchedOutput *NONNULL_PTR this_ptr, struct LDKCVec_u8Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_set_script_pubkey")] public static extern void WatchedOutput_set_script_pubkey(long _this_ptr, byte[] _val);
	// MUST_USE_RES struct LDKWatchedOutput WatchedOutput_new(struct LDKThirtyTwoBytes block_hash_arg, struct LDKOutPoint outpoint_arg, struct LDKCVec_u8Z script_pubkey_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_new")] public static extern long WatchedOutput_new(byte[] _block_hash_arg, long _outpoint_arg, byte[] _script_pubkey_arg);
	// uint64_t WatchedOutput_clone_ptr(LDKWatchedOutput *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_clone_ptr")] public static extern long WatchedOutput_clone_ptr(long _arg);
	// struct LDKWatchedOutput WatchedOutput_clone(const struct LDKWatchedOutput *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_clone")] public static extern long WatchedOutput_clone(long _orig);
	// bool WatchedOutput_eq(const struct LDKWatchedOutput *NONNULL_PTR a, const struct LDKWatchedOutput *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_eq")] public static extern bool WatchedOutput_eq(long _a, long _b);
	// uint64_t WatchedOutput_hash(const struct LDKWatchedOutput *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_hash")] public static extern long WatchedOutput_hash(long _o);
	// void BroadcasterInterface_free(struct LDKBroadcasterInterface this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BroadcasterInterface_free")] public static extern void BroadcasterInterface_free(long _this_ptr);
	// enum LDKConfirmationTarget ConfirmationTarget_clone(const enum LDKConfirmationTarget *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ConfirmationTarget_clone")] public static extern ConfirmationTarget ConfirmationTarget_clone(long _orig);
	// enum LDKConfirmationTarget ConfirmationTarget_background(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ConfirmationTarget_background")] public static extern ConfirmationTarget ConfirmationTarget_background();
	// enum LDKConfirmationTarget ConfirmationTarget_normal(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ConfirmationTarget_normal")] public static extern ConfirmationTarget ConfirmationTarget_normal();
	// enum LDKConfirmationTarget ConfirmationTarget_high_priority(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ConfirmationTarget_high_priority")] public static extern ConfirmationTarget ConfirmationTarget_high_priority();
	// uint64_t ConfirmationTarget_hash(const enum LDKConfirmationTarget *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ConfirmationTarget_hash")] public static extern long ConfirmationTarget_hash(long _o);
	// bool ConfirmationTarget_eq(const enum LDKConfirmationTarget *NONNULL_PTR a, const enum LDKConfirmationTarget *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ConfirmationTarget_eq")] public static extern bool ConfirmationTarget_eq(long _a, long _b);
	// void FeeEstimator_free(struct LDKFeeEstimator this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FeeEstimator_free")] public static extern void FeeEstimator_free(long _this_ptr);
	// void MonitorUpdateId_free(struct LDKMonitorUpdateId this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorUpdateId_free")] public static extern void MonitorUpdateId_free(long _this_obj);
	// uint64_t MonitorUpdateId_clone_ptr(LDKMonitorUpdateId *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorUpdateId_clone_ptr")] public static extern long MonitorUpdateId_clone_ptr(long _arg);
	// struct LDKMonitorUpdateId MonitorUpdateId_clone(const struct LDKMonitorUpdateId *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorUpdateId_clone")] public static extern long MonitorUpdateId_clone(long _orig);
	// uint64_t MonitorUpdateId_hash(const struct LDKMonitorUpdateId *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorUpdateId_hash")] public static extern long MonitorUpdateId_hash(long _o);
	// bool MonitorUpdateId_eq(const struct LDKMonitorUpdateId *NONNULL_PTR a, const struct LDKMonitorUpdateId *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorUpdateId_eq")] public static extern bool MonitorUpdateId_eq(long _a, long _b);
	// void Persist_free(struct LDKPersist this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Persist_free")] public static extern void Persist_free(long _this_ptr);
	// void LockedChannelMonitor_free(struct LDKLockedChannelMonitor this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LockedChannelMonitor_free")] public static extern void LockedChannelMonitor_free(long _this_obj);
	// void ChainMonitor_free(struct LDKChainMonitor this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_free")] public static extern void ChainMonitor_free(long _this_obj);
	// MUST_USE_RES struct LDKChainMonitor ChainMonitor_new(struct LDKCOption_FilterZ chain_source, struct LDKBroadcasterInterface broadcaster, struct LDKLogger logger, struct LDKFeeEstimator feeest, struct LDKPersist persister);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_new")] public static extern long ChainMonitor_new(long _chain_source, long _broadcaster, long _logger, long _feeest, long _persister);
	// MUST_USE_RES struct LDKCVec_BalanceZ ChainMonitor_get_claimable_balances(const struct LDKChainMonitor *NONNULL_PTR this_arg, struct LDKCVec_ChannelDetailsZ ignored_channels);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_get_claimable_balances")] public static extern long[] ChainMonitor_get_claimable_balances(long _this_arg, long[] _ignored_channels);
	// MUST_USE_RES struct LDKCResult_LockedChannelMonitorNoneZ ChainMonitor_get_monitor(const struct LDKChainMonitor *NONNULL_PTR this_arg, struct LDKOutPoint funding_txo);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_get_monitor")] public static extern long ChainMonitor_get_monitor(long _this_arg, long _funding_txo);
	// MUST_USE_RES struct LDKCVec_OutPointZ ChainMonitor_list_monitors(const struct LDKChainMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_list_monitors")] public static extern long[] ChainMonitor_list_monitors(long _this_arg);
	// MUST_USE_RES struct LDKCVec_C2Tuple_OutPointCVec_MonitorUpdateIdZZZ ChainMonitor_list_pending_monitor_updates(const struct LDKChainMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_list_pending_monitor_updates")] public static extern long[] ChainMonitor_list_pending_monitor_updates(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChainMonitor_channel_monitor_updated(const struct LDKChainMonitor *NONNULL_PTR this_arg, struct LDKOutPoint funding_txo, struct LDKMonitorUpdateId completed_update_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_channel_monitor_updated")] public static extern long ChainMonitor_channel_monitor_updated(long _this_arg, long _funding_txo, long _completed_update_id);
	// struct LDKListen ChainMonitor_as_Listen(const struct LDKChainMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_as_Listen")] public static extern long ChainMonitor_as_Listen(long _this_arg);
	// struct LDKConfirm ChainMonitor_as_Confirm(const struct LDKChainMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_as_Confirm")] public static extern long ChainMonitor_as_Confirm(long _this_arg);
	// struct LDKWatch ChainMonitor_as_Watch(const struct LDKChainMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_as_Watch")] public static extern long ChainMonitor_as_Watch(long _this_arg);
	// struct LDKEventsProvider ChainMonitor_as_EventsProvider(const struct LDKChainMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_as_EventsProvider")] public static extern long ChainMonitor_as_EventsProvider(long _this_arg);
	// void ChannelMonitorUpdate_free(struct LDKChannelMonitorUpdate this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdate_free")] public static extern void ChannelMonitorUpdate_free(long _this_obj);
	// uint64_t ChannelMonitorUpdate_get_update_id(const struct LDKChannelMonitorUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdate_get_update_id")] public static extern long ChannelMonitorUpdate_get_update_id(long _this_ptr);
	// void ChannelMonitorUpdate_set_update_id(struct LDKChannelMonitorUpdate *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdate_set_update_id")] public static extern void ChannelMonitorUpdate_set_update_id(long _this_ptr, long _val);
	// uint64_t ChannelMonitorUpdate_clone_ptr(LDKChannelMonitorUpdate *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdate_clone_ptr")] public static extern long ChannelMonitorUpdate_clone_ptr(long _arg);
	// struct LDKChannelMonitorUpdate ChannelMonitorUpdate_clone(const struct LDKChannelMonitorUpdate *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdate_clone")] public static extern long ChannelMonitorUpdate_clone(long _orig);
	// struct LDKCVec_u8Z ChannelMonitorUpdate_write(const struct LDKChannelMonitorUpdate *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdate_write")] public static extern byte[] ChannelMonitorUpdate_write(long _obj);
	// struct LDKCResult_ChannelMonitorUpdateDecodeErrorZ ChannelMonitorUpdate_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdate_read")] public static extern long ChannelMonitorUpdate_read(byte[] _ser);
	// void MonitorEvent_free(struct LDKMonitorEvent this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_free")] public static extern void MonitorEvent_free(long _this_ptr);
	// uint64_t MonitorEvent_clone_ptr(LDKMonitorEvent *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_clone_ptr")] public static extern long MonitorEvent_clone_ptr(long _arg);
	// struct LDKMonitorEvent MonitorEvent_clone(const struct LDKMonitorEvent *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_clone")] public static extern long MonitorEvent_clone(long _orig);
	// struct LDKMonitorEvent MonitorEvent_htlcevent(struct LDKHTLCUpdate a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_htlcevent")] public static extern long MonitorEvent_htlcevent(long _a);
	// struct LDKMonitorEvent MonitorEvent_commitment_tx_confirmed(struct LDKOutPoint a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_commitment_tx_confirmed")] public static extern long MonitorEvent_commitment_tx_confirmed(long _a);
	// struct LDKMonitorEvent MonitorEvent_completed(struct LDKOutPoint funding_txo, uint64_t monitor_update_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_completed")] public static extern long MonitorEvent_completed(long _funding_txo, long _monitor_update_id);
	// struct LDKMonitorEvent MonitorEvent_update_failed(struct LDKOutPoint a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_update_failed")] public static extern long MonitorEvent_update_failed(long _a);
	// bool MonitorEvent_eq(const struct LDKMonitorEvent *NONNULL_PTR a, const struct LDKMonitorEvent *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_eq")] public static extern bool MonitorEvent_eq(long _a, long _b);
	// struct LDKCVec_u8Z MonitorEvent_write(const struct LDKMonitorEvent *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_write")] public static extern byte[] MonitorEvent_write(long _obj);
	// struct LDKCResult_COption_MonitorEventZDecodeErrorZ MonitorEvent_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_read")] public static extern long MonitorEvent_read(byte[] _ser);
	// void HTLCUpdate_free(struct LDKHTLCUpdate this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCUpdate_free")] public static extern void HTLCUpdate_free(long _this_obj);
	// uint64_t HTLCUpdate_clone_ptr(LDKHTLCUpdate *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCUpdate_clone_ptr")] public static extern long HTLCUpdate_clone_ptr(long _arg);
	// struct LDKHTLCUpdate HTLCUpdate_clone(const struct LDKHTLCUpdate *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCUpdate_clone")] public static extern long HTLCUpdate_clone(long _orig);
	// bool HTLCUpdate_eq(const struct LDKHTLCUpdate *NONNULL_PTR a, const struct LDKHTLCUpdate *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCUpdate_eq")] public static extern bool HTLCUpdate_eq(long _a, long _b);
	// struct LDKCVec_u8Z HTLCUpdate_write(const struct LDKHTLCUpdate *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCUpdate_write")] public static extern byte[] HTLCUpdate_write(long _obj);
	// struct LDKCResult_HTLCUpdateDecodeErrorZ HTLCUpdate_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCUpdate_read")] public static extern long HTLCUpdate_read(byte[] _ser);
	// void Balance_free(struct LDKBalance this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_free")] public static extern void Balance_free(long _this_ptr);
	// uint64_t Balance_clone_ptr(LDKBalance *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_clone_ptr")] public static extern long Balance_clone_ptr(long _arg);
	// struct LDKBalance Balance_clone(const struct LDKBalance *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_clone")] public static extern long Balance_clone(long _orig);
	// struct LDKBalance Balance_claimable_on_channel_close(uint64_t claimable_amount_satoshis);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_claimable_on_channel_close")] public static extern long Balance_claimable_on_channel_close(long _claimable_amount_satoshis);
	// struct LDKBalance Balance_claimable_awaiting_confirmations(uint64_t claimable_amount_satoshis, uint32_t confirmation_height);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_claimable_awaiting_confirmations")] public static extern long Balance_claimable_awaiting_confirmations(long _claimable_amount_satoshis, int _confirmation_height);
	// struct LDKBalance Balance_contentious_claimable(uint64_t claimable_amount_satoshis, uint32_t timeout_height);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_contentious_claimable")] public static extern long Balance_contentious_claimable(long _claimable_amount_satoshis, int _timeout_height);
	// struct LDKBalance Balance_maybe_timeout_claimable_htlc(uint64_t claimable_amount_satoshis, uint32_t claimable_height);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_maybe_timeout_claimable_htlc")] public static extern long Balance_maybe_timeout_claimable_htlc(long _claimable_amount_satoshis, int _claimable_height);
	// struct LDKBalance Balance_maybe_preimage_claimable_htlc(uint64_t claimable_amount_satoshis, uint32_t expiry_height);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_maybe_preimage_claimable_htlc")] public static extern long Balance_maybe_preimage_claimable_htlc(long _claimable_amount_satoshis, int _expiry_height);
	// struct LDKBalance Balance_counterparty_revoked_output_claimable(uint64_t claimable_amount_satoshis);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_counterparty_revoked_output_claimable")] public static extern long Balance_counterparty_revoked_output_claimable(long _claimable_amount_satoshis);
	// bool Balance_eq(const struct LDKBalance *NONNULL_PTR a, const struct LDKBalance *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_eq")] public static extern bool Balance_eq(long _a, long _b);
	// void ChannelMonitor_free(struct LDKChannelMonitor this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_free")] public static extern void ChannelMonitor_free(long _this_obj);
	// uint64_t ChannelMonitor_clone_ptr(LDKChannelMonitor *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_clone_ptr")] public static extern long ChannelMonitor_clone_ptr(long _arg);
	// struct LDKChannelMonitor ChannelMonitor_clone(const struct LDKChannelMonitor *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_clone")] public static extern long ChannelMonitor_clone(long _orig);
	// struct LDKCVec_u8Z ChannelMonitor_write(const struct LDKChannelMonitor *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_write")] public static extern byte[] ChannelMonitor_write(long _obj);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ ChannelMonitor_update_monitor(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const struct LDKChannelMonitorUpdate *NONNULL_PTR updates, const struct LDKBroadcasterInterface *NONNULL_PTR broadcaster, struct LDKFeeEstimator fee_estimator, const struct LDKLogger *NONNULL_PTR logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_update_monitor")] public static extern long ChannelMonitor_update_monitor(long _this_arg, long _updates, long _broadcaster, long _fee_estimator, long _logger);
	// MUST_USE_RES uint64_t ChannelMonitor_get_latest_update_id(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_get_latest_update_id")] public static extern long ChannelMonitor_get_latest_update_id(long _this_arg);
	// MUST_USE_RES struct LDKC2Tuple_OutPointScriptZ ChannelMonitor_get_funding_txo(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_get_funding_txo")] public static extern long ChannelMonitor_get_funding_txo(long _this_arg);
	// MUST_USE_RES struct LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZ ChannelMonitor_get_outputs_to_watch(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_get_outputs_to_watch")] public static extern long[] ChannelMonitor_get_outputs_to_watch(long _this_arg);
	// void ChannelMonitor_load_outputs_to_watch(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const struct LDKFilter *NONNULL_PTR filter);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_load_outputs_to_watch")] public static extern void ChannelMonitor_load_outputs_to_watch(long _this_arg, long _filter);
	// MUST_USE_RES struct LDKCVec_MonitorEventZ ChannelMonitor_get_and_clear_pending_monitor_events(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_get_and_clear_pending_monitor_events")] public static extern long[] ChannelMonitor_get_and_clear_pending_monitor_events(long _this_arg);
	// MUST_USE_RES struct LDKCVec_EventZ ChannelMonitor_get_and_clear_pending_events(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_get_and_clear_pending_events")] public static extern long[] ChannelMonitor_get_and_clear_pending_events(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey ChannelMonitor_get_counterparty_node_id(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_get_counterparty_node_id")] public static extern byte[] ChannelMonitor_get_counterparty_node_id(long _this_arg);
	// MUST_USE_RES struct LDKCVec_TransactionZ ChannelMonitor_get_latest_holder_commitment_txn(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const struct LDKLogger *NONNULL_PTR logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_get_latest_holder_commitment_txn")] public static extern byte[][] ChannelMonitor_get_latest_holder_commitment_txn(long _this_arg, long _logger);
	// MUST_USE_RES struct LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZZ ChannelMonitor_block_connected(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const uint8_t (*header)[80], struct LDKCVec_C2Tuple_usizeTransactionZZ txdata, uint32_t height, struct LDKBroadcasterInterface broadcaster, struct LDKFeeEstimator fee_estimator, struct LDKLogger logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_block_connected")] public static extern long[] ChannelMonitor_block_connected(long _this_arg, byte[] _header, long[] _txdata, int _height, long _broadcaster, long _fee_estimator, long _logger);
	// void ChannelMonitor_block_disconnected(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const uint8_t (*header)[80], uint32_t height, struct LDKBroadcasterInterface broadcaster, struct LDKFeeEstimator fee_estimator, struct LDKLogger logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_block_disconnected")] public static extern void ChannelMonitor_block_disconnected(long _this_arg, byte[] _header, int _height, long _broadcaster, long _fee_estimator, long _logger);
	// MUST_USE_RES struct LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZZ ChannelMonitor_transactions_confirmed(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const uint8_t (*header)[80], struct LDKCVec_C2Tuple_usizeTransactionZZ txdata, uint32_t height, struct LDKBroadcasterInterface broadcaster, struct LDKFeeEstimator fee_estimator, struct LDKLogger logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_transactions_confirmed")] public static extern long[] ChannelMonitor_transactions_confirmed(long _this_arg, byte[] _header, long[] _txdata, int _height, long _broadcaster, long _fee_estimator, long _logger);
	// void ChannelMonitor_transaction_unconfirmed(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const uint8_t (*txid)[32], struct LDKBroadcasterInterface broadcaster, struct LDKFeeEstimator fee_estimator, struct LDKLogger logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_transaction_unconfirmed")] public static extern void ChannelMonitor_transaction_unconfirmed(long _this_arg, byte[] _txid, long _broadcaster, long _fee_estimator, long _logger);
	// MUST_USE_RES struct LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZZ ChannelMonitor_best_block_updated(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const uint8_t (*header)[80], uint32_t height, struct LDKBroadcasterInterface broadcaster, struct LDKFeeEstimator fee_estimator, struct LDKLogger logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_best_block_updated")] public static extern long[] ChannelMonitor_best_block_updated(long _this_arg, byte[] _header, int _height, long _broadcaster, long _fee_estimator, long _logger);
	// MUST_USE_RES struct LDKCVec_C2Tuple_TxidBlockHashZZ ChannelMonitor_get_relevant_txids(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_get_relevant_txids")] public static extern long[] ChannelMonitor_get_relevant_txids(long _this_arg);
	// MUST_USE_RES struct LDKBestBlock ChannelMonitor_current_best_block(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_current_best_block")] public static extern long ChannelMonitor_current_best_block(long _this_arg);
	// MUST_USE_RES struct LDKCVec_BalanceZ ChannelMonitor_get_claimable_balances(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_get_claimable_balances")] public static extern long[] ChannelMonitor_get_claimable_balances(long _this_arg);
	// struct LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ C2Tuple_BlockHashChannelMonitorZ_read(struct LDKu8slice ser, const struct LDKKeysInterface *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_BlockHashChannelMonitorZ_read")] public static extern long C2Tuple_BlockHashChannelMonitorZ_read(byte[] _ser, long _arg);
	// void OutPoint_free(struct LDKOutPoint this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_free")] public static extern void OutPoint_free(long _this_obj);
	// const uint8_t (*OutPoint_get_txid(const struct LDKOutPoint *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_get_txid")] public static extern byte[] OutPoint_get_txid(long _this_ptr);
	// void OutPoint_set_txid(struct LDKOutPoint *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_set_txid")] public static extern void OutPoint_set_txid(long _this_ptr, byte[] _val);
	// uint16_t OutPoint_get_index(const struct LDKOutPoint *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_get_index")] public static extern short OutPoint_get_index(long _this_ptr);
	// void OutPoint_set_index(struct LDKOutPoint *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_set_index")] public static extern void OutPoint_set_index(long _this_ptr, short _val);
	// MUST_USE_RES struct LDKOutPoint OutPoint_new(struct LDKThirtyTwoBytes txid_arg, uint16_t index_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_new")] public static extern long OutPoint_new(byte[] _txid_arg, short _index_arg);
	// uint64_t OutPoint_clone_ptr(LDKOutPoint *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_clone_ptr")] public static extern long OutPoint_clone_ptr(long _arg);
	// struct LDKOutPoint OutPoint_clone(const struct LDKOutPoint *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_clone")] public static extern long OutPoint_clone(long _orig);
	// bool OutPoint_eq(const struct LDKOutPoint *NONNULL_PTR a, const struct LDKOutPoint *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_eq")] public static extern bool OutPoint_eq(long _a, long _b);
	// uint64_t OutPoint_hash(const struct LDKOutPoint *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_hash")] public static extern long OutPoint_hash(long _o);
	// MUST_USE_RES struct LDKThirtyTwoBytes OutPoint_to_channel_id(const struct LDKOutPoint *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_to_channel_id")] public static extern byte[] OutPoint_to_channel_id(long _this_arg);
	// struct LDKCVec_u8Z OutPoint_write(const struct LDKOutPoint *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_write")] public static extern byte[] OutPoint_write(long _obj);
	// struct LDKCResult_OutPointDecodeErrorZ OutPoint_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_read")] public static extern long OutPoint_read(byte[] _ser);
	// void DelayedPaymentOutputDescriptor_free(struct LDKDelayedPaymentOutputDescriptor this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_free")] public static extern void DelayedPaymentOutputDescriptor_free(long _this_obj);
	// struct LDKOutPoint DelayedPaymentOutputDescriptor_get_outpoint(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_get_outpoint")] public static extern long DelayedPaymentOutputDescriptor_get_outpoint(long _this_ptr);
	// void DelayedPaymentOutputDescriptor_set_outpoint(struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr, struct LDKOutPoint val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_set_outpoint")] public static extern void DelayedPaymentOutputDescriptor_set_outpoint(long _this_ptr, long _val);
	// struct LDKPublicKey DelayedPaymentOutputDescriptor_get_per_commitment_point(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_get_per_commitment_point")] public static extern byte[] DelayedPaymentOutputDescriptor_get_per_commitment_point(long _this_ptr);
	// void DelayedPaymentOutputDescriptor_set_per_commitment_point(struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_set_per_commitment_point")] public static extern void DelayedPaymentOutputDescriptor_set_per_commitment_point(long _this_ptr, byte[] _val);
	// uint16_t DelayedPaymentOutputDescriptor_get_to_self_delay(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_get_to_self_delay")] public static extern short DelayedPaymentOutputDescriptor_get_to_self_delay(long _this_ptr);
	// void DelayedPaymentOutputDescriptor_set_to_self_delay(struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_set_to_self_delay")] public static extern void DelayedPaymentOutputDescriptor_set_to_self_delay(long _this_ptr, short _val);
	// struct LDKTxOut DelayedPaymentOutputDescriptor_get_output(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_get_output")] public static extern long DelayedPaymentOutputDescriptor_get_output(long _this_ptr);
	// void DelayedPaymentOutputDescriptor_set_output(struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr, struct LDKTxOut val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_set_output")] public static extern void DelayedPaymentOutputDescriptor_set_output(long _this_ptr, long _val);
	// struct LDKPublicKey DelayedPaymentOutputDescriptor_get_revocation_pubkey(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_get_revocation_pubkey")] public static extern byte[] DelayedPaymentOutputDescriptor_get_revocation_pubkey(long _this_ptr);
	// void DelayedPaymentOutputDescriptor_set_revocation_pubkey(struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_set_revocation_pubkey")] public static extern void DelayedPaymentOutputDescriptor_set_revocation_pubkey(long _this_ptr, byte[] _val);
	// const uint8_t (*DelayedPaymentOutputDescriptor_get_channel_keys_id(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_get_channel_keys_id")] public static extern byte[] DelayedPaymentOutputDescriptor_get_channel_keys_id(long _this_ptr);
	// void DelayedPaymentOutputDescriptor_set_channel_keys_id(struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_set_channel_keys_id")] public static extern void DelayedPaymentOutputDescriptor_set_channel_keys_id(long _this_ptr, byte[] _val);
	// uint64_t DelayedPaymentOutputDescriptor_get_channel_value_satoshis(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_get_channel_value_satoshis")] public static extern long DelayedPaymentOutputDescriptor_get_channel_value_satoshis(long _this_ptr);
	// void DelayedPaymentOutputDescriptor_set_channel_value_satoshis(struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_set_channel_value_satoshis")] public static extern void DelayedPaymentOutputDescriptor_set_channel_value_satoshis(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKDelayedPaymentOutputDescriptor DelayedPaymentOutputDescriptor_new(struct LDKOutPoint outpoint_arg, struct LDKPublicKey per_commitment_point_arg, uint16_t to_self_delay_arg, struct LDKTxOut output_arg, struct LDKPublicKey revocation_pubkey_arg, struct LDKThirtyTwoBytes channel_keys_id_arg, uint64_t channel_value_satoshis_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_new")] public static extern long DelayedPaymentOutputDescriptor_new(long _outpoint_arg, byte[] _per_commitment_point_arg, short _to_self_delay_arg, long _output_arg, byte[] _revocation_pubkey_arg, byte[] _channel_keys_id_arg, long _channel_value_satoshis_arg);
	// uint64_t DelayedPaymentOutputDescriptor_clone_ptr(LDKDelayedPaymentOutputDescriptor *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_clone_ptr")] public static extern long DelayedPaymentOutputDescriptor_clone_ptr(long _arg);
	// struct LDKDelayedPaymentOutputDescriptor DelayedPaymentOutputDescriptor_clone(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_clone")] public static extern long DelayedPaymentOutputDescriptor_clone(long _orig);
	// bool DelayedPaymentOutputDescriptor_eq(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR a, const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_eq")] public static extern bool DelayedPaymentOutputDescriptor_eq(long _a, long _b);
	// struct LDKCVec_u8Z DelayedPaymentOutputDescriptor_write(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_write")] public static extern byte[] DelayedPaymentOutputDescriptor_write(long _obj);
	// struct LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ DelayedPaymentOutputDescriptor_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_read")] public static extern long DelayedPaymentOutputDescriptor_read(byte[] _ser);
	// void StaticPaymentOutputDescriptor_free(struct LDKStaticPaymentOutputDescriptor this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_free")] public static extern void StaticPaymentOutputDescriptor_free(long _this_obj);
	// struct LDKOutPoint StaticPaymentOutputDescriptor_get_outpoint(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_get_outpoint")] public static extern long StaticPaymentOutputDescriptor_get_outpoint(long _this_ptr);
	// void StaticPaymentOutputDescriptor_set_outpoint(struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_ptr, struct LDKOutPoint val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_set_outpoint")] public static extern void StaticPaymentOutputDescriptor_set_outpoint(long _this_ptr, long _val);
	// struct LDKTxOut StaticPaymentOutputDescriptor_get_output(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_get_output")] public static extern long StaticPaymentOutputDescriptor_get_output(long _this_ptr);
	// void StaticPaymentOutputDescriptor_set_output(struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_ptr, struct LDKTxOut val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_set_output")] public static extern void StaticPaymentOutputDescriptor_set_output(long _this_ptr, long _val);
	// const uint8_t (*StaticPaymentOutputDescriptor_get_channel_keys_id(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_get_channel_keys_id")] public static extern byte[] StaticPaymentOutputDescriptor_get_channel_keys_id(long _this_ptr);
	// void StaticPaymentOutputDescriptor_set_channel_keys_id(struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_set_channel_keys_id")] public static extern void StaticPaymentOutputDescriptor_set_channel_keys_id(long _this_ptr, byte[] _val);
	// uint64_t StaticPaymentOutputDescriptor_get_channel_value_satoshis(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_get_channel_value_satoshis")] public static extern long StaticPaymentOutputDescriptor_get_channel_value_satoshis(long _this_ptr);
	// void StaticPaymentOutputDescriptor_set_channel_value_satoshis(struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_set_channel_value_satoshis")] public static extern void StaticPaymentOutputDescriptor_set_channel_value_satoshis(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKStaticPaymentOutputDescriptor StaticPaymentOutputDescriptor_new(struct LDKOutPoint outpoint_arg, struct LDKTxOut output_arg, struct LDKThirtyTwoBytes channel_keys_id_arg, uint64_t channel_value_satoshis_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_new")] public static extern long StaticPaymentOutputDescriptor_new(long _outpoint_arg, long _output_arg, byte[] _channel_keys_id_arg, long _channel_value_satoshis_arg);
	// uint64_t StaticPaymentOutputDescriptor_clone_ptr(LDKStaticPaymentOutputDescriptor *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_clone_ptr")] public static extern long StaticPaymentOutputDescriptor_clone_ptr(long _arg);
	// struct LDKStaticPaymentOutputDescriptor StaticPaymentOutputDescriptor_clone(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_clone")] public static extern long StaticPaymentOutputDescriptor_clone(long _orig);
	// bool StaticPaymentOutputDescriptor_eq(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR a, const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_eq")] public static extern bool StaticPaymentOutputDescriptor_eq(long _a, long _b);
	// struct LDKCVec_u8Z StaticPaymentOutputDescriptor_write(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_write")] public static extern byte[] StaticPaymentOutputDescriptor_write(long _obj);
	// struct LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ StaticPaymentOutputDescriptor_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_read")] public static extern long StaticPaymentOutputDescriptor_read(byte[] _ser);
	// void SpendableOutputDescriptor_free(struct LDKSpendableOutputDescriptor this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_free")] public static extern void SpendableOutputDescriptor_free(long _this_ptr);
	// uint64_t SpendableOutputDescriptor_clone_ptr(LDKSpendableOutputDescriptor *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_clone_ptr")] public static extern long SpendableOutputDescriptor_clone_ptr(long _arg);
	// struct LDKSpendableOutputDescriptor SpendableOutputDescriptor_clone(const struct LDKSpendableOutputDescriptor *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_clone")] public static extern long SpendableOutputDescriptor_clone(long _orig);
	// struct LDKSpendableOutputDescriptor SpendableOutputDescriptor_static_output(struct LDKOutPoint outpoint, struct LDKTxOut output);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_static_output")] public static extern long SpendableOutputDescriptor_static_output(long _outpoint, long _output);
	// struct LDKSpendableOutputDescriptor SpendableOutputDescriptor_delayed_payment_output(struct LDKDelayedPaymentOutputDescriptor a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_delayed_payment_output")] public static extern long SpendableOutputDescriptor_delayed_payment_output(long _a);
	// struct LDKSpendableOutputDescriptor SpendableOutputDescriptor_static_payment_output(struct LDKStaticPaymentOutputDescriptor a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_static_payment_output")] public static extern long SpendableOutputDescriptor_static_payment_output(long _a);
	// bool SpendableOutputDescriptor_eq(const struct LDKSpendableOutputDescriptor *NONNULL_PTR a, const struct LDKSpendableOutputDescriptor *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_eq")] public static extern bool SpendableOutputDescriptor_eq(long _a, long _b);
	// struct LDKCVec_u8Z SpendableOutputDescriptor_write(const struct LDKSpendableOutputDescriptor *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_write")] public static extern byte[] SpendableOutputDescriptor_write(long _obj);
	// struct LDKCResult_SpendableOutputDescriptorDecodeErrorZ SpendableOutputDescriptor_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_read")] public static extern long SpendableOutputDescriptor_read(byte[] _ser);
	// void BaseSign_free(struct LDKBaseSign this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BaseSign_free")] public static extern void BaseSign_free(long _this_ptr);
	// uint64_t Sign_clone_ptr(LDKSign *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sign_clone_ptr")] public static extern long Sign_clone_ptr(long _arg);
	// struct LDKSign Sign_clone(const struct LDKSign *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sign_clone")] public static extern long Sign_clone(long _orig);
	// void Sign_free(struct LDKSign this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sign_free")] public static extern void Sign_free(long _this_ptr);
	// enum LDKRecipient Recipient_clone(const enum LDKRecipient *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Recipient_clone")] public static extern Recipient Recipient_clone(long _orig);
	// enum LDKRecipient Recipient_node(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Recipient_node")] public static extern Recipient Recipient_node();
	// enum LDKRecipient Recipient_phantom_node(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Recipient_phantom_node")] public static extern Recipient Recipient_phantom_node();
	// void KeysInterface_free(struct LDKKeysInterface this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysInterface_free")] public static extern void KeysInterface_free(long _this_ptr);
	// void InMemorySigner_free(struct LDKInMemorySigner this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_free")] public static extern void InMemorySigner_free(long _this_obj);
	// const uint8_t (*InMemorySigner_get_funding_key(const struct LDKInMemorySigner *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_get_funding_key")] public static extern byte[] InMemorySigner_get_funding_key(long _this_ptr);
	// void InMemorySigner_set_funding_key(struct LDKInMemorySigner *NONNULL_PTR this_ptr, struct LDKSecretKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_set_funding_key")] public static extern void InMemorySigner_set_funding_key(long _this_ptr, byte[] _val);
	// const uint8_t (*InMemorySigner_get_revocation_base_key(const struct LDKInMemorySigner *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_get_revocation_base_key")] public static extern byte[] InMemorySigner_get_revocation_base_key(long _this_ptr);
	// void InMemorySigner_set_revocation_base_key(struct LDKInMemorySigner *NONNULL_PTR this_ptr, struct LDKSecretKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_set_revocation_base_key")] public static extern void InMemorySigner_set_revocation_base_key(long _this_ptr, byte[] _val);
	// const uint8_t (*InMemorySigner_get_payment_key(const struct LDKInMemorySigner *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_get_payment_key")] public static extern byte[] InMemorySigner_get_payment_key(long _this_ptr);
	// void InMemorySigner_set_payment_key(struct LDKInMemorySigner *NONNULL_PTR this_ptr, struct LDKSecretKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_set_payment_key")] public static extern void InMemorySigner_set_payment_key(long _this_ptr, byte[] _val);
	// const uint8_t (*InMemorySigner_get_delayed_payment_base_key(const struct LDKInMemorySigner *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_get_delayed_payment_base_key")] public static extern byte[] InMemorySigner_get_delayed_payment_base_key(long _this_ptr);
	// void InMemorySigner_set_delayed_payment_base_key(struct LDKInMemorySigner *NONNULL_PTR this_ptr, struct LDKSecretKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_set_delayed_payment_base_key")] public static extern void InMemorySigner_set_delayed_payment_base_key(long _this_ptr, byte[] _val);
	// const uint8_t (*InMemorySigner_get_htlc_base_key(const struct LDKInMemorySigner *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_get_htlc_base_key")] public static extern byte[] InMemorySigner_get_htlc_base_key(long _this_ptr);
	// void InMemorySigner_set_htlc_base_key(struct LDKInMemorySigner *NONNULL_PTR this_ptr, struct LDKSecretKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_set_htlc_base_key")] public static extern void InMemorySigner_set_htlc_base_key(long _this_ptr, byte[] _val);
	// const uint8_t (*InMemorySigner_get_commitment_seed(const struct LDKInMemorySigner *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_get_commitment_seed")] public static extern byte[] InMemorySigner_get_commitment_seed(long _this_ptr);
	// void InMemorySigner_set_commitment_seed(struct LDKInMemorySigner *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_set_commitment_seed")] public static extern void InMemorySigner_set_commitment_seed(long _this_ptr, byte[] _val);
	// uint64_t InMemorySigner_clone_ptr(LDKInMemorySigner *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_clone_ptr")] public static extern long InMemorySigner_clone_ptr(long _arg);
	// struct LDKInMemorySigner InMemorySigner_clone(const struct LDKInMemorySigner *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_clone")] public static extern long InMemorySigner_clone(long _orig);
	// MUST_USE_RES struct LDKInMemorySigner InMemorySigner_new(struct LDKSecretKey node_secret, struct LDKSecretKey funding_key, struct LDKSecretKey revocation_base_key, struct LDKSecretKey payment_key, struct LDKSecretKey delayed_payment_base_key, struct LDKSecretKey htlc_base_key, struct LDKThirtyTwoBytes commitment_seed, uint64_t channel_value_satoshis, struct LDKThirtyTwoBytes channel_keys_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_new")] public static extern long InMemorySigner_new(byte[] _node_secret, byte[] _funding_key, byte[] _revocation_base_key, byte[] _payment_key, byte[] _delayed_payment_base_key, byte[] _htlc_base_key, byte[] _commitment_seed, long _channel_value_satoshis, byte[] _channel_keys_id);
	// MUST_USE_RES struct LDKChannelPublicKeys InMemorySigner_counterparty_pubkeys(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_counterparty_pubkeys")] public static extern long InMemorySigner_counterparty_pubkeys(long _this_arg);
	// MUST_USE_RES uint16_t InMemorySigner_counterparty_selected_contest_delay(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_counterparty_selected_contest_delay")] public static extern short InMemorySigner_counterparty_selected_contest_delay(long _this_arg);
	// MUST_USE_RES uint16_t InMemorySigner_holder_selected_contest_delay(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_holder_selected_contest_delay")] public static extern short InMemorySigner_holder_selected_contest_delay(long _this_arg);
	// MUST_USE_RES bool InMemorySigner_is_outbound(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_is_outbound")] public static extern bool InMemorySigner_is_outbound(long _this_arg);
	// MUST_USE_RES struct LDKOutPoint InMemorySigner_funding_outpoint(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_funding_outpoint")] public static extern long InMemorySigner_funding_outpoint(long _this_arg);
	// MUST_USE_RES struct LDKChannelTransactionParameters InMemorySigner_get_channel_parameters(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_get_channel_parameters")] public static extern long InMemorySigner_get_channel_parameters(long _this_arg);
	// MUST_USE_RES bool InMemorySigner_opt_anchors(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_opt_anchors")] public static extern bool InMemorySigner_opt_anchors(long _this_arg);
	// MUST_USE_RES struct LDKCResult_CVec_CVec_u8ZZNoneZ InMemorySigner_sign_counterparty_payment_input(const struct LDKInMemorySigner *NONNULL_PTR this_arg, struct LDKTransaction spend_tx, uintptr_t input_idx, const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR descriptor);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_sign_counterparty_payment_input")] public static extern long InMemorySigner_sign_counterparty_payment_input(long _this_arg, byte[] _spend_tx, long _input_idx, long _descriptor);
	// MUST_USE_RES struct LDKCResult_CVec_CVec_u8ZZNoneZ InMemorySigner_sign_dynamic_p2wsh_input(const struct LDKInMemorySigner *NONNULL_PTR this_arg, struct LDKTransaction spend_tx, uintptr_t input_idx, const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR descriptor);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_sign_dynamic_p2wsh_input")] public static extern long InMemorySigner_sign_dynamic_p2wsh_input(long _this_arg, byte[] _spend_tx, long _input_idx, long _descriptor);
	// struct LDKBaseSign InMemorySigner_as_BaseSign(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_as_BaseSign")] public static extern long InMemorySigner_as_BaseSign(long _this_arg);
	// struct LDKSign InMemorySigner_as_Sign(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_as_Sign")] public static extern long InMemorySigner_as_Sign(long _this_arg);
	// struct LDKCVec_u8Z InMemorySigner_write(const struct LDKInMemorySigner *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_write")] public static extern byte[] InMemorySigner_write(long _obj);
	// struct LDKCResult_InMemorySignerDecodeErrorZ InMemorySigner_read(struct LDKu8slice ser, struct LDKSecretKey arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_read")] public static extern long InMemorySigner_read(byte[] _ser, byte[] _arg);
	// void KeysManager_free(struct LDKKeysManager this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysManager_free")] public static extern void KeysManager_free(long _this_obj);
	// MUST_USE_RES struct LDKKeysManager KeysManager_new(const uint8_t (*seed)[32], uint64_t starting_time_secs, uint32_t starting_time_nanos);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysManager_new")] public static extern long KeysManager_new(byte[] _seed, long _starting_time_secs, int _starting_time_nanos);
	// MUST_USE_RES struct LDKInMemorySigner KeysManager_derive_channel_keys(const struct LDKKeysManager *NONNULL_PTR this_arg, uint64_t channel_value_satoshis, const uint8_t (*params)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysManager_derive_channel_keys")] public static extern long KeysManager_derive_channel_keys(long _this_arg, long _channel_value_satoshis, byte[] _params);
	// MUST_USE_RES struct LDKCResult_TransactionNoneZ KeysManager_spend_spendable_outputs(const struct LDKKeysManager *NONNULL_PTR this_arg, struct LDKCVec_SpendableOutputDescriptorZ descriptors, struct LDKCVec_TxOutZ outputs, struct LDKCVec_u8Z change_destination_script, uint32_t feerate_sat_per_1000_weight);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysManager_spend_spendable_outputs")] public static extern long KeysManager_spend_spendable_outputs(long _this_arg, long[] _descriptors, long[] _outputs, byte[] _change_destination_script, int _feerate_sat_per_1000_weight);
	// struct LDKKeysInterface KeysManager_as_KeysInterface(const struct LDKKeysManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysManager_as_KeysInterface")] public static extern long KeysManager_as_KeysInterface(long _this_arg);
	// void PhantomKeysManager_free(struct LDKPhantomKeysManager this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomKeysManager_free")] public static extern void PhantomKeysManager_free(long _this_obj);
	// struct LDKKeysInterface PhantomKeysManager_as_KeysInterface(const struct LDKPhantomKeysManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomKeysManager_as_KeysInterface")] public static extern long PhantomKeysManager_as_KeysInterface(long _this_arg);
	// MUST_USE_RES struct LDKPhantomKeysManager PhantomKeysManager_new(const uint8_t (*seed)[32], uint64_t starting_time_secs, uint32_t starting_time_nanos, const uint8_t (*cross_node_seed)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomKeysManager_new")] public static extern long PhantomKeysManager_new(byte[] _seed, long _starting_time_secs, int _starting_time_nanos, byte[] _cross_node_seed);
	// MUST_USE_RES struct LDKCResult_TransactionNoneZ PhantomKeysManager_spend_spendable_outputs(const struct LDKPhantomKeysManager *NONNULL_PTR this_arg, struct LDKCVec_SpendableOutputDescriptorZ descriptors, struct LDKCVec_TxOutZ outputs, struct LDKCVec_u8Z change_destination_script, uint32_t feerate_sat_per_1000_weight);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomKeysManager_spend_spendable_outputs")] public static extern long PhantomKeysManager_spend_spendable_outputs(long _this_arg, long[] _descriptors, long[] _outputs, byte[] _change_destination_script, int _feerate_sat_per_1000_weight);
	// MUST_USE_RES struct LDKInMemorySigner PhantomKeysManager_derive_channel_keys(const struct LDKPhantomKeysManager *NONNULL_PTR this_arg, uint64_t channel_value_satoshis, const uint8_t (*params)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomKeysManager_derive_channel_keys")] public static extern long PhantomKeysManager_derive_channel_keys(long _this_arg, long _channel_value_satoshis, byte[] _params);
	// void ChannelManager_free(struct LDKChannelManager this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_free")] public static extern void ChannelManager_free(long _this_obj);
	// void ChainParameters_free(struct LDKChainParameters this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainParameters_free")] public static extern void ChainParameters_free(long _this_obj);
	// enum LDKNetwork ChainParameters_get_network(const struct LDKChainParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainParameters_get_network")] public static extern Network ChainParameters_get_network(long _this_ptr);
	// void ChainParameters_set_network(struct LDKChainParameters *NONNULL_PTR this_ptr, enum LDKNetwork val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainParameters_set_network")] public static extern void ChainParameters_set_network(long _this_ptr, Network _val);
	// struct LDKBestBlock ChainParameters_get_best_block(const struct LDKChainParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainParameters_get_best_block")] public static extern long ChainParameters_get_best_block(long _this_ptr);
	// void ChainParameters_set_best_block(struct LDKChainParameters *NONNULL_PTR this_ptr, struct LDKBestBlock val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainParameters_set_best_block")] public static extern void ChainParameters_set_best_block(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChainParameters ChainParameters_new(enum LDKNetwork network_arg, struct LDKBestBlock best_block_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainParameters_new")] public static extern long ChainParameters_new(Network _network_arg, long _best_block_arg);
	// uint64_t ChainParameters_clone_ptr(LDKChainParameters *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainParameters_clone_ptr")] public static extern long ChainParameters_clone_ptr(long _arg);
	// struct LDKChainParameters ChainParameters_clone(const struct LDKChainParameters *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainParameters_clone")] public static extern long ChainParameters_clone(long _orig);
	// void CounterpartyForwardingInfo_free(struct LDKCounterpartyForwardingInfo this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_free")] public static extern void CounterpartyForwardingInfo_free(long _this_obj);
	// uint32_t CounterpartyForwardingInfo_get_fee_base_msat(const struct LDKCounterpartyForwardingInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_get_fee_base_msat")] public static extern int CounterpartyForwardingInfo_get_fee_base_msat(long _this_ptr);
	// void CounterpartyForwardingInfo_set_fee_base_msat(struct LDKCounterpartyForwardingInfo *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_set_fee_base_msat")] public static extern void CounterpartyForwardingInfo_set_fee_base_msat(long _this_ptr, int _val);
	// uint32_t CounterpartyForwardingInfo_get_fee_proportional_millionths(const struct LDKCounterpartyForwardingInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_get_fee_proportional_millionths")] public static extern int CounterpartyForwardingInfo_get_fee_proportional_millionths(long _this_ptr);
	// void CounterpartyForwardingInfo_set_fee_proportional_millionths(struct LDKCounterpartyForwardingInfo *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_set_fee_proportional_millionths")] public static extern void CounterpartyForwardingInfo_set_fee_proportional_millionths(long _this_ptr, int _val);
	// uint16_t CounterpartyForwardingInfo_get_cltv_expiry_delta(const struct LDKCounterpartyForwardingInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_get_cltv_expiry_delta")] public static extern short CounterpartyForwardingInfo_get_cltv_expiry_delta(long _this_ptr);
	// void CounterpartyForwardingInfo_set_cltv_expiry_delta(struct LDKCounterpartyForwardingInfo *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_set_cltv_expiry_delta")] public static extern void CounterpartyForwardingInfo_set_cltv_expiry_delta(long _this_ptr, short _val);
	// MUST_USE_RES struct LDKCounterpartyForwardingInfo CounterpartyForwardingInfo_new(uint32_t fee_base_msat_arg, uint32_t fee_proportional_millionths_arg, uint16_t cltv_expiry_delta_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_new")] public static extern long CounterpartyForwardingInfo_new(int _fee_base_msat_arg, int _fee_proportional_millionths_arg, short _cltv_expiry_delta_arg);
	// uint64_t CounterpartyForwardingInfo_clone_ptr(LDKCounterpartyForwardingInfo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_clone_ptr")] public static extern long CounterpartyForwardingInfo_clone_ptr(long _arg);
	// struct LDKCounterpartyForwardingInfo CounterpartyForwardingInfo_clone(const struct LDKCounterpartyForwardingInfo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_clone")] public static extern long CounterpartyForwardingInfo_clone(long _orig);
	// void ChannelCounterparty_free(struct LDKChannelCounterparty this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_free")] public static extern void ChannelCounterparty_free(long _this_obj);
	// struct LDKPublicKey ChannelCounterparty_get_node_id(const struct LDKChannelCounterparty *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_get_node_id")] public static extern byte[] ChannelCounterparty_get_node_id(long _this_ptr);
	// void ChannelCounterparty_set_node_id(struct LDKChannelCounterparty *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_set_node_id")] public static extern void ChannelCounterparty_set_node_id(long _this_ptr, byte[] _val);
	// struct LDKInitFeatures ChannelCounterparty_get_features(const struct LDKChannelCounterparty *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_get_features")] public static extern long ChannelCounterparty_get_features(long _this_ptr);
	// void ChannelCounterparty_set_features(struct LDKChannelCounterparty *NONNULL_PTR this_ptr, struct LDKInitFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_set_features")] public static extern void ChannelCounterparty_set_features(long _this_ptr, long _val);
	// uint64_t ChannelCounterparty_get_unspendable_punishment_reserve(const struct LDKChannelCounterparty *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_get_unspendable_punishment_reserve")] public static extern long ChannelCounterparty_get_unspendable_punishment_reserve(long _this_ptr);
	// void ChannelCounterparty_set_unspendable_punishment_reserve(struct LDKChannelCounterparty *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_set_unspendable_punishment_reserve")] public static extern void ChannelCounterparty_set_unspendable_punishment_reserve(long _this_ptr, long _val);
	// struct LDKCounterpartyForwardingInfo ChannelCounterparty_get_forwarding_info(const struct LDKChannelCounterparty *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_get_forwarding_info")] public static extern long ChannelCounterparty_get_forwarding_info(long _this_ptr);
	// void ChannelCounterparty_set_forwarding_info(struct LDKChannelCounterparty *NONNULL_PTR this_ptr, struct LDKCounterpartyForwardingInfo val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_set_forwarding_info")] public static extern void ChannelCounterparty_set_forwarding_info(long _this_ptr, long _val);
	// struct LDKCOption_u64Z ChannelCounterparty_get_outbound_htlc_minimum_msat(const struct LDKChannelCounterparty *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_get_outbound_htlc_minimum_msat")] public static extern long ChannelCounterparty_get_outbound_htlc_minimum_msat(long _this_ptr);
	// void ChannelCounterparty_set_outbound_htlc_minimum_msat(struct LDKChannelCounterparty *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_set_outbound_htlc_minimum_msat")] public static extern void ChannelCounterparty_set_outbound_htlc_minimum_msat(long _this_ptr, long _val);
	// struct LDKCOption_u64Z ChannelCounterparty_get_outbound_htlc_maximum_msat(const struct LDKChannelCounterparty *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_get_outbound_htlc_maximum_msat")] public static extern long ChannelCounterparty_get_outbound_htlc_maximum_msat(long _this_ptr);
	// void ChannelCounterparty_set_outbound_htlc_maximum_msat(struct LDKChannelCounterparty *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_set_outbound_htlc_maximum_msat")] public static extern void ChannelCounterparty_set_outbound_htlc_maximum_msat(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelCounterparty ChannelCounterparty_new(struct LDKPublicKey node_id_arg, struct LDKInitFeatures features_arg, uint64_t unspendable_punishment_reserve_arg, struct LDKCounterpartyForwardingInfo forwarding_info_arg, struct LDKCOption_u64Z outbound_htlc_minimum_msat_arg, struct LDKCOption_u64Z outbound_htlc_maximum_msat_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_new")] public static extern long ChannelCounterparty_new(byte[] _node_id_arg, long _features_arg, long _unspendable_punishment_reserve_arg, long _forwarding_info_arg, long _outbound_htlc_minimum_msat_arg, long _outbound_htlc_maximum_msat_arg);
	// uint64_t ChannelCounterparty_clone_ptr(LDKChannelCounterparty *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_clone_ptr")] public static extern long ChannelCounterparty_clone_ptr(long _arg);
	// struct LDKChannelCounterparty ChannelCounterparty_clone(const struct LDKChannelCounterparty *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_clone")] public static extern long ChannelCounterparty_clone(long _orig);
	// void ChannelDetails_free(struct LDKChannelDetails this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_free")] public static extern void ChannelDetails_free(long _this_obj);
	// const uint8_t (*ChannelDetails_get_channel_id(const struct LDKChannelDetails *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_channel_id")] public static extern byte[] ChannelDetails_get_channel_id(long _this_ptr);
	// void ChannelDetails_set_channel_id(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_channel_id")] public static extern void ChannelDetails_set_channel_id(long _this_ptr, byte[] _val);
	// struct LDKChannelCounterparty ChannelDetails_get_counterparty(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_counterparty")] public static extern long ChannelDetails_get_counterparty(long _this_ptr);
	// void ChannelDetails_set_counterparty(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKChannelCounterparty val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_counterparty")] public static extern void ChannelDetails_set_counterparty(long _this_ptr, long _val);
	// struct LDKOutPoint ChannelDetails_get_funding_txo(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_funding_txo")] public static extern long ChannelDetails_get_funding_txo(long _this_ptr);
	// void ChannelDetails_set_funding_txo(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKOutPoint val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_funding_txo")] public static extern void ChannelDetails_set_funding_txo(long _this_ptr, long _val);
	// struct LDKChannelTypeFeatures ChannelDetails_get_channel_type(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_channel_type")] public static extern long ChannelDetails_get_channel_type(long _this_ptr);
	// void ChannelDetails_set_channel_type(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKChannelTypeFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_channel_type")] public static extern void ChannelDetails_set_channel_type(long _this_ptr, long _val);
	// struct LDKCOption_u64Z ChannelDetails_get_short_channel_id(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_short_channel_id")] public static extern long ChannelDetails_get_short_channel_id(long _this_ptr);
	// void ChannelDetails_set_short_channel_id(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_short_channel_id")] public static extern void ChannelDetails_set_short_channel_id(long _this_ptr, long _val);
	// struct LDKCOption_u64Z ChannelDetails_get_outbound_scid_alias(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_outbound_scid_alias")] public static extern long ChannelDetails_get_outbound_scid_alias(long _this_ptr);
	// void ChannelDetails_set_outbound_scid_alias(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_outbound_scid_alias")] public static extern void ChannelDetails_set_outbound_scid_alias(long _this_ptr, long _val);
	// struct LDKCOption_u64Z ChannelDetails_get_inbound_scid_alias(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_inbound_scid_alias")] public static extern long ChannelDetails_get_inbound_scid_alias(long _this_ptr);
	// void ChannelDetails_set_inbound_scid_alias(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_inbound_scid_alias")] public static extern void ChannelDetails_set_inbound_scid_alias(long _this_ptr, long _val);
	// uint64_t ChannelDetails_get_channel_value_satoshis(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_channel_value_satoshis")] public static extern long ChannelDetails_get_channel_value_satoshis(long _this_ptr);
	// void ChannelDetails_set_channel_value_satoshis(struct LDKChannelDetails *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_channel_value_satoshis")] public static extern void ChannelDetails_set_channel_value_satoshis(long _this_ptr, long _val);
	// struct LDKCOption_u64Z ChannelDetails_get_unspendable_punishment_reserve(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_unspendable_punishment_reserve")] public static extern long ChannelDetails_get_unspendable_punishment_reserve(long _this_ptr);
	// void ChannelDetails_set_unspendable_punishment_reserve(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_unspendable_punishment_reserve")] public static extern void ChannelDetails_set_unspendable_punishment_reserve(long _this_ptr, long _val);
	// struct LDKU128 ChannelDetails_get_user_channel_id(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_user_channel_id")] public static extern byte[] ChannelDetails_get_user_channel_id(long _this_ptr);
	// void ChannelDetails_set_user_channel_id(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKU128 val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_user_channel_id")] public static extern void ChannelDetails_set_user_channel_id(long _this_ptr, byte[] _val);
	// uint64_t ChannelDetails_get_balance_msat(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_balance_msat")] public static extern long ChannelDetails_get_balance_msat(long _this_ptr);
	// void ChannelDetails_set_balance_msat(struct LDKChannelDetails *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_balance_msat")] public static extern void ChannelDetails_set_balance_msat(long _this_ptr, long _val);
	// uint64_t ChannelDetails_get_outbound_capacity_msat(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_outbound_capacity_msat")] public static extern long ChannelDetails_get_outbound_capacity_msat(long _this_ptr);
	// void ChannelDetails_set_outbound_capacity_msat(struct LDKChannelDetails *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_outbound_capacity_msat")] public static extern void ChannelDetails_set_outbound_capacity_msat(long _this_ptr, long _val);
	// uint64_t ChannelDetails_get_next_outbound_htlc_limit_msat(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_next_outbound_htlc_limit_msat")] public static extern long ChannelDetails_get_next_outbound_htlc_limit_msat(long _this_ptr);
	// void ChannelDetails_set_next_outbound_htlc_limit_msat(struct LDKChannelDetails *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_next_outbound_htlc_limit_msat")] public static extern void ChannelDetails_set_next_outbound_htlc_limit_msat(long _this_ptr, long _val);
	// uint64_t ChannelDetails_get_inbound_capacity_msat(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_inbound_capacity_msat")] public static extern long ChannelDetails_get_inbound_capacity_msat(long _this_ptr);
	// void ChannelDetails_set_inbound_capacity_msat(struct LDKChannelDetails *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_inbound_capacity_msat")] public static extern void ChannelDetails_set_inbound_capacity_msat(long _this_ptr, long _val);
	// struct LDKCOption_u32Z ChannelDetails_get_confirmations_required(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_confirmations_required")] public static extern long ChannelDetails_get_confirmations_required(long _this_ptr);
	// void ChannelDetails_set_confirmations_required(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u32Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_confirmations_required")] public static extern void ChannelDetails_set_confirmations_required(long _this_ptr, long _val);
	// struct LDKCOption_u32Z ChannelDetails_get_confirmations(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_confirmations")] public static extern long ChannelDetails_get_confirmations(long _this_ptr);
	// void ChannelDetails_set_confirmations(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u32Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_confirmations")] public static extern void ChannelDetails_set_confirmations(long _this_ptr, long _val);
	// struct LDKCOption_u16Z ChannelDetails_get_force_close_spend_delay(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_force_close_spend_delay")] public static extern long ChannelDetails_get_force_close_spend_delay(long _this_ptr);
	// void ChannelDetails_set_force_close_spend_delay(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u16Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_force_close_spend_delay")] public static extern void ChannelDetails_set_force_close_spend_delay(long _this_ptr, long _val);
	// bool ChannelDetails_get_is_outbound(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_is_outbound")] public static extern bool ChannelDetails_get_is_outbound(long _this_ptr);
	// void ChannelDetails_set_is_outbound(struct LDKChannelDetails *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_is_outbound")] public static extern void ChannelDetails_set_is_outbound(long _this_ptr, bool _val);
	// bool ChannelDetails_get_is_channel_ready(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_is_channel_ready")] public static extern bool ChannelDetails_get_is_channel_ready(long _this_ptr);
	// void ChannelDetails_set_is_channel_ready(struct LDKChannelDetails *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_is_channel_ready")] public static extern void ChannelDetails_set_is_channel_ready(long _this_ptr, bool _val);
	// bool ChannelDetails_get_is_usable(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_is_usable")] public static extern bool ChannelDetails_get_is_usable(long _this_ptr);
	// void ChannelDetails_set_is_usable(struct LDKChannelDetails *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_is_usable")] public static extern void ChannelDetails_set_is_usable(long _this_ptr, bool _val);
	// bool ChannelDetails_get_is_public(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_is_public")] public static extern bool ChannelDetails_get_is_public(long _this_ptr);
	// void ChannelDetails_set_is_public(struct LDKChannelDetails *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_is_public")] public static extern void ChannelDetails_set_is_public(long _this_ptr, bool _val);
	// struct LDKCOption_u64Z ChannelDetails_get_inbound_htlc_minimum_msat(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_inbound_htlc_minimum_msat")] public static extern long ChannelDetails_get_inbound_htlc_minimum_msat(long _this_ptr);
	// void ChannelDetails_set_inbound_htlc_minimum_msat(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_inbound_htlc_minimum_msat")] public static extern void ChannelDetails_set_inbound_htlc_minimum_msat(long _this_ptr, long _val);
	// struct LDKCOption_u64Z ChannelDetails_get_inbound_htlc_maximum_msat(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_inbound_htlc_maximum_msat")] public static extern long ChannelDetails_get_inbound_htlc_maximum_msat(long _this_ptr);
	// void ChannelDetails_set_inbound_htlc_maximum_msat(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_inbound_htlc_maximum_msat")] public static extern void ChannelDetails_set_inbound_htlc_maximum_msat(long _this_ptr, long _val);
	// struct LDKChannelConfig ChannelDetails_get_config(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_config")] public static extern long ChannelDetails_get_config(long _this_ptr);
	// void ChannelDetails_set_config(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKChannelConfig val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_config")] public static extern void ChannelDetails_set_config(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelDetails ChannelDetails_new(struct LDKThirtyTwoBytes channel_id_arg, struct LDKChannelCounterparty counterparty_arg, struct LDKOutPoint funding_txo_arg, struct LDKChannelTypeFeatures channel_type_arg, struct LDKCOption_u64Z short_channel_id_arg, struct LDKCOption_u64Z outbound_scid_alias_arg, struct LDKCOption_u64Z inbound_scid_alias_arg, uint64_t channel_value_satoshis_arg, struct LDKCOption_u64Z unspendable_punishment_reserve_arg, struct LDKU128 user_channel_id_arg, uint64_t balance_msat_arg, uint64_t outbound_capacity_msat_arg, uint64_t next_outbound_htlc_limit_msat_arg, uint64_t inbound_capacity_msat_arg, struct LDKCOption_u32Z confirmations_required_arg, struct LDKCOption_u32Z confirmations_arg, struct LDKCOption_u16Z force_close_spend_delay_arg, bool is_outbound_arg, bool is_channel_ready_arg, bool is_usable_arg, bool is_public_arg, struct LDKCOption_u64Z inbound_htlc_minimum_msat_arg, struct LDKCOption_u64Z inbound_htlc_maximum_msat_arg, struct LDKChannelConfig config_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_new")] public static extern long ChannelDetails_new(byte[] _channel_id_arg, long _counterparty_arg, long _funding_txo_arg, long _channel_type_arg, long _short_channel_id_arg, long _outbound_scid_alias_arg, long _inbound_scid_alias_arg, long _channel_value_satoshis_arg, long _unspendable_punishment_reserve_arg, byte[] _user_channel_id_arg, long _balance_msat_arg, long _outbound_capacity_msat_arg, long _next_outbound_htlc_limit_msat_arg, long _inbound_capacity_msat_arg, long _confirmations_required_arg, long _confirmations_arg, long _force_close_spend_delay_arg, bool _is_outbound_arg, bool _is_channel_ready_arg, bool _is_usable_arg, bool _is_public_arg, long _inbound_htlc_minimum_msat_arg, long _inbound_htlc_maximum_msat_arg, long _config_arg);
	// uint64_t ChannelDetails_clone_ptr(LDKChannelDetails *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_clone_ptr")] public static extern long ChannelDetails_clone_ptr(long _arg);
	// struct LDKChannelDetails ChannelDetails_clone(const struct LDKChannelDetails *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_clone")] public static extern long ChannelDetails_clone(long _orig);
	// MUST_USE_RES struct LDKCOption_u64Z ChannelDetails_get_inbound_payment_scid(const struct LDKChannelDetails *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_inbound_payment_scid")] public static extern long ChannelDetails_get_inbound_payment_scid(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z ChannelDetails_get_outbound_payment_scid(const struct LDKChannelDetails *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_outbound_payment_scid")] public static extern long ChannelDetails_get_outbound_payment_scid(long _this_arg);
	// void PaymentSendFailure_free(struct LDKPaymentSendFailure this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentSendFailure_free")] public static extern void PaymentSendFailure_free(long _this_ptr);
	// uint64_t PaymentSendFailure_clone_ptr(LDKPaymentSendFailure *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentSendFailure_clone_ptr")] public static extern long PaymentSendFailure_clone_ptr(long _arg);
	// struct LDKPaymentSendFailure PaymentSendFailure_clone(const struct LDKPaymentSendFailure *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentSendFailure_clone")] public static extern long PaymentSendFailure_clone(long _orig);
	// struct LDKPaymentSendFailure PaymentSendFailure_parameter_error(struct LDKAPIError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentSendFailure_parameter_error")] public static extern long PaymentSendFailure_parameter_error(long _a);
	// struct LDKPaymentSendFailure PaymentSendFailure_path_parameter_error(struct LDKCVec_CResult_NoneAPIErrorZZ a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentSendFailure_path_parameter_error")] public static extern long PaymentSendFailure_path_parameter_error(long[] _a);
	// struct LDKPaymentSendFailure PaymentSendFailure_all_failed_resend_safe(struct LDKCVec_APIErrorZ a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentSendFailure_all_failed_resend_safe")] public static extern long PaymentSendFailure_all_failed_resend_safe(long[] _a);
	// struct LDKPaymentSendFailure PaymentSendFailure_duplicate_payment(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentSendFailure_duplicate_payment")] public static extern long PaymentSendFailure_duplicate_payment();
	// struct LDKPaymentSendFailure PaymentSendFailure_partial_failure(struct LDKCVec_CResult_NoneAPIErrorZZ results, struct LDKRouteParameters failed_paths_retry, struct LDKThirtyTwoBytes payment_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentSendFailure_partial_failure")] public static extern long PaymentSendFailure_partial_failure(long[] _results, long _failed_paths_retry, byte[] _payment_id);
	// void PhantomRouteHints_free(struct LDKPhantomRouteHints this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_free")] public static extern void PhantomRouteHints_free(long _this_obj);
	// struct LDKCVec_ChannelDetailsZ PhantomRouteHints_get_channels(const struct LDKPhantomRouteHints *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_get_channels")] public static extern long[] PhantomRouteHints_get_channels(long _this_ptr);
	// void PhantomRouteHints_set_channels(struct LDKPhantomRouteHints *NONNULL_PTR this_ptr, struct LDKCVec_ChannelDetailsZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_set_channels")] public static extern void PhantomRouteHints_set_channels(long _this_ptr, long[] _val);
	// uint64_t PhantomRouteHints_get_phantom_scid(const struct LDKPhantomRouteHints *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_get_phantom_scid")] public static extern long PhantomRouteHints_get_phantom_scid(long _this_ptr);
	// void PhantomRouteHints_set_phantom_scid(struct LDKPhantomRouteHints *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_set_phantom_scid")] public static extern void PhantomRouteHints_set_phantom_scid(long _this_ptr, long _val);
	// struct LDKPublicKey PhantomRouteHints_get_real_node_pubkey(const struct LDKPhantomRouteHints *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_get_real_node_pubkey")] public static extern byte[] PhantomRouteHints_get_real_node_pubkey(long _this_ptr);
	// void PhantomRouteHints_set_real_node_pubkey(struct LDKPhantomRouteHints *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_set_real_node_pubkey")] public static extern void PhantomRouteHints_set_real_node_pubkey(long _this_ptr, byte[] _val);
	// MUST_USE_RES struct LDKPhantomRouteHints PhantomRouteHints_new(struct LDKCVec_ChannelDetailsZ channels_arg, uint64_t phantom_scid_arg, struct LDKPublicKey real_node_pubkey_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_new")] public static extern long PhantomRouteHints_new(long[] _channels_arg, long _phantom_scid_arg, byte[] _real_node_pubkey_arg);
	// uint64_t PhantomRouteHints_clone_ptr(LDKPhantomRouteHints *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_clone_ptr")] public static extern long PhantomRouteHints_clone_ptr(long _arg);
	// struct LDKPhantomRouteHints PhantomRouteHints_clone(const struct LDKPhantomRouteHints *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_clone")] public static extern long PhantomRouteHints_clone(long _orig);
	// MUST_USE_RES struct LDKChannelManager ChannelManager_new(struct LDKFeeEstimator fee_est, struct LDKWatch chain_monitor, struct LDKBroadcasterInterface tx_broadcaster, struct LDKLogger logger, struct LDKKeysInterface keys_manager, struct LDKUserConfig config, struct LDKChainParameters params);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_new")] public static extern long ChannelManager_new(long _fee_est, long _chain_monitor, long _tx_broadcaster, long _logger, long _keys_manager, long _config, long _params);
	// MUST_USE_RES struct LDKUserConfig ChannelManager_get_current_default_configuration(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_get_current_default_configuration")] public static extern long ChannelManager_get_current_default_configuration(long _this_arg);
	// MUST_USE_RES struct LDKCResult__u832APIErrorZ ChannelManager_create_channel(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKPublicKey their_network_key, uint64_t channel_value_satoshis, uint64_t push_msat, struct LDKU128 user_channel_id, struct LDKUserConfig override_config);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_create_channel")] public static extern long ChannelManager_create_channel(long _this_arg, byte[] _their_network_key, long _channel_value_satoshis, long _push_msat, byte[] _user_channel_id, long _override_config);
	// MUST_USE_RES struct LDKCVec_ChannelDetailsZ ChannelManager_list_channels(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_list_channels")] public static extern long[] ChannelManager_list_channels(long _this_arg);
	// MUST_USE_RES struct LDKCVec_ChannelDetailsZ ChannelManager_list_usable_channels(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_list_usable_channels")] public static extern long[] ChannelManager_list_usable_channels(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_close_channel(const struct LDKChannelManager *NONNULL_PTR this_arg, const uint8_t (*channel_id)[32], struct LDKPublicKey counterparty_node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_close_channel")] public static extern long ChannelManager_close_channel(long _this_arg, byte[] _channel_id, byte[] _counterparty_node_id);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_close_channel_with_target_feerate(const struct LDKChannelManager *NONNULL_PTR this_arg, const uint8_t (*channel_id)[32], struct LDKPublicKey counterparty_node_id, uint32_t target_feerate_sats_per_1000_weight);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_close_channel_with_target_feerate")] public static extern long ChannelManager_close_channel_with_target_feerate(long _this_arg, byte[] _channel_id, byte[] _counterparty_node_id, int _target_feerate_sats_per_1000_weight);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_force_close_broadcasting_latest_txn(const struct LDKChannelManager *NONNULL_PTR this_arg, const uint8_t (*channel_id)[32], struct LDKPublicKey counterparty_node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_force_close_broadcasting_latest_txn")] public static extern long ChannelManager_force_close_broadcasting_latest_txn(long _this_arg, byte[] _channel_id, byte[] _counterparty_node_id);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_force_close_without_broadcasting_txn(const struct LDKChannelManager *NONNULL_PTR this_arg, const uint8_t (*channel_id)[32], struct LDKPublicKey counterparty_node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_force_close_without_broadcasting_txn")] public static extern long ChannelManager_force_close_without_broadcasting_txn(long _this_arg, byte[] _channel_id, byte[] _counterparty_node_id);
	// void ChannelManager_force_close_all_channels_broadcasting_latest_txn(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_force_close_all_channels_broadcasting_latest_txn")] public static extern void ChannelManager_force_close_all_channels_broadcasting_latest_txn(long _this_arg);
	// void ChannelManager_force_close_all_channels_without_broadcasting_txn(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_force_close_all_channels_without_broadcasting_txn")] public static extern void ChannelManager_force_close_all_channels_without_broadcasting_txn(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NonePaymentSendFailureZ ChannelManager_send_payment(const struct LDKChannelManager *NONNULL_PTR this_arg, const struct LDKRoute *NONNULL_PTR route, struct LDKThirtyTwoBytes payment_hash, struct LDKThirtyTwoBytes payment_secret, struct LDKThirtyTwoBytes payment_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_send_payment")] public static extern long ChannelManager_send_payment(long _this_arg, long _route, byte[] _payment_hash, byte[] _payment_secret, byte[] _payment_id);
	// MUST_USE_RES struct LDKCResult_NonePaymentSendFailureZ ChannelManager_retry_payment(const struct LDKChannelManager *NONNULL_PTR this_arg, const struct LDKRoute *NONNULL_PTR route, struct LDKThirtyTwoBytes payment_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_retry_payment")] public static extern long ChannelManager_retry_payment(long _this_arg, long _route, byte[] _payment_id);
	// void ChannelManager_abandon_payment(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes payment_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_abandon_payment")] public static extern void ChannelManager_abandon_payment(long _this_arg, byte[] _payment_id);
	// MUST_USE_RES struct LDKCResult_PaymentHashPaymentSendFailureZ ChannelManager_send_spontaneous_payment(const struct LDKChannelManager *NONNULL_PTR this_arg, const struct LDKRoute *NONNULL_PTR route, struct LDKThirtyTwoBytes payment_preimage, struct LDKThirtyTwoBytes payment_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_send_spontaneous_payment")] public static extern long ChannelManager_send_spontaneous_payment(long _this_arg, long _route, byte[] _payment_preimage, byte[] _payment_id);
	// MUST_USE_RES struct LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ ChannelManager_send_probe(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKCVec_RouteHopZ hops);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_send_probe")] public static extern long ChannelManager_send_probe(long _this_arg, long[] _hops);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_funding_transaction_generated(const struct LDKChannelManager *NONNULL_PTR this_arg, const uint8_t (*temporary_channel_id)[32], struct LDKPublicKey counterparty_node_id, struct LDKTransaction funding_transaction);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_funding_transaction_generated")] public static extern long ChannelManager_funding_transaction_generated(long _this_arg, byte[] _temporary_channel_id, byte[] _counterparty_node_id, byte[] _funding_transaction);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_update_channel_config(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKPublicKey counterparty_node_id, struct LDKCVec_ThirtyTwoBytesZ channel_ids, const struct LDKChannelConfig *NONNULL_PTR config);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_update_channel_config")] public static extern long ChannelManager_update_channel_config(long _this_arg, byte[] _counterparty_node_id, byte[][] _channel_ids, long _config);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_forward_intercepted_htlc(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes intercept_id, const uint8_t (*next_hop_channel_id)[32], struct LDKPublicKey _next_node_id, uint64_t amt_to_forward_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_forward_intercepted_htlc")] public static extern long ChannelManager_forward_intercepted_htlc(long _this_arg, byte[] _intercept_id, byte[] _next_hop_channel_id, byte[] __next_node_id, long _amt_to_forward_msat);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_fail_intercepted_htlc(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes intercept_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_fail_intercepted_htlc")] public static extern long ChannelManager_fail_intercepted_htlc(long _this_arg, byte[] _intercept_id);
	// void ChannelManager_process_pending_htlc_forwards(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_process_pending_htlc_forwards")] public static extern void ChannelManager_process_pending_htlc_forwards(long _this_arg);
	// void ChannelManager_timer_tick_occurred(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_timer_tick_occurred")] public static extern void ChannelManager_timer_tick_occurred(long _this_arg);
	// void ChannelManager_fail_htlc_backwards(const struct LDKChannelManager *NONNULL_PTR this_arg, const uint8_t (*payment_hash)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_fail_htlc_backwards")] public static extern void ChannelManager_fail_htlc_backwards(long _this_arg, byte[] _payment_hash);
	// void ChannelManager_claim_funds(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes payment_preimage);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_claim_funds")] public static extern void ChannelManager_claim_funds(long _this_arg, byte[] _payment_preimage);
	// MUST_USE_RES struct LDKPublicKey ChannelManager_get_our_node_id(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_get_our_node_id")] public static extern byte[] ChannelManager_get_our_node_id(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_accept_inbound_channel(const struct LDKChannelManager *NONNULL_PTR this_arg, const uint8_t (*temporary_channel_id)[32], struct LDKPublicKey counterparty_node_id, struct LDKU128 user_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_accept_inbound_channel")] public static extern long ChannelManager_accept_inbound_channel(long _this_arg, byte[] _temporary_channel_id, byte[] _counterparty_node_id, byte[] _user_channel_id);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_accept_inbound_channel_from_trusted_peer_0conf(const struct LDKChannelManager *NONNULL_PTR this_arg, const uint8_t (*temporary_channel_id)[32], struct LDKPublicKey counterparty_node_id, struct LDKU128 user_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_accept_inbound_channel_from_trusted_peer_0conf")] public static extern long ChannelManager_accept_inbound_channel_from_trusted_peer_0conf(long _this_arg, byte[] _temporary_channel_id, byte[] _counterparty_node_id, byte[] _user_channel_id);
	// MUST_USE_RES struct LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ ChannelManager_create_inbound_payment(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKCOption_u64Z min_value_msat, uint32_t invoice_expiry_delta_secs);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_create_inbound_payment")] public static extern long ChannelManager_create_inbound_payment(long _this_arg, long _min_value_msat, int _invoice_expiry_delta_secs);
	// MUST_USE_RES struct LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ ChannelManager_create_inbound_payment_legacy(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKCOption_u64Z min_value_msat, uint32_t invoice_expiry_delta_secs);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_create_inbound_payment_legacy")] public static extern long ChannelManager_create_inbound_payment_legacy(long _this_arg, long _min_value_msat, int _invoice_expiry_delta_secs);
	// MUST_USE_RES struct LDKCResult_PaymentSecretNoneZ ChannelManager_create_inbound_payment_for_hash(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes payment_hash, struct LDKCOption_u64Z min_value_msat, uint32_t invoice_expiry_delta_secs);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_create_inbound_payment_for_hash")] public static extern long ChannelManager_create_inbound_payment_for_hash(long _this_arg, byte[] _payment_hash, long _min_value_msat, int _invoice_expiry_delta_secs);
	// MUST_USE_RES struct LDKCResult_PaymentSecretAPIErrorZ ChannelManager_create_inbound_payment_for_hash_legacy(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes payment_hash, struct LDKCOption_u64Z min_value_msat, uint32_t invoice_expiry_delta_secs);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_create_inbound_payment_for_hash_legacy")] public static extern long ChannelManager_create_inbound_payment_for_hash_legacy(long _this_arg, byte[] _payment_hash, long _min_value_msat, int _invoice_expiry_delta_secs);
	// MUST_USE_RES struct LDKCResult_PaymentPreimageAPIErrorZ ChannelManager_get_payment_preimage(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes payment_hash, struct LDKThirtyTwoBytes payment_secret);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_get_payment_preimage")] public static extern long ChannelManager_get_payment_preimage(long _this_arg, byte[] _payment_hash, byte[] _payment_secret);
	// MUST_USE_RES uint64_t ChannelManager_get_phantom_scid(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_get_phantom_scid")] public static extern long ChannelManager_get_phantom_scid(long _this_arg);
	// MUST_USE_RES struct LDKPhantomRouteHints ChannelManager_get_phantom_route_hints(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_get_phantom_route_hints")] public static extern long ChannelManager_get_phantom_route_hints(long _this_arg);
	// MUST_USE_RES uint64_t ChannelManager_get_intercept_scid(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_get_intercept_scid")] public static extern long ChannelManager_get_intercept_scid(long _this_arg);
	// MUST_USE_RES struct LDKInFlightHtlcs ChannelManager_compute_inflight_htlcs(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_compute_inflight_htlcs")] public static extern long ChannelManager_compute_inflight_htlcs(long _this_arg);
	// struct LDKMessageSendEventsProvider ChannelManager_as_MessageSendEventsProvider(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_as_MessageSendEventsProvider")] public static extern long ChannelManager_as_MessageSendEventsProvider(long _this_arg);
	// struct LDKEventsProvider ChannelManager_as_EventsProvider(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_as_EventsProvider")] public static extern long ChannelManager_as_EventsProvider(long _this_arg);
	// struct LDKListen ChannelManager_as_Listen(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_as_Listen")] public static extern long ChannelManager_as_Listen(long _this_arg);
	// struct LDKConfirm ChannelManager_as_Confirm(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_as_Confirm")] public static extern long ChannelManager_as_Confirm(long _this_arg);
	// MUST_USE_RES bool ChannelManager_await_persistable_update_timeout(const struct LDKChannelManager *NONNULL_PTR this_arg, uint64_t max_wait);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_await_persistable_update_timeout")] public static extern bool ChannelManager_await_persistable_update_timeout(long _this_arg, long _max_wait);
	// void ChannelManager_await_persistable_update(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_await_persistable_update")] public static extern void ChannelManager_await_persistable_update(long _this_arg);
	// MUST_USE_RES struct LDKFuture ChannelManager_get_persistable_update_future(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_get_persistable_update_future")] public static extern long ChannelManager_get_persistable_update_future(long _this_arg);
	// MUST_USE_RES struct LDKBestBlock ChannelManager_current_best_block(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_current_best_block")] public static extern long ChannelManager_current_best_block(long _this_arg);
	// struct LDKChannelMessageHandler ChannelManager_as_ChannelMessageHandler(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_as_ChannelMessageHandler")] public static extern long ChannelManager_as_ChannelMessageHandler(long _this_arg);
	// struct LDKNodeFeatures provided_node_features(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_provided_node_features")] public static extern long provided_node_features();
	// struct LDKChannelFeatures provided_channel_features(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_provided_channel_features")] public static extern long provided_channel_features();
	// struct LDKInitFeatures provided_init_features(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_provided_init_features")] public static extern long provided_init_features();
	// struct LDKCVec_u8Z CounterpartyForwardingInfo_write(const struct LDKCounterpartyForwardingInfo *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_write")] public static extern byte[] CounterpartyForwardingInfo_write(long _obj);
	// struct LDKCResult_CounterpartyForwardingInfoDecodeErrorZ CounterpartyForwardingInfo_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_read")] public static extern long CounterpartyForwardingInfo_read(byte[] _ser);
	// struct LDKCVec_u8Z ChannelCounterparty_write(const struct LDKChannelCounterparty *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_write")] public static extern byte[] ChannelCounterparty_write(long _obj);
	// struct LDKCResult_ChannelCounterpartyDecodeErrorZ ChannelCounterparty_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_read")] public static extern long ChannelCounterparty_read(byte[] _ser);
	// struct LDKCVec_u8Z ChannelDetails_write(const struct LDKChannelDetails *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_write")] public static extern byte[] ChannelDetails_write(long _obj);
	// struct LDKCResult_ChannelDetailsDecodeErrorZ ChannelDetails_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_read")] public static extern long ChannelDetails_read(byte[] _ser);
	// struct LDKCVec_u8Z PhantomRouteHints_write(const struct LDKPhantomRouteHints *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_write")] public static extern byte[] PhantomRouteHints_write(long _obj);
	// struct LDKCResult_PhantomRouteHintsDecodeErrorZ PhantomRouteHints_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_read")] public static extern long PhantomRouteHints_read(byte[] _ser);
	// struct LDKCVec_u8Z ChannelManager_write(const struct LDKChannelManager *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_write")] public static extern byte[] ChannelManager_write(long _obj);
	// void ChannelManagerReadArgs_free(struct LDKChannelManagerReadArgs this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_free")] public static extern void ChannelManagerReadArgs_free(long _this_obj);
	// const struct LDKKeysInterface *ChannelManagerReadArgs_get_keys_manager(const struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_get_keys_manager")] public static extern long ChannelManagerReadArgs_get_keys_manager(long _this_ptr);
	// void ChannelManagerReadArgs_set_keys_manager(struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr, struct LDKKeysInterface val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_set_keys_manager")] public static extern void ChannelManagerReadArgs_set_keys_manager(long _this_ptr, long _val);
	// const struct LDKFeeEstimator *ChannelManagerReadArgs_get_fee_estimator(const struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_get_fee_estimator")] public static extern long ChannelManagerReadArgs_get_fee_estimator(long _this_ptr);
	// void ChannelManagerReadArgs_set_fee_estimator(struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr, struct LDKFeeEstimator val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_set_fee_estimator")] public static extern void ChannelManagerReadArgs_set_fee_estimator(long _this_ptr, long _val);
	// const struct LDKWatch *ChannelManagerReadArgs_get_chain_monitor(const struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_get_chain_monitor")] public static extern long ChannelManagerReadArgs_get_chain_monitor(long _this_ptr);
	// void ChannelManagerReadArgs_set_chain_monitor(struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr, struct LDKWatch val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_set_chain_monitor")] public static extern void ChannelManagerReadArgs_set_chain_monitor(long _this_ptr, long _val);
	// const struct LDKBroadcasterInterface *ChannelManagerReadArgs_get_tx_broadcaster(const struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_get_tx_broadcaster")] public static extern long ChannelManagerReadArgs_get_tx_broadcaster(long _this_ptr);
	// void ChannelManagerReadArgs_set_tx_broadcaster(struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr, struct LDKBroadcasterInterface val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_set_tx_broadcaster")] public static extern void ChannelManagerReadArgs_set_tx_broadcaster(long _this_ptr, long _val);
	// const struct LDKLogger *ChannelManagerReadArgs_get_logger(const struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_get_logger")] public static extern long ChannelManagerReadArgs_get_logger(long _this_ptr);
	// void ChannelManagerReadArgs_set_logger(struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr, struct LDKLogger val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_set_logger")] public static extern void ChannelManagerReadArgs_set_logger(long _this_ptr, long _val);
	// struct LDKUserConfig ChannelManagerReadArgs_get_default_config(const struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_get_default_config")] public static extern long ChannelManagerReadArgs_get_default_config(long _this_ptr);
	// void ChannelManagerReadArgs_set_default_config(struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr, struct LDKUserConfig val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_set_default_config")] public static extern void ChannelManagerReadArgs_set_default_config(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelManagerReadArgs ChannelManagerReadArgs_new(struct LDKKeysInterface keys_manager, struct LDKFeeEstimator fee_estimator, struct LDKWatch chain_monitor, struct LDKBroadcasterInterface tx_broadcaster, struct LDKLogger logger, struct LDKUserConfig default_config, struct LDKCVec_ChannelMonitorZ channel_monitors);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_new")] public static extern long ChannelManagerReadArgs_new(long _keys_manager, long _fee_estimator, long _chain_monitor, long _tx_broadcaster, long _logger, long _default_config, long[] _channel_monitors);
	// struct LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ C2Tuple_BlockHashChannelManagerZ_read(struct LDKu8slice ser, struct LDKChannelManagerReadArgs arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_BlockHashChannelManagerZ_read")] public static extern long C2Tuple_BlockHashChannelManagerZ_read(byte[] _ser, long _arg);
	// void ExpandedKey_free(struct LDKExpandedKey this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpandedKey_free")] public static extern void ExpandedKey_free(long _this_obj);
	// MUST_USE_RES struct LDKExpandedKey ExpandedKey_new(const uint8_t (*key_material)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpandedKey_new")] public static extern long ExpandedKey_new(byte[] _key_material);
	// struct LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ create(const struct LDKExpandedKey *NONNULL_PTR keys, struct LDKCOption_u64Z min_value_msat, uint32_t invoice_expiry_delta_secs, const struct LDKKeysInterface *NONNULL_PTR keys_manager, uint64_t current_time);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create")] public static extern long create(long _keys, long _min_value_msat, int _invoice_expiry_delta_secs, long _keys_manager, long _current_time);
	// struct LDKCResult_PaymentSecretNoneZ create_from_hash(const struct LDKExpandedKey *NONNULL_PTR keys, struct LDKCOption_u64Z min_value_msat, struct LDKThirtyTwoBytes payment_hash, uint32_t invoice_expiry_delta_secs, uint64_t current_time);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create_from_hash")] public static extern long create_from_hash(long _keys, long _min_value_msat, byte[] _payment_hash, int _invoice_expiry_delta_secs, long _current_time);
	// void DecodeError_free(struct LDKDecodeError this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_free")] public static extern void DecodeError_free(long _this_ptr);
	// uint64_t DecodeError_clone_ptr(LDKDecodeError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_clone_ptr")] public static extern long DecodeError_clone_ptr(long _arg);
	// struct LDKDecodeError DecodeError_clone(const struct LDKDecodeError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_clone")] public static extern long DecodeError_clone(long _orig);
	// struct LDKDecodeError DecodeError_unknown_version(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_unknown_version")] public static extern long DecodeError_unknown_version();
	// struct LDKDecodeError DecodeError_unknown_required_feature(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_unknown_required_feature")] public static extern long DecodeError_unknown_required_feature();
	// struct LDKDecodeError DecodeError_invalid_value(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_invalid_value")] public static extern long DecodeError_invalid_value();
	// struct LDKDecodeError DecodeError_short_read(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_short_read")] public static extern long DecodeError_short_read();
	// struct LDKDecodeError DecodeError_bad_length_descriptor(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_bad_length_descriptor")] public static extern long DecodeError_bad_length_descriptor();
	// struct LDKDecodeError DecodeError_io(enum LDKIOError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_io")] public static extern long DecodeError_io(IOError _a);
	// struct LDKDecodeError DecodeError_unsupported_compression(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_unsupported_compression")] public static extern long DecodeError_unsupported_compression();
	// bool DecodeError_eq(const struct LDKDecodeError *NONNULL_PTR a, const struct LDKDecodeError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_eq")] public static extern bool DecodeError_eq(long _a, long _b);
	// void Init_free(struct LDKInit this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_free")] public static extern void Init_free(long _this_obj);
	// struct LDKInitFeatures Init_get_features(const struct LDKInit *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_get_features")] public static extern long Init_get_features(long _this_ptr);
	// void Init_set_features(struct LDKInit *NONNULL_PTR this_ptr, struct LDKInitFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_set_features")] public static extern void Init_set_features(long _this_ptr, long _val);
	// struct LDKCOption_NetAddressZ Init_get_remote_network_address(const struct LDKInit *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_get_remote_network_address")] public static extern long Init_get_remote_network_address(long _this_ptr);
	// void Init_set_remote_network_address(struct LDKInit *NONNULL_PTR this_ptr, struct LDKCOption_NetAddressZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_set_remote_network_address")] public static extern void Init_set_remote_network_address(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKInit Init_new(struct LDKInitFeatures features_arg, struct LDKCOption_NetAddressZ remote_network_address_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_new")] public static extern long Init_new(long _features_arg, long _remote_network_address_arg);
	// uint64_t Init_clone_ptr(LDKInit *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_clone_ptr")] public static extern long Init_clone_ptr(long _arg);
	// struct LDKInit Init_clone(const struct LDKInit *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_clone")] public static extern long Init_clone(long _orig);
	// bool Init_eq(const struct LDKInit *NONNULL_PTR a, const struct LDKInit *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_eq")] public static extern bool Init_eq(long _a, long _b);
	// void ErrorMessage_free(struct LDKErrorMessage this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_free")] public static extern void ErrorMessage_free(long _this_obj);
	// const uint8_t (*ErrorMessage_get_channel_id(const struct LDKErrorMessage *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_get_channel_id")] public static extern byte[] ErrorMessage_get_channel_id(long _this_ptr);
	// void ErrorMessage_set_channel_id(struct LDKErrorMessage *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_set_channel_id")] public static extern void ErrorMessage_set_channel_id(long _this_ptr, byte[] _val);
	// struct LDKStr ErrorMessage_get_data(const struct LDKErrorMessage *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_get_data")] public static extern string ErrorMessage_get_data(long _this_ptr);
	// void ErrorMessage_set_data(struct LDKErrorMessage *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_set_data")] public static extern void ErrorMessage_set_data(long _this_ptr, string _val);
	// MUST_USE_RES struct LDKErrorMessage ErrorMessage_new(struct LDKThirtyTwoBytes channel_id_arg, struct LDKStr data_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_new")] public static extern long ErrorMessage_new(byte[] _channel_id_arg, string _data_arg);
	// uint64_t ErrorMessage_clone_ptr(LDKErrorMessage *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_clone_ptr")] public static extern long ErrorMessage_clone_ptr(long _arg);
	// struct LDKErrorMessage ErrorMessage_clone(const struct LDKErrorMessage *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_clone")] public static extern long ErrorMessage_clone(long _orig);
	// bool ErrorMessage_eq(const struct LDKErrorMessage *NONNULL_PTR a, const struct LDKErrorMessage *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_eq")] public static extern bool ErrorMessage_eq(long _a, long _b);
	// void WarningMessage_free(struct LDKWarningMessage this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_free")] public static extern void WarningMessage_free(long _this_obj);
	// const uint8_t (*WarningMessage_get_channel_id(const struct LDKWarningMessage *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_get_channel_id")] public static extern byte[] WarningMessage_get_channel_id(long _this_ptr);
	// void WarningMessage_set_channel_id(struct LDKWarningMessage *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_set_channel_id")] public static extern void WarningMessage_set_channel_id(long _this_ptr, byte[] _val);
	// struct LDKStr WarningMessage_get_data(const struct LDKWarningMessage *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_get_data")] public static extern string WarningMessage_get_data(long _this_ptr);
	// void WarningMessage_set_data(struct LDKWarningMessage *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_set_data")] public static extern void WarningMessage_set_data(long _this_ptr, string _val);
	// MUST_USE_RES struct LDKWarningMessage WarningMessage_new(struct LDKThirtyTwoBytes channel_id_arg, struct LDKStr data_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_new")] public static extern long WarningMessage_new(byte[] _channel_id_arg, string _data_arg);
	// uint64_t WarningMessage_clone_ptr(LDKWarningMessage *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_clone_ptr")] public static extern long WarningMessage_clone_ptr(long _arg);
	// struct LDKWarningMessage WarningMessage_clone(const struct LDKWarningMessage *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_clone")] public static extern long WarningMessage_clone(long _orig);
	// bool WarningMessage_eq(const struct LDKWarningMessage *NONNULL_PTR a, const struct LDKWarningMessage *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_eq")] public static extern bool WarningMessage_eq(long _a, long _b);
	// void Ping_free(struct LDKPing this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_free")] public static extern void Ping_free(long _this_obj);
	// uint16_t Ping_get_ponglen(const struct LDKPing *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_get_ponglen")] public static extern short Ping_get_ponglen(long _this_ptr);
	// void Ping_set_ponglen(struct LDKPing *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_set_ponglen")] public static extern void Ping_set_ponglen(long _this_ptr, short _val);
	// uint16_t Ping_get_byteslen(const struct LDKPing *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_get_byteslen")] public static extern short Ping_get_byteslen(long _this_ptr);
	// void Ping_set_byteslen(struct LDKPing *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_set_byteslen")] public static extern void Ping_set_byteslen(long _this_ptr, short _val);
	// MUST_USE_RES struct LDKPing Ping_new(uint16_t ponglen_arg, uint16_t byteslen_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_new")] public static extern long Ping_new(short _ponglen_arg, short _byteslen_arg);
	// uint64_t Ping_clone_ptr(LDKPing *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_clone_ptr")] public static extern long Ping_clone_ptr(long _arg);
	// struct LDKPing Ping_clone(const struct LDKPing *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_clone")] public static extern long Ping_clone(long _orig);
	// bool Ping_eq(const struct LDKPing *NONNULL_PTR a, const struct LDKPing *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_eq")] public static extern bool Ping_eq(long _a, long _b);
	// void Pong_free(struct LDKPong this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_free")] public static extern void Pong_free(long _this_obj);
	// uint16_t Pong_get_byteslen(const struct LDKPong *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_get_byteslen")] public static extern short Pong_get_byteslen(long _this_ptr);
	// void Pong_set_byteslen(struct LDKPong *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_set_byteslen")] public static extern void Pong_set_byteslen(long _this_ptr, short _val);
	// MUST_USE_RES struct LDKPong Pong_new(uint16_t byteslen_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_new")] public static extern long Pong_new(short _byteslen_arg);
	// uint64_t Pong_clone_ptr(LDKPong *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_clone_ptr")] public static extern long Pong_clone_ptr(long _arg);
	// struct LDKPong Pong_clone(const struct LDKPong *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_clone")] public static extern long Pong_clone(long _orig);
	// bool Pong_eq(const struct LDKPong *NONNULL_PTR a, const struct LDKPong *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_eq")] public static extern bool Pong_eq(long _a, long _b);
	// void OpenChannel_free(struct LDKOpenChannel this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_free")] public static extern void OpenChannel_free(long _this_obj);
	// const uint8_t (*OpenChannel_get_chain_hash(const struct LDKOpenChannel *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_chain_hash")] public static extern byte[] OpenChannel_get_chain_hash(long _this_ptr);
	// void OpenChannel_set_chain_hash(struct LDKOpenChannel *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_chain_hash")] public static extern void OpenChannel_set_chain_hash(long _this_ptr, byte[] _val);
	// const uint8_t (*OpenChannel_get_temporary_channel_id(const struct LDKOpenChannel *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_temporary_channel_id")] public static extern byte[] OpenChannel_get_temporary_channel_id(long _this_ptr);
	// void OpenChannel_set_temporary_channel_id(struct LDKOpenChannel *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_temporary_channel_id")] public static extern void OpenChannel_set_temporary_channel_id(long _this_ptr, byte[] _val);
	// uint64_t OpenChannel_get_funding_satoshis(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_funding_satoshis")] public static extern long OpenChannel_get_funding_satoshis(long _this_ptr);
	// void OpenChannel_set_funding_satoshis(struct LDKOpenChannel *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_funding_satoshis")] public static extern void OpenChannel_set_funding_satoshis(long _this_ptr, long _val);
	// uint64_t OpenChannel_get_push_msat(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_push_msat")] public static extern long OpenChannel_get_push_msat(long _this_ptr);
	// void OpenChannel_set_push_msat(struct LDKOpenChannel *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_push_msat")] public static extern void OpenChannel_set_push_msat(long _this_ptr, long _val);
	// uint64_t OpenChannel_get_dust_limit_satoshis(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_dust_limit_satoshis")] public static extern long OpenChannel_get_dust_limit_satoshis(long _this_ptr);
	// void OpenChannel_set_dust_limit_satoshis(struct LDKOpenChannel *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_dust_limit_satoshis")] public static extern void OpenChannel_set_dust_limit_satoshis(long _this_ptr, long _val);
	// uint64_t OpenChannel_get_max_htlc_value_in_flight_msat(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_max_htlc_value_in_flight_msat")] public static extern long OpenChannel_get_max_htlc_value_in_flight_msat(long _this_ptr);
	// void OpenChannel_set_max_htlc_value_in_flight_msat(struct LDKOpenChannel *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_max_htlc_value_in_flight_msat")] public static extern void OpenChannel_set_max_htlc_value_in_flight_msat(long _this_ptr, long _val);
	// uint64_t OpenChannel_get_channel_reserve_satoshis(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_channel_reserve_satoshis")] public static extern long OpenChannel_get_channel_reserve_satoshis(long _this_ptr);
	// void OpenChannel_set_channel_reserve_satoshis(struct LDKOpenChannel *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_channel_reserve_satoshis")] public static extern void OpenChannel_set_channel_reserve_satoshis(long _this_ptr, long _val);
	// uint64_t OpenChannel_get_htlc_minimum_msat(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_htlc_minimum_msat")] public static extern long OpenChannel_get_htlc_minimum_msat(long _this_ptr);
	// void OpenChannel_set_htlc_minimum_msat(struct LDKOpenChannel *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_htlc_minimum_msat")] public static extern void OpenChannel_set_htlc_minimum_msat(long _this_ptr, long _val);
	// uint32_t OpenChannel_get_feerate_per_kw(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_feerate_per_kw")] public static extern int OpenChannel_get_feerate_per_kw(long _this_ptr);
	// void OpenChannel_set_feerate_per_kw(struct LDKOpenChannel *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_feerate_per_kw")] public static extern void OpenChannel_set_feerate_per_kw(long _this_ptr, int _val);
	// uint16_t OpenChannel_get_to_self_delay(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_to_self_delay")] public static extern short OpenChannel_get_to_self_delay(long _this_ptr);
	// void OpenChannel_set_to_self_delay(struct LDKOpenChannel *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_to_self_delay")] public static extern void OpenChannel_set_to_self_delay(long _this_ptr, short _val);
	// uint16_t OpenChannel_get_max_accepted_htlcs(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_max_accepted_htlcs")] public static extern short OpenChannel_get_max_accepted_htlcs(long _this_ptr);
	// void OpenChannel_set_max_accepted_htlcs(struct LDKOpenChannel *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_max_accepted_htlcs")] public static extern void OpenChannel_set_max_accepted_htlcs(long _this_ptr, short _val);
	// struct LDKPublicKey OpenChannel_get_funding_pubkey(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_funding_pubkey")] public static extern byte[] OpenChannel_get_funding_pubkey(long _this_ptr);
	// void OpenChannel_set_funding_pubkey(struct LDKOpenChannel *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_funding_pubkey")] public static extern void OpenChannel_set_funding_pubkey(long _this_ptr, byte[] _val);
	// struct LDKPublicKey OpenChannel_get_revocation_basepoint(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_revocation_basepoint")] public static extern byte[] OpenChannel_get_revocation_basepoint(long _this_ptr);
	// void OpenChannel_set_revocation_basepoint(struct LDKOpenChannel *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_revocation_basepoint")] public static extern void OpenChannel_set_revocation_basepoint(long _this_ptr, byte[] _val);
	// struct LDKPublicKey OpenChannel_get_payment_point(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_payment_point")] public static extern byte[] OpenChannel_get_payment_point(long _this_ptr);
	// void OpenChannel_set_payment_point(struct LDKOpenChannel *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_payment_point")] public static extern void OpenChannel_set_payment_point(long _this_ptr, byte[] _val);
	// struct LDKPublicKey OpenChannel_get_delayed_payment_basepoint(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_delayed_payment_basepoint")] public static extern byte[] OpenChannel_get_delayed_payment_basepoint(long _this_ptr);
	// void OpenChannel_set_delayed_payment_basepoint(struct LDKOpenChannel *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_delayed_payment_basepoint")] public static extern void OpenChannel_set_delayed_payment_basepoint(long _this_ptr, byte[] _val);
	// struct LDKPublicKey OpenChannel_get_htlc_basepoint(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_htlc_basepoint")] public static extern byte[] OpenChannel_get_htlc_basepoint(long _this_ptr);
	// void OpenChannel_set_htlc_basepoint(struct LDKOpenChannel *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_htlc_basepoint")] public static extern void OpenChannel_set_htlc_basepoint(long _this_ptr, byte[] _val);
	// struct LDKPublicKey OpenChannel_get_first_per_commitment_point(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_first_per_commitment_point")] public static extern byte[] OpenChannel_get_first_per_commitment_point(long _this_ptr);
	// void OpenChannel_set_first_per_commitment_point(struct LDKOpenChannel *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_first_per_commitment_point")] public static extern void OpenChannel_set_first_per_commitment_point(long _this_ptr, byte[] _val);
	// uint8_t OpenChannel_get_channel_flags(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_channel_flags")] public static extern byte OpenChannel_get_channel_flags(long _this_ptr);
	// void OpenChannel_set_channel_flags(struct LDKOpenChannel *NONNULL_PTR this_ptr, uint8_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_channel_flags")] public static extern void OpenChannel_set_channel_flags(long _this_ptr, byte _val);
	// struct LDKChannelTypeFeatures OpenChannel_get_channel_type(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_channel_type")] public static extern long OpenChannel_get_channel_type(long _this_ptr);
	// void OpenChannel_set_channel_type(struct LDKOpenChannel *NONNULL_PTR this_ptr, struct LDKChannelTypeFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_channel_type")] public static extern void OpenChannel_set_channel_type(long _this_ptr, long _val);
	// uint64_t OpenChannel_clone_ptr(LDKOpenChannel *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_clone_ptr")] public static extern long OpenChannel_clone_ptr(long _arg);
	// struct LDKOpenChannel OpenChannel_clone(const struct LDKOpenChannel *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_clone")] public static extern long OpenChannel_clone(long _orig);
	// bool OpenChannel_eq(const struct LDKOpenChannel *NONNULL_PTR a, const struct LDKOpenChannel *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_eq")] public static extern bool OpenChannel_eq(long _a, long _b);
	// void AcceptChannel_free(struct LDKAcceptChannel this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_free")] public static extern void AcceptChannel_free(long _this_obj);
	// const uint8_t (*AcceptChannel_get_temporary_channel_id(const struct LDKAcceptChannel *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_temporary_channel_id")] public static extern byte[] AcceptChannel_get_temporary_channel_id(long _this_ptr);
	// void AcceptChannel_set_temporary_channel_id(struct LDKAcceptChannel *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_temporary_channel_id")] public static extern void AcceptChannel_set_temporary_channel_id(long _this_ptr, byte[] _val);
	// uint64_t AcceptChannel_get_dust_limit_satoshis(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_dust_limit_satoshis")] public static extern long AcceptChannel_get_dust_limit_satoshis(long _this_ptr);
	// void AcceptChannel_set_dust_limit_satoshis(struct LDKAcceptChannel *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_dust_limit_satoshis")] public static extern void AcceptChannel_set_dust_limit_satoshis(long _this_ptr, long _val);
	// uint64_t AcceptChannel_get_max_htlc_value_in_flight_msat(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_max_htlc_value_in_flight_msat")] public static extern long AcceptChannel_get_max_htlc_value_in_flight_msat(long _this_ptr);
	// void AcceptChannel_set_max_htlc_value_in_flight_msat(struct LDKAcceptChannel *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_max_htlc_value_in_flight_msat")] public static extern void AcceptChannel_set_max_htlc_value_in_flight_msat(long _this_ptr, long _val);
	// uint64_t AcceptChannel_get_channel_reserve_satoshis(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_channel_reserve_satoshis")] public static extern long AcceptChannel_get_channel_reserve_satoshis(long _this_ptr);
	// void AcceptChannel_set_channel_reserve_satoshis(struct LDKAcceptChannel *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_channel_reserve_satoshis")] public static extern void AcceptChannel_set_channel_reserve_satoshis(long _this_ptr, long _val);
	// uint64_t AcceptChannel_get_htlc_minimum_msat(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_htlc_minimum_msat")] public static extern long AcceptChannel_get_htlc_minimum_msat(long _this_ptr);
	// void AcceptChannel_set_htlc_minimum_msat(struct LDKAcceptChannel *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_htlc_minimum_msat")] public static extern void AcceptChannel_set_htlc_minimum_msat(long _this_ptr, long _val);
	// uint32_t AcceptChannel_get_minimum_depth(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_minimum_depth")] public static extern int AcceptChannel_get_minimum_depth(long _this_ptr);
	// void AcceptChannel_set_minimum_depth(struct LDKAcceptChannel *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_minimum_depth")] public static extern void AcceptChannel_set_minimum_depth(long _this_ptr, int _val);
	// uint16_t AcceptChannel_get_to_self_delay(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_to_self_delay")] public static extern short AcceptChannel_get_to_self_delay(long _this_ptr);
	// void AcceptChannel_set_to_self_delay(struct LDKAcceptChannel *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_to_self_delay")] public static extern void AcceptChannel_set_to_self_delay(long _this_ptr, short _val);
	// uint16_t AcceptChannel_get_max_accepted_htlcs(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_max_accepted_htlcs")] public static extern short AcceptChannel_get_max_accepted_htlcs(long _this_ptr);
	// void AcceptChannel_set_max_accepted_htlcs(struct LDKAcceptChannel *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_max_accepted_htlcs")] public static extern void AcceptChannel_set_max_accepted_htlcs(long _this_ptr, short _val);
	// struct LDKPublicKey AcceptChannel_get_funding_pubkey(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_funding_pubkey")] public static extern byte[] AcceptChannel_get_funding_pubkey(long _this_ptr);
	// void AcceptChannel_set_funding_pubkey(struct LDKAcceptChannel *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_funding_pubkey")] public static extern void AcceptChannel_set_funding_pubkey(long _this_ptr, byte[] _val);
	// struct LDKPublicKey AcceptChannel_get_revocation_basepoint(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_revocation_basepoint")] public static extern byte[] AcceptChannel_get_revocation_basepoint(long _this_ptr);
	// void AcceptChannel_set_revocation_basepoint(struct LDKAcceptChannel *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_revocation_basepoint")] public static extern void AcceptChannel_set_revocation_basepoint(long _this_ptr, byte[] _val);
	// struct LDKPublicKey AcceptChannel_get_payment_point(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_payment_point")] public static extern byte[] AcceptChannel_get_payment_point(long _this_ptr);
	// void AcceptChannel_set_payment_point(struct LDKAcceptChannel *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_payment_point")] public static extern void AcceptChannel_set_payment_point(long _this_ptr, byte[] _val);
	// struct LDKPublicKey AcceptChannel_get_delayed_payment_basepoint(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_delayed_payment_basepoint")] public static extern byte[] AcceptChannel_get_delayed_payment_basepoint(long _this_ptr);
	// void AcceptChannel_set_delayed_payment_basepoint(struct LDKAcceptChannel *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_delayed_payment_basepoint")] public static extern void AcceptChannel_set_delayed_payment_basepoint(long _this_ptr, byte[] _val);
	// struct LDKPublicKey AcceptChannel_get_htlc_basepoint(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_htlc_basepoint")] public static extern byte[] AcceptChannel_get_htlc_basepoint(long _this_ptr);
	// void AcceptChannel_set_htlc_basepoint(struct LDKAcceptChannel *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_htlc_basepoint")] public static extern void AcceptChannel_set_htlc_basepoint(long _this_ptr, byte[] _val);
	// struct LDKPublicKey AcceptChannel_get_first_per_commitment_point(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_first_per_commitment_point")] public static extern byte[] AcceptChannel_get_first_per_commitment_point(long _this_ptr);
	// void AcceptChannel_set_first_per_commitment_point(struct LDKAcceptChannel *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_first_per_commitment_point")] public static extern void AcceptChannel_set_first_per_commitment_point(long _this_ptr, byte[] _val);
	// struct LDKChannelTypeFeatures AcceptChannel_get_channel_type(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_channel_type")] public static extern long AcceptChannel_get_channel_type(long _this_ptr);
	// void AcceptChannel_set_channel_type(struct LDKAcceptChannel *NONNULL_PTR this_ptr, struct LDKChannelTypeFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_channel_type")] public static extern void AcceptChannel_set_channel_type(long _this_ptr, long _val);
	// uint64_t AcceptChannel_clone_ptr(LDKAcceptChannel *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_clone_ptr")] public static extern long AcceptChannel_clone_ptr(long _arg);
	// struct LDKAcceptChannel AcceptChannel_clone(const struct LDKAcceptChannel *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_clone")] public static extern long AcceptChannel_clone(long _orig);
	// bool AcceptChannel_eq(const struct LDKAcceptChannel *NONNULL_PTR a, const struct LDKAcceptChannel *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_eq")] public static extern bool AcceptChannel_eq(long _a, long _b);
	// void FundingCreated_free(struct LDKFundingCreated this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_free")] public static extern void FundingCreated_free(long _this_obj);
	// const uint8_t (*FundingCreated_get_temporary_channel_id(const struct LDKFundingCreated *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_get_temporary_channel_id")] public static extern byte[] FundingCreated_get_temporary_channel_id(long _this_ptr);
	// void FundingCreated_set_temporary_channel_id(struct LDKFundingCreated *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_set_temporary_channel_id")] public static extern void FundingCreated_set_temporary_channel_id(long _this_ptr, byte[] _val);
	// const uint8_t (*FundingCreated_get_funding_txid(const struct LDKFundingCreated *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_get_funding_txid")] public static extern byte[] FundingCreated_get_funding_txid(long _this_ptr);
	// void FundingCreated_set_funding_txid(struct LDKFundingCreated *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_set_funding_txid")] public static extern void FundingCreated_set_funding_txid(long _this_ptr, byte[] _val);
	// uint16_t FundingCreated_get_funding_output_index(const struct LDKFundingCreated *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_get_funding_output_index")] public static extern short FundingCreated_get_funding_output_index(long _this_ptr);
	// void FundingCreated_set_funding_output_index(struct LDKFundingCreated *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_set_funding_output_index")] public static extern void FundingCreated_set_funding_output_index(long _this_ptr, short _val);
	// struct LDKSignature FundingCreated_get_signature(const struct LDKFundingCreated *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_get_signature")] public static extern byte[] FundingCreated_get_signature(long _this_ptr);
	// void FundingCreated_set_signature(struct LDKFundingCreated *NONNULL_PTR this_ptr, struct LDKSignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_set_signature")] public static extern void FundingCreated_set_signature(long _this_ptr, byte[] _val);
	// MUST_USE_RES struct LDKFundingCreated FundingCreated_new(struct LDKThirtyTwoBytes temporary_channel_id_arg, struct LDKThirtyTwoBytes funding_txid_arg, uint16_t funding_output_index_arg, struct LDKSignature signature_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_new")] public static extern long FundingCreated_new(byte[] _temporary_channel_id_arg, byte[] _funding_txid_arg, short _funding_output_index_arg, byte[] _signature_arg);
	// uint64_t FundingCreated_clone_ptr(LDKFundingCreated *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_clone_ptr")] public static extern long FundingCreated_clone_ptr(long _arg);
	// struct LDKFundingCreated FundingCreated_clone(const struct LDKFundingCreated *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_clone")] public static extern long FundingCreated_clone(long _orig);
	// bool FundingCreated_eq(const struct LDKFundingCreated *NONNULL_PTR a, const struct LDKFundingCreated *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_eq")] public static extern bool FundingCreated_eq(long _a, long _b);
	// void FundingSigned_free(struct LDKFundingSigned this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_free")] public static extern void FundingSigned_free(long _this_obj);
	// const uint8_t (*FundingSigned_get_channel_id(const struct LDKFundingSigned *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_get_channel_id")] public static extern byte[] FundingSigned_get_channel_id(long _this_ptr);
	// void FundingSigned_set_channel_id(struct LDKFundingSigned *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_set_channel_id")] public static extern void FundingSigned_set_channel_id(long _this_ptr, byte[] _val);
	// struct LDKSignature FundingSigned_get_signature(const struct LDKFundingSigned *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_get_signature")] public static extern byte[] FundingSigned_get_signature(long _this_ptr);
	// void FundingSigned_set_signature(struct LDKFundingSigned *NONNULL_PTR this_ptr, struct LDKSignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_set_signature")] public static extern void FundingSigned_set_signature(long _this_ptr, byte[] _val);
	// MUST_USE_RES struct LDKFundingSigned FundingSigned_new(struct LDKThirtyTwoBytes channel_id_arg, struct LDKSignature signature_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_new")] public static extern long FundingSigned_new(byte[] _channel_id_arg, byte[] _signature_arg);
	// uint64_t FundingSigned_clone_ptr(LDKFundingSigned *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_clone_ptr")] public static extern long FundingSigned_clone_ptr(long _arg);
	// struct LDKFundingSigned FundingSigned_clone(const struct LDKFundingSigned *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_clone")] public static extern long FundingSigned_clone(long _orig);
	// bool FundingSigned_eq(const struct LDKFundingSigned *NONNULL_PTR a, const struct LDKFundingSigned *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_eq")] public static extern bool FundingSigned_eq(long _a, long _b);
	// void ChannelReady_free(struct LDKChannelReady this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_free")] public static extern void ChannelReady_free(long _this_obj);
	// const uint8_t (*ChannelReady_get_channel_id(const struct LDKChannelReady *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_get_channel_id")] public static extern byte[] ChannelReady_get_channel_id(long _this_ptr);
	// void ChannelReady_set_channel_id(struct LDKChannelReady *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_set_channel_id")] public static extern void ChannelReady_set_channel_id(long _this_ptr, byte[] _val);
	// struct LDKPublicKey ChannelReady_get_next_per_commitment_point(const struct LDKChannelReady *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_get_next_per_commitment_point")] public static extern byte[] ChannelReady_get_next_per_commitment_point(long _this_ptr);
	// void ChannelReady_set_next_per_commitment_point(struct LDKChannelReady *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_set_next_per_commitment_point")] public static extern void ChannelReady_set_next_per_commitment_point(long _this_ptr, byte[] _val);
	// struct LDKCOption_u64Z ChannelReady_get_short_channel_id_alias(const struct LDKChannelReady *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_get_short_channel_id_alias")] public static extern long ChannelReady_get_short_channel_id_alias(long _this_ptr);
	// void ChannelReady_set_short_channel_id_alias(struct LDKChannelReady *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_set_short_channel_id_alias")] public static extern void ChannelReady_set_short_channel_id_alias(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelReady ChannelReady_new(struct LDKThirtyTwoBytes channel_id_arg, struct LDKPublicKey next_per_commitment_point_arg, struct LDKCOption_u64Z short_channel_id_alias_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_new")] public static extern long ChannelReady_new(byte[] _channel_id_arg, byte[] _next_per_commitment_point_arg, long _short_channel_id_alias_arg);
	// uint64_t ChannelReady_clone_ptr(LDKChannelReady *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_clone_ptr")] public static extern long ChannelReady_clone_ptr(long _arg);
	// struct LDKChannelReady ChannelReady_clone(const struct LDKChannelReady *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_clone")] public static extern long ChannelReady_clone(long _orig);
	// bool ChannelReady_eq(const struct LDKChannelReady *NONNULL_PTR a, const struct LDKChannelReady *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_eq")] public static extern bool ChannelReady_eq(long _a, long _b);
	// void Shutdown_free(struct LDKShutdown this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_free")] public static extern void Shutdown_free(long _this_obj);
	// const uint8_t (*Shutdown_get_channel_id(const struct LDKShutdown *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_get_channel_id")] public static extern byte[] Shutdown_get_channel_id(long _this_ptr);
	// void Shutdown_set_channel_id(struct LDKShutdown *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_set_channel_id")] public static extern void Shutdown_set_channel_id(long _this_ptr, byte[] _val);
	// struct LDKu8slice Shutdown_get_scriptpubkey(const struct LDKShutdown *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_get_scriptpubkey")] public static extern byte[] Shutdown_get_scriptpubkey(long _this_ptr);
	// void Shutdown_set_scriptpubkey(struct LDKShutdown *NONNULL_PTR this_ptr, struct LDKCVec_u8Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_set_scriptpubkey")] public static extern void Shutdown_set_scriptpubkey(long _this_ptr, byte[] _val);
	// MUST_USE_RES struct LDKShutdown Shutdown_new(struct LDKThirtyTwoBytes channel_id_arg, struct LDKCVec_u8Z scriptpubkey_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_new")] public static extern long Shutdown_new(byte[] _channel_id_arg, byte[] _scriptpubkey_arg);
	// uint64_t Shutdown_clone_ptr(LDKShutdown *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_clone_ptr")] public static extern long Shutdown_clone_ptr(long _arg);
	// struct LDKShutdown Shutdown_clone(const struct LDKShutdown *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_clone")] public static extern long Shutdown_clone(long _orig);
	// bool Shutdown_eq(const struct LDKShutdown *NONNULL_PTR a, const struct LDKShutdown *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_eq")] public static extern bool Shutdown_eq(long _a, long _b);
	// void ClosingSignedFeeRange_free(struct LDKClosingSignedFeeRange this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_free")] public static extern void ClosingSignedFeeRange_free(long _this_obj);
	// uint64_t ClosingSignedFeeRange_get_min_fee_satoshis(const struct LDKClosingSignedFeeRange *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_get_min_fee_satoshis")] public static extern long ClosingSignedFeeRange_get_min_fee_satoshis(long _this_ptr);
	// void ClosingSignedFeeRange_set_min_fee_satoshis(struct LDKClosingSignedFeeRange *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_set_min_fee_satoshis")] public static extern void ClosingSignedFeeRange_set_min_fee_satoshis(long _this_ptr, long _val);
	// uint64_t ClosingSignedFeeRange_get_max_fee_satoshis(const struct LDKClosingSignedFeeRange *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_get_max_fee_satoshis")] public static extern long ClosingSignedFeeRange_get_max_fee_satoshis(long _this_ptr);
	// void ClosingSignedFeeRange_set_max_fee_satoshis(struct LDKClosingSignedFeeRange *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_set_max_fee_satoshis")] public static extern void ClosingSignedFeeRange_set_max_fee_satoshis(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKClosingSignedFeeRange ClosingSignedFeeRange_new(uint64_t min_fee_satoshis_arg, uint64_t max_fee_satoshis_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_new")] public static extern long ClosingSignedFeeRange_new(long _min_fee_satoshis_arg, long _max_fee_satoshis_arg);
	// uint64_t ClosingSignedFeeRange_clone_ptr(LDKClosingSignedFeeRange *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_clone_ptr")] public static extern long ClosingSignedFeeRange_clone_ptr(long _arg);
	// struct LDKClosingSignedFeeRange ClosingSignedFeeRange_clone(const struct LDKClosingSignedFeeRange *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_clone")] public static extern long ClosingSignedFeeRange_clone(long _orig);
	// bool ClosingSignedFeeRange_eq(const struct LDKClosingSignedFeeRange *NONNULL_PTR a, const struct LDKClosingSignedFeeRange *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_eq")] public static extern bool ClosingSignedFeeRange_eq(long _a, long _b);
	// void ClosingSigned_free(struct LDKClosingSigned this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_free")] public static extern void ClosingSigned_free(long _this_obj);
	// const uint8_t (*ClosingSigned_get_channel_id(const struct LDKClosingSigned *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_get_channel_id")] public static extern byte[] ClosingSigned_get_channel_id(long _this_ptr);
	// void ClosingSigned_set_channel_id(struct LDKClosingSigned *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_set_channel_id")] public static extern void ClosingSigned_set_channel_id(long _this_ptr, byte[] _val);
	// uint64_t ClosingSigned_get_fee_satoshis(const struct LDKClosingSigned *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_get_fee_satoshis")] public static extern long ClosingSigned_get_fee_satoshis(long _this_ptr);
	// void ClosingSigned_set_fee_satoshis(struct LDKClosingSigned *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_set_fee_satoshis")] public static extern void ClosingSigned_set_fee_satoshis(long _this_ptr, long _val);
	// struct LDKSignature ClosingSigned_get_signature(const struct LDKClosingSigned *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_get_signature")] public static extern byte[] ClosingSigned_get_signature(long _this_ptr);
	// void ClosingSigned_set_signature(struct LDKClosingSigned *NONNULL_PTR this_ptr, struct LDKSignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_set_signature")] public static extern void ClosingSigned_set_signature(long _this_ptr, byte[] _val);
	// struct LDKClosingSignedFeeRange ClosingSigned_get_fee_range(const struct LDKClosingSigned *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_get_fee_range")] public static extern long ClosingSigned_get_fee_range(long _this_ptr);
	// void ClosingSigned_set_fee_range(struct LDKClosingSigned *NONNULL_PTR this_ptr, struct LDKClosingSignedFeeRange val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_set_fee_range")] public static extern void ClosingSigned_set_fee_range(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKClosingSigned ClosingSigned_new(struct LDKThirtyTwoBytes channel_id_arg, uint64_t fee_satoshis_arg, struct LDKSignature signature_arg, struct LDKClosingSignedFeeRange fee_range_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_new")] public static extern long ClosingSigned_new(byte[] _channel_id_arg, long _fee_satoshis_arg, byte[] _signature_arg, long _fee_range_arg);
	// uint64_t ClosingSigned_clone_ptr(LDKClosingSigned *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_clone_ptr")] public static extern long ClosingSigned_clone_ptr(long _arg);
	// struct LDKClosingSigned ClosingSigned_clone(const struct LDKClosingSigned *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_clone")] public static extern long ClosingSigned_clone(long _orig);
	// bool ClosingSigned_eq(const struct LDKClosingSigned *NONNULL_PTR a, const struct LDKClosingSigned *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_eq")] public static extern bool ClosingSigned_eq(long _a, long _b);
	// void UpdateAddHTLC_free(struct LDKUpdateAddHTLC this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_free")] public static extern void UpdateAddHTLC_free(long _this_obj);
	// const uint8_t (*UpdateAddHTLC_get_channel_id(const struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_get_channel_id")] public static extern byte[] UpdateAddHTLC_get_channel_id(long _this_ptr);
	// void UpdateAddHTLC_set_channel_id(struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_set_channel_id")] public static extern void UpdateAddHTLC_set_channel_id(long _this_ptr, byte[] _val);
	// uint64_t UpdateAddHTLC_get_htlc_id(const struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_get_htlc_id")] public static extern long UpdateAddHTLC_get_htlc_id(long _this_ptr);
	// void UpdateAddHTLC_set_htlc_id(struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_set_htlc_id")] public static extern void UpdateAddHTLC_set_htlc_id(long _this_ptr, long _val);
	// uint64_t UpdateAddHTLC_get_amount_msat(const struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_get_amount_msat")] public static extern long UpdateAddHTLC_get_amount_msat(long _this_ptr);
	// void UpdateAddHTLC_set_amount_msat(struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_set_amount_msat")] public static extern void UpdateAddHTLC_set_amount_msat(long _this_ptr, long _val);
	// const uint8_t (*UpdateAddHTLC_get_payment_hash(const struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_get_payment_hash")] public static extern byte[] UpdateAddHTLC_get_payment_hash(long _this_ptr);
	// void UpdateAddHTLC_set_payment_hash(struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_set_payment_hash")] public static extern void UpdateAddHTLC_set_payment_hash(long _this_ptr, byte[] _val);
	// uint32_t UpdateAddHTLC_get_cltv_expiry(const struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_get_cltv_expiry")] public static extern int UpdateAddHTLC_get_cltv_expiry(long _this_ptr);
	// void UpdateAddHTLC_set_cltv_expiry(struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_set_cltv_expiry")] public static extern void UpdateAddHTLC_set_cltv_expiry(long _this_ptr, int _val);
	// uint64_t UpdateAddHTLC_clone_ptr(LDKUpdateAddHTLC *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_clone_ptr")] public static extern long UpdateAddHTLC_clone_ptr(long _arg);
	// struct LDKUpdateAddHTLC UpdateAddHTLC_clone(const struct LDKUpdateAddHTLC *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_clone")] public static extern long UpdateAddHTLC_clone(long _orig);
	// bool UpdateAddHTLC_eq(const struct LDKUpdateAddHTLC *NONNULL_PTR a, const struct LDKUpdateAddHTLC *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_eq")] public static extern bool UpdateAddHTLC_eq(long _a, long _b);
	// void OnionMessage_free(struct LDKOnionMessage this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_free")] public static extern void OnionMessage_free(long _this_obj);
	// struct LDKPublicKey OnionMessage_get_blinding_point(const struct LDKOnionMessage *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_get_blinding_point")] public static extern byte[] OnionMessage_get_blinding_point(long _this_ptr);
	// void OnionMessage_set_blinding_point(struct LDKOnionMessage *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_set_blinding_point")] public static extern void OnionMessage_set_blinding_point(long _this_ptr, byte[] _val);
	// uint64_t OnionMessage_clone_ptr(LDKOnionMessage *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_clone_ptr")] public static extern long OnionMessage_clone_ptr(long _arg);
	// struct LDKOnionMessage OnionMessage_clone(const struct LDKOnionMessage *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_clone")] public static extern long OnionMessage_clone(long _orig);
	// bool OnionMessage_eq(const struct LDKOnionMessage *NONNULL_PTR a, const struct LDKOnionMessage *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_eq")] public static extern bool OnionMessage_eq(long _a, long _b);
	// void UpdateFulfillHTLC_free(struct LDKUpdateFulfillHTLC this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_free")] public static extern void UpdateFulfillHTLC_free(long _this_obj);
	// const uint8_t (*UpdateFulfillHTLC_get_channel_id(const struct LDKUpdateFulfillHTLC *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_get_channel_id")] public static extern byte[] UpdateFulfillHTLC_get_channel_id(long _this_ptr);
	// void UpdateFulfillHTLC_set_channel_id(struct LDKUpdateFulfillHTLC *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_set_channel_id")] public static extern void UpdateFulfillHTLC_set_channel_id(long _this_ptr, byte[] _val);
	// uint64_t UpdateFulfillHTLC_get_htlc_id(const struct LDKUpdateFulfillHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_get_htlc_id")] public static extern long UpdateFulfillHTLC_get_htlc_id(long _this_ptr);
	// void UpdateFulfillHTLC_set_htlc_id(struct LDKUpdateFulfillHTLC *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_set_htlc_id")] public static extern void UpdateFulfillHTLC_set_htlc_id(long _this_ptr, long _val);
	// const uint8_t (*UpdateFulfillHTLC_get_payment_preimage(const struct LDKUpdateFulfillHTLC *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_get_payment_preimage")] public static extern byte[] UpdateFulfillHTLC_get_payment_preimage(long _this_ptr);
	// void UpdateFulfillHTLC_set_payment_preimage(struct LDKUpdateFulfillHTLC *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_set_payment_preimage")] public static extern void UpdateFulfillHTLC_set_payment_preimage(long _this_ptr, byte[] _val);
	// MUST_USE_RES struct LDKUpdateFulfillHTLC UpdateFulfillHTLC_new(struct LDKThirtyTwoBytes channel_id_arg, uint64_t htlc_id_arg, struct LDKThirtyTwoBytes payment_preimage_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_new")] public static extern long UpdateFulfillHTLC_new(byte[] _channel_id_arg, long _htlc_id_arg, byte[] _payment_preimage_arg);
	// uint64_t UpdateFulfillHTLC_clone_ptr(LDKUpdateFulfillHTLC *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_clone_ptr")] public static extern long UpdateFulfillHTLC_clone_ptr(long _arg);
	// struct LDKUpdateFulfillHTLC UpdateFulfillHTLC_clone(const struct LDKUpdateFulfillHTLC *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_clone")] public static extern long UpdateFulfillHTLC_clone(long _orig);
	// bool UpdateFulfillHTLC_eq(const struct LDKUpdateFulfillHTLC *NONNULL_PTR a, const struct LDKUpdateFulfillHTLC *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_eq")] public static extern bool UpdateFulfillHTLC_eq(long _a, long _b);
	// void UpdateFailHTLC_free(struct LDKUpdateFailHTLC this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_free")] public static extern void UpdateFailHTLC_free(long _this_obj);
	// const uint8_t (*UpdateFailHTLC_get_channel_id(const struct LDKUpdateFailHTLC *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_get_channel_id")] public static extern byte[] UpdateFailHTLC_get_channel_id(long _this_ptr);
	// void UpdateFailHTLC_set_channel_id(struct LDKUpdateFailHTLC *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_set_channel_id")] public static extern void UpdateFailHTLC_set_channel_id(long _this_ptr, byte[] _val);
	// uint64_t UpdateFailHTLC_get_htlc_id(const struct LDKUpdateFailHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_get_htlc_id")] public static extern long UpdateFailHTLC_get_htlc_id(long _this_ptr);
	// void UpdateFailHTLC_set_htlc_id(struct LDKUpdateFailHTLC *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_set_htlc_id")] public static extern void UpdateFailHTLC_set_htlc_id(long _this_ptr, long _val);
	// uint64_t UpdateFailHTLC_clone_ptr(LDKUpdateFailHTLC *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_clone_ptr")] public static extern long UpdateFailHTLC_clone_ptr(long _arg);
	// struct LDKUpdateFailHTLC UpdateFailHTLC_clone(const struct LDKUpdateFailHTLC *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_clone")] public static extern long UpdateFailHTLC_clone(long _orig);
	// bool UpdateFailHTLC_eq(const struct LDKUpdateFailHTLC *NONNULL_PTR a, const struct LDKUpdateFailHTLC *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_eq")] public static extern bool UpdateFailHTLC_eq(long _a, long _b);
	// void UpdateFailMalformedHTLC_free(struct LDKUpdateFailMalformedHTLC this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_free")] public static extern void UpdateFailMalformedHTLC_free(long _this_obj);
	// const uint8_t (*UpdateFailMalformedHTLC_get_channel_id(const struct LDKUpdateFailMalformedHTLC *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_get_channel_id")] public static extern byte[] UpdateFailMalformedHTLC_get_channel_id(long _this_ptr);
	// void UpdateFailMalformedHTLC_set_channel_id(struct LDKUpdateFailMalformedHTLC *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_set_channel_id")] public static extern void UpdateFailMalformedHTLC_set_channel_id(long _this_ptr, byte[] _val);
	// uint64_t UpdateFailMalformedHTLC_get_htlc_id(const struct LDKUpdateFailMalformedHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_get_htlc_id")] public static extern long UpdateFailMalformedHTLC_get_htlc_id(long _this_ptr);
	// void UpdateFailMalformedHTLC_set_htlc_id(struct LDKUpdateFailMalformedHTLC *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_set_htlc_id")] public static extern void UpdateFailMalformedHTLC_set_htlc_id(long _this_ptr, long _val);
	// uint16_t UpdateFailMalformedHTLC_get_failure_code(const struct LDKUpdateFailMalformedHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_get_failure_code")] public static extern short UpdateFailMalformedHTLC_get_failure_code(long _this_ptr);
	// void UpdateFailMalformedHTLC_set_failure_code(struct LDKUpdateFailMalformedHTLC *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_set_failure_code")] public static extern void UpdateFailMalformedHTLC_set_failure_code(long _this_ptr, short _val);
	// uint64_t UpdateFailMalformedHTLC_clone_ptr(LDKUpdateFailMalformedHTLC *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_clone_ptr")] public static extern long UpdateFailMalformedHTLC_clone_ptr(long _arg);
	// struct LDKUpdateFailMalformedHTLC UpdateFailMalformedHTLC_clone(const struct LDKUpdateFailMalformedHTLC *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_clone")] public static extern long UpdateFailMalformedHTLC_clone(long _orig);
	// bool UpdateFailMalformedHTLC_eq(const struct LDKUpdateFailMalformedHTLC *NONNULL_PTR a, const struct LDKUpdateFailMalformedHTLC *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_eq")] public static extern bool UpdateFailMalformedHTLC_eq(long _a, long _b);
	// void CommitmentSigned_free(struct LDKCommitmentSigned this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_free")] public static extern void CommitmentSigned_free(long _this_obj);
	// const uint8_t (*CommitmentSigned_get_channel_id(const struct LDKCommitmentSigned *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_get_channel_id")] public static extern byte[] CommitmentSigned_get_channel_id(long _this_ptr);
	// void CommitmentSigned_set_channel_id(struct LDKCommitmentSigned *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_set_channel_id")] public static extern void CommitmentSigned_set_channel_id(long _this_ptr, byte[] _val);
	// struct LDKSignature CommitmentSigned_get_signature(const struct LDKCommitmentSigned *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_get_signature")] public static extern byte[] CommitmentSigned_get_signature(long _this_ptr);
	// void CommitmentSigned_set_signature(struct LDKCommitmentSigned *NONNULL_PTR this_ptr, struct LDKSignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_set_signature")] public static extern void CommitmentSigned_set_signature(long _this_ptr, byte[] _val);
	// struct LDKCVec_SignatureZ CommitmentSigned_get_htlc_signatures(const struct LDKCommitmentSigned *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_get_htlc_signatures")] public static extern byte[][] CommitmentSigned_get_htlc_signatures(long _this_ptr);
	// void CommitmentSigned_set_htlc_signatures(struct LDKCommitmentSigned *NONNULL_PTR this_ptr, struct LDKCVec_SignatureZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_set_htlc_signatures")] public static extern void CommitmentSigned_set_htlc_signatures(long _this_ptr, byte[][] _val);
	// MUST_USE_RES struct LDKCommitmentSigned CommitmentSigned_new(struct LDKThirtyTwoBytes channel_id_arg, struct LDKSignature signature_arg, struct LDKCVec_SignatureZ htlc_signatures_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_new")] public static extern long CommitmentSigned_new(byte[] _channel_id_arg, byte[] _signature_arg, byte[][] _htlc_signatures_arg);
	// uint64_t CommitmentSigned_clone_ptr(LDKCommitmentSigned *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_clone_ptr")] public static extern long CommitmentSigned_clone_ptr(long _arg);
	// struct LDKCommitmentSigned CommitmentSigned_clone(const struct LDKCommitmentSigned *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_clone")] public static extern long CommitmentSigned_clone(long _orig);
	// bool CommitmentSigned_eq(const struct LDKCommitmentSigned *NONNULL_PTR a, const struct LDKCommitmentSigned *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_eq")] public static extern bool CommitmentSigned_eq(long _a, long _b);
	// void RevokeAndACK_free(struct LDKRevokeAndACK this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_free")] public static extern void RevokeAndACK_free(long _this_obj);
	// const uint8_t (*RevokeAndACK_get_channel_id(const struct LDKRevokeAndACK *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_get_channel_id")] public static extern byte[] RevokeAndACK_get_channel_id(long _this_ptr);
	// void RevokeAndACK_set_channel_id(struct LDKRevokeAndACK *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_set_channel_id")] public static extern void RevokeAndACK_set_channel_id(long _this_ptr, byte[] _val);
	// const uint8_t (*RevokeAndACK_get_per_commitment_secret(const struct LDKRevokeAndACK *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_get_per_commitment_secret")] public static extern byte[] RevokeAndACK_get_per_commitment_secret(long _this_ptr);
	// void RevokeAndACK_set_per_commitment_secret(struct LDKRevokeAndACK *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_set_per_commitment_secret")] public static extern void RevokeAndACK_set_per_commitment_secret(long _this_ptr, byte[] _val);
	// struct LDKPublicKey RevokeAndACK_get_next_per_commitment_point(const struct LDKRevokeAndACK *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_get_next_per_commitment_point")] public static extern byte[] RevokeAndACK_get_next_per_commitment_point(long _this_ptr);
	// void RevokeAndACK_set_next_per_commitment_point(struct LDKRevokeAndACK *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_set_next_per_commitment_point")] public static extern void RevokeAndACK_set_next_per_commitment_point(long _this_ptr, byte[] _val);
	// MUST_USE_RES struct LDKRevokeAndACK RevokeAndACK_new(struct LDKThirtyTwoBytes channel_id_arg, struct LDKThirtyTwoBytes per_commitment_secret_arg, struct LDKPublicKey next_per_commitment_point_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_new")] public static extern long RevokeAndACK_new(byte[] _channel_id_arg, byte[] _per_commitment_secret_arg, byte[] _next_per_commitment_point_arg);
	// uint64_t RevokeAndACK_clone_ptr(LDKRevokeAndACK *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_clone_ptr")] public static extern long RevokeAndACK_clone_ptr(long _arg);
	// struct LDKRevokeAndACK RevokeAndACK_clone(const struct LDKRevokeAndACK *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_clone")] public static extern long RevokeAndACK_clone(long _orig);
	// bool RevokeAndACK_eq(const struct LDKRevokeAndACK *NONNULL_PTR a, const struct LDKRevokeAndACK *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_eq")] public static extern bool RevokeAndACK_eq(long _a, long _b);
	// void UpdateFee_free(struct LDKUpdateFee this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_free")] public static extern void UpdateFee_free(long _this_obj);
	// const uint8_t (*UpdateFee_get_channel_id(const struct LDKUpdateFee *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_get_channel_id")] public static extern byte[] UpdateFee_get_channel_id(long _this_ptr);
	// void UpdateFee_set_channel_id(struct LDKUpdateFee *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_set_channel_id")] public static extern void UpdateFee_set_channel_id(long _this_ptr, byte[] _val);
	// uint32_t UpdateFee_get_feerate_per_kw(const struct LDKUpdateFee *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_get_feerate_per_kw")] public static extern int UpdateFee_get_feerate_per_kw(long _this_ptr);
	// void UpdateFee_set_feerate_per_kw(struct LDKUpdateFee *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_set_feerate_per_kw")] public static extern void UpdateFee_set_feerate_per_kw(long _this_ptr, int _val);
	// MUST_USE_RES struct LDKUpdateFee UpdateFee_new(struct LDKThirtyTwoBytes channel_id_arg, uint32_t feerate_per_kw_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_new")] public static extern long UpdateFee_new(byte[] _channel_id_arg, int _feerate_per_kw_arg);
	// uint64_t UpdateFee_clone_ptr(LDKUpdateFee *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_clone_ptr")] public static extern long UpdateFee_clone_ptr(long _arg);
	// struct LDKUpdateFee UpdateFee_clone(const struct LDKUpdateFee *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_clone")] public static extern long UpdateFee_clone(long _orig);
	// bool UpdateFee_eq(const struct LDKUpdateFee *NONNULL_PTR a, const struct LDKUpdateFee *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_eq")] public static extern bool UpdateFee_eq(long _a, long _b);
	// void DataLossProtect_free(struct LDKDataLossProtect this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DataLossProtect_free")] public static extern void DataLossProtect_free(long _this_obj);
	// const uint8_t (*DataLossProtect_get_your_last_per_commitment_secret(const struct LDKDataLossProtect *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DataLossProtect_get_your_last_per_commitment_secret")] public static extern byte[] DataLossProtect_get_your_last_per_commitment_secret(long _this_ptr);
	// void DataLossProtect_set_your_last_per_commitment_secret(struct LDKDataLossProtect *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DataLossProtect_set_your_last_per_commitment_secret")] public static extern void DataLossProtect_set_your_last_per_commitment_secret(long _this_ptr, byte[] _val);
	// struct LDKPublicKey DataLossProtect_get_my_current_per_commitment_point(const struct LDKDataLossProtect *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DataLossProtect_get_my_current_per_commitment_point")] public static extern byte[] DataLossProtect_get_my_current_per_commitment_point(long _this_ptr);
	// void DataLossProtect_set_my_current_per_commitment_point(struct LDKDataLossProtect *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DataLossProtect_set_my_current_per_commitment_point")] public static extern void DataLossProtect_set_my_current_per_commitment_point(long _this_ptr, byte[] _val);
	// MUST_USE_RES struct LDKDataLossProtect DataLossProtect_new(struct LDKThirtyTwoBytes your_last_per_commitment_secret_arg, struct LDKPublicKey my_current_per_commitment_point_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DataLossProtect_new")] public static extern long DataLossProtect_new(byte[] _your_last_per_commitment_secret_arg, byte[] _my_current_per_commitment_point_arg);
	// uint64_t DataLossProtect_clone_ptr(LDKDataLossProtect *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DataLossProtect_clone_ptr")] public static extern long DataLossProtect_clone_ptr(long _arg);
	// struct LDKDataLossProtect DataLossProtect_clone(const struct LDKDataLossProtect *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DataLossProtect_clone")] public static extern long DataLossProtect_clone(long _orig);
	// bool DataLossProtect_eq(const struct LDKDataLossProtect *NONNULL_PTR a, const struct LDKDataLossProtect *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DataLossProtect_eq")] public static extern bool DataLossProtect_eq(long _a, long _b);
	// void ChannelReestablish_free(struct LDKChannelReestablish this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_free")] public static extern void ChannelReestablish_free(long _this_obj);
	// const uint8_t (*ChannelReestablish_get_channel_id(const struct LDKChannelReestablish *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_get_channel_id")] public static extern byte[] ChannelReestablish_get_channel_id(long _this_ptr);
	// void ChannelReestablish_set_channel_id(struct LDKChannelReestablish *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_set_channel_id")] public static extern void ChannelReestablish_set_channel_id(long _this_ptr, byte[] _val);
	// uint64_t ChannelReestablish_get_next_local_commitment_number(const struct LDKChannelReestablish *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_get_next_local_commitment_number")] public static extern long ChannelReestablish_get_next_local_commitment_number(long _this_ptr);
	// void ChannelReestablish_set_next_local_commitment_number(struct LDKChannelReestablish *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_set_next_local_commitment_number")] public static extern void ChannelReestablish_set_next_local_commitment_number(long _this_ptr, long _val);
	// uint64_t ChannelReestablish_get_next_remote_commitment_number(const struct LDKChannelReestablish *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_get_next_remote_commitment_number")] public static extern long ChannelReestablish_get_next_remote_commitment_number(long _this_ptr);
	// void ChannelReestablish_set_next_remote_commitment_number(struct LDKChannelReestablish *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_set_next_remote_commitment_number")] public static extern void ChannelReestablish_set_next_remote_commitment_number(long _this_ptr, long _val);
	// uint64_t ChannelReestablish_clone_ptr(LDKChannelReestablish *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_clone_ptr")] public static extern long ChannelReestablish_clone_ptr(long _arg);
	// struct LDKChannelReestablish ChannelReestablish_clone(const struct LDKChannelReestablish *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_clone")] public static extern long ChannelReestablish_clone(long _orig);
	// bool ChannelReestablish_eq(const struct LDKChannelReestablish *NONNULL_PTR a, const struct LDKChannelReestablish *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_eq")] public static extern bool ChannelReestablish_eq(long _a, long _b);
	// void AnnouncementSignatures_free(struct LDKAnnouncementSignatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_free")] public static extern void AnnouncementSignatures_free(long _this_obj);
	// const uint8_t (*AnnouncementSignatures_get_channel_id(const struct LDKAnnouncementSignatures *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_get_channel_id")] public static extern byte[] AnnouncementSignatures_get_channel_id(long _this_ptr);
	// void AnnouncementSignatures_set_channel_id(struct LDKAnnouncementSignatures *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_set_channel_id")] public static extern void AnnouncementSignatures_set_channel_id(long _this_ptr, byte[] _val);
	// uint64_t AnnouncementSignatures_get_short_channel_id(const struct LDKAnnouncementSignatures *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_get_short_channel_id")] public static extern long AnnouncementSignatures_get_short_channel_id(long _this_ptr);
	// void AnnouncementSignatures_set_short_channel_id(struct LDKAnnouncementSignatures *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_set_short_channel_id")] public static extern void AnnouncementSignatures_set_short_channel_id(long _this_ptr, long _val);
	// struct LDKSignature AnnouncementSignatures_get_node_signature(const struct LDKAnnouncementSignatures *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_get_node_signature")] public static extern byte[] AnnouncementSignatures_get_node_signature(long _this_ptr);
	// void AnnouncementSignatures_set_node_signature(struct LDKAnnouncementSignatures *NONNULL_PTR this_ptr, struct LDKSignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_set_node_signature")] public static extern void AnnouncementSignatures_set_node_signature(long _this_ptr, byte[] _val);
	// struct LDKSignature AnnouncementSignatures_get_bitcoin_signature(const struct LDKAnnouncementSignatures *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_get_bitcoin_signature")] public static extern byte[] AnnouncementSignatures_get_bitcoin_signature(long _this_ptr);
	// void AnnouncementSignatures_set_bitcoin_signature(struct LDKAnnouncementSignatures *NONNULL_PTR this_ptr, struct LDKSignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_set_bitcoin_signature")] public static extern void AnnouncementSignatures_set_bitcoin_signature(long _this_ptr, byte[] _val);
	// MUST_USE_RES struct LDKAnnouncementSignatures AnnouncementSignatures_new(struct LDKThirtyTwoBytes channel_id_arg, uint64_t short_channel_id_arg, struct LDKSignature node_signature_arg, struct LDKSignature bitcoin_signature_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_new")] public static extern long AnnouncementSignatures_new(byte[] _channel_id_arg, long _short_channel_id_arg, byte[] _node_signature_arg, byte[] _bitcoin_signature_arg);
	// uint64_t AnnouncementSignatures_clone_ptr(LDKAnnouncementSignatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_clone_ptr")] public static extern long AnnouncementSignatures_clone_ptr(long _arg);
	// struct LDKAnnouncementSignatures AnnouncementSignatures_clone(const struct LDKAnnouncementSignatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_clone")] public static extern long AnnouncementSignatures_clone(long _orig);
	// bool AnnouncementSignatures_eq(const struct LDKAnnouncementSignatures *NONNULL_PTR a, const struct LDKAnnouncementSignatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_eq")] public static extern bool AnnouncementSignatures_eq(long _a, long _b);
	// void NetAddress_free(struct LDKNetAddress this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetAddress_free")] public static extern void NetAddress_free(long _this_ptr);
	// uint64_t NetAddress_clone_ptr(LDKNetAddress *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetAddress_clone_ptr")] public static extern long NetAddress_clone_ptr(long _arg);
	// struct LDKNetAddress NetAddress_clone(const struct LDKNetAddress *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetAddress_clone")] public static extern long NetAddress_clone(long _orig);
	// struct LDKNetAddress NetAddress_ipv4(struct LDKFourBytes addr, uint16_t port);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetAddress_ipv4")] public static extern long NetAddress_ipv4(byte[] _addr, short _port);
	// struct LDKNetAddress NetAddress_ipv6(struct LDKSixteenBytes addr, uint16_t port);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetAddress_ipv6")] public static extern long NetAddress_ipv6(byte[] _addr, short _port);
	// struct LDKNetAddress NetAddress_onion_v2(struct LDKTwelveBytes a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetAddress_onion_v2")] public static extern long NetAddress_onion_v2(byte[] _a);
	// struct LDKNetAddress NetAddress_onion_v3(struct LDKThirtyTwoBytes ed25519_pubkey, uint16_t checksum, uint8_t version, uint16_t port);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetAddress_onion_v3")] public static extern long NetAddress_onion_v3(byte[] _ed25519_pubkey, short _checksum, byte _version, short _port);
	// struct LDKNetAddress NetAddress_hostname(struct LDKHostname hostname, uint16_t port);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetAddress_hostname")] public static extern long NetAddress_hostname(long _hostname, short _port);
	// bool NetAddress_eq(const struct LDKNetAddress *NONNULL_PTR a, const struct LDKNetAddress *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetAddress_eq")] public static extern bool NetAddress_eq(long _a, long _b);
	// struct LDKCVec_u8Z NetAddress_write(const struct LDKNetAddress *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetAddress_write")] public static extern byte[] NetAddress_write(long _obj);
	// struct LDKCResult_NetAddressDecodeErrorZ NetAddress_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetAddress_read")] public static extern long NetAddress_read(byte[] _ser);
	// void UnsignedNodeAnnouncement_free(struct LDKUnsignedNodeAnnouncement this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_free")] public static extern void UnsignedNodeAnnouncement_free(long _this_obj);
	// struct LDKNodeFeatures UnsignedNodeAnnouncement_get_features(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_get_features")] public static extern long UnsignedNodeAnnouncement_get_features(long _this_ptr);
	// void UnsignedNodeAnnouncement_set_features(struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr, struct LDKNodeFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_set_features")] public static extern void UnsignedNodeAnnouncement_set_features(long _this_ptr, long _val);
	// uint32_t UnsignedNodeAnnouncement_get_timestamp(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_get_timestamp")] public static extern int UnsignedNodeAnnouncement_get_timestamp(long _this_ptr);
	// void UnsignedNodeAnnouncement_set_timestamp(struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_set_timestamp")] public static extern void UnsignedNodeAnnouncement_set_timestamp(long _this_ptr, int _val);
	// struct LDKPublicKey UnsignedNodeAnnouncement_get_node_id(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_get_node_id")] public static extern byte[] UnsignedNodeAnnouncement_get_node_id(long _this_ptr);
	// void UnsignedNodeAnnouncement_set_node_id(struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_set_node_id")] public static extern void UnsignedNodeAnnouncement_set_node_id(long _this_ptr, byte[] _val);
	// const uint8_t (*UnsignedNodeAnnouncement_get_rgb(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr))[3];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_get_rgb")] public static extern byte[] UnsignedNodeAnnouncement_get_rgb(long _this_ptr);
	// void UnsignedNodeAnnouncement_set_rgb(struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr, struct LDKThreeBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_set_rgb")] public static extern void UnsignedNodeAnnouncement_set_rgb(long _this_ptr, byte[] _val);
	// const uint8_t (*UnsignedNodeAnnouncement_get_alias(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_get_alias")] public static extern byte[] UnsignedNodeAnnouncement_get_alias(long _this_ptr);
	// void UnsignedNodeAnnouncement_set_alias(struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_set_alias")] public static extern void UnsignedNodeAnnouncement_set_alias(long _this_ptr, byte[] _val);
	// struct LDKCVec_NetAddressZ UnsignedNodeAnnouncement_get_addresses(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_get_addresses")] public static extern long[] UnsignedNodeAnnouncement_get_addresses(long _this_ptr);
	// void UnsignedNodeAnnouncement_set_addresses(struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr, struct LDKCVec_NetAddressZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_set_addresses")] public static extern void UnsignedNodeAnnouncement_set_addresses(long _this_ptr, long[] _val);
	// uint64_t UnsignedNodeAnnouncement_clone_ptr(LDKUnsignedNodeAnnouncement *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_clone_ptr")] public static extern long UnsignedNodeAnnouncement_clone_ptr(long _arg);
	// struct LDKUnsignedNodeAnnouncement UnsignedNodeAnnouncement_clone(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_clone")] public static extern long UnsignedNodeAnnouncement_clone(long _orig);
	// bool UnsignedNodeAnnouncement_eq(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR a, const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_eq")] public static extern bool UnsignedNodeAnnouncement_eq(long _a, long _b);
	// void NodeAnnouncement_free(struct LDKNodeAnnouncement this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_free")] public static extern void NodeAnnouncement_free(long _this_obj);
	// struct LDKSignature NodeAnnouncement_get_signature(const struct LDKNodeAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_get_signature")] public static extern byte[] NodeAnnouncement_get_signature(long _this_ptr);
	// void NodeAnnouncement_set_signature(struct LDKNodeAnnouncement *NONNULL_PTR this_ptr, struct LDKSignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_set_signature")] public static extern void NodeAnnouncement_set_signature(long _this_ptr, byte[] _val);
	// struct LDKUnsignedNodeAnnouncement NodeAnnouncement_get_contents(const struct LDKNodeAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_get_contents")] public static extern long NodeAnnouncement_get_contents(long _this_ptr);
	// void NodeAnnouncement_set_contents(struct LDKNodeAnnouncement *NONNULL_PTR this_ptr, struct LDKUnsignedNodeAnnouncement val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_set_contents")] public static extern void NodeAnnouncement_set_contents(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKNodeAnnouncement NodeAnnouncement_new(struct LDKSignature signature_arg, struct LDKUnsignedNodeAnnouncement contents_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_new")] public static extern long NodeAnnouncement_new(byte[] _signature_arg, long _contents_arg);
	// uint64_t NodeAnnouncement_clone_ptr(LDKNodeAnnouncement *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_clone_ptr")] public static extern long NodeAnnouncement_clone_ptr(long _arg);
	// struct LDKNodeAnnouncement NodeAnnouncement_clone(const struct LDKNodeAnnouncement *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_clone")] public static extern long NodeAnnouncement_clone(long _orig);
	// bool NodeAnnouncement_eq(const struct LDKNodeAnnouncement *NONNULL_PTR a, const struct LDKNodeAnnouncement *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_eq")] public static extern bool NodeAnnouncement_eq(long _a, long _b);
	// void UnsignedChannelAnnouncement_free(struct LDKUnsignedChannelAnnouncement this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_free")] public static extern void UnsignedChannelAnnouncement_free(long _this_obj);
	// struct LDKChannelFeatures UnsignedChannelAnnouncement_get_features(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_get_features")] public static extern long UnsignedChannelAnnouncement_get_features(long _this_ptr);
	// void UnsignedChannelAnnouncement_set_features(struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKChannelFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_set_features")] public static extern void UnsignedChannelAnnouncement_set_features(long _this_ptr, long _val);
	// const uint8_t (*UnsignedChannelAnnouncement_get_chain_hash(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_get_chain_hash")] public static extern byte[] UnsignedChannelAnnouncement_get_chain_hash(long _this_ptr);
	// void UnsignedChannelAnnouncement_set_chain_hash(struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_set_chain_hash")] public static extern void UnsignedChannelAnnouncement_set_chain_hash(long _this_ptr, byte[] _val);
	// uint64_t UnsignedChannelAnnouncement_get_short_channel_id(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_get_short_channel_id")] public static extern long UnsignedChannelAnnouncement_get_short_channel_id(long _this_ptr);
	// void UnsignedChannelAnnouncement_set_short_channel_id(struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_set_short_channel_id")] public static extern void UnsignedChannelAnnouncement_set_short_channel_id(long _this_ptr, long _val);
	// struct LDKPublicKey UnsignedChannelAnnouncement_get_node_id_1(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_get_node_id_1")] public static extern byte[] UnsignedChannelAnnouncement_get_node_id_1(long _this_ptr);
	// void UnsignedChannelAnnouncement_set_node_id_1(struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_set_node_id_1")] public static extern void UnsignedChannelAnnouncement_set_node_id_1(long _this_ptr, byte[] _val);
	// struct LDKPublicKey UnsignedChannelAnnouncement_get_node_id_2(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_get_node_id_2")] public static extern byte[] UnsignedChannelAnnouncement_get_node_id_2(long _this_ptr);
	// void UnsignedChannelAnnouncement_set_node_id_2(struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_set_node_id_2")] public static extern void UnsignedChannelAnnouncement_set_node_id_2(long _this_ptr, byte[] _val);
	// struct LDKPublicKey UnsignedChannelAnnouncement_get_bitcoin_key_1(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_get_bitcoin_key_1")] public static extern byte[] UnsignedChannelAnnouncement_get_bitcoin_key_1(long _this_ptr);
	// void UnsignedChannelAnnouncement_set_bitcoin_key_1(struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_set_bitcoin_key_1")] public static extern void UnsignedChannelAnnouncement_set_bitcoin_key_1(long _this_ptr, byte[] _val);
	// struct LDKPublicKey UnsignedChannelAnnouncement_get_bitcoin_key_2(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_get_bitcoin_key_2")] public static extern byte[] UnsignedChannelAnnouncement_get_bitcoin_key_2(long _this_ptr);
	// void UnsignedChannelAnnouncement_set_bitcoin_key_2(struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_set_bitcoin_key_2")] public static extern void UnsignedChannelAnnouncement_set_bitcoin_key_2(long _this_ptr, byte[] _val);
	// uint64_t UnsignedChannelAnnouncement_clone_ptr(LDKUnsignedChannelAnnouncement *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_clone_ptr")] public static extern long UnsignedChannelAnnouncement_clone_ptr(long _arg);
	// struct LDKUnsignedChannelAnnouncement UnsignedChannelAnnouncement_clone(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_clone")] public static extern long UnsignedChannelAnnouncement_clone(long _orig);
	// bool UnsignedChannelAnnouncement_eq(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR a, const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_eq")] public static extern bool UnsignedChannelAnnouncement_eq(long _a, long _b);
	// void ChannelAnnouncement_free(struct LDKChannelAnnouncement this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_free")] public static extern void ChannelAnnouncement_free(long _this_obj);
	// struct LDKSignature ChannelAnnouncement_get_node_signature_1(const struct LDKChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_get_node_signature_1")] public static extern byte[] ChannelAnnouncement_get_node_signature_1(long _this_ptr);
	// void ChannelAnnouncement_set_node_signature_1(struct LDKChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKSignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_set_node_signature_1")] public static extern void ChannelAnnouncement_set_node_signature_1(long _this_ptr, byte[] _val);
	// struct LDKSignature ChannelAnnouncement_get_node_signature_2(const struct LDKChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_get_node_signature_2")] public static extern byte[] ChannelAnnouncement_get_node_signature_2(long _this_ptr);
	// void ChannelAnnouncement_set_node_signature_2(struct LDKChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKSignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_set_node_signature_2")] public static extern void ChannelAnnouncement_set_node_signature_2(long _this_ptr, byte[] _val);
	// struct LDKSignature ChannelAnnouncement_get_bitcoin_signature_1(const struct LDKChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_get_bitcoin_signature_1")] public static extern byte[] ChannelAnnouncement_get_bitcoin_signature_1(long _this_ptr);
	// void ChannelAnnouncement_set_bitcoin_signature_1(struct LDKChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKSignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_set_bitcoin_signature_1")] public static extern void ChannelAnnouncement_set_bitcoin_signature_1(long _this_ptr, byte[] _val);
	// struct LDKSignature ChannelAnnouncement_get_bitcoin_signature_2(const struct LDKChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_get_bitcoin_signature_2")] public static extern byte[] ChannelAnnouncement_get_bitcoin_signature_2(long _this_ptr);
	// void ChannelAnnouncement_set_bitcoin_signature_2(struct LDKChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKSignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_set_bitcoin_signature_2")] public static extern void ChannelAnnouncement_set_bitcoin_signature_2(long _this_ptr, byte[] _val);
	// struct LDKUnsignedChannelAnnouncement ChannelAnnouncement_get_contents(const struct LDKChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_get_contents")] public static extern long ChannelAnnouncement_get_contents(long _this_ptr);
	// void ChannelAnnouncement_set_contents(struct LDKChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKUnsignedChannelAnnouncement val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_set_contents")] public static extern void ChannelAnnouncement_set_contents(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelAnnouncement ChannelAnnouncement_new(struct LDKSignature node_signature_1_arg, struct LDKSignature node_signature_2_arg, struct LDKSignature bitcoin_signature_1_arg, struct LDKSignature bitcoin_signature_2_arg, struct LDKUnsignedChannelAnnouncement contents_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_new")] public static extern long ChannelAnnouncement_new(byte[] _node_signature_1_arg, byte[] _node_signature_2_arg, byte[] _bitcoin_signature_1_arg, byte[] _bitcoin_signature_2_arg, long _contents_arg);
	// uint64_t ChannelAnnouncement_clone_ptr(LDKChannelAnnouncement *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_clone_ptr")] public static extern long ChannelAnnouncement_clone_ptr(long _arg);
	// struct LDKChannelAnnouncement ChannelAnnouncement_clone(const struct LDKChannelAnnouncement *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_clone")] public static extern long ChannelAnnouncement_clone(long _orig);
	// bool ChannelAnnouncement_eq(const struct LDKChannelAnnouncement *NONNULL_PTR a, const struct LDKChannelAnnouncement *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_eq")] public static extern bool ChannelAnnouncement_eq(long _a, long _b);
	// void UnsignedChannelUpdate_free(struct LDKUnsignedChannelUpdate this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_free")] public static extern void UnsignedChannelUpdate_free(long _this_obj);
	// const uint8_t (*UnsignedChannelUpdate_get_chain_hash(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_chain_hash")] public static extern byte[] UnsignedChannelUpdate_get_chain_hash(long _this_ptr);
	// void UnsignedChannelUpdate_set_chain_hash(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_chain_hash")] public static extern void UnsignedChannelUpdate_set_chain_hash(long _this_ptr, byte[] _val);
	// uint64_t UnsignedChannelUpdate_get_short_channel_id(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_short_channel_id")] public static extern long UnsignedChannelUpdate_get_short_channel_id(long _this_ptr);
	// void UnsignedChannelUpdate_set_short_channel_id(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_short_channel_id")] public static extern void UnsignedChannelUpdate_set_short_channel_id(long _this_ptr, long _val);
	// uint32_t UnsignedChannelUpdate_get_timestamp(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_timestamp")] public static extern int UnsignedChannelUpdate_get_timestamp(long _this_ptr);
	// void UnsignedChannelUpdate_set_timestamp(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_timestamp")] public static extern void UnsignedChannelUpdate_set_timestamp(long _this_ptr, int _val);
	// uint8_t UnsignedChannelUpdate_get_flags(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_flags")] public static extern byte UnsignedChannelUpdate_get_flags(long _this_ptr);
	// void UnsignedChannelUpdate_set_flags(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, uint8_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_flags")] public static extern void UnsignedChannelUpdate_set_flags(long _this_ptr, byte _val);
	// uint16_t UnsignedChannelUpdate_get_cltv_expiry_delta(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_cltv_expiry_delta")] public static extern short UnsignedChannelUpdate_get_cltv_expiry_delta(long _this_ptr);
	// void UnsignedChannelUpdate_set_cltv_expiry_delta(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_cltv_expiry_delta")] public static extern void UnsignedChannelUpdate_set_cltv_expiry_delta(long _this_ptr, short _val);
	// uint64_t UnsignedChannelUpdate_get_htlc_minimum_msat(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_htlc_minimum_msat")] public static extern long UnsignedChannelUpdate_get_htlc_minimum_msat(long _this_ptr);
	// void UnsignedChannelUpdate_set_htlc_minimum_msat(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_htlc_minimum_msat")] public static extern void UnsignedChannelUpdate_set_htlc_minimum_msat(long _this_ptr, long _val);
	// uint64_t UnsignedChannelUpdate_get_htlc_maximum_msat(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_htlc_maximum_msat")] public static extern long UnsignedChannelUpdate_get_htlc_maximum_msat(long _this_ptr);
	// void UnsignedChannelUpdate_set_htlc_maximum_msat(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_htlc_maximum_msat")] public static extern void UnsignedChannelUpdate_set_htlc_maximum_msat(long _this_ptr, long _val);
	// uint32_t UnsignedChannelUpdate_get_fee_base_msat(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_fee_base_msat")] public static extern int UnsignedChannelUpdate_get_fee_base_msat(long _this_ptr);
	// void UnsignedChannelUpdate_set_fee_base_msat(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_fee_base_msat")] public static extern void UnsignedChannelUpdate_set_fee_base_msat(long _this_ptr, int _val);
	// uint32_t UnsignedChannelUpdate_get_fee_proportional_millionths(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_fee_proportional_millionths")] public static extern int UnsignedChannelUpdate_get_fee_proportional_millionths(long _this_ptr);
	// void UnsignedChannelUpdate_set_fee_proportional_millionths(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_fee_proportional_millionths")] public static extern void UnsignedChannelUpdate_set_fee_proportional_millionths(long _this_ptr, int _val);
	// struct LDKCVec_u8Z UnsignedChannelUpdate_get_excess_data(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_excess_data")] public static extern byte[] UnsignedChannelUpdate_get_excess_data(long _this_ptr);
	// void UnsignedChannelUpdate_set_excess_data(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, struct LDKCVec_u8Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_excess_data")] public static extern void UnsignedChannelUpdate_set_excess_data(long _this_ptr, byte[] _val);
	// MUST_USE_RES struct LDKUnsignedChannelUpdate UnsignedChannelUpdate_new(struct LDKThirtyTwoBytes chain_hash_arg, uint64_t short_channel_id_arg, uint32_t timestamp_arg, uint8_t flags_arg, uint16_t cltv_expiry_delta_arg, uint64_t htlc_minimum_msat_arg, uint64_t htlc_maximum_msat_arg, uint32_t fee_base_msat_arg, uint32_t fee_proportional_millionths_arg, struct LDKCVec_u8Z excess_data_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_new")] public static extern long UnsignedChannelUpdate_new(byte[] _chain_hash_arg, long _short_channel_id_arg, int _timestamp_arg, byte _flags_arg, short _cltv_expiry_delta_arg, long _htlc_minimum_msat_arg, long _htlc_maximum_msat_arg, int _fee_base_msat_arg, int _fee_proportional_millionths_arg, byte[] _excess_data_arg);
	// uint64_t UnsignedChannelUpdate_clone_ptr(LDKUnsignedChannelUpdate *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_clone_ptr")] public static extern long UnsignedChannelUpdate_clone_ptr(long _arg);
	// struct LDKUnsignedChannelUpdate UnsignedChannelUpdate_clone(const struct LDKUnsignedChannelUpdate *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_clone")] public static extern long UnsignedChannelUpdate_clone(long _orig);
	// bool UnsignedChannelUpdate_eq(const struct LDKUnsignedChannelUpdate *NONNULL_PTR a, const struct LDKUnsignedChannelUpdate *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_eq")] public static extern bool UnsignedChannelUpdate_eq(long _a, long _b);
	// void ChannelUpdate_free(struct LDKChannelUpdate this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_free")] public static extern void ChannelUpdate_free(long _this_obj);
	// struct LDKSignature ChannelUpdate_get_signature(const struct LDKChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_get_signature")] public static extern byte[] ChannelUpdate_get_signature(long _this_ptr);
	// void ChannelUpdate_set_signature(struct LDKChannelUpdate *NONNULL_PTR this_ptr, struct LDKSignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_set_signature")] public static extern void ChannelUpdate_set_signature(long _this_ptr, byte[] _val);
	// struct LDKUnsignedChannelUpdate ChannelUpdate_get_contents(const struct LDKChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_get_contents")] public static extern long ChannelUpdate_get_contents(long _this_ptr);
	// void ChannelUpdate_set_contents(struct LDKChannelUpdate *NONNULL_PTR this_ptr, struct LDKUnsignedChannelUpdate val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_set_contents")] public static extern void ChannelUpdate_set_contents(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelUpdate ChannelUpdate_new(struct LDKSignature signature_arg, struct LDKUnsignedChannelUpdate contents_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_new")] public static extern long ChannelUpdate_new(byte[] _signature_arg, long _contents_arg);
	// uint64_t ChannelUpdate_clone_ptr(LDKChannelUpdate *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_clone_ptr")] public static extern long ChannelUpdate_clone_ptr(long _arg);
	// struct LDKChannelUpdate ChannelUpdate_clone(const struct LDKChannelUpdate *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_clone")] public static extern long ChannelUpdate_clone(long _orig);
	// bool ChannelUpdate_eq(const struct LDKChannelUpdate *NONNULL_PTR a, const struct LDKChannelUpdate *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_eq")] public static extern bool ChannelUpdate_eq(long _a, long _b);
	// void QueryChannelRange_free(struct LDKQueryChannelRange this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_free")] public static extern void QueryChannelRange_free(long _this_obj);
	// const uint8_t (*QueryChannelRange_get_chain_hash(const struct LDKQueryChannelRange *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_get_chain_hash")] public static extern byte[] QueryChannelRange_get_chain_hash(long _this_ptr);
	// void QueryChannelRange_set_chain_hash(struct LDKQueryChannelRange *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_set_chain_hash")] public static extern void QueryChannelRange_set_chain_hash(long _this_ptr, byte[] _val);
	// uint32_t QueryChannelRange_get_first_blocknum(const struct LDKQueryChannelRange *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_get_first_blocknum")] public static extern int QueryChannelRange_get_first_blocknum(long _this_ptr);
	// void QueryChannelRange_set_first_blocknum(struct LDKQueryChannelRange *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_set_first_blocknum")] public static extern void QueryChannelRange_set_first_blocknum(long _this_ptr, int _val);
	// uint32_t QueryChannelRange_get_number_of_blocks(const struct LDKQueryChannelRange *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_get_number_of_blocks")] public static extern int QueryChannelRange_get_number_of_blocks(long _this_ptr);
	// void QueryChannelRange_set_number_of_blocks(struct LDKQueryChannelRange *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_set_number_of_blocks")] public static extern void QueryChannelRange_set_number_of_blocks(long _this_ptr, int _val);
	// MUST_USE_RES struct LDKQueryChannelRange QueryChannelRange_new(struct LDKThirtyTwoBytes chain_hash_arg, uint32_t first_blocknum_arg, uint32_t number_of_blocks_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_new")] public static extern long QueryChannelRange_new(byte[] _chain_hash_arg, int _first_blocknum_arg, int _number_of_blocks_arg);
	// uint64_t QueryChannelRange_clone_ptr(LDKQueryChannelRange *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_clone_ptr")] public static extern long QueryChannelRange_clone_ptr(long _arg);
	// struct LDKQueryChannelRange QueryChannelRange_clone(const struct LDKQueryChannelRange *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_clone")] public static extern long QueryChannelRange_clone(long _orig);
	// bool QueryChannelRange_eq(const struct LDKQueryChannelRange *NONNULL_PTR a, const struct LDKQueryChannelRange *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_eq")] public static extern bool QueryChannelRange_eq(long _a, long _b);
	// void ReplyChannelRange_free(struct LDKReplyChannelRange this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_free")] public static extern void ReplyChannelRange_free(long _this_obj);
	// const uint8_t (*ReplyChannelRange_get_chain_hash(const struct LDKReplyChannelRange *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_get_chain_hash")] public static extern byte[] ReplyChannelRange_get_chain_hash(long _this_ptr);
	// void ReplyChannelRange_set_chain_hash(struct LDKReplyChannelRange *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_set_chain_hash")] public static extern void ReplyChannelRange_set_chain_hash(long _this_ptr, byte[] _val);
	// uint32_t ReplyChannelRange_get_first_blocknum(const struct LDKReplyChannelRange *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_get_first_blocknum")] public static extern int ReplyChannelRange_get_first_blocknum(long _this_ptr);
	// void ReplyChannelRange_set_first_blocknum(struct LDKReplyChannelRange *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_set_first_blocknum")] public static extern void ReplyChannelRange_set_first_blocknum(long _this_ptr, int _val);
	// uint32_t ReplyChannelRange_get_number_of_blocks(const struct LDKReplyChannelRange *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_get_number_of_blocks")] public static extern int ReplyChannelRange_get_number_of_blocks(long _this_ptr);
	// void ReplyChannelRange_set_number_of_blocks(struct LDKReplyChannelRange *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_set_number_of_blocks")] public static extern void ReplyChannelRange_set_number_of_blocks(long _this_ptr, int _val);
	// bool ReplyChannelRange_get_sync_complete(const struct LDKReplyChannelRange *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_get_sync_complete")] public static extern bool ReplyChannelRange_get_sync_complete(long _this_ptr);
	// void ReplyChannelRange_set_sync_complete(struct LDKReplyChannelRange *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_set_sync_complete")] public static extern void ReplyChannelRange_set_sync_complete(long _this_ptr, bool _val);
	// struct LDKCVec_u64Z ReplyChannelRange_get_short_channel_ids(const struct LDKReplyChannelRange *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_get_short_channel_ids")] public static extern long[] ReplyChannelRange_get_short_channel_ids(long _this_ptr);
	// void ReplyChannelRange_set_short_channel_ids(struct LDKReplyChannelRange *NONNULL_PTR this_ptr, struct LDKCVec_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_set_short_channel_ids")] public static extern void ReplyChannelRange_set_short_channel_ids(long _this_ptr, long[] _val);
	// MUST_USE_RES struct LDKReplyChannelRange ReplyChannelRange_new(struct LDKThirtyTwoBytes chain_hash_arg, uint32_t first_blocknum_arg, uint32_t number_of_blocks_arg, bool sync_complete_arg, struct LDKCVec_u64Z short_channel_ids_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_new")] public static extern long ReplyChannelRange_new(byte[] _chain_hash_arg, int _first_blocknum_arg, int _number_of_blocks_arg, bool _sync_complete_arg, long[] _short_channel_ids_arg);
	// uint64_t ReplyChannelRange_clone_ptr(LDKReplyChannelRange *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_clone_ptr")] public static extern long ReplyChannelRange_clone_ptr(long _arg);
	// struct LDKReplyChannelRange ReplyChannelRange_clone(const struct LDKReplyChannelRange *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_clone")] public static extern long ReplyChannelRange_clone(long _orig);
	// bool ReplyChannelRange_eq(const struct LDKReplyChannelRange *NONNULL_PTR a, const struct LDKReplyChannelRange *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_eq")] public static extern bool ReplyChannelRange_eq(long _a, long _b);
	// void QueryShortChannelIds_free(struct LDKQueryShortChannelIds this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_free")] public static extern void QueryShortChannelIds_free(long _this_obj);
	// const uint8_t (*QueryShortChannelIds_get_chain_hash(const struct LDKQueryShortChannelIds *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_get_chain_hash")] public static extern byte[] QueryShortChannelIds_get_chain_hash(long _this_ptr);
	// void QueryShortChannelIds_set_chain_hash(struct LDKQueryShortChannelIds *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_set_chain_hash")] public static extern void QueryShortChannelIds_set_chain_hash(long _this_ptr, byte[] _val);
	// struct LDKCVec_u64Z QueryShortChannelIds_get_short_channel_ids(const struct LDKQueryShortChannelIds *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_get_short_channel_ids")] public static extern long[] QueryShortChannelIds_get_short_channel_ids(long _this_ptr);
	// void QueryShortChannelIds_set_short_channel_ids(struct LDKQueryShortChannelIds *NONNULL_PTR this_ptr, struct LDKCVec_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_set_short_channel_ids")] public static extern void QueryShortChannelIds_set_short_channel_ids(long _this_ptr, long[] _val);
	// MUST_USE_RES struct LDKQueryShortChannelIds QueryShortChannelIds_new(struct LDKThirtyTwoBytes chain_hash_arg, struct LDKCVec_u64Z short_channel_ids_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_new")] public static extern long QueryShortChannelIds_new(byte[] _chain_hash_arg, long[] _short_channel_ids_arg);
	// uint64_t QueryShortChannelIds_clone_ptr(LDKQueryShortChannelIds *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_clone_ptr")] public static extern long QueryShortChannelIds_clone_ptr(long _arg);
	// struct LDKQueryShortChannelIds QueryShortChannelIds_clone(const struct LDKQueryShortChannelIds *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_clone")] public static extern long QueryShortChannelIds_clone(long _orig);
	// bool QueryShortChannelIds_eq(const struct LDKQueryShortChannelIds *NONNULL_PTR a, const struct LDKQueryShortChannelIds *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_eq")] public static extern bool QueryShortChannelIds_eq(long _a, long _b);
	// void ReplyShortChannelIdsEnd_free(struct LDKReplyShortChannelIdsEnd this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_free")] public static extern void ReplyShortChannelIdsEnd_free(long _this_obj);
	// const uint8_t (*ReplyShortChannelIdsEnd_get_chain_hash(const struct LDKReplyShortChannelIdsEnd *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_get_chain_hash")] public static extern byte[] ReplyShortChannelIdsEnd_get_chain_hash(long _this_ptr);
	// void ReplyShortChannelIdsEnd_set_chain_hash(struct LDKReplyShortChannelIdsEnd *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_set_chain_hash")] public static extern void ReplyShortChannelIdsEnd_set_chain_hash(long _this_ptr, byte[] _val);
	// bool ReplyShortChannelIdsEnd_get_full_information(const struct LDKReplyShortChannelIdsEnd *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_get_full_information")] public static extern bool ReplyShortChannelIdsEnd_get_full_information(long _this_ptr);
	// void ReplyShortChannelIdsEnd_set_full_information(struct LDKReplyShortChannelIdsEnd *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_set_full_information")] public static extern void ReplyShortChannelIdsEnd_set_full_information(long _this_ptr, bool _val);
	// MUST_USE_RES struct LDKReplyShortChannelIdsEnd ReplyShortChannelIdsEnd_new(struct LDKThirtyTwoBytes chain_hash_arg, bool full_information_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_new")] public static extern long ReplyShortChannelIdsEnd_new(byte[] _chain_hash_arg, bool _full_information_arg);
	// uint64_t ReplyShortChannelIdsEnd_clone_ptr(LDKReplyShortChannelIdsEnd *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_clone_ptr")] public static extern long ReplyShortChannelIdsEnd_clone_ptr(long _arg);
	// struct LDKReplyShortChannelIdsEnd ReplyShortChannelIdsEnd_clone(const struct LDKReplyShortChannelIdsEnd *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_clone")] public static extern long ReplyShortChannelIdsEnd_clone(long _orig);
	// bool ReplyShortChannelIdsEnd_eq(const struct LDKReplyShortChannelIdsEnd *NONNULL_PTR a, const struct LDKReplyShortChannelIdsEnd *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_eq")] public static extern bool ReplyShortChannelIdsEnd_eq(long _a, long _b);
	// void GossipTimestampFilter_free(struct LDKGossipTimestampFilter this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_free")] public static extern void GossipTimestampFilter_free(long _this_obj);
	// const uint8_t (*GossipTimestampFilter_get_chain_hash(const struct LDKGossipTimestampFilter *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_get_chain_hash")] public static extern byte[] GossipTimestampFilter_get_chain_hash(long _this_ptr);
	// void GossipTimestampFilter_set_chain_hash(struct LDKGossipTimestampFilter *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_set_chain_hash")] public static extern void GossipTimestampFilter_set_chain_hash(long _this_ptr, byte[] _val);
	// uint32_t GossipTimestampFilter_get_first_timestamp(const struct LDKGossipTimestampFilter *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_get_first_timestamp")] public static extern int GossipTimestampFilter_get_first_timestamp(long _this_ptr);
	// void GossipTimestampFilter_set_first_timestamp(struct LDKGossipTimestampFilter *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_set_first_timestamp")] public static extern void GossipTimestampFilter_set_first_timestamp(long _this_ptr, int _val);
	// uint32_t GossipTimestampFilter_get_timestamp_range(const struct LDKGossipTimestampFilter *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_get_timestamp_range")] public static extern int GossipTimestampFilter_get_timestamp_range(long _this_ptr);
	// void GossipTimestampFilter_set_timestamp_range(struct LDKGossipTimestampFilter *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_set_timestamp_range")] public static extern void GossipTimestampFilter_set_timestamp_range(long _this_ptr, int _val);
	// MUST_USE_RES struct LDKGossipTimestampFilter GossipTimestampFilter_new(struct LDKThirtyTwoBytes chain_hash_arg, uint32_t first_timestamp_arg, uint32_t timestamp_range_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_new")] public static extern long GossipTimestampFilter_new(byte[] _chain_hash_arg, int _first_timestamp_arg, int _timestamp_range_arg);
	// uint64_t GossipTimestampFilter_clone_ptr(LDKGossipTimestampFilter *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_clone_ptr")] public static extern long GossipTimestampFilter_clone_ptr(long _arg);
	// struct LDKGossipTimestampFilter GossipTimestampFilter_clone(const struct LDKGossipTimestampFilter *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_clone")] public static extern long GossipTimestampFilter_clone(long _orig);
	// bool GossipTimestampFilter_eq(const struct LDKGossipTimestampFilter *NONNULL_PTR a, const struct LDKGossipTimestampFilter *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_eq")] public static extern bool GossipTimestampFilter_eq(long _a, long _b);
	// void ErrorAction_free(struct LDKErrorAction this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_free")] public static extern void ErrorAction_free(long _this_ptr);
	// uint64_t ErrorAction_clone_ptr(LDKErrorAction *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_clone_ptr")] public static extern long ErrorAction_clone_ptr(long _arg);
	// struct LDKErrorAction ErrorAction_clone(const struct LDKErrorAction *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_clone")] public static extern long ErrorAction_clone(long _orig);
	// struct LDKErrorAction ErrorAction_disconnect_peer(struct LDKErrorMessage msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_disconnect_peer")] public static extern long ErrorAction_disconnect_peer(long _msg);
	// struct LDKErrorAction ErrorAction_ignore_error(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_ignore_error")] public static extern long ErrorAction_ignore_error();
	// struct LDKErrorAction ErrorAction_ignore_and_log(enum LDKLevel a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_ignore_and_log")] public static extern long ErrorAction_ignore_and_log(Level _a);
	// struct LDKErrorAction ErrorAction_ignore_duplicate_gossip(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_ignore_duplicate_gossip")] public static extern long ErrorAction_ignore_duplicate_gossip();
	// struct LDKErrorAction ErrorAction_send_error_message(struct LDKErrorMessage msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_send_error_message")] public static extern long ErrorAction_send_error_message(long _msg);
	// struct LDKErrorAction ErrorAction_send_warning_message(struct LDKWarningMessage msg, enum LDKLevel log_level);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_send_warning_message")] public static extern long ErrorAction_send_warning_message(long _msg, Level _log_level);
	// void LightningError_free(struct LDKLightningError this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LightningError_free")] public static extern void LightningError_free(long _this_obj);
	// struct LDKStr LightningError_get_err(const struct LDKLightningError *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LightningError_get_err")] public static extern string LightningError_get_err(long _this_ptr);
	// void LightningError_set_err(struct LDKLightningError *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LightningError_set_err")] public static extern void LightningError_set_err(long _this_ptr, string _val);
	// struct LDKErrorAction LightningError_get_action(const struct LDKLightningError *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LightningError_get_action")] public static extern long LightningError_get_action(long _this_ptr);
	// void LightningError_set_action(struct LDKLightningError *NONNULL_PTR this_ptr, struct LDKErrorAction val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LightningError_set_action")] public static extern void LightningError_set_action(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKLightningError LightningError_new(struct LDKStr err_arg, struct LDKErrorAction action_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LightningError_new")] public static extern long LightningError_new(string _err_arg, long _action_arg);
	// uint64_t LightningError_clone_ptr(LDKLightningError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LightningError_clone_ptr")] public static extern long LightningError_clone_ptr(long _arg);
	// struct LDKLightningError LightningError_clone(const struct LDKLightningError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LightningError_clone")] public static extern long LightningError_clone(long _orig);
	// void CommitmentUpdate_free(struct LDKCommitmentUpdate this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_free")] public static extern void CommitmentUpdate_free(long _this_obj);
	// struct LDKCVec_UpdateAddHTLCZ CommitmentUpdate_get_update_add_htlcs(const struct LDKCommitmentUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_get_update_add_htlcs")] public static extern long[] CommitmentUpdate_get_update_add_htlcs(long _this_ptr);
	// void CommitmentUpdate_set_update_add_htlcs(struct LDKCommitmentUpdate *NONNULL_PTR this_ptr, struct LDKCVec_UpdateAddHTLCZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_set_update_add_htlcs")] public static extern void CommitmentUpdate_set_update_add_htlcs(long _this_ptr, long[] _val);
	// struct LDKCVec_UpdateFulfillHTLCZ CommitmentUpdate_get_update_fulfill_htlcs(const struct LDKCommitmentUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_get_update_fulfill_htlcs")] public static extern long[] CommitmentUpdate_get_update_fulfill_htlcs(long _this_ptr);
	// void CommitmentUpdate_set_update_fulfill_htlcs(struct LDKCommitmentUpdate *NONNULL_PTR this_ptr, struct LDKCVec_UpdateFulfillHTLCZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_set_update_fulfill_htlcs")] public static extern void CommitmentUpdate_set_update_fulfill_htlcs(long _this_ptr, long[] _val);
	// struct LDKCVec_UpdateFailHTLCZ CommitmentUpdate_get_update_fail_htlcs(const struct LDKCommitmentUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_get_update_fail_htlcs")] public static extern long[] CommitmentUpdate_get_update_fail_htlcs(long _this_ptr);
	// void CommitmentUpdate_set_update_fail_htlcs(struct LDKCommitmentUpdate *NONNULL_PTR this_ptr, struct LDKCVec_UpdateFailHTLCZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_set_update_fail_htlcs")] public static extern void CommitmentUpdate_set_update_fail_htlcs(long _this_ptr, long[] _val);
	// struct LDKCVec_UpdateFailMalformedHTLCZ CommitmentUpdate_get_update_fail_malformed_htlcs(const struct LDKCommitmentUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_get_update_fail_malformed_htlcs")] public static extern long[] CommitmentUpdate_get_update_fail_malformed_htlcs(long _this_ptr);
	// void CommitmentUpdate_set_update_fail_malformed_htlcs(struct LDKCommitmentUpdate *NONNULL_PTR this_ptr, struct LDKCVec_UpdateFailMalformedHTLCZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_set_update_fail_malformed_htlcs")] public static extern void CommitmentUpdate_set_update_fail_malformed_htlcs(long _this_ptr, long[] _val);
	// struct LDKUpdateFee CommitmentUpdate_get_update_fee(const struct LDKCommitmentUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_get_update_fee")] public static extern long CommitmentUpdate_get_update_fee(long _this_ptr);
	// void CommitmentUpdate_set_update_fee(struct LDKCommitmentUpdate *NONNULL_PTR this_ptr, struct LDKUpdateFee val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_set_update_fee")] public static extern void CommitmentUpdate_set_update_fee(long _this_ptr, long _val);
	// struct LDKCommitmentSigned CommitmentUpdate_get_commitment_signed(const struct LDKCommitmentUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_get_commitment_signed")] public static extern long CommitmentUpdate_get_commitment_signed(long _this_ptr);
	// void CommitmentUpdate_set_commitment_signed(struct LDKCommitmentUpdate *NONNULL_PTR this_ptr, struct LDKCommitmentSigned val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_set_commitment_signed")] public static extern void CommitmentUpdate_set_commitment_signed(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKCommitmentUpdate CommitmentUpdate_new(struct LDKCVec_UpdateAddHTLCZ update_add_htlcs_arg, struct LDKCVec_UpdateFulfillHTLCZ update_fulfill_htlcs_arg, struct LDKCVec_UpdateFailHTLCZ update_fail_htlcs_arg, struct LDKCVec_UpdateFailMalformedHTLCZ update_fail_malformed_htlcs_arg, struct LDKUpdateFee update_fee_arg, struct LDKCommitmentSigned commitment_signed_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_new")] public static extern long CommitmentUpdate_new(long[] _update_add_htlcs_arg, long[] _update_fulfill_htlcs_arg, long[] _update_fail_htlcs_arg, long[] _update_fail_malformed_htlcs_arg, long _update_fee_arg, long _commitment_signed_arg);
	// uint64_t CommitmentUpdate_clone_ptr(LDKCommitmentUpdate *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_clone_ptr")] public static extern long CommitmentUpdate_clone_ptr(long _arg);
	// struct LDKCommitmentUpdate CommitmentUpdate_clone(const struct LDKCommitmentUpdate *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_clone")] public static extern long CommitmentUpdate_clone(long _orig);
	// bool CommitmentUpdate_eq(const struct LDKCommitmentUpdate *NONNULL_PTR a, const struct LDKCommitmentUpdate *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_eq")] public static extern bool CommitmentUpdate_eq(long _a, long _b);
	// void ChannelMessageHandler_free(struct LDKChannelMessageHandler this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_free")] public static extern void ChannelMessageHandler_free(long _this_ptr);
	// void RoutingMessageHandler_free(struct LDKRoutingMessageHandler this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_free")] public static extern void RoutingMessageHandler_free(long _this_ptr);
	// void OnionMessageHandler_free(struct LDKOnionMessageHandler this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageHandler_free")] public static extern void OnionMessageHandler_free(long _this_ptr);
	// struct LDKCVec_u8Z AcceptChannel_write(const struct LDKAcceptChannel *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_write")] public static extern byte[] AcceptChannel_write(long _obj);
	// struct LDKCResult_AcceptChannelDecodeErrorZ AcceptChannel_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_read")] public static extern long AcceptChannel_read(byte[] _ser);
	// struct LDKCVec_u8Z AnnouncementSignatures_write(const struct LDKAnnouncementSignatures *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_write")] public static extern byte[] AnnouncementSignatures_write(long _obj);
	// struct LDKCResult_AnnouncementSignaturesDecodeErrorZ AnnouncementSignatures_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_read")] public static extern long AnnouncementSignatures_read(byte[] _ser);
	// struct LDKCVec_u8Z ChannelReestablish_write(const struct LDKChannelReestablish *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_write")] public static extern byte[] ChannelReestablish_write(long _obj);
	// struct LDKCResult_ChannelReestablishDecodeErrorZ ChannelReestablish_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_read")] public static extern long ChannelReestablish_read(byte[] _ser);
	// struct LDKCVec_u8Z ClosingSigned_write(const struct LDKClosingSigned *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_write")] public static extern byte[] ClosingSigned_write(long _obj);
	// struct LDKCResult_ClosingSignedDecodeErrorZ ClosingSigned_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_read")] public static extern long ClosingSigned_read(byte[] _ser);
	// struct LDKCVec_u8Z ClosingSignedFeeRange_write(const struct LDKClosingSignedFeeRange *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_write")] public static extern byte[] ClosingSignedFeeRange_write(long _obj);
	// struct LDKCResult_ClosingSignedFeeRangeDecodeErrorZ ClosingSignedFeeRange_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_read")] public static extern long ClosingSignedFeeRange_read(byte[] _ser);
	// struct LDKCVec_u8Z CommitmentSigned_write(const struct LDKCommitmentSigned *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_write")] public static extern byte[] CommitmentSigned_write(long _obj);
	// struct LDKCResult_CommitmentSignedDecodeErrorZ CommitmentSigned_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_read")] public static extern long CommitmentSigned_read(byte[] _ser);
	// struct LDKCVec_u8Z FundingCreated_write(const struct LDKFundingCreated *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_write")] public static extern byte[] FundingCreated_write(long _obj);
	// struct LDKCResult_FundingCreatedDecodeErrorZ FundingCreated_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_read")] public static extern long FundingCreated_read(byte[] _ser);
	// struct LDKCVec_u8Z FundingSigned_write(const struct LDKFundingSigned *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_write")] public static extern byte[] FundingSigned_write(long _obj);
	// struct LDKCResult_FundingSignedDecodeErrorZ FundingSigned_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_read")] public static extern long FundingSigned_read(byte[] _ser);
	// struct LDKCVec_u8Z ChannelReady_write(const struct LDKChannelReady *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_write")] public static extern byte[] ChannelReady_write(long _obj);
	// struct LDKCResult_ChannelReadyDecodeErrorZ ChannelReady_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_read")] public static extern long ChannelReady_read(byte[] _ser);
	// struct LDKCVec_u8Z Init_write(const struct LDKInit *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_write")] public static extern byte[] Init_write(long _obj);
	// struct LDKCResult_InitDecodeErrorZ Init_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_read")] public static extern long Init_read(byte[] _ser);
	// struct LDKCVec_u8Z OpenChannel_write(const struct LDKOpenChannel *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_write")] public static extern byte[] OpenChannel_write(long _obj);
	// struct LDKCResult_OpenChannelDecodeErrorZ OpenChannel_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_read")] public static extern long OpenChannel_read(byte[] _ser);
	// struct LDKCVec_u8Z RevokeAndACK_write(const struct LDKRevokeAndACK *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_write")] public static extern byte[] RevokeAndACK_write(long _obj);
	// struct LDKCResult_RevokeAndACKDecodeErrorZ RevokeAndACK_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_read")] public static extern long RevokeAndACK_read(byte[] _ser);
	// struct LDKCVec_u8Z Shutdown_write(const struct LDKShutdown *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_write")] public static extern byte[] Shutdown_write(long _obj);
	// struct LDKCResult_ShutdownDecodeErrorZ Shutdown_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_read")] public static extern long Shutdown_read(byte[] _ser);
	// struct LDKCVec_u8Z UpdateFailHTLC_write(const struct LDKUpdateFailHTLC *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_write")] public static extern byte[] UpdateFailHTLC_write(long _obj);
	// struct LDKCResult_UpdateFailHTLCDecodeErrorZ UpdateFailHTLC_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_read")] public static extern long UpdateFailHTLC_read(byte[] _ser);
	// struct LDKCVec_u8Z UpdateFailMalformedHTLC_write(const struct LDKUpdateFailMalformedHTLC *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_write")] public static extern byte[] UpdateFailMalformedHTLC_write(long _obj);
	// struct LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ UpdateFailMalformedHTLC_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_read")] public static extern long UpdateFailMalformedHTLC_read(byte[] _ser);
	// struct LDKCVec_u8Z UpdateFee_write(const struct LDKUpdateFee *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_write")] public static extern byte[] UpdateFee_write(long _obj);
	// struct LDKCResult_UpdateFeeDecodeErrorZ UpdateFee_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_read")] public static extern long UpdateFee_read(byte[] _ser);
	// struct LDKCVec_u8Z UpdateFulfillHTLC_write(const struct LDKUpdateFulfillHTLC *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_write")] public static extern byte[] UpdateFulfillHTLC_write(long _obj);
	// struct LDKCResult_UpdateFulfillHTLCDecodeErrorZ UpdateFulfillHTLC_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_read")] public static extern long UpdateFulfillHTLC_read(byte[] _ser);
	// struct LDKCVec_u8Z UpdateAddHTLC_write(const struct LDKUpdateAddHTLC *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_write")] public static extern byte[] UpdateAddHTLC_write(long _obj);
	// struct LDKCResult_UpdateAddHTLCDecodeErrorZ UpdateAddHTLC_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_read")] public static extern long UpdateAddHTLC_read(byte[] _ser);
	// struct LDKCResult_OnionMessageDecodeErrorZ OnionMessage_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_read")] public static extern long OnionMessage_read(byte[] _ser);
	// struct LDKCVec_u8Z OnionMessage_write(const struct LDKOnionMessage *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_write")] public static extern byte[] OnionMessage_write(long _obj);
	// struct LDKCVec_u8Z Ping_write(const struct LDKPing *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_write")] public static extern byte[] Ping_write(long _obj);
	// struct LDKCResult_PingDecodeErrorZ Ping_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_read")] public static extern long Ping_read(byte[] _ser);
	// struct LDKCVec_u8Z Pong_write(const struct LDKPong *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_write")] public static extern byte[] Pong_write(long _obj);
	// struct LDKCResult_PongDecodeErrorZ Pong_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_read")] public static extern long Pong_read(byte[] _ser);
	// struct LDKCVec_u8Z UnsignedChannelAnnouncement_write(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_write")] public static extern byte[] UnsignedChannelAnnouncement_write(long _obj);
	// struct LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ UnsignedChannelAnnouncement_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_read")] public static extern long UnsignedChannelAnnouncement_read(byte[] _ser);
	// struct LDKCVec_u8Z ChannelAnnouncement_write(const struct LDKChannelAnnouncement *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_write")] public static extern byte[] ChannelAnnouncement_write(long _obj);
	// struct LDKCResult_ChannelAnnouncementDecodeErrorZ ChannelAnnouncement_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_read")] public static extern long ChannelAnnouncement_read(byte[] _ser);
	// struct LDKCVec_u8Z UnsignedChannelUpdate_write(const struct LDKUnsignedChannelUpdate *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_write")] public static extern byte[] UnsignedChannelUpdate_write(long _obj);
	// struct LDKCResult_UnsignedChannelUpdateDecodeErrorZ UnsignedChannelUpdate_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_read")] public static extern long UnsignedChannelUpdate_read(byte[] _ser);
	// struct LDKCVec_u8Z ChannelUpdate_write(const struct LDKChannelUpdate *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_write")] public static extern byte[] ChannelUpdate_write(long _obj);
	// struct LDKCResult_ChannelUpdateDecodeErrorZ ChannelUpdate_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_read")] public static extern long ChannelUpdate_read(byte[] _ser);
	// struct LDKCVec_u8Z ErrorMessage_write(const struct LDKErrorMessage *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_write")] public static extern byte[] ErrorMessage_write(long _obj);
	// struct LDKCResult_ErrorMessageDecodeErrorZ ErrorMessage_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_read")] public static extern long ErrorMessage_read(byte[] _ser);
	// struct LDKCVec_u8Z WarningMessage_write(const struct LDKWarningMessage *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_write")] public static extern byte[] WarningMessage_write(long _obj);
	// struct LDKCResult_WarningMessageDecodeErrorZ WarningMessage_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_read")] public static extern long WarningMessage_read(byte[] _ser);
	// struct LDKCVec_u8Z UnsignedNodeAnnouncement_write(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_write")] public static extern byte[] UnsignedNodeAnnouncement_write(long _obj);
	// struct LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ UnsignedNodeAnnouncement_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_read")] public static extern long UnsignedNodeAnnouncement_read(byte[] _ser);
	// struct LDKCVec_u8Z NodeAnnouncement_write(const struct LDKNodeAnnouncement *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_write")] public static extern byte[] NodeAnnouncement_write(long _obj);
	// struct LDKCResult_NodeAnnouncementDecodeErrorZ NodeAnnouncement_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_read")] public static extern long NodeAnnouncement_read(byte[] _ser);
	// struct LDKCResult_QueryShortChannelIdsDecodeErrorZ QueryShortChannelIds_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_read")] public static extern long QueryShortChannelIds_read(byte[] _ser);
	// struct LDKCVec_u8Z QueryShortChannelIds_write(const struct LDKQueryShortChannelIds *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_write")] public static extern byte[] QueryShortChannelIds_write(long _obj);
	// struct LDKCVec_u8Z ReplyShortChannelIdsEnd_write(const struct LDKReplyShortChannelIdsEnd *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_write")] public static extern byte[] ReplyShortChannelIdsEnd_write(long _obj);
	// struct LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ ReplyShortChannelIdsEnd_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_read")] public static extern long ReplyShortChannelIdsEnd_read(byte[] _ser);
	// MUST_USE_RES uint32_t QueryChannelRange_end_blocknum(const struct LDKQueryChannelRange *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_end_blocknum")] public static extern int QueryChannelRange_end_blocknum(long _this_arg);
	// struct LDKCVec_u8Z QueryChannelRange_write(const struct LDKQueryChannelRange *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_write")] public static extern byte[] QueryChannelRange_write(long _obj);
	// struct LDKCResult_QueryChannelRangeDecodeErrorZ QueryChannelRange_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_read")] public static extern long QueryChannelRange_read(byte[] _ser);
	// struct LDKCResult_ReplyChannelRangeDecodeErrorZ ReplyChannelRange_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_read")] public static extern long ReplyChannelRange_read(byte[] _ser);
	// struct LDKCVec_u8Z ReplyChannelRange_write(const struct LDKReplyChannelRange *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_write")] public static extern byte[] ReplyChannelRange_write(long _obj);
	// struct LDKCVec_u8Z GossipTimestampFilter_write(const struct LDKGossipTimestampFilter *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_write")] public static extern byte[] GossipTimestampFilter_write(long _obj);
	// struct LDKCResult_GossipTimestampFilterDecodeErrorZ GossipTimestampFilter_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_read")] public static extern long GossipTimestampFilter_read(byte[] _ser);
	// void CustomMessageHandler_free(struct LDKCustomMessageHandler this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomMessageHandler_free")] public static extern void CustomMessageHandler_free(long _this_ptr);
	// void IgnoringMessageHandler_free(struct LDKIgnoringMessageHandler this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_free")] public static extern void IgnoringMessageHandler_free(long _this_obj);
	// MUST_USE_RES struct LDKIgnoringMessageHandler IgnoringMessageHandler_new(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_new")] public static extern long IgnoringMessageHandler_new();
	// struct LDKMessageSendEventsProvider IgnoringMessageHandler_as_MessageSendEventsProvider(const struct LDKIgnoringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_as_MessageSendEventsProvider")] public static extern long IgnoringMessageHandler_as_MessageSendEventsProvider(long _this_arg);
	// struct LDKRoutingMessageHandler IgnoringMessageHandler_as_RoutingMessageHandler(const struct LDKIgnoringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_as_RoutingMessageHandler")] public static extern long IgnoringMessageHandler_as_RoutingMessageHandler(long _this_arg);
	// struct LDKOnionMessageProvider IgnoringMessageHandler_as_OnionMessageProvider(const struct LDKIgnoringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_as_OnionMessageProvider")] public static extern long IgnoringMessageHandler_as_OnionMessageProvider(long _this_arg);
	// struct LDKOnionMessageHandler IgnoringMessageHandler_as_OnionMessageHandler(const struct LDKIgnoringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_as_OnionMessageHandler")] public static extern long IgnoringMessageHandler_as_OnionMessageHandler(long _this_arg);
	// struct LDKCustomOnionMessageHandler IgnoringMessageHandler_as_CustomOnionMessageHandler(const struct LDKIgnoringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_as_CustomOnionMessageHandler")] public static extern long IgnoringMessageHandler_as_CustomOnionMessageHandler(long _this_arg);
	// struct LDKCustomMessageReader IgnoringMessageHandler_as_CustomMessageReader(const struct LDKIgnoringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_as_CustomMessageReader")] public static extern long IgnoringMessageHandler_as_CustomMessageReader(long _this_arg);
	// struct LDKCustomMessageHandler IgnoringMessageHandler_as_CustomMessageHandler(const struct LDKIgnoringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_as_CustomMessageHandler")] public static extern long IgnoringMessageHandler_as_CustomMessageHandler(long _this_arg);
	// void ErroringMessageHandler_free(struct LDKErroringMessageHandler this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErroringMessageHandler_free")] public static extern void ErroringMessageHandler_free(long _this_obj);
	// MUST_USE_RES struct LDKErroringMessageHandler ErroringMessageHandler_new(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErroringMessageHandler_new")] public static extern long ErroringMessageHandler_new();
	// struct LDKMessageSendEventsProvider ErroringMessageHandler_as_MessageSendEventsProvider(const struct LDKErroringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErroringMessageHandler_as_MessageSendEventsProvider")] public static extern long ErroringMessageHandler_as_MessageSendEventsProvider(long _this_arg);
	// struct LDKChannelMessageHandler ErroringMessageHandler_as_ChannelMessageHandler(const struct LDKErroringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErroringMessageHandler_as_ChannelMessageHandler")] public static extern long ErroringMessageHandler_as_ChannelMessageHandler(long _this_arg);
	// void MessageHandler_free(struct LDKMessageHandler this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageHandler_free")] public static extern void MessageHandler_free(long _this_obj);
	// const struct LDKChannelMessageHandler *MessageHandler_get_chan_handler(const struct LDKMessageHandler *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageHandler_get_chan_handler")] public static extern long MessageHandler_get_chan_handler(long _this_ptr);
	// void MessageHandler_set_chan_handler(struct LDKMessageHandler *NONNULL_PTR this_ptr, struct LDKChannelMessageHandler val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageHandler_set_chan_handler")] public static extern void MessageHandler_set_chan_handler(long _this_ptr, long _val);
	// const struct LDKRoutingMessageHandler *MessageHandler_get_route_handler(const struct LDKMessageHandler *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageHandler_get_route_handler")] public static extern long MessageHandler_get_route_handler(long _this_ptr);
	// void MessageHandler_set_route_handler(struct LDKMessageHandler *NONNULL_PTR this_ptr, struct LDKRoutingMessageHandler val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageHandler_set_route_handler")] public static extern void MessageHandler_set_route_handler(long _this_ptr, long _val);
	// const struct LDKOnionMessageHandler *MessageHandler_get_onion_message_handler(const struct LDKMessageHandler *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageHandler_get_onion_message_handler")] public static extern long MessageHandler_get_onion_message_handler(long _this_ptr);
	// void MessageHandler_set_onion_message_handler(struct LDKMessageHandler *NONNULL_PTR this_ptr, struct LDKOnionMessageHandler val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageHandler_set_onion_message_handler")] public static extern void MessageHandler_set_onion_message_handler(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKMessageHandler MessageHandler_new(struct LDKChannelMessageHandler chan_handler_arg, struct LDKRoutingMessageHandler route_handler_arg, struct LDKOnionMessageHandler onion_message_handler_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageHandler_new")] public static extern long MessageHandler_new(long _chan_handler_arg, long _route_handler_arg, long _onion_message_handler_arg);
	// uint64_t SocketDescriptor_clone_ptr(LDKSocketDescriptor *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketDescriptor_clone_ptr")] public static extern long SocketDescriptor_clone_ptr(long _arg);
	// struct LDKSocketDescriptor SocketDescriptor_clone(const struct LDKSocketDescriptor *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketDescriptor_clone")] public static extern long SocketDescriptor_clone(long _orig);
	// void SocketDescriptor_free(struct LDKSocketDescriptor this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketDescriptor_free")] public static extern void SocketDescriptor_free(long _this_ptr);
	// void PeerHandleError_free(struct LDKPeerHandleError this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerHandleError_free")] public static extern void PeerHandleError_free(long _this_obj);
	// bool PeerHandleError_get_no_connection_possible(const struct LDKPeerHandleError *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerHandleError_get_no_connection_possible")] public static extern bool PeerHandleError_get_no_connection_possible(long _this_ptr);
	// void PeerHandleError_set_no_connection_possible(struct LDKPeerHandleError *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerHandleError_set_no_connection_possible")] public static extern void PeerHandleError_set_no_connection_possible(long _this_ptr, bool _val);
	// MUST_USE_RES struct LDKPeerHandleError PeerHandleError_new(bool no_connection_possible_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerHandleError_new")] public static extern long PeerHandleError_new(bool _no_connection_possible_arg);
	// uint64_t PeerHandleError_clone_ptr(LDKPeerHandleError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerHandleError_clone_ptr")] public static extern long PeerHandleError_clone_ptr(long _arg);
	// struct LDKPeerHandleError PeerHandleError_clone(const struct LDKPeerHandleError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerHandleError_clone")] public static extern long PeerHandleError_clone(long _orig);
	// void PeerManager_free(struct LDKPeerManager this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_free")] public static extern void PeerManager_free(long _this_obj);
	// MUST_USE_RES struct LDKPeerManager PeerManager_new(struct LDKMessageHandler message_handler, struct LDKSecretKey our_node_secret, uint32_t current_time, const uint8_t (*ephemeral_random_data)[32], struct LDKLogger logger, struct LDKCustomMessageHandler custom_message_handler);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_new")] public static extern long PeerManager_new(long _message_handler, byte[] _our_node_secret, int _current_time, byte[] _ephemeral_random_data, long _logger, long _custom_message_handler);
	// MUST_USE_RES struct LDKCVec_PublicKeyZ PeerManager_get_peer_node_ids(const struct LDKPeerManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_get_peer_node_ids")] public static extern byte[][] PeerManager_get_peer_node_ids(long _this_arg);
	// MUST_USE_RES struct LDKCResult_CVec_u8ZPeerHandleErrorZ PeerManager_new_outbound_connection(const struct LDKPeerManager *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, struct LDKSocketDescriptor descriptor, struct LDKCOption_NetAddressZ remote_network_address);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_new_outbound_connection")] public static extern long PeerManager_new_outbound_connection(long _this_arg, byte[] _their_node_id, long _descriptor, long _remote_network_address);
	// MUST_USE_RES struct LDKCResult_NonePeerHandleErrorZ PeerManager_new_inbound_connection(const struct LDKPeerManager *NONNULL_PTR this_arg, struct LDKSocketDescriptor descriptor, struct LDKCOption_NetAddressZ remote_network_address);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_new_inbound_connection")] public static extern long PeerManager_new_inbound_connection(long _this_arg, long _descriptor, long _remote_network_address);
	// MUST_USE_RES struct LDKCResult_NonePeerHandleErrorZ PeerManager_write_buffer_space_avail(const struct LDKPeerManager *NONNULL_PTR this_arg, struct LDKSocketDescriptor *NONNULL_PTR descriptor);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_write_buffer_space_avail")] public static extern long PeerManager_write_buffer_space_avail(long _this_arg, long _descriptor);
	// MUST_USE_RES struct LDKCResult_boolPeerHandleErrorZ PeerManager_read_event(const struct LDKPeerManager *NONNULL_PTR this_arg, struct LDKSocketDescriptor *NONNULL_PTR peer_descriptor, struct LDKu8slice data);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_read_event")] public static extern long PeerManager_read_event(long _this_arg, long _peer_descriptor, byte[] _data);
	// void PeerManager_process_events(const struct LDKPeerManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_process_events")] public static extern void PeerManager_process_events(long _this_arg);
	// void PeerManager_socket_disconnected(const struct LDKPeerManager *NONNULL_PTR this_arg, const struct LDKSocketDescriptor *NONNULL_PTR descriptor);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_socket_disconnected")] public static extern void PeerManager_socket_disconnected(long _this_arg, long _descriptor);
	// void PeerManager_disconnect_by_node_id(const struct LDKPeerManager *NONNULL_PTR this_arg, struct LDKPublicKey node_id, bool no_connection_possible);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_disconnect_by_node_id")] public static extern void PeerManager_disconnect_by_node_id(long _this_arg, byte[] _node_id, bool _no_connection_possible);
	// void PeerManager_disconnect_all_peers(const struct LDKPeerManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_disconnect_all_peers")] public static extern void PeerManager_disconnect_all_peers(long _this_arg);
	// void PeerManager_timer_tick_occurred(const struct LDKPeerManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_timer_tick_occurred")] public static extern void PeerManager_timer_tick_occurred(long _this_arg);
	// void PeerManager_broadcast_node_announcement(const struct LDKPeerManager *NONNULL_PTR this_arg, struct LDKThreeBytes rgb, struct LDKThirtyTwoBytes alias, struct LDKCVec_NetAddressZ addresses);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_broadcast_node_announcement")] public static extern void PeerManager_broadcast_node_announcement(long _this_arg, byte[] _rgb, byte[] _alias, long[] _addresses);
	// uint64_t htlc_success_tx_weight(bool opt_anchors);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_htlc_success_tx_weight")] public static extern long htlc_success_tx_weight(bool _opt_anchors);
	// uint64_t htlc_timeout_tx_weight(bool opt_anchors);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_htlc_timeout_tx_weight")] public static extern long htlc_timeout_tx_weight(bool _opt_anchors);
	// enum LDKHTLCClaim HTLCClaim_clone(const enum LDKHTLCClaim *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCClaim_clone")] public static extern HTLCClaim HTLCClaim_clone(long _orig);
	// enum LDKHTLCClaim HTLCClaim_offered_timeout(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCClaim_offered_timeout")] public static extern HTLCClaim HTLCClaim_offered_timeout();
	// enum LDKHTLCClaim HTLCClaim_offered_preimage(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCClaim_offered_preimage")] public static extern HTLCClaim HTLCClaim_offered_preimage();
	// enum LDKHTLCClaim HTLCClaim_accepted_timeout(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCClaim_accepted_timeout")] public static extern HTLCClaim HTLCClaim_accepted_timeout();
	// enum LDKHTLCClaim HTLCClaim_accepted_preimage(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCClaim_accepted_preimage")] public static extern HTLCClaim HTLCClaim_accepted_preimage();
	// enum LDKHTLCClaim HTLCClaim_revocation(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCClaim_revocation")] public static extern HTLCClaim HTLCClaim_revocation();
	// bool HTLCClaim_eq(const enum LDKHTLCClaim *NONNULL_PTR a, const enum LDKHTLCClaim *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCClaim_eq")] public static extern bool HTLCClaim_eq(long _a, long _b);
	// MUST_USE_RES struct LDKCOption_HTLCClaimZ HTLCClaim_from_witness(struct LDKWitness witness);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCClaim_from_witness")] public static extern long HTLCClaim_from_witness(byte[] _witness);
	// struct LDKThirtyTwoBytes build_commitment_secret(const uint8_t (*commitment_seed)[32], uint64_t idx);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_build_commitment_secret")] public static extern byte[] build_commitment_secret(byte[] _commitment_seed, long _idx);
	// struct LDKTransaction build_closing_transaction(uint64_t to_holder_value_sat, uint64_t to_counterparty_value_sat, struct LDKCVec_u8Z to_holder_script, struct LDKCVec_u8Z to_counterparty_script, struct LDKOutPoint funding_outpoint);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_build_closing_transaction")] public static extern byte[] build_closing_transaction(long _to_holder_value_sat, long _to_counterparty_value_sat, byte[] _to_holder_script, byte[] _to_counterparty_script, long _funding_outpoint);
	// void CounterpartyCommitmentSecrets_free(struct LDKCounterpartyCommitmentSecrets this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyCommitmentSecrets_free")] public static extern void CounterpartyCommitmentSecrets_free(long _this_obj);
	// uint64_t CounterpartyCommitmentSecrets_clone_ptr(LDKCounterpartyCommitmentSecrets *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyCommitmentSecrets_clone_ptr")] public static extern long CounterpartyCommitmentSecrets_clone_ptr(long _arg);
	// struct LDKCounterpartyCommitmentSecrets CounterpartyCommitmentSecrets_clone(const struct LDKCounterpartyCommitmentSecrets *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyCommitmentSecrets_clone")] public static extern long CounterpartyCommitmentSecrets_clone(long _orig);
	// MUST_USE_RES struct LDKCounterpartyCommitmentSecrets CounterpartyCommitmentSecrets_new(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyCommitmentSecrets_new")] public static extern long CounterpartyCommitmentSecrets_new();
	// MUST_USE_RES uint64_t CounterpartyCommitmentSecrets_get_min_seen_secret(const struct LDKCounterpartyCommitmentSecrets *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyCommitmentSecrets_get_min_seen_secret")] public static extern long CounterpartyCommitmentSecrets_get_min_seen_secret(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ CounterpartyCommitmentSecrets_provide_secret(struct LDKCounterpartyCommitmentSecrets *NONNULL_PTR this_arg, uint64_t idx, struct LDKThirtyTwoBytes secret);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyCommitmentSecrets_provide_secret")] public static extern long CounterpartyCommitmentSecrets_provide_secret(long _this_arg, long _idx, byte[] _secret);
	// MUST_USE_RES struct LDKThirtyTwoBytes CounterpartyCommitmentSecrets_get_secret(const struct LDKCounterpartyCommitmentSecrets *NONNULL_PTR this_arg, uint64_t idx);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyCommitmentSecrets_get_secret")] public static extern byte[] CounterpartyCommitmentSecrets_get_secret(long _this_arg, long _idx);
	// struct LDKCVec_u8Z CounterpartyCommitmentSecrets_write(const struct LDKCounterpartyCommitmentSecrets *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyCommitmentSecrets_write")] public static extern byte[] CounterpartyCommitmentSecrets_write(long _obj);
	// struct LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ CounterpartyCommitmentSecrets_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyCommitmentSecrets_read")] public static extern long CounterpartyCommitmentSecrets_read(byte[] _ser);
	// struct LDKSecretKey derive_private_key(struct LDKPublicKey per_commitment_point, const uint8_t (*base_secret)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_derive_private_key")] public static extern byte[] derive_private_key(byte[] _per_commitment_point, byte[] _base_secret);
	// struct LDKPublicKey derive_public_key(struct LDKPublicKey per_commitment_point, struct LDKPublicKey base_point);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_derive_public_key")] public static extern byte[] derive_public_key(byte[] _per_commitment_point, byte[] _base_point);
	// struct LDKSecretKey derive_private_revocation_key(const uint8_t (*per_commitment_secret)[32], const uint8_t (*countersignatory_revocation_base_secret)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_derive_private_revocation_key")] public static extern byte[] derive_private_revocation_key(byte[] _per_commitment_secret, byte[] _countersignatory_revocation_base_secret);
	// struct LDKPublicKey derive_public_revocation_key(struct LDKPublicKey per_commitment_point, struct LDKPublicKey countersignatory_revocation_base_point);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_derive_public_revocation_key")] public static extern byte[] derive_public_revocation_key(byte[] _per_commitment_point, byte[] _countersignatory_revocation_base_point);
	// void TxCreationKeys_free(struct LDKTxCreationKeys this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_free")] public static extern void TxCreationKeys_free(long _this_obj);
	// struct LDKPublicKey TxCreationKeys_get_per_commitment_point(const struct LDKTxCreationKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_get_per_commitment_point")] public static extern byte[] TxCreationKeys_get_per_commitment_point(long _this_ptr);
	// void TxCreationKeys_set_per_commitment_point(struct LDKTxCreationKeys *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_set_per_commitment_point")] public static extern void TxCreationKeys_set_per_commitment_point(long _this_ptr, byte[] _val);
	// struct LDKPublicKey TxCreationKeys_get_revocation_key(const struct LDKTxCreationKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_get_revocation_key")] public static extern byte[] TxCreationKeys_get_revocation_key(long _this_ptr);
	// void TxCreationKeys_set_revocation_key(struct LDKTxCreationKeys *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_set_revocation_key")] public static extern void TxCreationKeys_set_revocation_key(long _this_ptr, byte[] _val);
	// struct LDKPublicKey TxCreationKeys_get_broadcaster_htlc_key(const struct LDKTxCreationKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_get_broadcaster_htlc_key")] public static extern byte[] TxCreationKeys_get_broadcaster_htlc_key(long _this_ptr);
	// void TxCreationKeys_set_broadcaster_htlc_key(struct LDKTxCreationKeys *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_set_broadcaster_htlc_key")] public static extern void TxCreationKeys_set_broadcaster_htlc_key(long _this_ptr, byte[] _val);
	// struct LDKPublicKey TxCreationKeys_get_countersignatory_htlc_key(const struct LDKTxCreationKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_get_countersignatory_htlc_key")] public static extern byte[] TxCreationKeys_get_countersignatory_htlc_key(long _this_ptr);
	// void TxCreationKeys_set_countersignatory_htlc_key(struct LDKTxCreationKeys *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_set_countersignatory_htlc_key")] public static extern void TxCreationKeys_set_countersignatory_htlc_key(long _this_ptr, byte[] _val);
	// struct LDKPublicKey TxCreationKeys_get_broadcaster_delayed_payment_key(const struct LDKTxCreationKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_get_broadcaster_delayed_payment_key")] public static extern byte[] TxCreationKeys_get_broadcaster_delayed_payment_key(long _this_ptr);
	// void TxCreationKeys_set_broadcaster_delayed_payment_key(struct LDKTxCreationKeys *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_set_broadcaster_delayed_payment_key")] public static extern void TxCreationKeys_set_broadcaster_delayed_payment_key(long _this_ptr, byte[] _val);
	// MUST_USE_RES struct LDKTxCreationKeys TxCreationKeys_new(struct LDKPublicKey per_commitment_point_arg, struct LDKPublicKey revocation_key_arg, struct LDKPublicKey broadcaster_htlc_key_arg, struct LDKPublicKey countersignatory_htlc_key_arg, struct LDKPublicKey broadcaster_delayed_payment_key_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_new")] public static extern long TxCreationKeys_new(byte[] _per_commitment_point_arg, byte[] _revocation_key_arg, byte[] _broadcaster_htlc_key_arg, byte[] _countersignatory_htlc_key_arg, byte[] _broadcaster_delayed_payment_key_arg);
	// bool TxCreationKeys_eq(const struct LDKTxCreationKeys *NONNULL_PTR a, const struct LDKTxCreationKeys *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_eq")] public static extern bool TxCreationKeys_eq(long _a, long _b);
	// uint64_t TxCreationKeys_clone_ptr(LDKTxCreationKeys *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_clone_ptr")] public static extern long TxCreationKeys_clone_ptr(long _arg);
	// struct LDKTxCreationKeys TxCreationKeys_clone(const struct LDKTxCreationKeys *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_clone")] public static extern long TxCreationKeys_clone(long _orig);
	// struct LDKCVec_u8Z TxCreationKeys_write(const struct LDKTxCreationKeys *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_write")] public static extern byte[] TxCreationKeys_write(long _obj);
	// struct LDKCResult_TxCreationKeysDecodeErrorZ TxCreationKeys_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_read")] public static extern long TxCreationKeys_read(byte[] _ser);
	// void ChannelPublicKeys_free(struct LDKChannelPublicKeys this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_free")] public static extern void ChannelPublicKeys_free(long _this_obj);
	// struct LDKPublicKey ChannelPublicKeys_get_funding_pubkey(const struct LDKChannelPublicKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_get_funding_pubkey")] public static extern byte[] ChannelPublicKeys_get_funding_pubkey(long _this_ptr);
	// void ChannelPublicKeys_set_funding_pubkey(struct LDKChannelPublicKeys *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_set_funding_pubkey")] public static extern void ChannelPublicKeys_set_funding_pubkey(long _this_ptr, byte[] _val);
	// struct LDKPublicKey ChannelPublicKeys_get_revocation_basepoint(const struct LDKChannelPublicKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_get_revocation_basepoint")] public static extern byte[] ChannelPublicKeys_get_revocation_basepoint(long _this_ptr);
	// void ChannelPublicKeys_set_revocation_basepoint(struct LDKChannelPublicKeys *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_set_revocation_basepoint")] public static extern void ChannelPublicKeys_set_revocation_basepoint(long _this_ptr, byte[] _val);
	// struct LDKPublicKey ChannelPublicKeys_get_payment_point(const struct LDKChannelPublicKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_get_payment_point")] public static extern byte[] ChannelPublicKeys_get_payment_point(long _this_ptr);
	// void ChannelPublicKeys_set_payment_point(struct LDKChannelPublicKeys *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_set_payment_point")] public static extern void ChannelPublicKeys_set_payment_point(long _this_ptr, byte[] _val);
	// struct LDKPublicKey ChannelPublicKeys_get_delayed_payment_basepoint(const struct LDKChannelPublicKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_get_delayed_payment_basepoint")] public static extern byte[] ChannelPublicKeys_get_delayed_payment_basepoint(long _this_ptr);
	// void ChannelPublicKeys_set_delayed_payment_basepoint(struct LDKChannelPublicKeys *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_set_delayed_payment_basepoint")] public static extern void ChannelPublicKeys_set_delayed_payment_basepoint(long _this_ptr, byte[] _val);
	// struct LDKPublicKey ChannelPublicKeys_get_htlc_basepoint(const struct LDKChannelPublicKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_get_htlc_basepoint")] public static extern byte[] ChannelPublicKeys_get_htlc_basepoint(long _this_ptr);
	// void ChannelPublicKeys_set_htlc_basepoint(struct LDKChannelPublicKeys *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_set_htlc_basepoint")] public static extern void ChannelPublicKeys_set_htlc_basepoint(long _this_ptr, byte[] _val);
	// MUST_USE_RES struct LDKChannelPublicKeys ChannelPublicKeys_new(struct LDKPublicKey funding_pubkey_arg, struct LDKPublicKey revocation_basepoint_arg, struct LDKPublicKey payment_point_arg, struct LDKPublicKey delayed_payment_basepoint_arg, struct LDKPublicKey htlc_basepoint_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_new")] public static extern long ChannelPublicKeys_new(byte[] _funding_pubkey_arg, byte[] _revocation_basepoint_arg, byte[] _payment_point_arg, byte[] _delayed_payment_basepoint_arg, byte[] _htlc_basepoint_arg);
	// uint64_t ChannelPublicKeys_clone_ptr(LDKChannelPublicKeys *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_clone_ptr")] public static extern long ChannelPublicKeys_clone_ptr(long _arg);
	// struct LDKChannelPublicKeys ChannelPublicKeys_clone(const struct LDKChannelPublicKeys *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_clone")] public static extern long ChannelPublicKeys_clone(long _orig);
	// bool ChannelPublicKeys_eq(const struct LDKChannelPublicKeys *NONNULL_PTR a, const struct LDKChannelPublicKeys *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_eq")] public static extern bool ChannelPublicKeys_eq(long _a, long _b);
	// struct LDKCVec_u8Z ChannelPublicKeys_write(const struct LDKChannelPublicKeys *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_write")] public static extern byte[] ChannelPublicKeys_write(long _obj);
	// struct LDKCResult_ChannelPublicKeysDecodeErrorZ ChannelPublicKeys_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_read")] public static extern long ChannelPublicKeys_read(byte[] _ser);
	// MUST_USE_RES struct LDKTxCreationKeys TxCreationKeys_derive_new(struct LDKPublicKey per_commitment_point, struct LDKPublicKey broadcaster_delayed_payment_base, struct LDKPublicKey broadcaster_htlc_base, struct LDKPublicKey countersignatory_revocation_base, struct LDKPublicKey countersignatory_htlc_base);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_derive_new")] public static extern long TxCreationKeys_derive_new(byte[] _per_commitment_point, byte[] _broadcaster_delayed_payment_base, byte[] _broadcaster_htlc_base, byte[] _countersignatory_revocation_base, byte[] _countersignatory_htlc_base);
	// MUST_USE_RES struct LDKTxCreationKeys TxCreationKeys_from_channel_static_keys(struct LDKPublicKey per_commitment_point, const struct LDKChannelPublicKeys *NONNULL_PTR broadcaster_keys, const struct LDKChannelPublicKeys *NONNULL_PTR countersignatory_keys);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_from_channel_static_keys")] public static extern long TxCreationKeys_from_channel_static_keys(byte[] _per_commitment_point, long _broadcaster_keys, long _countersignatory_keys);
	// struct LDKCVec_u8Z get_revokeable_redeemscript(struct LDKPublicKey revocation_key, uint16_t contest_delay, struct LDKPublicKey broadcaster_delayed_payment_key);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_get_revokeable_redeemscript")] public static extern byte[] get_revokeable_redeemscript(byte[] _revocation_key, short _contest_delay, byte[] _broadcaster_delayed_payment_key);
	// void HTLCOutputInCommitment_free(struct LDKHTLCOutputInCommitment this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_free")] public static extern void HTLCOutputInCommitment_free(long _this_obj);
	// bool HTLCOutputInCommitment_get_offered(const struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_get_offered")] public static extern bool HTLCOutputInCommitment_get_offered(long _this_ptr);
	// void HTLCOutputInCommitment_set_offered(struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_set_offered")] public static extern void HTLCOutputInCommitment_set_offered(long _this_ptr, bool _val);
	// uint64_t HTLCOutputInCommitment_get_amount_msat(const struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_get_amount_msat")] public static extern long HTLCOutputInCommitment_get_amount_msat(long _this_ptr);
	// void HTLCOutputInCommitment_set_amount_msat(struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_set_amount_msat")] public static extern void HTLCOutputInCommitment_set_amount_msat(long _this_ptr, long _val);
	// uint32_t HTLCOutputInCommitment_get_cltv_expiry(const struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_get_cltv_expiry")] public static extern int HTLCOutputInCommitment_get_cltv_expiry(long _this_ptr);
	// void HTLCOutputInCommitment_set_cltv_expiry(struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_set_cltv_expiry")] public static extern void HTLCOutputInCommitment_set_cltv_expiry(long _this_ptr, int _val);
	// const uint8_t (*HTLCOutputInCommitment_get_payment_hash(const struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_get_payment_hash")] public static extern byte[] HTLCOutputInCommitment_get_payment_hash(long _this_ptr);
	// void HTLCOutputInCommitment_set_payment_hash(struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_set_payment_hash")] public static extern void HTLCOutputInCommitment_set_payment_hash(long _this_ptr, byte[] _val);
	// struct LDKCOption_u32Z HTLCOutputInCommitment_get_transaction_output_index(const struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_get_transaction_output_index")] public static extern long HTLCOutputInCommitment_get_transaction_output_index(long _this_ptr);
	// void HTLCOutputInCommitment_set_transaction_output_index(struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr, struct LDKCOption_u32Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_set_transaction_output_index")] public static extern void HTLCOutputInCommitment_set_transaction_output_index(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKHTLCOutputInCommitment HTLCOutputInCommitment_new(bool offered_arg, uint64_t amount_msat_arg, uint32_t cltv_expiry_arg, struct LDKThirtyTwoBytes payment_hash_arg, struct LDKCOption_u32Z transaction_output_index_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_new")] public static extern long HTLCOutputInCommitment_new(bool _offered_arg, long _amount_msat_arg, int _cltv_expiry_arg, byte[] _payment_hash_arg, long _transaction_output_index_arg);
	// uint64_t HTLCOutputInCommitment_clone_ptr(LDKHTLCOutputInCommitment *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_clone_ptr")] public static extern long HTLCOutputInCommitment_clone_ptr(long _arg);
	// struct LDKHTLCOutputInCommitment HTLCOutputInCommitment_clone(const struct LDKHTLCOutputInCommitment *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_clone")] public static extern long HTLCOutputInCommitment_clone(long _orig);
	// bool HTLCOutputInCommitment_eq(const struct LDKHTLCOutputInCommitment *NONNULL_PTR a, const struct LDKHTLCOutputInCommitment *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_eq")] public static extern bool HTLCOutputInCommitment_eq(long _a, long _b);
	// struct LDKCVec_u8Z HTLCOutputInCommitment_write(const struct LDKHTLCOutputInCommitment *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_write")] public static extern byte[] HTLCOutputInCommitment_write(long _obj);
	// struct LDKCResult_HTLCOutputInCommitmentDecodeErrorZ HTLCOutputInCommitment_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_read")] public static extern long HTLCOutputInCommitment_read(byte[] _ser);
	// struct LDKCVec_u8Z get_htlc_redeemscript(const struct LDKHTLCOutputInCommitment *NONNULL_PTR htlc, bool opt_anchors, const struct LDKTxCreationKeys *NONNULL_PTR keys);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_get_htlc_redeemscript")] public static extern byte[] get_htlc_redeemscript(long _htlc, bool _opt_anchors, long _keys);
	// struct LDKCVec_u8Z make_funding_redeemscript(struct LDKPublicKey broadcaster, struct LDKPublicKey countersignatory);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_make_funding_redeemscript")] public static extern byte[] make_funding_redeemscript(byte[] _broadcaster, byte[] _countersignatory);
	// struct LDKTransaction build_htlc_transaction(const uint8_t (*commitment_txid)[32], uint32_t feerate_per_kw, uint16_t contest_delay, const struct LDKHTLCOutputInCommitment *NONNULL_PTR htlc, bool opt_anchors, bool use_non_zero_fee_anchors, struct LDKPublicKey broadcaster_delayed_payment_key, struct LDKPublicKey revocation_key);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_build_htlc_transaction")] public static extern byte[] build_htlc_transaction(byte[] _commitment_txid, int _feerate_per_kw, short _contest_delay, long _htlc, bool _opt_anchors, bool _use_non_zero_fee_anchors, byte[] _broadcaster_delayed_payment_key, byte[] _revocation_key);
	// struct LDKWitness build_htlc_input_witness(struct LDKSignature local_sig, struct LDKSignature remote_sig, struct LDKThirtyTwoBytes preimage, struct LDKu8slice redeem_script, bool opt_anchors);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_build_htlc_input_witness")] public static extern byte[] build_htlc_input_witness(byte[] _local_sig, byte[] _remote_sig, byte[] _preimage, byte[] _redeem_script, bool _opt_anchors);
	// struct LDKCVec_u8Z get_to_countersignatory_with_anchors_redeemscript(struct LDKPublicKey payment_point);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_get_to_countersignatory_with_anchors_redeemscript")] public static extern byte[] get_to_countersignatory_with_anchors_redeemscript(byte[] _payment_point);
	// struct LDKCVec_u8Z get_anchor_redeemscript(struct LDKPublicKey funding_pubkey);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_get_anchor_redeemscript")] public static extern byte[] get_anchor_redeemscript(byte[] _funding_pubkey);
	// struct LDKWitness build_anchor_input_witness(struct LDKPublicKey funding_key, struct LDKSignature funding_sig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_build_anchor_input_witness")] public static extern byte[] build_anchor_input_witness(byte[] _funding_key, byte[] _funding_sig);
	// void ChannelTransactionParameters_free(struct LDKChannelTransactionParameters this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_free")] public static extern void ChannelTransactionParameters_free(long _this_obj);
	// struct LDKChannelPublicKeys ChannelTransactionParameters_get_holder_pubkeys(const struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_get_holder_pubkeys")] public static extern long ChannelTransactionParameters_get_holder_pubkeys(long _this_ptr);
	// void ChannelTransactionParameters_set_holder_pubkeys(struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr, struct LDKChannelPublicKeys val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_set_holder_pubkeys")] public static extern void ChannelTransactionParameters_set_holder_pubkeys(long _this_ptr, long _val);
	// uint16_t ChannelTransactionParameters_get_holder_selected_contest_delay(const struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_get_holder_selected_contest_delay")] public static extern short ChannelTransactionParameters_get_holder_selected_contest_delay(long _this_ptr);
	// void ChannelTransactionParameters_set_holder_selected_contest_delay(struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_set_holder_selected_contest_delay")] public static extern void ChannelTransactionParameters_set_holder_selected_contest_delay(long _this_ptr, short _val);
	// bool ChannelTransactionParameters_get_is_outbound_from_holder(const struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_get_is_outbound_from_holder")] public static extern bool ChannelTransactionParameters_get_is_outbound_from_holder(long _this_ptr);
	// void ChannelTransactionParameters_set_is_outbound_from_holder(struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_set_is_outbound_from_holder")] public static extern void ChannelTransactionParameters_set_is_outbound_from_holder(long _this_ptr, bool _val);
	// struct LDKCounterpartyChannelTransactionParameters ChannelTransactionParameters_get_counterparty_parameters(const struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_get_counterparty_parameters")] public static extern long ChannelTransactionParameters_get_counterparty_parameters(long _this_ptr);
	// void ChannelTransactionParameters_set_counterparty_parameters(struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr, struct LDKCounterpartyChannelTransactionParameters val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_set_counterparty_parameters")] public static extern void ChannelTransactionParameters_set_counterparty_parameters(long _this_ptr, long _val);
	// struct LDKOutPoint ChannelTransactionParameters_get_funding_outpoint(const struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_get_funding_outpoint")] public static extern long ChannelTransactionParameters_get_funding_outpoint(long _this_ptr);
	// void ChannelTransactionParameters_set_funding_outpoint(struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr, struct LDKOutPoint val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_set_funding_outpoint")] public static extern void ChannelTransactionParameters_set_funding_outpoint(long _this_ptr, long _val);
	// enum LDKCOption_NoneZ ChannelTransactionParameters_get_opt_anchors(const struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_get_opt_anchors")] public static extern COption_NoneZ ChannelTransactionParameters_get_opt_anchors(long _this_ptr);
	// void ChannelTransactionParameters_set_opt_anchors(struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr, enum LDKCOption_NoneZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_set_opt_anchors")] public static extern void ChannelTransactionParameters_set_opt_anchors(long _this_ptr, COption_NoneZ _val);
	// enum LDKCOption_NoneZ ChannelTransactionParameters_get_opt_non_zero_fee_anchors(const struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_get_opt_non_zero_fee_anchors")] public static extern COption_NoneZ ChannelTransactionParameters_get_opt_non_zero_fee_anchors(long _this_ptr);
	// void ChannelTransactionParameters_set_opt_non_zero_fee_anchors(struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr, enum LDKCOption_NoneZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_set_opt_non_zero_fee_anchors")] public static extern void ChannelTransactionParameters_set_opt_non_zero_fee_anchors(long _this_ptr, COption_NoneZ _val);
	// MUST_USE_RES struct LDKChannelTransactionParameters ChannelTransactionParameters_new(struct LDKChannelPublicKeys holder_pubkeys_arg, uint16_t holder_selected_contest_delay_arg, bool is_outbound_from_holder_arg, struct LDKCounterpartyChannelTransactionParameters counterparty_parameters_arg, struct LDKOutPoint funding_outpoint_arg, enum LDKCOption_NoneZ opt_anchors_arg, enum LDKCOption_NoneZ opt_non_zero_fee_anchors_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_new")] public static extern long ChannelTransactionParameters_new(long _holder_pubkeys_arg, short _holder_selected_contest_delay_arg, bool _is_outbound_from_holder_arg, long _counterparty_parameters_arg, long _funding_outpoint_arg, COption_NoneZ _opt_anchors_arg, COption_NoneZ _opt_non_zero_fee_anchors_arg);
	// uint64_t ChannelTransactionParameters_clone_ptr(LDKChannelTransactionParameters *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_clone_ptr")] public static extern long ChannelTransactionParameters_clone_ptr(long _arg);
	// struct LDKChannelTransactionParameters ChannelTransactionParameters_clone(const struct LDKChannelTransactionParameters *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_clone")] public static extern long ChannelTransactionParameters_clone(long _orig);
	// void CounterpartyChannelTransactionParameters_free(struct LDKCounterpartyChannelTransactionParameters this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_free")] public static extern void CounterpartyChannelTransactionParameters_free(long _this_obj);
	// struct LDKChannelPublicKeys CounterpartyChannelTransactionParameters_get_pubkeys(const struct LDKCounterpartyChannelTransactionParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_get_pubkeys")] public static extern long CounterpartyChannelTransactionParameters_get_pubkeys(long _this_ptr);
	// void CounterpartyChannelTransactionParameters_set_pubkeys(struct LDKCounterpartyChannelTransactionParameters *NONNULL_PTR this_ptr, struct LDKChannelPublicKeys val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_set_pubkeys")] public static extern void CounterpartyChannelTransactionParameters_set_pubkeys(long _this_ptr, long _val);
	// uint16_t CounterpartyChannelTransactionParameters_get_selected_contest_delay(const struct LDKCounterpartyChannelTransactionParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_get_selected_contest_delay")] public static extern short CounterpartyChannelTransactionParameters_get_selected_contest_delay(long _this_ptr);
	// void CounterpartyChannelTransactionParameters_set_selected_contest_delay(struct LDKCounterpartyChannelTransactionParameters *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_set_selected_contest_delay")] public static extern void CounterpartyChannelTransactionParameters_set_selected_contest_delay(long _this_ptr, short _val);
	// MUST_USE_RES struct LDKCounterpartyChannelTransactionParameters CounterpartyChannelTransactionParameters_new(struct LDKChannelPublicKeys pubkeys_arg, uint16_t selected_contest_delay_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_new")] public static extern long CounterpartyChannelTransactionParameters_new(long _pubkeys_arg, short _selected_contest_delay_arg);
	// uint64_t CounterpartyChannelTransactionParameters_clone_ptr(LDKCounterpartyChannelTransactionParameters *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_clone_ptr")] public static extern long CounterpartyChannelTransactionParameters_clone_ptr(long _arg);
	// struct LDKCounterpartyChannelTransactionParameters CounterpartyChannelTransactionParameters_clone(const struct LDKCounterpartyChannelTransactionParameters *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_clone")] public static extern long CounterpartyChannelTransactionParameters_clone(long _orig);
	// MUST_USE_RES bool ChannelTransactionParameters_is_populated(const struct LDKChannelTransactionParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_is_populated")] public static extern bool ChannelTransactionParameters_is_populated(long _this_arg);
	// MUST_USE_RES struct LDKDirectedChannelTransactionParameters ChannelTransactionParameters_as_holder_broadcastable(const struct LDKChannelTransactionParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_as_holder_broadcastable")] public static extern long ChannelTransactionParameters_as_holder_broadcastable(long _this_arg);
	// MUST_USE_RES struct LDKDirectedChannelTransactionParameters ChannelTransactionParameters_as_counterparty_broadcastable(const struct LDKChannelTransactionParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_as_counterparty_broadcastable")] public static extern long ChannelTransactionParameters_as_counterparty_broadcastable(long _this_arg);
	// struct LDKCVec_u8Z CounterpartyChannelTransactionParameters_write(const struct LDKCounterpartyChannelTransactionParameters *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_write")] public static extern byte[] CounterpartyChannelTransactionParameters_write(long _obj);
	// struct LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ CounterpartyChannelTransactionParameters_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_read")] public static extern long CounterpartyChannelTransactionParameters_read(byte[] _ser);
	// struct LDKCVec_u8Z ChannelTransactionParameters_write(const struct LDKChannelTransactionParameters *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_write")] public static extern byte[] ChannelTransactionParameters_write(long _obj);
	// struct LDKCResult_ChannelTransactionParametersDecodeErrorZ ChannelTransactionParameters_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_read")] public static extern long ChannelTransactionParameters_read(byte[] _ser);
	// void DirectedChannelTransactionParameters_free(struct LDKDirectedChannelTransactionParameters this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelTransactionParameters_free")] public static extern void DirectedChannelTransactionParameters_free(long _this_obj);
	// MUST_USE_RES struct LDKChannelPublicKeys DirectedChannelTransactionParameters_broadcaster_pubkeys(const struct LDKDirectedChannelTransactionParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelTransactionParameters_broadcaster_pubkeys")] public static extern long DirectedChannelTransactionParameters_broadcaster_pubkeys(long _this_arg);
	// MUST_USE_RES struct LDKChannelPublicKeys DirectedChannelTransactionParameters_countersignatory_pubkeys(const struct LDKDirectedChannelTransactionParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelTransactionParameters_countersignatory_pubkeys")] public static extern long DirectedChannelTransactionParameters_countersignatory_pubkeys(long _this_arg);
	// MUST_USE_RES uint16_t DirectedChannelTransactionParameters_contest_delay(const struct LDKDirectedChannelTransactionParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelTransactionParameters_contest_delay")] public static extern short DirectedChannelTransactionParameters_contest_delay(long _this_arg);
	// MUST_USE_RES bool DirectedChannelTransactionParameters_is_outbound(const struct LDKDirectedChannelTransactionParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelTransactionParameters_is_outbound")] public static extern bool DirectedChannelTransactionParameters_is_outbound(long _this_arg);
	// MUST_USE_RES struct LDKOutPoint DirectedChannelTransactionParameters_funding_outpoint(const struct LDKDirectedChannelTransactionParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelTransactionParameters_funding_outpoint")] public static extern long DirectedChannelTransactionParameters_funding_outpoint(long _this_arg);
	// MUST_USE_RES bool DirectedChannelTransactionParameters_opt_anchors(const struct LDKDirectedChannelTransactionParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelTransactionParameters_opt_anchors")] public static extern bool DirectedChannelTransactionParameters_opt_anchors(long _this_arg);
	// void HolderCommitmentTransaction_free(struct LDKHolderCommitmentTransaction this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_free")] public static extern void HolderCommitmentTransaction_free(long _this_obj);
	// struct LDKSignature HolderCommitmentTransaction_get_counterparty_sig(const struct LDKHolderCommitmentTransaction *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_get_counterparty_sig")] public static extern byte[] HolderCommitmentTransaction_get_counterparty_sig(long _this_ptr);
	// void HolderCommitmentTransaction_set_counterparty_sig(struct LDKHolderCommitmentTransaction *NONNULL_PTR this_ptr, struct LDKSignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_set_counterparty_sig")] public static extern void HolderCommitmentTransaction_set_counterparty_sig(long _this_ptr, byte[] _val);
	// struct LDKCVec_SignatureZ HolderCommitmentTransaction_get_counterparty_htlc_sigs(const struct LDKHolderCommitmentTransaction *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_get_counterparty_htlc_sigs")] public static extern byte[][] HolderCommitmentTransaction_get_counterparty_htlc_sigs(long _this_ptr);
	// void HolderCommitmentTransaction_set_counterparty_htlc_sigs(struct LDKHolderCommitmentTransaction *NONNULL_PTR this_ptr, struct LDKCVec_SignatureZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_set_counterparty_htlc_sigs")] public static extern void HolderCommitmentTransaction_set_counterparty_htlc_sigs(long _this_ptr, byte[][] _val);
	// uint64_t HolderCommitmentTransaction_clone_ptr(LDKHolderCommitmentTransaction *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_clone_ptr")] public static extern long HolderCommitmentTransaction_clone_ptr(long _arg);
	// struct LDKHolderCommitmentTransaction HolderCommitmentTransaction_clone(const struct LDKHolderCommitmentTransaction *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_clone")] public static extern long HolderCommitmentTransaction_clone(long _orig);
	// struct LDKCVec_u8Z HolderCommitmentTransaction_write(const struct LDKHolderCommitmentTransaction *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_write")] public static extern byte[] HolderCommitmentTransaction_write(long _obj);
	// struct LDKCResult_HolderCommitmentTransactionDecodeErrorZ HolderCommitmentTransaction_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_read")] public static extern long HolderCommitmentTransaction_read(byte[] _ser);
	// MUST_USE_RES struct LDKHolderCommitmentTransaction HolderCommitmentTransaction_new(struct LDKCommitmentTransaction commitment_tx, struct LDKSignature counterparty_sig, struct LDKCVec_SignatureZ counterparty_htlc_sigs, struct LDKPublicKey holder_funding_key, struct LDKPublicKey counterparty_funding_key);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_new")] public static extern long HolderCommitmentTransaction_new(long _commitment_tx, byte[] _counterparty_sig, byte[][] _counterparty_htlc_sigs, byte[] _holder_funding_key, byte[] _counterparty_funding_key);
	// void BuiltCommitmentTransaction_free(struct LDKBuiltCommitmentTransaction this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_free")] public static extern void BuiltCommitmentTransaction_free(long _this_obj);
	// struct LDKTransaction BuiltCommitmentTransaction_get_transaction(const struct LDKBuiltCommitmentTransaction *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_get_transaction")] public static extern byte[] BuiltCommitmentTransaction_get_transaction(long _this_ptr);
	// void BuiltCommitmentTransaction_set_transaction(struct LDKBuiltCommitmentTransaction *NONNULL_PTR this_ptr, struct LDKTransaction val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_set_transaction")] public static extern void BuiltCommitmentTransaction_set_transaction(long _this_ptr, byte[] _val);
	// const uint8_t (*BuiltCommitmentTransaction_get_txid(const struct LDKBuiltCommitmentTransaction *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_get_txid")] public static extern byte[] BuiltCommitmentTransaction_get_txid(long _this_ptr);
	// void BuiltCommitmentTransaction_set_txid(struct LDKBuiltCommitmentTransaction *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_set_txid")] public static extern void BuiltCommitmentTransaction_set_txid(long _this_ptr, byte[] _val);
	// MUST_USE_RES struct LDKBuiltCommitmentTransaction BuiltCommitmentTransaction_new(struct LDKTransaction transaction_arg, struct LDKThirtyTwoBytes txid_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_new")] public static extern long BuiltCommitmentTransaction_new(byte[] _transaction_arg, byte[] _txid_arg);
	// uint64_t BuiltCommitmentTransaction_clone_ptr(LDKBuiltCommitmentTransaction *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_clone_ptr")] public static extern long BuiltCommitmentTransaction_clone_ptr(long _arg);
	// struct LDKBuiltCommitmentTransaction BuiltCommitmentTransaction_clone(const struct LDKBuiltCommitmentTransaction *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_clone")] public static extern long BuiltCommitmentTransaction_clone(long _orig);
	// struct LDKCVec_u8Z BuiltCommitmentTransaction_write(const struct LDKBuiltCommitmentTransaction *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_write")] public static extern byte[] BuiltCommitmentTransaction_write(long _obj);
	// struct LDKCResult_BuiltCommitmentTransactionDecodeErrorZ BuiltCommitmentTransaction_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_read")] public static extern long BuiltCommitmentTransaction_read(byte[] _ser);
	// MUST_USE_RES struct LDKThirtyTwoBytes BuiltCommitmentTransaction_get_sighash_all(const struct LDKBuiltCommitmentTransaction *NONNULL_PTR this_arg, struct LDKu8slice funding_redeemscript, uint64_t channel_value_satoshis);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_get_sighash_all")] public static extern byte[] BuiltCommitmentTransaction_get_sighash_all(long _this_arg, byte[] _funding_redeemscript, long _channel_value_satoshis);
	// MUST_USE_RES struct LDKSignature BuiltCommitmentTransaction_sign(const struct LDKBuiltCommitmentTransaction *NONNULL_PTR this_arg, const uint8_t (*funding_key)[32], struct LDKu8slice funding_redeemscript, uint64_t channel_value_satoshis);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_sign")] public static extern byte[] BuiltCommitmentTransaction_sign(long _this_arg, byte[] _funding_key, byte[] _funding_redeemscript, long _channel_value_satoshis);
	// void ClosingTransaction_free(struct LDKClosingTransaction this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_free")] public static extern void ClosingTransaction_free(long _this_obj);
	// uint64_t ClosingTransaction_clone_ptr(LDKClosingTransaction *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_clone_ptr")] public static extern long ClosingTransaction_clone_ptr(long _arg);
	// struct LDKClosingTransaction ClosingTransaction_clone(const struct LDKClosingTransaction *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_clone")] public static extern long ClosingTransaction_clone(long _orig);
	// uint64_t ClosingTransaction_hash(const struct LDKClosingTransaction *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_hash")] public static extern long ClosingTransaction_hash(long _o);
	// bool ClosingTransaction_eq(const struct LDKClosingTransaction *NONNULL_PTR a, const struct LDKClosingTransaction *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_eq")] public static extern bool ClosingTransaction_eq(long _a, long _b);
	// MUST_USE_RES struct LDKClosingTransaction ClosingTransaction_new(uint64_t to_holder_value_sat, uint64_t to_counterparty_value_sat, struct LDKCVec_u8Z to_holder_script, struct LDKCVec_u8Z to_counterparty_script, struct LDKOutPoint funding_outpoint);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_new")] public static extern long ClosingTransaction_new(long _to_holder_value_sat, long _to_counterparty_value_sat, byte[] _to_holder_script, byte[] _to_counterparty_script, long _funding_outpoint);
	// MUST_USE_RES struct LDKTrustedClosingTransaction ClosingTransaction_trust(const struct LDKClosingTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_trust")] public static extern long ClosingTransaction_trust(long _this_arg);
	// MUST_USE_RES struct LDKCResult_TrustedClosingTransactionNoneZ ClosingTransaction_verify(const struct LDKClosingTransaction *NONNULL_PTR this_arg, struct LDKOutPoint funding_outpoint);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_verify")] public static extern long ClosingTransaction_verify(long _this_arg, long _funding_outpoint);
	// MUST_USE_RES uint64_t ClosingTransaction_to_holder_value_sat(const struct LDKClosingTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_to_holder_value_sat")] public static extern long ClosingTransaction_to_holder_value_sat(long _this_arg);
	// MUST_USE_RES uint64_t ClosingTransaction_to_counterparty_value_sat(const struct LDKClosingTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_to_counterparty_value_sat")] public static extern long ClosingTransaction_to_counterparty_value_sat(long _this_arg);
	// MUST_USE_RES struct LDKu8slice ClosingTransaction_to_holder_script(const struct LDKClosingTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_to_holder_script")] public static extern byte[] ClosingTransaction_to_holder_script(long _this_arg);
	// MUST_USE_RES struct LDKu8slice ClosingTransaction_to_counterparty_script(const struct LDKClosingTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_to_counterparty_script")] public static extern byte[] ClosingTransaction_to_counterparty_script(long _this_arg);
	// void TrustedClosingTransaction_free(struct LDKTrustedClosingTransaction this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedClosingTransaction_free")] public static extern void TrustedClosingTransaction_free(long _this_obj);
	// MUST_USE_RES struct LDKTransaction TrustedClosingTransaction_built_transaction(const struct LDKTrustedClosingTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedClosingTransaction_built_transaction")] public static extern byte[] TrustedClosingTransaction_built_transaction(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes TrustedClosingTransaction_get_sighash_all(const struct LDKTrustedClosingTransaction *NONNULL_PTR this_arg, struct LDKu8slice funding_redeemscript, uint64_t channel_value_satoshis);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedClosingTransaction_get_sighash_all")] public static extern byte[] TrustedClosingTransaction_get_sighash_all(long _this_arg, byte[] _funding_redeemscript, long _channel_value_satoshis);
	// MUST_USE_RES struct LDKSignature TrustedClosingTransaction_sign(const struct LDKTrustedClosingTransaction *NONNULL_PTR this_arg, const uint8_t (*funding_key)[32], struct LDKu8slice funding_redeemscript, uint64_t channel_value_satoshis);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedClosingTransaction_sign")] public static extern byte[] TrustedClosingTransaction_sign(long _this_arg, byte[] _funding_key, byte[] _funding_redeemscript, long _channel_value_satoshis);
	// void CommitmentTransaction_free(struct LDKCommitmentTransaction this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_free")] public static extern void CommitmentTransaction_free(long _this_obj);
	// uint64_t CommitmentTransaction_clone_ptr(LDKCommitmentTransaction *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_clone_ptr")] public static extern long CommitmentTransaction_clone_ptr(long _arg);
	// struct LDKCommitmentTransaction CommitmentTransaction_clone(const struct LDKCommitmentTransaction *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_clone")] public static extern long CommitmentTransaction_clone(long _orig);
	// struct LDKCVec_u8Z CommitmentTransaction_write(const struct LDKCommitmentTransaction *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_write")] public static extern byte[] CommitmentTransaction_write(long _obj);
	// struct LDKCResult_CommitmentTransactionDecodeErrorZ CommitmentTransaction_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_read")] public static extern long CommitmentTransaction_read(byte[] _ser);
	// MUST_USE_RES uint64_t CommitmentTransaction_commitment_number(const struct LDKCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_commitment_number")] public static extern long CommitmentTransaction_commitment_number(long _this_arg);
	// MUST_USE_RES uint64_t CommitmentTransaction_to_broadcaster_value_sat(const struct LDKCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_to_broadcaster_value_sat")] public static extern long CommitmentTransaction_to_broadcaster_value_sat(long _this_arg);
	// MUST_USE_RES uint64_t CommitmentTransaction_to_countersignatory_value_sat(const struct LDKCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_to_countersignatory_value_sat")] public static extern long CommitmentTransaction_to_countersignatory_value_sat(long _this_arg);
	// MUST_USE_RES uint32_t CommitmentTransaction_feerate_per_kw(const struct LDKCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_feerate_per_kw")] public static extern int CommitmentTransaction_feerate_per_kw(long _this_arg);
	// MUST_USE_RES struct LDKTrustedCommitmentTransaction CommitmentTransaction_trust(const struct LDKCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_trust")] public static extern long CommitmentTransaction_trust(long _this_arg);
	// MUST_USE_RES struct LDKCResult_TrustedCommitmentTransactionNoneZ CommitmentTransaction_verify(const struct LDKCommitmentTransaction *NONNULL_PTR this_arg, const struct LDKDirectedChannelTransactionParameters *NONNULL_PTR channel_parameters, const struct LDKChannelPublicKeys *NONNULL_PTR broadcaster_keys, const struct LDKChannelPublicKeys *NONNULL_PTR countersignatory_keys);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_verify")] public static extern long CommitmentTransaction_verify(long _this_arg, long _channel_parameters, long _broadcaster_keys, long _countersignatory_keys);
	// void TrustedCommitmentTransaction_free(struct LDKTrustedCommitmentTransaction this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedCommitmentTransaction_free")] public static extern void TrustedCommitmentTransaction_free(long _this_obj);
	// MUST_USE_RES struct LDKThirtyTwoBytes TrustedCommitmentTransaction_txid(const struct LDKTrustedCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedCommitmentTransaction_txid")] public static extern byte[] TrustedCommitmentTransaction_txid(long _this_arg);
	// MUST_USE_RES struct LDKBuiltCommitmentTransaction TrustedCommitmentTransaction_built_transaction(const struct LDKTrustedCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedCommitmentTransaction_built_transaction")] public static extern long TrustedCommitmentTransaction_built_transaction(long _this_arg);
	// MUST_USE_RES struct LDKTxCreationKeys TrustedCommitmentTransaction_keys(const struct LDKTrustedCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedCommitmentTransaction_keys")] public static extern long TrustedCommitmentTransaction_keys(long _this_arg);
	// MUST_USE_RES bool TrustedCommitmentTransaction_opt_anchors(const struct LDKTrustedCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedCommitmentTransaction_opt_anchors")] public static extern bool TrustedCommitmentTransaction_opt_anchors(long _this_arg);
	// MUST_USE_RES struct LDKCResult_CVec_SignatureZNoneZ TrustedCommitmentTransaction_get_htlc_sigs(const struct LDKTrustedCommitmentTransaction *NONNULL_PTR this_arg, const uint8_t (*htlc_base_key)[32], const struct LDKDirectedChannelTransactionParameters *NONNULL_PTR channel_parameters);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedCommitmentTransaction_get_htlc_sigs")] public static extern long TrustedCommitmentTransaction_get_htlc_sigs(long _this_arg, byte[] _htlc_base_key, long _channel_parameters);
	// uint64_t get_commitment_transaction_number_obscure_factor(struct LDKPublicKey broadcaster_payment_basepoint, struct LDKPublicKey countersignatory_payment_basepoint, bool outbound_from_broadcaster);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_get_commitment_transaction_number_obscure_factor")] public static extern long get_commitment_transaction_number_obscure_factor(byte[] _broadcaster_payment_basepoint, byte[] _countersignatory_payment_basepoint, bool _outbound_from_broadcaster);
	// bool InitFeatures_eq(const struct LDKInitFeatures *NONNULL_PTR a, const struct LDKInitFeatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_eq")] public static extern bool InitFeatures_eq(long _a, long _b);
	// bool NodeFeatures_eq(const struct LDKNodeFeatures *NONNULL_PTR a, const struct LDKNodeFeatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_eq")] public static extern bool NodeFeatures_eq(long _a, long _b);
	// bool ChannelFeatures_eq(const struct LDKChannelFeatures *NONNULL_PTR a, const struct LDKChannelFeatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_eq")] public static extern bool ChannelFeatures_eq(long _a, long _b);
	// bool InvoiceFeatures_eq(const struct LDKInvoiceFeatures *NONNULL_PTR a, const struct LDKInvoiceFeatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceFeatures_eq")] public static extern bool InvoiceFeatures_eq(long _a, long _b);
	// bool OfferFeatures_eq(const struct LDKOfferFeatures *NONNULL_PTR a, const struct LDKOfferFeatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_eq")] public static extern bool OfferFeatures_eq(long _a, long _b);
	// bool InvoiceRequestFeatures_eq(const struct LDKInvoiceRequestFeatures *NONNULL_PTR a, const struct LDKInvoiceRequestFeatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_eq")] public static extern bool InvoiceRequestFeatures_eq(long _a, long _b);
	// bool ChannelTypeFeatures_eq(const struct LDKChannelTypeFeatures *NONNULL_PTR a, const struct LDKChannelTypeFeatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_eq")] public static extern bool ChannelTypeFeatures_eq(long _a, long _b);
	// uint64_t InitFeatures_clone_ptr(LDKInitFeatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_clone_ptr")] public static extern long InitFeatures_clone_ptr(long _arg);
	// struct LDKInitFeatures InitFeatures_clone(const struct LDKInitFeatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_clone")] public static extern long InitFeatures_clone(long _orig);
	// uint64_t NodeFeatures_clone_ptr(LDKNodeFeatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_clone_ptr")] public static extern long NodeFeatures_clone_ptr(long _arg);
	// struct LDKNodeFeatures NodeFeatures_clone(const struct LDKNodeFeatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_clone")] public static extern long NodeFeatures_clone(long _orig);
	// uint64_t ChannelFeatures_clone_ptr(LDKChannelFeatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_clone_ptr")] public static extern long ChannelFeatures_clone_ptr(long _arg);
	// struct LDKChannelFeatures ChannelFeatures_clone(const struct LDKChannelFeatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_clone")] public static extern long ChannelFeatures_clone(long _orig);
	// uint64_t InvoiceFeatures_clone_ptr(LDKInvoiceFeatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceFeatures_clone_ptr")] public static extern long InvoiceFeatures_clone_ptr(long _arg);
	// struct LDKInvoiceFeatures InvoiceFeatures_clone(const struct LDKInvoiceFeatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceFeatures_clone")] public static extern long InvoiceFeatures_clone(long _orig);
	// uint64_t OfferFeatures_clone_ptr(LDKOfferFeatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_clone_ptr")] public static extern long OfferFeatures_clone_ptr(long _arg);
	// struct LDKOfferFeatures OfferFeatures_clone(const struct LDKOfferFeatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_clone")] public static extern long OfferFeatures_clone(long _orig);
	// uint64_t InvoiceRequestFeatures_clone_ptr(LDKInvoiceRequestFeatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_clone_ptr")] public static extern long InvoiceRequestFeatures_clone_ptr(long _arg);
	// struct LDKInvoiceRequestFeatures InvoiceRequestFeatures_clone(const struct LDKInvoiceRequestFeatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_clone")] public static extern long InvoiceRequestFeatures_clone(long _orig);
	// uint64_t ChannelTypeFeatures_clone_ptr(LDKChannelTypeFeatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_clone_ptr")] public static extern long ChannelTypeFeatures_clone_ptr(long _arg);
	// struct LDKChannelTypeFeatures ChannelTypeFeatures_clone(const struct LDKChannelTypeFeatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_clone")] public static extern long ChannelTypeFeatures_clone(long _orig);
	// void InitFeatures_free(struct LDKInitFeatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_free")] public static extern void InitFeatures_free(long _this_obj);
	// void NodeFeatures_free(struct LDKNodeFeatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_free")] public static extern void NodeFeatures_free(long _this_obj);
	// void ChannelFeatures_free(struct LDKChannelFeatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_free")] public static extern void ChannelFeatures_free(long _this_obj);
	// void InvoiceFeatures_free(struct LDKInvoiceFeatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceFeatures_free")] public static extern void InvoiceFeatures_free(long _this_obj);
	// void OfferFeatures_free(struct LDKOfferFeatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_free")] public static extern void OfferFeatures_free(long _this_obj);
	// void InvoiceRequestFeatures_free(struct LDKInvoiceRequestFeatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_free")] public static extern void InvoiceRequestFeatures_free(long _this_obj);
	// void ChannelTypeFeatures_free(struct LDKChannelTypeFeatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_free")] public static extern void ChannelTypeFeatures_free(long _this_obj);
	// MUST_USE_RES struct LDKInitFeatures InitFeatures_empty(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_empty")] public static extern long InitFeatures_empty();
	// MUST_USE_RES bool InitFeatures_requires_unknown_bits(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_unknown_bits")] public static extern bool InitFeatures_requires_unknown_bits(long _this_arg);
	// MUST_USE_RES struct LDKNodeFeatures NodeFeatures_empty(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_empty")] public static extern long NodeFeatures_empty();
	// MUST_USE_RES bool NodeFeatures_requires_unknown_bits(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_unknown_bits")] public static extern bool NodeFeatures_requires_unknown_bits(long _this_arg);
	// MUST_USE_RES struct LDKChannelFeatures ChannelFeatures_empty(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_empty")] public static extern long ChannelFeatures_empty();
	// MUST_USE_RES bool ChannelFeatures_requires_unknown_bits(const struct LDKChannelFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_requires_unknown_bits")] public static extern bool ChannelFeatures_requires_unknown_bits(long _this_arg);
	// MUST_USE_RES struct LDKInvoiceFeatures InvoiceFeatures_empty(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceFeatures_empty")] public static extern long InvoiceFeatures_empty();
	// MUST_USE_RES bool InvoiceFeatures_requires_unknown_bits(const struct LDKInvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceFeatures_requires_unknown_bits")] public static extern bool InvoiceFeatures_requires_unknown_bits(long _this_arg);
	// MUST_USE_RES struct LDKOfferFeatures OfferFeatures_empty(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_empty")] public static extern long OfferFeatures_empty();
	// MUST_USE_RES bool OfferFeatures_requires_unknown_bits(const struct LDKOfferFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_requires_unknown_bits")] public static extern bool OfferFeatures_requires_unknown_bits(long _this_arg);
	// MUST_USE_RES struct LDKInvoiceRequestFeatures InvoiceRequestFeatures_empty(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_empty")] public static extern long InvoiceRequestFeatures_empty();
	// MUST_USE_RES bool InvoiceRequestFeatures_requires_unknown_bits(const struct LDKInvoiceRequestFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_requires_unknown_bits")] public static extern bool InvoiceRequestFeatures_requires_unknown_bits(long _this_arg);
	// MUST_USE_RES struct LDKChannelTypeFeatures ChannelTypeFeatures_empty(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_empty")] public static extern long ChannelTypeFeatures_empty();
	// MUST_USE_RES bool ChannelTypeFeatures_requires_unknown_bits(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_requires_unknown_bits")] public static extern bool ChannelTypeFeatures_requires_unknown_bits(long _this_arg);
	// struct LDKCVec_u8Z InitFeatures_write(const struct LDKInitFeatures *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_write")] public static extern byte[] InitFeatures_write(long _obj);
	// struct LDKCResult_InitFeaturesDecodeErrorZ InitFeatures_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_read")] public static extern long InitFeatures_read(byte[] _ser);
	// struct LDKCVec_u8Z ChannelFeatures_write(const struct LDKChannelFeatures *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_write")] public static extern byte[] ChannelFeatures_write(long _obj);
	// struct LDKCResult_ChannelFeaturesDecodeErrorZ ChannelFeatures_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_read")] public static extern long ChannelFeatures_read(byte[] _ser);
	// struct LDKCVec_u8Z NodeFeatures_write(const struct LDKNodeFeatures *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_write")] public static extern byte[] NodeFeatures_write(long _obj);
	// struct LDKCResult_NodeFeaturesDecodeErrorZ NodeFeatures_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_read")] public static extern long NodeFeatures_read(byte[] _ser);
	// struct LDKCVec_u8Z InvoiceFeatures_write(const struct LDKInvoiceFeatures *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceFeatures_write")] public static extern byte[] InvoiceFeatures_write(long _obj);
	// struct LDKCResult_InvoiceFeaturesDecodeErrorZ InvoiceFeatures_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceFeatures_read")] public static extern long InvoiceFeatures_read(byte[] _ser);
	// struct LDKCVec_u8Z ChannelTypeFeatures_write(const struct LDKChannelTypeFeatures *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_write")] public static extern byte[] ChannelTypeFeatures_write(long _obj);
	// struct LDKCResult_ChannelTypeFeaturesDecodeErrorZ ChannelTypeFeatures_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_read")] public static extern long ChannelTypeFeatures_read(byte[] _ser);
	// struct LDKCVec_u8Z OfferFeatures_write(const struct LDKOfferFeatures *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_write")] public static extern byte[] OfferFeatures_write(long _obj);
	// struct LDKCResult_OfferFeaturesDecodeErrorZ OfferFeatures_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_read")] public static extern long OfferFeatures_read(byte[] _ser);
	// struct LDKCVec_u8Z InvoiceRequestFeatures_write(const struct LDKInvoiceRequestFeatures *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_write")] public static extern byte[] InvoiceRequestFeatures_write(long _obj);
	// struct LDKCResult_InvoiceRequestFeaturesDecodeErrorZ InvoiceRequestFeatures_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_read")] public static extern long InvoiceRequestFeatures_read(byte[] _ser);
	// void InitFeatures_set_data_loss_protect_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_data_loss_protect_optional")] public static extern void InitFeatures_set_data_loss_protect_optional(long _this_arg);
	// void InitFeatures_set_data_loss_protect_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_data_loss_protect_required")] public static extern void InitFeatures_set_data_loss_protect_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_data_loss_protect(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_data_loss_protect")] public static extern bool InitFeatures_supports_data_loss_protect(long _this_arg);
	// void NodeFeatures_set_data_loss_protect_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_data_loss_protect_optional")] public static extern void NodeFeatures_set_data_loss_protect_optional(long _this_arg);
	// void NodeFeatures_set_data_loss_protect_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_data_loss_protect_required")] public static extern void NodeFeatures_set_data_loss_protect_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_data_loss_protect(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_data_loss_protect")] public static extern bool NodeFeatures_supports_data_loss_protect(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_data_loss_protect(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_data_loss_protect")] public static extern bool InitFeatures_requires_data_loss_protect(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_data_loss_protect(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_data_loss_protect")] public static extern bool NodeFeatures_requires_data_loss_protect(long _this_arg);
	// void InitFeatures_set_initial_routing_sync_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_initial_routing_sync_optional")] public static extern void InitFeatures_set_initial_routing_sync_optional(long _this_arg);
	// void InitFeatures_set_initial_routing_sync_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_initial_routing_sync_required")] public static extern void InitFeatures_set_initial_routing_sync_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_initial_routing_sync(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_initial_routing_sync")] public static extern bool InitFeatures_initial_routing_sync(long _this_arg);
	// void InitFeatures_set_upfront_shutdown_script_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_upfront_shutdown_script_optional")] public static extern void InitFeatures_set_upfront_shutdown_script_optional(long _this_arg);
	// void InitFeatures_set_upfront_shutdown_script_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_upfront_shutdown_script_required")] public static extern void InitFeatures_set_upfront_shutdown_script_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_upfront_shutdown_script(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_upfront_shutdown_script")] public static extern bool InitFeatures_supports_upfront_shutdown_script(long _this_arg);
	// void NodeFeatures_set_upfront_shutdown_script_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_upfront_shutdown_script_optional")] public static extern void NodeFeatures_set_upfront_shutdown_script_optional(long _this_arg);
	// void NodeFeatures_set_upfront_shutdown_script_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_upfront_shutdown_script_required")] public static extern void NodeFeatures_set_upfront_shutdown_script_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_upfront_shutdown_script(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_upfront_shutdown_script")] public static extern bool NodeFeatures_supports_upfront_shutdown_script(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_upfront_shutdown_script(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_upfront_shutdown_script")] public static extern bool InitFeatures_requires_upfront_shutdown_script(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_upfront_shutdown_script(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_upfront_shutdown_script")] public static extern bool NodeFeatures_requires_upfront_shutdown_script(long _this_arg);
	// void InitFeatures_set_gossip_queries_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_gossip_queries_optional")] public static extern void InitFeatures_set_gossip_queries_optional(long _this_arg);
	// void InitFeatures_set_gossip_queries_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_gossip_queries_required")] public static extern void InitFeatures_set_gossip_queries_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_gossip_queries(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_gossip_queries")] public static extern bool InitFeatures_supports_gossip_queries(long _this_arg);
	// void NodeFeatures_set_gossip_queries_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_gossip_queries_optional")] public static extern void NodeFeatures_set_gossip_queries_optional(long _this_arg);
	// void NodeFeatures_set_gossip_queries_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_gossip_queries_required")] public static extern void NodeFeatures_set_gossip_queries_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_gossip_queries(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_gossip_queries")] public static extern bool NodeFeatures_supports_gossip_queries(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_gossip_queries(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_gossip_queries")] public static extern bool InitFeatures_requires_gossip_queries(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_gossip_queries(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_gossip_queries")] public static extern bool NodeFeatures_requires_gossip_queries(long _this_arg);
	// void InitFeatures_set_variable_length_onion_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_variable_length_onion_optional")] public static extern void InitFeatures_set_variable_length_onion_optional(long _this_arg);
	// void InitFeatures_set_variable_length_onion_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_variable_length_onion_required")] public static extern void InitFeatures_set_variable_length_onion_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_variable_length_onion(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_variable_length_onion")] public static extern bool InitFeatures_supports_variable_length_onion(long _this_arg);
	// void NodeFeatures_set_variable_length_onion_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_variable_length_onion_optional")] public static extern void NodeFeatures_set_variable_length_onion_optional(long _this_arg);
	// void NodeFeatures_set_variable_length_onion_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_variable_length_onion_required")] public static extern void NodeFeatures_set_variable_length_onion_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_variable_length_onion(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_variable_length_onion")] public static extern bool NodeFeatures_supports_variable_length_onion(long _this_arg);
	// void InvoiceFeatures_set_variable_length_onion_optional(struct LDKInvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceFeatures_set_variable_length_onion_optional")] public static extern void InvoiceFeatures_set_variable_length_onion_optional(long _this_arg);
	// void InvoiceFeatures_set_variable_length_onion_required(struct LDKInvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceFeatures_set_variable_length_onion_required")] public static extern void InvoiceFeatures_set_variable_length_onion_required(long _this_arg);
	// MUST_USE_RES bool InvoiceFeatures_supports_variable_length_onion(const struct LDKInvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceFeatures_supports_variable_length_onion")] public static extern bool InvoiceFeatures_supports_variable_length_onion(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_variable_length_onion(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_variable_length_onion")] public static extern bool InitFeatures_requires_variable_length_onion(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_variable_length_onion(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_variable_length_onion")] public static extern bool NodeFeatures_requires_variable_length_onion(long _this_arg);
	// MUST_USE_RES bool InvoiceFeatures_requires_variable_length_onion(const struct LDKInvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceFeatures_requires_variable_length_onion")] public static extern bool InvoiceFeatures_requires_variable_length_onion(long _this_arg);
	// void InitFeatures_set_static_remote_key_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_static_remote_key_optional")] public static extern void InitFeatures_set_static_remote_key_optional(long _this_arg);
	// void InitFeatures_set_static_remote_key_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_static_remote_key_required")] public static extern void InitFeatures_set_static_remote_key_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_static_remote_key(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_static_remote_key")] public static extern bool InitFeatures_supports_static_remote_key(long _this_arg);
	// void NodeFeatures_set_static_remote_key_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_static_remote_key_optional")] public static extern void NodeFeatures_set_static_remote_key_optional(long _this_arg);
	// void NodeFeatures_set_static_remote_key_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_static_remote_key_required")] public static extern void NodeFeatures_set_static_remote_key_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_static_remote_key(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_static_remote_key")] public static extern bool NodeFeatures_supports_static_remote_key(long _this_arg);
	// void ChannelTypeFeatures_set_static_remote_key_optional(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_static_remote_key_optional")] public static extern void ChannelTypeFeatures_set_static_remote_key_optional(long _this_arg);
	// void ChannelTypeFeatures_set_static_remote_key_required(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_static_remote_key_required")] public static extern void ChannelTypeFeatures_set_static_remote_key_required(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_supports_static_remote_key(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_supports_static_remote_key")] public static extern bool ChannelTypeFeatures_supports_static_remote_key(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_static_remote_key(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_static_remote_key")] public static extern bool InitFeatures_requires_static_remote_key(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_static_remote_key(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_static_remote_key")] public static extern bool NodeFeatures_requires_static_remote_key(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_requires_static_remote_key(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_requires_static_remote_key")] public static extern bool ChannelTypeFeatures_requires_static_remote_key(long _this_arg);
	// void InitFeatures_set_payment_secret_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_payment_secret_optional")] public static extern void InitFeatures_set_payment_secret_optional(long _this_arg);
	// void InitFeatures_set_payment_secret_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_payment_secret_required")] public static extern void InitFeatures_set_payment_secret_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_payment_secret(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_payment_secret")] public static extern bool InitFeatures_supports_payment_secret(long _this_arg);
	// void NodeFeatures_set_payment_secret_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_payment_secret_optional")] public static extern void NodeFeatures_set_payment_secret_optional(long _this_arg);
	// void NodeFeatures_set_payment_secret_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_payment_secret_required")] public static extern void NodeFeatures_set_payment_secret_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_payment_secret(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_payment_secret")] public static extern bool NodeFeatures_supports_payment_secret(long _this_arg);
	// void InvoiceFeatures_set_payment_secret_optional(struct LDKInvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceFeatures_set_payment_secret_optional")] public static extern void InvoiceFeatures_set_payment_secret_optional(long _this_arg);
	// void InvoiceFeatures_set_payment_secret_required(struct LDKInvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceFeatures_set_payment_secret_required")] public static extern void InvoiceFeatures_set_payment_secret_required(long _this_arg);
	// MUST_USE_RES bool InvoiceFeatures_supports_payment_secret(const struct LDKInvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceFeatures_supports_payment_secret")] public static extern bool InvoiceFeatures_supports_payment_secret(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_payment_secret(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_payment_secret")] public static extern bool InitFeatures_requires_payment_secret(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_payment_secret(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_payment_secret")] public static extern bool NodeFeatures_requires_payment_secret(long _this_arg);
	// MUST_USE_RES bool InvoiceFeatures_requires_payment_secret(const struct LDKInvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceFeatures_requires_payment_secret")] public static extern bool InvoiceFeatures_requires_payment_secret(long _this_arg);
	// void InitFeatures_set_basic_mpp_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_basic_mpp_optional")] public static extern void InitFeatures_set_basic_mpp_optional(long _this_arg);
	// void InitFeatures_set_basic_mpp_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_basic_mpp_required")] public static extern void InitFeatures_set_basic_mpp_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_basic_mpp(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_basic_mpp")] public static extern bool InitFeatures_supports_basic_mpp(long _this_arg);
	// void NodeFeatures_set_basic_mpp_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_basic_mpp_optional")] public static extern void NodeFeatures_set_basic_mpp_optional(long _this_arg);
	// void NodeFeatures_set_basic_mpp_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_basic_mpp_required")] public static extern void NodeFeatures_set_basic_mpp_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_basic_mpp(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_basic_mpp")] public static extern bool NodeFeatures_supports_basic_mpp(long _this_arg);
	// void InvoiceFeatures_set_basic_mpp_optional(struct LDKInvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceFeatures_set_basic_mpp_optional")] public static extern void InvoiceFeatures_set_basic_mpp_optional(long _this_arg);
	// void InvoiceFeatures_set_basic_mpp_required(struct LDKInvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceFeatures_set_basic_mpp_required")] public static extern void InvoiceFeatures_set_basic_mpp_required(long _this_arg);
	// MUST_USE_RES bool InvoiceFeatures_supports_basic_mpp(const struct LDKInvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceFeatures_supports_basic_mpp")] public static extern bool InvoiceFeatures_supports_basic_mpp(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_basic_mpp(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_basic_mpp")] public static extern bool InitFeatures_requires_basic_mpp(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_basic_mpp(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_basic_mpp")] public static extern bool NodeFeatures_requires_basic_mpp(long _this_arg);
	// MUST_USE_RES bool InvoiceFeatures_requires_basic_mpp(const struct LDKInvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceFeatures_requires_basic_mpp")] public static extern bool InvoiceFeatures_requires_basic_mpp(long _this_arg);
	// void InitFeatures_set_wumbo_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_wumbo_optional")] public static extern void InitFeatures_set_wumbo_optional(long _this_arg);
	// void InitFeatures_set_wumbo_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_wumbo_required")] public static extern void InitFeatures_set_wumbo_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_wumbo(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_wumbo")] public static extern bool InitFeatures_supports_wumbo(long _this_arg);
	// void NodeFeatures_set_wumbo_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_wumbo_optional")] public static extern void NodeFeatures_set_wumbo_optional(long _this_arg);
	// void NodeFeatures_set_wumbo_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_wumbo_required")] public static extern void NodeFeatures_set_wumbo_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_wumbo(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_wumbo")] public static extern bool NodeFeatures_supports_wumbo(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_wumbo(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_wumbo")] public static extern bool InitFeatures_requires_wumbo(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_wumbo(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_wumbo")] public static extern bool NodeFeatures_requires_wumbo(long _this_arg);
	// void InitFeatures_set_shutdown_any_segwit_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_shutdown_any_segwit_optional")] public static extern void InitFeatures_set_shutdown_any_segwit_optional(long _this_arg);
	// void InitFeatures_set_shutdown_any_segwit_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_shutdown_any_segwit_required")] public static extern void InitFeatures_set_shutdown_any_segwit_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_shutdown_anysegwit(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_shutdown_anysegwit")] public static extern bool InitFeatures_supports_shutdown_anysegwit(long _this_arg);
	// void NodeFeatures_set_shutdown_any_segwit_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_shutdown_any_segwit_optional")] public static extern void NodeFeatures_set_shutdown_any_segwit_optional(long _this_arg);
	// void NodeFeatures_set_shutdown_any_segwit_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_shutdown_any_segwit_required")] public static extern void NodeFeatures_set_shutdown_any_segwit_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_shutdown_anysegwit(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_shutdown_anysegwit")] public static extern bool NodeFeatures_supports_shutdown_anysegwit(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_shutdown_anysegwit(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_shutdown_anysegwit")] public static extern bool InitFeatures_requires_shutdown_anysegwit(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_shutdown_anysegwit(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_shutdown_anysegwit")] public static extern bool NodeFeatures_requires_shutdown_anysegwit(long _this_arg);
	// void InitFeatures_set_onion_messages_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_onion_messages_optional")] public static extern void InitFeatures_set_onion_messages_optional(long _this_arg);
	// void InitFeatures_set_onion_messages_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_onion_messages_required")] public static extern void InitFeatures_set_onion_messages_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_onion_messages(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_onion_messages")] public static extern bool InitFeatures_supports_onion_messages(long _this_arg);
	// void NodeFeatures_set_onion_messages_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_onion_messages_optional")] public static extern void NodeFeatures_set_onion_messages_optional(long _this_arg);
	// void NodeFeatures_set_onion_messages_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_onion_messages_required")] public static extern void NodeFeatures_set_onion_messages_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_onion_messages(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_onion_messages")] public static extern bool NodeFeatures_supports_onion_messages(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_onion_messages(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_onion_messages")] public static extern bool InitFeatures_requires_onion_messages(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_onion_messages(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_onion_messages")] public static extern bool NodeFeatures_requires_onion_messages(long _this_arg);
	// void InitFeatures_set_channel_type_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_channel_type_optional")] public static extern void InitFeatures_set_channel_type_optional(long _this_arg);
	// void InitFeatures_set_channel_type_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_channel_type_required")] public static extern void InitFeatures_set_channel_type_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_channel_type(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_channel_type")] public static extern bool InitFeatures_supports_channel_type(long _this_arg);
	// void NodeFeatures_set_channel_type_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_channel_type_optional")] public static extern void NodeFeatures_set_channel_type_optional(long _this_arg);
	// void NodeFeatures_set_channel_type_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_channel_type_required")] public static extern void NodeFeatures_set_channel_type_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_channel_type(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_channel_type")] public static extern bool NodeFeatures_supports_channel_type(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_channel_type(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_channel_type")] public static extern bool InitFeatures_requires_channel_type(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_channel_type(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_channel_type")] public static extern bool NodeFeatures_requires_channel_type(long _this_arg);
	// void InitFeatures_set_scid_privacy_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_scid_privacy_optional")] public static extern void InitFeatures_set_scid_privacy_optional(long _this_arg);
	// void InitFeatures_set_scid_privacy_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_scid_privacy_required")] public static extern void InitFeatures_set_scid_privacy_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_scid_privacy(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_scid_privacy")] public static extern bool InitFeatures_supports_scid_privacy(long _this_arg);
	// void NodeFeatures_set_scid_privacy_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_scid_privacy_optional")] public static extern void NodeFeatures_set_scid_privacy_optional(long _this_arg);
	// void NodeFeatures_set_scid_privacy_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_scid_privacy_required")] public static extern void NodeFeatures_set_scid_privacy_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_scid_privacy(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_scid_privacy")] public static extern bool NodeFeatures_supports_scid_privacy(long _this_arg);
	// void ChannelTypeFeatures_set_scid_privacy_optional(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_scid_privacy_optional")] public static extern void ChannelTypeFeatures_set_scid_privacy_optional(long _this_arg);
	// void ChannelTypeFeatures_set_scid_privacy_required(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_scid_privacy_required")] public static extern void ChannelTypeFeatures_set_scid_privacy_required(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_supports_scid_privacy(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_supports_scid_privacy")] public static extern bool ChannelTypeFeatures_supports_scid_privacy(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_scid_privacy(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_scid_privacy")] public static extern bool InitFeatures_requires_scid_privacy(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_scid_privacy(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_scid_privacy")] public static extern bool NodeFeatures_requires_scid_privacy(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_requires_scid_privacy(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_requires_scid_privacy")] public static extern bool ChannelTypeFeatures_requires_scid_privacy(long _this_arg);
	// void InitFeatures_set_zero_conf_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_zero_conf_optional")] public static extern void InitFeatures_set_zero_conf_optional(long _this_arg);
	// void InitFeatures_set_zero_conf_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_zero_conf_required")] public static extern void InitFeatures_set_zero_conf_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_zero_conf(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_zero_conf")] public static extern bool InitFeatures_supports_zero_conf(long _this_arg);
	// void NodeFeatures_set_zero_conf_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_zero_conf_optional")] public static extern void NodeFeatures_set_zero_conf_optional(long _this_arg);
	// void NodeFeatures_set_zero_conf_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_zero_conf_required")] public static extern void NodeFeatures_set_zero_conf_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_zero_conf(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_zero_conf")] public static extern bool NodeFeatures_supports_zero_conf(long _this_arg);
	// void ChannelTypeFeatures_set_zero_conf_optional(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_zero_conf_optional")] public static extern void ChannelTypeFeatures_set_zero_conf_optional(long _this_arg);
	// void ChannelTypeFeatures_set_zero_conf_required(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_zero_conf_required")] public static extern void ChannelTypeFeatures_set_zero_conf_required(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_supports_zero_conf(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_supports_zero_conf")] public static extern bool ChannelTypeFeatures_supports_zero_conf(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_zero_conf(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_zero_conf")] public static extern bool InitFeatures_requires_zero_conf(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_zero_conf(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_zero_conf")] public static extern bool NodeFeatures_requires_zero_conf(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_requires_zero_conf(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_requires_zero_conf")] public static extern bool ChannelTypeFeatures_requires_zero_conf(long _this_arg);
	// void NodeFeatures_set_keysend_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_keysend_optional")] public static extern void NodeFeatures_set_keysend_optional(long _this_arg);
	// void NodeFeatures_set_keysend_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_keysend_required")] public static extern void NodeFeatures_set_keysend_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_keysend(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_keysend")] public static extern bool NodeFeatures_supports_keysend(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_keysend(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_keysend")] public static extern bool NodeFeatures_requires_keysend(long _this_arg);
	// void ShutdownScript_free(struct LDKShutdownScript this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_free")] public static extern void ShutdownScript_free(long _this_obj);
	// uint64_t ShutdownScript_clone_ptr(LDKShutdownScript *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_clone_ptr")] public static extern long ShutdownScript_clone_ptr(long _arg);
	// struct LDKShutdownScript ShutdownScript_clone(const struct LDKShutdownScript *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_clone")] public static extern long ShutdownScript_clone(long _orig);
	// bool ShutdownScript_eq(const struct LDKShutdownScript *NONNULL_PTR a, const struct LDKShutdownScript *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_eq")] public static extern bool ShutdownScript_eq(long _a, long _b);
	// void InvalidShutdownScript_free(struct LDKInvalidShutdownScript this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvalidShutdownScript_free")] public static extern void InvalidShutdownScript_free(long _this_obj);
	// struct LDKu8slice InvalidShutdownScript_get_script(const struct LDKInvalidShutdownScript *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvalidShutdownScript_get_script")] public static extern byte[] InvalidShutdownScript_get_script(long _this_ptr);
	// void InvalidShutdownScript_set_script(struct LDKInvalidShutdownScript *NONNULL_PTR this_ptr, struct LDKCVec_u8Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvalidShutdownScript_set_script")] public static extern void InvalidShutdownScript_set_script(long _this_ptr, byte[] _val);
	// MUST_USE_RES struct LDKInvalidShutdownScript InvalidShutdownScript_new(struct LDKCVec_u8Z script_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvalidShutdownScript_new")] public static extern long InvalidShutdownScript_new(byte[] _script_arg);
	// uint64_t InvalidShutdownScript_clone_ptr(LDKInvalidShutdownScript *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvalidShutdownScript_clone_ptr")] public static extern long InvalidShutdownScript_clone_ptr(long _arg);
	// struct LDKInvalidShutdownScript InvalidShutdownScript_clone(const struct LDKInvalidShutdownScript *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvalidShutdownScript_clone")] public static extern long InvalidShutdownScript_clone(long _orig);
	// struct LDKCVec_u8Z ShutdownScript_write(const struct LDKShutdownScript *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_write")] public static extern byte[] ShutdownScript_write(long _obj);
	// struct LDKCResult_ShutdownScriptDecodeErrorZ ShutdownScript_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_read")] public static extern long ShutdownScript_read(byte[] _ser);
	// MUST_USE_RES struct LDKShutdownScript ShutdownScript_new_p2wpkh(const uint8_t (*pubkey_hash)[20]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_new_p2wpkh")] public static extern long ShutdownScript_new_p2wpkh(byte[] _pubkey_hash);
	// MUST_USE_RES struct LDKShutdownScript ShutdownScript_new_p2wsh(const uint8_t (*script_hash)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_new_p2wsh")] public static extern long ShutdownScript_new_p2wsh(byte[] _script_hash);
	// MUST_USE_RES struct LDKCResult_ShutdownScriptInvalidShutdownScriptZ ShutdownScript_new_witness_program(struct LDKWitnessVersion version, struct LDKu8slice program);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_new_witness_program")] public static extern long ShutdownScript_new_witness_program(byte _version, byte[] _program);
	// MUST_USE_RES struct LDKCVec_u8Z ShutdownScript_into_inner(struct LDKShutdownScript this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_into_inner")] public static extern byte[] ShutdownScript_into_inner(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey ShutdownScript_as_legacy_pubkey(const struct LDKShutdownScript *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_as_legacy_pubkey")] public static extern byte[] ShutdownScript_as_legacy_pubkey(long _this_arg);
	// MUST_USE_RES bool ShutdownScript_is_compatible(const struct LDKShutdownScript *NONNULL_PTR this_arg, const struct LDKInitFeatures *NONNULL_PTR features);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_is_compatible")] public static extern bool ShutdownScript_is_compatible(long _this_arg, long _features);
	// void CustomMessageReader_free(struct LDKCustomMessageReader this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomMessageReader_free")] public static extern void CustomMessageReader_free(long _this_ptr);
	// uint64_t Type_clone_ptr(LDKType *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Type_clone_ptr")] public static extern long Type_clone_ptr(long _arg);
	// struct LDKType Type_clone(const struct LDKType *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Type_clone")] public static extern long Type_clone(long _orig);
	// void Type_free(struct LDKType this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Type_free")] public static extern void Type_free(long _this_ptr);
	// void NodeId_free(struct LDKNodeId this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_free")] public static extern void NodeId_free(long _this_obj);
	// uint64_t NodeId_clone_ptr(LDKNodeId *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_clone_ptr")] public static extern long NodeId_clone_ptr(long _arg);
	// struct LDKNodeId NodeId_clone(const struct LDKNodeId *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_clone")] public static extern long NodeId_clone(long _orig);
	// MUST_USE_RES struct LDKNodeId NodeId_from_pubkey(struct LDKPublicKey pubkey);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_from_pubkey")] public static extern long NodeId_from_pubkey(byte[] _pubkey);
	// MUST_USE_RES struct LDKu8slice NodeId_as_slice(const struct LDKNodeId *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_as_slice")] public static extern byte[] NodeId_as_slice(long _this_arg);
	// uint64_t NodeId_hash(const struct LDKNodeId *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_hash")] public static extern long NodeId_hash(long _o);
	// struct LDKCVec_u8Z NodeId_write(const struct LDKNodeId *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_write")] public static extern byte[] NodeId_write(long _obj);
	// struct LDKCResult_NodeIdDecodeErrorZ NodeId_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_read")] public static extern long NodeId_read(byte[] _ser);
	// void NetworkGraph_free(struct LDKNetworkGraph this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_free")] public static extern void NetworkGraph_free(long _this_obj);
	// void ReadOnlyNetworkGraph_free(struct LDKReadOnlyNetworkGraph this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReadOnlyNetworkGraph_free")] public static extern void ReadOnlyNetworkGraph_free(long _this_obj);
	// void NetworkUpdate_free(struct LDKNetworkUpdate this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkUpdate_free")] public static extern void NetworkUpdate_free(long _this_ptr);
	// uint64_t NetworkUpdate_clone_ptr(LDKNetworkUpdate *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkUpdate_clone_ptr")] public static extern long NetworkUpdate_clone_ptr(long _arg);
	// struct LDKNetworkUpdate NetworkUpdate_clone(const struct LDKNetworkUpdate *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkUpdate_clone")] public static extern long NetworkUpdate_clone(long _orig);
	// struct LDKNetworkUpdate NetworkUpdate_channel_update_message(struct LDKChannelUpdate msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkUpdate_channel_update_message")] public static extern long NetworkUpdate_channel_update_message(long _msg);
	// struct LDKNetworkUpdate NetworkUpdate_channel_failure(uint64_t short_channel_id, bool is_permanent);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkUpdate_channel_failure")] public static extern long NetworkUpdate_channel_failure(long _short_channel_id, bool _is_permanent);
	// struct LDKNetworkUpdate NetworkUpdate_node_failure(struct LDKPublicKey node_id, bool is_permanent);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkUpdate_node_failure")] public static extern long NetworkUpdate_node_failure(byte[] _node_id, bool _is_permanent);
	// bool NetworkUpdate_eq(const struct LDKNetworkUpdate *NONNULL_PTR a, const struct LDKNetworkUpdate *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkUpdate_eq")] public static extern bool NetworkUpdate_eq(long _a, long _b);
	// struct LDKCVec_u8Z NetworkUpdate_write(const struct LDKNetworkUpdate *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkUpdate_write")] public static extern byte[] NetworkUpdate_write(long _obj);
	// struct LDKCResult_COption_NetworkUpdateZDecodeErrorZ NetworkUpdate_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkUpdate_read")] public static extern long NetworkUpdate_read(byte[] _ser);
	// void P2PGossipSync_free(struct LDKP2PGossipSync this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_P2PGossipSync_free")] public static extern void P2PGossipSync_free(long _this_obj);
	// MUST_USE_RES struct LDKP2PGossipSync P2PGossipSync_new(const struct LDKNetworkGraph *NONNULL_PTR network_graph, struct LDKCOption_AccessZ chain_access, struct LDKLogger logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_P2PGossipSync_new")] public static extern long P2PGossipSync_new(long _network_graph, long _chain_access, long _logger);
	// void P2PGossipSync_add_chain_access(struct LDKP2PGossipSync *NONNULL_PTR this_arg, struct LDKCOption_AccessZ chain_access);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_P2PGossipSync_add_chain_access")] public static extern void P2PGossipSync_add_chain_access(long _this_arg, long _chain_access);
	// void NetworkGraph_handle_network_update(const struct LDKNetworkGraph *NONNULL_PTR this_arg, const struct LDKNetworkUpdate *NONNULL_PTR network_update);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_handle_network_update")] public static extern void NetworkGraph_handle_network_update(long _this_arg, long _network_update);
	// struct LDKRoutingMessageHandler P2PGossipSync_as_RoutingMessageHandler(const struct LDKP2PGossipSync *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_P2PGossipSync_as_RoutingMessageHandler")] public static extern long P2PGossipSync_as_RoutingMessageHandler(long _this_arg);
	// struct LDKMessageSendEventsProvider P2PGossipSync_as_MessageSendEventsProvider(const struct LDKP2PGossipSync *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_P2PGossipSync_as_MessageSendEventsProvider")] public static extern long P2PGossipSync_as_MessageSendEventsProvider(long _this_arg);
	// void ChannelUpdateInfo_free(struct LDKChannelUpdateInfo this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_free")] public static extern void ChannelUpdateInfo_free(long _this_obj);
	// uint32_t ChannelUpdateInfo_get_last_update(const struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_get_last_update")] public static extern int ChannelUpdateInfo_get_last_update(long _this_ptr);
	// void ChannelUpdateInfo_set_last_update(struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_set_last_update")] public static extern void ChannelUpdateInfo_set_last_update(long _this_ptr, int _val);
	// bool ChannelUpdateInfo_get_enabled(const struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_get_enabled")] public static extern bool ChannelUpdateInfo_get_enabled(long _this_ptr);
	// void ChannelUpdateInfo_set_enabled(struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_set_enabled")] public static extern void ChannelUpdateInfo_set_enabled(long _this_ptr, bool _val);
	// uint16_t ChannelUpdateInfo_get_cltv_expiry_delta(const struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_get_cltv_expiry_delta")] public static extern short ChannelUpdateInfo_get_cltv_expiry_delta(long _this_ptr);
	// void ChannelUpdateInfo_set_cltv_expiry_delta(struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_set_cltv_expiry_delta")] public static extern void ChannelUpdateInfo_set_cltv_expiry_delta(long _this_ptr, short _val);
	// uint64_t ChannelUpdateInfo_get_htlc_minimum_msat(const struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_get_htlc_minimum_msat")] public static extern long ChannelUpdateInfo_get_htlc_minimum_msat(long _this_ptr);
	// void ChannelUpdateInfo_set_htlc_minimum_msat(struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_set_htlc_minimum_msat")] public static extern void ChannelUpdateInfo_set_htlc_minimum_msat(long _this_ptr, long _val);
	// uint64_t ChannelUpdateInfo_get_htlc_maximum_msat(const struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_get_htlc_maximum_msat")] public static extern long ChannelUpdateInfo_get_htlc_maximum_msat(long _this_ptr);
	// void ChannelUpdateInfo_set_htlc_maximum_msat(struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_set_htlc_maximum_msat")] public static extern void ChannelUpdateInfo_set_htlc_maximum_msat(long _this_ptr, long _val);
	// struct LDKRoutingFees ChannelUpdateInfo_get_fees(const struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_get_fees")] public static extern long ChannelUpdateInfo_get_fees(long _this_ptr);
	// void ChannelUpdateInfo_set_fees(struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr, struct LDKRoutingFees val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_set_fees")] public static extern void ChannelUpdateInfo_set_fees(long _this_ptr, long _val);
	// struct LDKChannelUpdate ChannelUpdateInfo_get_last_update_message(const struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_get_last_update_message")] public static extern long ChannelUpdateInfo_get_last_update_message(long _this_ptr);
	// void ChannelUpdateInfo_set_last_update_message(struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr, struct LDKChannelUpdate val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_set_last_update_message")] public static extern void ChannelUpdateInfo_set_last_update_message(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelUpdateInfo ChannelUpdateInfo_new(uint32_t last_update_arg, bool enabled_arg, uint16_t cltv_expiry_delta_arg, uint64_t htlc_minimum_msat_arg, uint64_t htlc_maximum_msat_arg, struct LDKRoutingFees fees_arg, struct LDKChannelUpdate last_update_message_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_new")] public static extern long ChannelUpdateInfo_new(int _last_update_arg, bool _enabled_arg, short _cltv_expiry_delta_arg, long _htlc_minimum_msat_arg, long _htlc_maximum_msat_arg, long _fees_arg, long _last_update_message_arg);
	// uint64_t ChannelUpdateInfo_clone_ptr(LDKChannelUpdateInfo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_clone_ptr")] public static extern long ChannelUpdateInfo_clone_ptr(long _arg);
	// struct LDKChannelUpdateInfo ChannelUpdateInfo_clone(const struct LDKChannelUpdateInfo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_clone")] public static extern long ChannelUpdateInfo_clone(long _orig);
	// bool ChannelUpdateInfo_eq(const struct LDKChannelUpdateInfo *NONNULL_PTR a, const struct LDKChannelUpdateInfo *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_eq")] public static extern bool ChannelUpdateInfo_eq(long _a, long _b);
	// struct LDKCVec_u8Z ChannelUpdateInfo_write(const struct LDKChannelUpdateInfo *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_write")] public static extern byte[] ChannelUpdateInfo_write(long _obj);
	// struct LDKCResult_ChannelUpdateInfoDecodeErrorZ ChannelUpdateInfo_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_read")] public static extern long ChannelUpdateInfo_read(byte[] _ser);
	// void ChannelInfo_free(struct LDKChannelInfo this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_free")] public static extern void ChannelInfo_free(long _this_obj);
	// struct LDKChannelFeatures ChannelInfo_get_features(const struct LDKChannelInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_get_features")] public static extern long ChannelInfo_get_features(long _this_ptr);
	// void ChannelInfo_set_features(struct LDKChannelInfo *NONNULL_PTR this_ptr, struct LDKChannelFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_set_features")] public static extern void ChannelInfo_set_features(long _this_ptr, long _val);
	// struct LDKNodeId ChannelInfo_get_node_one(const struct LDKChannelInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_get_node_one")] public static extern long ChannelInfo_get_node_one(long _this_ptr);
	// void ChannelInfo_set_node_one(struct LDKChannelInfo *NONNULL_PTR this_ptr, struct LDKNodeId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_set_node_one")] public static extern void ChannelInfo_set_node_one(long _this_ptr, long _val);
	// struct LDKChannelUpdateInfo ChannelInfo_get_one_to_two(const struct LDKChannelInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_get_one_to_two")] public static extern long ChannelInfo_get_one_to_two(long _this_ptr);
	// void ChannelInfo_set_one_to_two(struct LDKChannelInfo *NONNULL_PTR this_ptr, struct LDKChannelUpdateInfo val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_set_one_to_two")] public static extern void ChannelInfo_set_one_to_two(long _this_ptr, long _val);
	// struct LDKNodeId ChannelInfo_get_node_two(const struct LDKChannelInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_get_node_two")] public static extern long ChannelInfo_get_node_two(long _this_ptr);
	// void ChannelInfo_set_node_two(struct LDKChannelInfo *NONNULL_PTR this_ptr, struct LDKNodeId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_set_node_two")] public static extern void ChannelInfo_set_node_two(long _this_ptr, long _val);
	// struct LDKChannelUpdateInfo ChannelInfo_get_two_to_one(const struct LDKChannelInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_get_two_to_one")] public static extern long ChannelInfo_get_two_to_one(long _this_ptr);
	// void ChannelInfo_set_two_to_one(struct LDKChannelInfo *NONNULL_PTR this_ptr, struct LDKChannelUpdateInfo val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_set_two_to_one")] public static extern void ChannelInfo_set_two_to_one(long _this_ptr, long _val);
	// struct LDKCOption_u64Z ChannelInfo_get_capacity_sats(const struct LDKChannelInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_get_capacity_sats")] public static extern long ChannelInfo_get_capacity_sats(long _this_ptr);
	// void ChannelInfo_set_capacity_sats(struct LDKChannelInfo *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_set_capacity_sats")] public static extern void ChannelInfo_set_capacity_sats(long _this_ptr, long _val);
	// struct LDKChannelAnnouncement ChannelInfo_get_announcement_message(const struct LDKChannelInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_get_announcement_message")] public static extern long ChannelInfo_get_announcement_message(long _this_ptr);
	// void ChannelInfo_set_announcement_message(struct LDKChannelInfo *NONNULL_PTR this_ptr, struct LDKChannelAnnouncement val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_set_announcement_message")] public static extern void ChannelInfo_set_announcement_message(long _this_ptr, long _val);
	// uint64_t ChannelInfo_clone_ptr(LDKChannelInfo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_clone_ptr")] public static extern long ChannelInfo_clone_ptr(long _arg);
	// struct LDKChannelInfo ChannelInfo_clone(const struct LDKChannelInfo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_clone")] public static extern long ChannelInfo_clone(long _orig);
	// bool ChannelInfo_eq(const struct LDKChannelInfo *NONNULL_PTR a, const struct LDKChannelInfo *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_eq")] public static extern bool ChannelInfo_eq(long _a, long _b);
	// MUST_USE_RES struct LDKChannelUpdateInfo ChannelInfo_get_directional_info(const struct LDKChannelInfo *NONNULL_PTR this_arg, uint8_t channel_flags);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_get_directional_info")] public static extern long ChannelInfo_get_directional_info(long _this_arg, byte _channel_flags);
	// struct LDKCVec_u8Z ChannelInfo_write(const struct LDKChannelInfo *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_write")] public static extern byte[] ChannelInfo_write(long _obj);
	// struct LDKCResult_ChannelInfoDecodeErrorZ ChannelInfo_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_read")] public static extern long ChannelInfo_read(byte[] _ser);
	// void DirectedChannelInfo_free(struct LDKDirectedChannelInfo this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelInfo_free")] public static extern void DirectedChannelInfo_free(long _this_obj);
	// uint64_t DirectedChannelInfo_clone_ptr(LDKDirectedChannelInfo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelInfo_clone_ptr")] public static extern long DirectedChannelInfo_clone_ptr(long _arg);
	// struct LDKDirectedChannelInfo DirectedChannelInfo_clone(const struct LDKDirectedChannelInfo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelInfo_clone")] public static extern long DirectedChannelInfo_clone(long _orig);
	// MUST_USE_RES struct LDKChannelInfo DirectedChannelInfo_channel(const struct LDKDirectedChannelInfo *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelInfo_channel")] public static extern long DirectedChannelInfo_channel(long _this_arg);
	// MUST_USE_RES uint64_t DirectedChannelInfo_htlc_maximum_msat(const struct LDKDirectedChannelInfo *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelInfo_htlc_maximum_msat")] public static extern long DirectedChannelInfo_htlc_maximum_msat(long _this_arg);
	// MUST_USE_RES struct LDKEffectiveCapacity DirectedChannelInfo_effective_capacity(const struct LDKDirectedChannelInfo *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelInfo_effective_capacity")] public static extern long DirectedChannelInfo_effective_capacity(long _this_arg);
	// void EffectiveCapacity_free(struct LDKEffectiveCapacity this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_free")] public static extern void EffectiveCapacity_free(long _this_ptr);
	// uint64_t EffectiveCapacity_clone_ptr(LDKEffectiveCapacity *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_clone_ptr")] public static extern long EffectiveCapacity_clone_ptr(long _arg);
	// struct LDKEffectiveCapacity EffectiveCapacity_clone(const struct LDKEffectiveCapacity *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_clone")] public static extern long EffectiveCapacity_clone(long _orig);
	// struct LDKEffectiveCapacity EffectiveCapacity_exact_liquidity(uint64_t liquidity_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_exact_liquidity")] public static extern long EffectiveCapacity_exact_liquidity(long _liquidity_msat);
	// struct LDKEffectiveCapacity EffectiveCapacity_maximum_htlc(uint64_t amount_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_maximum_htlc")] public static extern long EffectiveCapacity_maximum_htlc(long _amount_msat);
	// struct LDKEffectiveCapacity EffectiveCapacity_total(uint64_t capacity_msat, uint64_t htlc_maximum_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_total")] public static extern long EffectiveCapacity_total(long _capacity_msat, long _htlc_maximum_msat);
	// struct LDKEffectiveCapacity EffectiveCapacity_infinite(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_infinite")] public static extern long EffectiveCapacity_infinite();
	// struct LDKEffectiveCapacity EffectiveCapacity_unknown(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_unknown")] public static extern long EffectiveCapacity_unknown();
	// MUST_USE_RES uint64_t EffectiveCapacity_as_msat(const struct LDKEffectiveCapacity *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_as_msat")] public static extern long EffectiveCapacity_as_msat(long _this_arg);
	// void RoutingFees_free(struct LDKRoutingFees this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_free")] public static extern void RoutingFees_free(long _this_obj);
	// uint32_t RoutingFees_get_base_msat(const struct LDKRoutingFees *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_get_base_msat")] public static extern int RoutingFees_get_base_msat(long _this_ptr);
	// void RoutingFees_set_base_msat(struct LDKRoutingFees *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_set_base_msat")] public static extern void RoutingFees_set_base_msat(long _this_ptr, int _val);
	// uint32_t RoutingFees_get_proportional_millionths(const struct LDKRoutingFees *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_get_proportional_millionths")] public static extern int RoutingFees_get_proportional_millionths(long _this_ptr);
	// void RoutingFees_set_proportional_millionths(struct LDKRoutingFees *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_set_proportional_millionths")] public static extern void RoutingFees_set_proportional_millionths(long _this_ptr, int _val);
	// MUST_USE_RES struct LDKRoutingFees RoutingFees_new(uint32_t base_msat_arg, uint32_t proportional_millionths_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_new")] public static extern long RoutingFees_new(int _base_msat_arg, int _proportional_millionths_arg);
	// bool RoutingFees_eq(const struct LDKRoutingFees *NONNULL_PTR a, const struct LDKRoutingFees *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_eq")] public static extern bool RoutingFees_eq(long _a, long _b);
	// uint64_t RoutingFees_clone_ptr(LDKRoutingFees *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_clone_ptr")] public static extern long RoutingFees_clone_ptr(long _arg);
	// struct LDKRoutingFees RoutingFees_clone(const struct LDKRoutingFees *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_clone")] public static extern long RoutingFees_clone(long _orig);
	// uint64_t RoutingFees_hash(const struct LDKRoutingFees *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_hash")] public static extern long RoutingFees_hash(long _o);
	// struct LDKCVec_u8Z RoutingFees_write(const struct LDKRoutingFees *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_write")] public static extern byte[] RoutingFees_write(long _obj);
	// struct LDKCResult_RoutingFeesDecodeErrorZ RoutingFees_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_read")] public static extern long RoutingFees_read(byte[] _ser);
	// void NodeAnnouncementInfo_free(struct LDKNodeAnnouncementInfo this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_free")] public static extern void NodeAnnouncementInfo_free(long _this_obj);
	// struct LDKNodeFeatures NodeAnnouncementInfo_get_features(const struct LDKNodeAnnouncementInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_get_features")] public static extern long NodeAnnouncementInfo_get_features(long _this_ptr);
	// void NodeAnnouncementInfo_set_features(struct LDKNodeAnnouncementInfo *NONNULL_PTR this_ptr, struct LDKNodeFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_set_features")] public static extern void NodeAnnouncementInfo_set_features(long _this_ptr, long _val);
	// uint32_t NodeAnnouncementInfo_get_last_update(const struct LDKNodeAnnouncementInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_get_last_update")] public static extern int NodeAnnouncementInfo_get_last_update(long _this_ptr);
	// void NodeAnnouncementInfo_set_last_update(struct LDKNodeAnnouncementInfo *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_set_last_update")] public static extern void NodeAnnouncementInfo_set_last_update(long _this_ptr, int _val);
	// const uint8_t (*NodeAnnouncementInfo_get_rgb(const struct LDKNodeAnnouncementInfo *NONNULL_PTR this_ptr))[3];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_get_rgb")] public static extern byte[] NodeAnnouncementInfo_get_rgb(long _this_ptr);
	// void NodeAnnouncementInfo_set_rgb(struct LDKNodeAnnouncementInfo *NONNULL_PTR this_ptr, struct LDKThreeBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_set_rgb")] public static extern void NodeAnnouncementInfo_set_rgb(long _this_ptr, byte[] _val);
	// struct LDKNodeAlias NodeAnnouncementInfo_get_alias(const struct LDKNodeAnnouncementInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_get_alias")] public static extern long NodeAnnouncementInfo_get_alias(long _this_ptr);
	// void NodeAnnouncementInfo_set_alias(struct LDKNodeAnnouncementInfo *NONNULL_PTR this_ptr, struct LDKNodeAlias val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_set_alias")] public static extern void NodeAnnouncementInfo_set_alias(long _this_ptr, long _val);
	// struct LDKCVec_NetAddressZ NodeAnnouncementInfo_get_addresses(const struct LDKNodeAnnouncementInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_get_addresses")] public static extern long[] NodeAnnouncementInfo_get_addresses(long _this_ptr);
	// void NodeAnnouncementInfo_set_addresses(struct LDKNodeAnnouncementInfo *NONNULL_PTR this_ptr, struct LDKCVec_NetAddressZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_set_addresses")] public static extern void NodeAnnouncementInfo_set_addresses(long _this_ptr, long[] _val);
	// struct LDKNodeAnnouncement NodeAnnouncementInfo_get_announcement_message(const struct LDKNodeAnnouncementInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_get_announcement_message")] public static extern long NodeAnnouncementInfo_get_announcement_message(long _this_ptr);
	// void NodeAnnouncementInfo_set_announcement_message(struct LDKNodeAnnouncementInfo *NONNULL_PTR this_ptr, struct LDKNodeAnnouncement val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_set_announcement_message")] public static extern void NodeAnnouncementInfo_set_announcement_message(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKNodeAnnouncementInfo NodeAnnouncementInfo_new(struct LDKNodeFeatures features_arg, uint32_t last_update_arg, struct LDKThreeBytes rgb_arg, struct LDKNodeAlias alias_arg, struct LDKCVec_NetAddressZ addresses_arg, struct LDKNodeAnnouncement announcement_message_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_new")] public static extern long NodeAnnouncementInfo_new(long _features_arg, int _last_update_arg, byte[] _rgb_arg, long _alias_arg, long[] _addresses_arg, long _announcement_message_arg);
	// uint64_t NodeAnnouncementInfo_clone_ptr(LDKNodeAnnouncementInfo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_clone_ptr")] public static extern long NodeAnnouncementInfo_clone_ptr(long _arg);
	// struct LDKNodeAnnouncementInfo NodeAnnouncementInfo_clone(const struct LDKNodeAnnouncementInfo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_clone")] public static extern long NodeAnnouncementInfo_clone(long _orig);
	// bool NodeAnnouncementInfo_eq(const struct LDKNodeAnnouncementInfo *NONNULL_PTR a, const struct LDKNodeAnnouncementInfo *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_eq")] public static extern bool NodeAnnouncementInfo_eq(long _a, long _b);
	// struct LDKCVec_u8Z NodeAnnouncementInfo_write(const struct LDKNodeAnnouncementInfo *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_write")] public static extern byte[] NodeAnnouncementInfo_write(long _obj);
	// struct LDKCResult_NodeAnnouncementInfoDecodeErrorZ NodeAnnouncementInfo_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_read")] public static extern long NodeAnnouncementInfo_read(byte[] _ser);
	// void NodeAlias_free(struct LDKNodeAlias this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_free")] public static extern void NodeAlias_free(long _this_obj);
	// const uint8_t (*NodeAlias_get_a(const struct LDKNodeAlias *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_get_a")] public static extern byte[] NodeAlias_get_a(long _this_ptr);
	// void NodeAlias_set_a(struct LDKNodeAlias *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_set_a")] public static extern void NodeAlias_set_a(long _this_ptr, byte[] _val);
	// MUST_USE_RES struct LDKNodeAlias NodeAlias_new(struct LDKThirtyTwoBytes a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_new")] public static extern long NodeAlias_new(byte[] _a_arg);
	// uint64_t NodeAlias_clone_ptr(LDKNodeAlias *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_clone_ptr")] public static extern long NodeAlias_clone_ptr(long _arg);
	// struct LDKNodeAlias NodeAlias_clone(const struct LDKNodeAlias *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_clone")] public static extern long NodeAlias_clone(long _orig);
	// bool NodeAlias_eq(const struct LDKNodeAlias *NONNULL_PTR a, const struct LDKNodeAlias *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_eq")] public static extern bool NodeAlias_eq(long _a, long _b);
	// struct LDKCVec_u8Z NodeAlias_write(const struct LDKNodeAlias *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_write")] public static extern byte[] NodeAlias_write(long _obj);
	// struct LDKCResult_NodeAliasDecodeErrorZ NodeAlias_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_read")] public static extern long NodeAlias_read(byte[] _ser);
	// void NodeInfo_free(struct LDKNodeInfo this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_free")] public static extern void NodeInfo_free(long _this_obj);
	// struct LDKCVec_u64Z NodeInfo_get_channels(const struct LDKNodeInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_get_channels")] public static extern long[] NodeInfo_get_channels(long _this_ptr);
	// void NodeInfo_set_channels(struct LDKNodeInfo *NONNULL_PTR this_ptr, struct LDKCVec_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_set_channels")] public static extern void NodeInfo_set_channels(long _this_ptr, long[] _val);
	// struct LDKRoutingFees NodeInfo_get_lowest_inbound_channel_fees(const struct LDKNodeInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_get_lowest_inbound_channel_fees")] public static extern long NodeInfo_get_lowest_inbound_channel_fees(long _this_ptr);
	// void NodeInfo_set_lowest_inbound_channel_fees(struct LDKNodeInfo *NONNULL_PTR this_ptr, struct LDKRoutingFees val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_set_lowest_inbound_channel_fees")] public static extern void NodeInfo_set_lowest_inbound_channel_fees(long _this_ptr, long _val);
	// struct LDKNodeAnnouncementInfo NodeInfo_get_announcement_info(const struct LDKNodeInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_get_announcement_info")] public static extern long NodeInfo_get_announcement_info(long _this_ptr);
	// void NodeInfo_set_announcement_info(struct LDKNodeInfo *NONNULL_PTR this_ptr, struct LDKNodeAnnouncementInfo val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_set_announcement_info")] public static extern void NodeInfo_set_announcement_info(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKNodeInfo NodeInfo_new(struct LDKCVec_u64Z channels_arg, struct LDKRoutingFees lowest_inbound_channel_fees_arg, struct LDKNodeAnnouncementInfo announcement_info_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_new")] public static extern long NodeInfo_new(long[] _channels_arg, long _lowest_inbound_channel_fees_arg, long _announcement_info_arg);
	// uint64_t NodeInfo_clone_ptr(LDKNodeInfo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_clone_ptr")] public static extern long NodeInfo_clone_ptr(long _arg);
	// struct LDKNodeInfo NodeInfo_clone(const struct LDKNodeInfo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_clone")] public static extern long NodeInfo_clone(long _orig);
	// bool NodeInfo_eq(const struct LDKNodeInfo *NONNULL_PTR a, const struct LDKNodeInfo *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_eq")] public static extern bool NodeInfo_eq(long _a, long _b);
	// struct LDKCVec_u8Z NodeInfo_write(const struct LDKNodeInfo *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_write")] public static extern byte[] NodeInfo_write(long _obj);
	// struct LDKCResult_NodeInfoDecodeErrorZ NodeInfo_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_read")] public static extern long NodeInfo_read(byte[] _ser);
	// struct LDKCVec_u8Z NetworkGraph_write(const struct LDKNetworkGraph *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_write")] public static extern byte[] NetworkGraph_write(long _obj);
	// struct LDKCResult_NetworkGraphDecodeErrorZ NetworkGraph_read(struct LDKu8slice ser, struct LDKLogger arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_read")] public static extern long NetworkGraph_read(byte[] _ser, long _arg);
	// MUST_USE_RES struct LDKNetworkGraph NetworkGraph_new(struct LDKThirtyTwoBytes genesis_hash, struct LDKLogger logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_new")] public static extern long NetworkGraph_new(byte[] _genesis_hash, long _logger);
	// MUST_USE_RES struct LDKReadOnlyNetworkGraph NetworkGraph_read_only(const struct LDKNetworkGraph *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_read_only")] public static extern long NetworkGraph_read_only(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u32Z NetworkGraph_get_last_rapid_gossip_sync_timestamp(const struct LDKNetworkGraph *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_get_last_rapid_gossip_sync_timestamp")] public static extern long NetworkGraph_get_last_rapid_gossip_sync_timestamp(long _this_arg);
	// void NetworkGraph_set_last_rapid_gossip_sync_timestamp(const struct LDKNetworkGraph *NONNULL_PTR this_arg, uint32_t last_rapid_gossip_sync_timestamp);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_set_last_rapid_gossip_sync_timestamp")] public static extern void NetworkGraph_set_last_rapid_gossip_sync_timestamp(long _this_arg, int _last_rapid_gossip_sync_timestamp);
	// MUST_USE_RES struct LDKCResult_NoneLightningErrorZ NetworkGraph_update_node_from_announcement(const struct LDKNetworkGraph *NONNULL_PTR this_arg, const struct LDKNodeAnnouncement *NONNULL_PTR msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_update_node_from_announcement")] public static extern long NetworkGraph_update_node_from_announcement(long _this_arg, long _msg);
	// MUST_USE_RES struct LDKCResult_NoneLightningErrorZ NetworkGraph_update_node_from_unsigned_announcement(const struct LDKNetworkGraph *NONNULL_PTR this_arg, const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_update_node_from_unsigned_announcement")] public static extern long NetworkGraph_update_node_from_unsigned_announcement(long _this_arg, long _msg);
	// MUST_USE_RES struct LDKCResult_NoneLightningErrorZ NetworkGraph_update_channel_from_announcement(const struct LDKNetworkGraph *NONNULL_PTR this_arg, const struct LDKChannelAnnouncement *NONNULL_PTR msg, struct LDKCOption_AccessZ chain_access);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_update_channel_from_announcement")] public static extern long NetworkGraph_update_channel_from_announcement(long _this_arg, long _msg, long _chain_access);
	// MUST_USE_RES struct LDKCResult_NoneLightningErrorZ NetworkGraph_update_channel_from_unsigned_announcement(const struct LDKNetworkGraph *NONNULL_PTR this_arg, const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR msg, struct LDKCOption_AccessZ chain_access);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_update_channel_from_unsigned_announcement")] public static extern long NetworkGraph_update_channel_from_unsigned_announcement(long _this_arg, long _msg, long _chain_access);
	// MUST_USE_RES struct LDKCResult_NoneLightningErrorZ NetworkGraph_add_channel_from_partial_announcement(const struct LDKNetworkGraph *NONNULL_PTR this_arg, uint64_t short_channel_id, uint64_t timestamp, struct LDKChannelFeatures features, struct LDKPublicKey node_id_1, struct LDKPublicKey node_id_2);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_add_channel_from_partial_announcement")] public static extern long NetworkGraph_add_channel_from_partial_announcement(long _this_arg, long _short_channel_id, long _timestamp, long _features, byte[] _node_id_1, byte[] _node_id_2);
	// void NetworkGraph_channel_failed(const struct LDKNetworkGraph *NONNULL_PTR this_arg, uint64_t short_channel_id, bool is_permanent);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_channel_failed")] public static extern void NetworkGraph_channel_failed(long _this_arg, long _short_channel_id, bool _is_permanent);
	// void NetworkGraph_node_failed_permanent(const struct LDKNetworkGraph *NONNULL_PTR this_arg, struct LDKPublicKey node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_node_failed_permanent")] public static extern void NetworkGraph_node_failed_permanent(long _this_arg, byte[] _node_id);
	// void NetworkGraph_remove_stale_channels_and_tracking(const struct LDKNetworkGraph *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_remove_stale_channels_and_tracking")] public static extern void NetworkGraph_remove_stale_channels_and_tracking(long _this_arg);
	// void NetworkGraph_remove_stale_channels_and_tracking_with_time(const struct LDKNetworkGraph *NONNULL_PTR this_arg, uint64_t current_time_unix);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_remove_stale_channels_and_tracking_with_time")] public static extern void NetworkGraph_remove_stale_channels_and_tracking_with_time(long _this_arg, long _current_time_unix);
	// MUST_USE_RES struct LDKCResult_NoneLightningErrorZ NetworkGraph_update_channel(const struct LDKNetworkGraph *NONNULL_PTR this_arg, const struct LDKChannelUpdate *NONNULL_PTR msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_update_channel")] public static extern long NetworkGraph_update_channel(long _this_arg, long _msg);
	// MUST_USE_RES struct LDKCResult_NoneLightningErrorZ NetworkGraph_update_channel_unsigned(const struct LDKNetworkGraph *NONNULL_PTR this_arg, const struct LDKUnsignedChannelUpdate *NONNULL_PTR msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_update_channel_unsigned")] public static extern long NetworkGraph_update_channel_unsigned(long _this_arg, long _msg);
	// MUST_USE_RES struct LDKChannelInfo ReadOnlyNetworkGraph_channel(const struct LDKReadOnlyNetworkGraph *NONNULL_PTR this_arg, uint64_t short_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReadOnlyNetworkGraph_channel")] public static extern long ReadOnlyNetworkGraph_channel(long _this_arg, long _short_channel_id);
	// MUST_USE_RES struct LDKCVec_u64Z ReadOnlyNetworkGraph_list_channels(const struct LDKReadOnlyNetworkGraph *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReadOnlyNetworkGraph_list_channels")] public static extern long[] ReadOnlyNetworkGraph_list_channels(long _this_arg);
	// MUST_USE_RES struct LDKNodeInfo ReadOnlyNetworkGraph_node(const struct LDKReadOnlyNetworkGraph *NONNULL_PTR this_arg, const struct LDKNodeId *NONNULL_PTR node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReadOnlyNetworkGraph_node")] public static extern long ReadOnlyNetworkGraph_node(long _this_arg, long _node_id);
	// MUST_USE_RES struct LDKCVec_NodeIdZ ReadOnlyNetworkGraph_list_nodes(const struct LDKReadOnlyNetworkGraph *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReadOnlyNetworkGraph_list_nodes")] public static extern long[] ReadOnlyNetworkGraph_list_nodes(long _this_arg);
	// MUST_USE_RES struct LDKCOption_CVec_NetAddressZZ ReadOnlyNetworkGraph_get_addresses(const struct LDKReadOnlyNetworkGraph *NONNULL_PTR this_arg, struct LDKPublicKey pubkey);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReadOnlyNetworkGraph_get_addresses")] public static extern long ReadOnlyNetworkGraph_get_addresses(long _this_arg, byte[] _pubkey);
	// void DefaultRouter_free(struct LDKDefaultRouter this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DefaultRouter_free")] public static extern void DefaultRouter_free(long _this_obj);
	// MUST_USE_RES struct LDKDefaultRouter DefaultRouter_new(const struct LDKNetworkGraph *NONNULL_PTR network_graph, struct LDKLogger logger, struct LDKThirtyTwoBytes random_seed_bytes, struct LDKLockableScore scorer);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DefaultRouter_new")] public static extern long DefaultRouter_new(long _network_graph, long _logger, byte[] _random_seed_bytes, long _scorer);
	// struct LDKRouter DefaultRouter_as_Router(const struct LDKDefaultRouter *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DefaultRouter_as_Router")] public static extern long DefaultRouter_as_Router(long _this_arg);
	// void Router_free(struct LDKRouter this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Router_free")] public static extern void Router_free(long _this_ptr);
	// void ScorerAccountingForInFlightHtlcs_free(struct LDKScorerAccountingForInFlightHtlcs this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ScorerAccountingForInFlightHtlcs_free")] public static extern void ScorerAccountingForInFlightHtlcs_free(long _this_obj);
	// MUST_USE_RES struct LDKScorerAccountingForInFlightHtlcs ScorerAccountingForInFlightHtlcs_new(struct LDKScore scorer, struct LDKInFlightHtlcs inflight_htlcs);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ScorerAccountingForInFlightHtlcs_new")] public static extern long ScorerAccountingForInFlightHtlcs_new(long _scorer, long _inflight_htlcs);
	// struct LDKCVec_u8Z ScorerAccountingForInFlightHtlcs_write(const struct LDKScorerAccountingForInFlightHtlcs *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ScorerAccountingForInFlightHtlcs_write")] public static extern byte[] ScorerAccountingForInFlightHtlcs_write(long _obj);
	// struct LDKScore ScorerAccountingForInFlightHtlcs_as_Score(const struct LDKScorerAccountingForInFlightHtlcs *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ScorerAccountingForInFlightHtlcs_as_Score")] public static extern long ScorerAccountingForInFlightHtlcs_as_Score(long _this_arg);
	// void InFlightHtlcs_free(struct LDKInFlightHtlcs this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InFlightHtlcs_free")] public static extern void InFlightHtlcs_free(long _this_obj);
	// uint64_t InFlightHtlcs_clone_ptr(LDKInFlightHtlcs *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InFlightHtlcs_clone_ptr")] public static extern long InFlightHtlcs_clone_ptr(long _arg);
	// struct LDKInFlightHtlcs InFlightHtlcs_clone(const struct LDKInFlightHtlcs *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InFlightHtlcs_clone")] public static extern long InFlightHtlcs_clone(long _orig);
	// MUST_USE_RES struct LDKInFlightHtlcs InFlightHtlcs_new(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InFlightHtlcs_new")] public static extern long InFlightHtlcs_new();
	// MUST_USE_RES struct LDKCOption_u64Z InFlightHtlcs_used_liquidity_msat(const struct LDKInFlightHtlcs *NONNULL_PTR this_arg, const struct LDKNodeId *NONNULL_PTR source, const struct LDKNodeId *NONNULL_PTR target, uint64_t channel_scid);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InFlightHtlcs_used_liquidity_msat")] public static extern long InFlightHtlcs_used_liquidity_msat(long _this_arg, long _source, long _target, long _channel_scid);
	// struct LDKCVec_u8Z InFlightHtlcs_write(const struct LDKInFlightHtlcs *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InFlightHtlcs_write")] public static extern byte[] InFlightHtlcs_write(long _obj);
	// struct LDKCResult_InFlightHtlcsDecodeErrorZ InFlightHtlcs_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InFlightHtlcs_read")] public static extern long InFlightHtlcs_read(byte[] _ser);
	// void RouteHop_free(struct LDKRouteHop this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_free")] public static extern void RouteHop_free(long _this_obj);
	// struct LDKPublicKey RouteHop_get_pubkey(const struct LDKRouteHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_get_pubkey")] public static extern byte[] RouteHop_get_pubkey(long _this_ptr);
	// void RouteHop_set_pubkey(struct LDKRouteHop *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_set_pubkey")] public static extern void RouteHop_set_pubkey(long _this_ptr, byte[] _val);
	// struct LDKNodeFeatures RouteHop_get_node_features(const struct LDKRouteHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_get_node_features")] public static extern long RouteHop_get_node_features(long _this_ptr);
	// void RouteHop_set_node_features(struct LDKRouteHop *NONNULL_PTR this_ptr, struct LDKNodeFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_set_node_features")] public static extern void RouteHop_set_node_features(long _this_ptr, long _val);
	// uint64_t RouteHop_get_short_channel_id(const struct LDKRouteHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_get_short_channel_id")] public static extern long RouteHop_get_short_channel_id(long _this_ptr);
	// void RouteHop_set_short_channel_id(struct LDKRouteHop *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_set_short_channel_id")] public static extern void RouteHop_set_short_channel_id(long _this_ptr, long _val);
	// struct LDKChannelFeatures RouteHop_get_channel_features(const struct LDKRouteHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_get_channel_features")] public static extern long RouteHop_get_channel_features(long _this_ptr);
	// void RouteHop_set_channel_features(struct LDKRouteHop *NONNULL_PTR this_ptr, struct LDKChannelFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_set_channel_features")] public static extern void RouteHop_set_channel_features(long _this_ptr, long _val);
	// uint64_t RouteHop_get_fee_msat(const struct LDKRouteHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_get_fee_msat")] public static extern long RouteHop_get_fee_msat(long _this_ptr);
	// void RouteHop_set_fee_msat(struct LDKRouteHop *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_set_fee_msat")] public static extern void RouteHop_set_fee_msat(long _this_ptr, long _val);
	// uint32_t RouteHop_get_cltv_expiry_delta(const struct LDKRouteHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_get_cltv_expiry_delta")] public static extern int RouteHop_get_cltv_expiry_delta(long _this_ptr);
	// void RouteHop_set_cltv_expiry_delta(struct LDKRouteHop *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_set_cltv_expiry_delta")] public static extern void RouteHop_set_cltv_expiry_delta(long _this_ptr, int _val);
	// MUST_USE_RES struct LDKRouteHop RouteHop_new(struct LDKPublicKey pubkey_arg, struct LDKNodeFeatures node_features_arg, uint64_t short_channel_id_arg, struct LDKChannelFeatures channel_features_arg, uint64_t fee_msat_arg, uint32_t cltv_expiry_delta_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_new")] public static extern long RouteHop_new(byte[] _pubkey_arg, long _node_features_arg, long _short_channel_id_arg, long _channel_features_arg, long _fee_msat_arg, int _cltv_expiry_delta_arg);
	// uint64_t RouteHop_clone_ptr(LDKRouteHop *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_clone_ptr")] public static extern long RouteHop_clone_ptr(long _arg);
	// struct LDKRouteHop RouteHop_clone(const struct LDKRouteHop *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_clone")] public static extern long RouteHop_clone(long _orig);
	// uint64_t RouteHop_hash(const struct LDKRouteHop *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_hash")] public static extern long RouteHop_hash(long _o);
	// bool RouteHop_eq(const struct LDKRouteHop *NONNULL_PTR a, const struct LDKRouteHop *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_eq")] public static extern bool RouteHop_eq(long _a, long _b);
	// struct LDKCVec_u8Z RouteHop_write(const struct LDKRouteHop *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_write")] public static extern byte[] RouteHop_write(long _obj);
	// struct LDKCResult_RouteHopDecodeErrorZ RouteHop_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_read")] public static extern long RouteHop_read(byte[] _ser);
	// void Route_free(struct LDKRoute this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_free")] public static extern void Route_free(long _this_obj);
	// struct LDKCVec_CVec_RouteHopZZ Route_get_paths(const struct LDKRoute *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_get_paths")] public static extern long[][] Route_get_paths(long _this_ptr);
	// void Route_set_paths(struct LDKRoute *NONNULL_PTR this_ptr, struct LDKCVec_CVec_RouteHopZZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_set_paths")] public static extern void Route_set_paths(long _this_ptr, long[][] _val);
	// struct LDKPaymentParameters Route_get_payment_params(const struct LDKRoute *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_get_payment_params")] public static extern long Route_get_payment_params(long _this_ptr);
	// void Route_set_payment_params(struct LDKRoute *NONNULL_PTR this_ptr, struct LDKPaymentParameters val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_set_payment_params")] public static extern void Route_set_payment_params(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKRoute Route_new(struct LDKCVec_CVec_RouteHopZZ paths_arg, struct LDKPaymentParameters payment_params_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_new")] public static extern long Route_new(long[][] _paths_arg, long _payment_params_arg);
	// uint64_t Route_clone_ptr(LDKRoute *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_clone_ptr")] public static extern long Route_clone_ptr(long _arg);
	// struct LDKRoute Route_clone(const struct LDKRoute *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_clone")] public static extern long Route_clone(long _orig);
	// uint64_t Route_hash(const struct LDKRoute *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_hash")] public static extern long Route_hash(long _o);
	// bool Route_eq(const struct LDKRoute *NONNULL_PTR a, const struct LDKRoute *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_eq")] public static extern bool Route_eq(long _a, long _b);
	// MUST_USE_RES uint64_t Route_get_total_fees(const struct LDKRoute *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_get_total_fees")] public static extern long Route_get_total_fees(long _this_arg);
	// MUST_USE_RES uint64_t Route_get_total_amount(const struct LDKRoute *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_get_total_amount")] public static extern long Route_get_total_amount(long _this_arg);
	// struct LDKCVec_u8Z Route_write(const struct LDKRoute *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_write")] public static extern byte[] Route_write(long _obj);
	// struct LDKCResult_RouteDecodeErrorZ Route_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_read")] public static extern long Route_read(byte[] _ser);
	// void RouteParameters_free(struct LDKRouteParameters this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_free")] public static extern void RouteParameters_free(long _this_obj);
	// struct LDKPaymentParameters RouteParameters_get_payment_params(const struct LDKRouteParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_get_payment_params")] public static extern long RouteParameters_get_payment_params(long _this_ptr);
	// void RouteParameters_set_payment_params(struct LDKRouteParameters *NONNULL_PTR this_ptr, struct LDKPaymentParameters val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_set_payment_params")] public static extern void RouteParameters_set_payment_params(long _this_ptr, long _val);
	// uint64_t RouteParameters_get_final_value_msat(const struct LDKRouteParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_get_final_value_msat")] public static extern long RouteParameters_get_final_value_msat(long _this_ptr);
	// void RouteParameters_set_final_value_msat(struct LDKRouteParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_set_final_value_msat")] public static extern void RouteParameters_set_final_value_msat(long _this_ptr, long _val);
	// uint32_t RouteParameters_get_final_cltv_expiry_delta(const struct LDKRouteParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_get_final_cltv_expiry_delta")] public static extern int RouteParameters_get_final_cltv_expiry_delta(long _this_ptr);
	// void RouteParameters_set_final_cltv_expiry_delta(struct LDKRouteParameters *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_set_final_cltv_expiry_delta")] public static extern void RouteParameters_set_final_cltv_expiry_delta(long _this_ptr, int _val);
	// MUST_USE_RES struct LDKRouteParameters RouteParameters_new(struct LDKPaymentParameters payment_params_arg, uint64_t final_value_msat_arg, uint32_t final_cltv_expiry_delta_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_new")] public static extern long RouteParameters_new(long _payment_params_arg, long _final_value_msat_arg, int _final_cltv_expiry_delta_arg);
	// uint64_t RouteParameters_clone_ptr(LDKRouteParameters *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_clone_ptr")] public static extern long RouteParameters_clone_ptr(long _arg);
	// struct LDKRouteParameters RouteParameters_clone(const struct LDKRouteParameters *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_clone")] public static extern long RouteParameters_clone(long _orig);
	// struct LDKCVec_u8Z RouteParameters_write(const struct LDKRouteParameters *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_write")] public static extern byte[] RouteParameters_write(long _obj);
	// struct LDKCResult_RouteParametersDecodeErrorZ RouteParameters_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_read")] public static extern long RouteParameters_read(byte[] _ser);
	// void PaymentParameters_free(struct LDKPaymentParameters this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_free")] public static extern void PaymentParameters_free(long _this_obj);
	// struct LDKPublicKey PaymentParameters_get_payee_pubkey(const struct LDKPaymentParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_get_payee_pubkey")] public static extern byte[] PaymentParameters_get_payee_pubkey(long _this_ptr);
	// void PaymentParameters_set_payee_pubkey(struct LDKPaymentParameters *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_set_payee_pubkey")] public static extern void PaymentParameters_set_payee_pubkey(long _this_ptr, byte[] _val);
	// struct LDKInvoiceFeatures PaymentParameters_get_features(const struct LDKPaymentParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_get_features")] public static extern long PaymentParameters_get_features(long _this_ptr);
	// void PaymentParameters_set_features(struct LDKPaymentParameters *NONNULL_PTR this_ptr, struct LDKInvoiceFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_set_features")] public static extern void PaymentParameters_set_features(long _this_ptr, long _val);
	// struct LDKCVec_RouteHintZ PaymentParameters_get_route_hints(const struct LDKPaymentParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_get_route_hints")] public static extern long[] PaymentParameters_get_route_hints(long _this_ptr);
	// void PaymentParameters_set_route_hints(struct LDKPaymentParameters *NONNULL_PTR this_ptr, struct LDKCVec_RouteHintZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_set_route_hints")] public static extern void PaymentParameters_set_route_hints(long _this_ptr, long[] _val);
	// struct LDKCOption_u64Z PaymentParameters_get_expiry_time(const struct LDKPaymentParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_get_expiry_time")] public static extern long PaymentParameters_get_expiry_time(long _this_ptr);
	// void PaymentParameters_set_expiry_time(struct LDKPaymentParameters *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_set_expiry_time")] public static extern void PaymentParameters_set_expiry_time(long _this_ptr, long _val);
	// uint32_t PaymentParameters_get_max_total_cltv_expiry_delta(const struct LDKPaymentParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_get_max_total_cltv_expiry_delta")] public static extern int PaymentParameters_get_max_total_cltv_expiry_delta(long _this_ptr);
	// void PaymentParameters_set_max_total_cltv_expiry_delta(struct LDKPaymentParameters *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_set_max_total_cltv_expiry_delta")] public static extern void PaymentParameters_set_max_total_cltv_expiry_delta(long _this_ptr, int _val);
	// uint8_t PaymentParameters_get_max_path_count(const struct LDKPaymentParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_get_max_path_count")] public static extern byte PaymentParameters_get_max_path_count(long _this_ptr);
	// void PaymentParameters_set_max_path_count(struct LDKPaymentParameters *NONNULL_PTR this_ptr, uint8_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_set_max_path_count")] public static extern void PaymentParameters_set_max_path_count(long _this_ptr, byte _val);
	// uint8_t PaymentParameters_get_max_channel_saturation_power_of_half(const struct LDKPaymentParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_get_max_channel_saturation_power_of_half")] public static extern byte PaymentParameters_get_max_channel_saturation_power_of_half(long _this_ptr);
	// void PaymentParameters_set_max_channel_saturation_power_of_half(struct LDKPaymentParameters *NONNULL_PTR this_ptr, uint8_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_set_max_channel_saturation_power_of_half")] public static extern void PaymentParameters_set_max_channel_saturation_power_of_half(long _this_ptr, byte _val);
	// struct LDKCVec_u64Z PaymentParameters_get_previously_failed_channels(const struct LDKPaymentParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_get_previously_failed_channels")] public static extern long[] PaymentParameters_get_previously_failed_channels(long _this_ptr);
	// void PaymentParameters_set_previously_failed_channels(struct LDKPaymentParameters *NONNULL_PTR this_ptr, struct LDKCVec_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_set_previously_failed_channels")] public static extern void PaymentParameters_set_previously_failed_channels(long _this_ptr, long[] _val);
	// MUST_USE_RES struct LDKPaymentParameters PaymentParameters_new(struct LDKPublicKey payee_pubkey_arg, struct LDKInvoiceFeatures features_arg, struct LDKCVec_RouteHintZ route_hints_arg, struct LDKCOption_u64Z expiry_time_arg, uint32_t max_total_cltv_expiry_delta_arg, uint8_t max_path_count_arg, uint8_t max_channel_saturation_power_of_half_arg, struct LDKCVec_u64Z previously_failed_channels_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_new")] public static extern long PaymentParameters_new(byte[] _payee_pubkey_arg, long _features_arg, long[] _route_hints_arg, long _expiry_time_arg, int _max_total_cltv_expiry_delta_arg, byte _max_path_count_arg, byte _max_channel_saturation_power_of_half_arg, long[] _previously_failed_channels_arg);
	// uint64_t PaymentParameters_clone_ptr(LDKPaymentParameters *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_clone_ptr")] public static extern long PaymentParameters_clone_ptr(long _arg);
	// struct LDKPaymentParameters PaymentParameters_clone(const struct LDKPaymentParameters *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_clone")] public static extern long PaymentParameters_clone(long _orig);
	// uint64_t PaymentParameters_hash(const struct LDKPaymentParameters *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_hash")] public static extern long PaymentParameters_hash(long _o);
	// bool PaymentParameters_eq(const struct LDKPaymentParameters *NONNULL_PTR a, const struct LDKPaymentParameters *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_eq")] public static extern bool PaymentParameters_eq(long _a, long _b);
	// struct LDKCVec_u8Z PaymentParameters_write(const struct LDKPaymentParameters *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_write")] public static extern byte[] PaymentParameters_write(long _obj);
	// struct LDKCResult_PaymentParametersDecodeErrorZ PaymentParameters_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_read")] public static extern long PaymentParameters_read(byte[] _ser);
	// MUST_USE_RES struct LDKPaymentParameters PaymentParameters_from_node_id(struct LDKPublicKey payee_pubkey);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_from_node_id")] public static extern long PaymentParameters_from_node_id(byte[] _payee_pubkey);
	// MUST_USE_RES struct LDKPaymentParameters PaymentParameters_for_keysend(struct LDKPublicKey payee_pubkey);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_for_keysend")] public static extern long PaymentParameters_for_keysend(byte[] _payee_pubkey);
	// void RouteHint_free(struct LDKRouteHint this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_free")] public static extern void RouteHint_free(long _this_obj);
	// struct LDKCVec_RouteHintHopZ RouteHint_get_a(const struct LDKRouteHint *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_get_a")] public static extern long[] RouteHint_get_a(long _this_ptr);
	// void RouteHint_set_a(struct LDKRouteHint *NONNULL_PTR this_ptr, struct LDKCVec_RouteHintHopZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_set_a")] public static extern void RouteHint_set_a(long _this_ptr, long[] _val);
	// MUST_USE_RES struct LDKRouteHint RouteHint_new(struct LDKCVec_RouteHintHopZ a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_new")] public static extern long RouteHint_new(long[] _a_arg);
	// uint64_t RouteHint_clone_ptr(LDKRouteHint *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_clone_ptr")] public static extern long RouteHint_clone_ptr(long _arg);
	// struct LDKRouteHint RouteHint_clone(const struct LDKRouteHint *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_clone")] public static extern long RouteHint_clone(long _orig);
	// uint64_t RouteHint_hash(const struct LDKRouteHint *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_hash")] public static extern long RouteHint_hash(long _o);
	// bool RouteHint_eq(const struct LDKRouteHint *NONNULL_PTR a, const struct LDKRouteHint *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_eq")] public static extern bool RouteHint_eq(long _a, long _b);
	// struct LDKCVec_u8Z RouteHint_write(const struct LDKRouteHint *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_write")] public static extern byte[] RouteHint_write(long _obj);
	// struct LDKCResult_RouteHintDecodeErrorZ RouteHint_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_read")] public static extern long RouteHint_read(byte[] _ser);
	// void RouteHintHop_free(struct LDKRouteHintHop this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_free")] public static extern void RouteHintHop_free(long _this_obj);
	// struct LDKPublicKey RouteHintHop_get_src_node_id(const struct LDKRouteHintHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_get_src_node_id")] public static extern byte[] RouteHintHop_get_src_node_id(long _this_ptr);
	// void RouteHintHop_set_src_node_id(struct LDKRouteHintHop *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_set_src_node_id")] public static extern void RouteHintHop_set_src_node_id(long _this_ptr, byte[] _val);
	// uint64_t RouteHintHop_get_short_channel_id(const struct LDKRouteHintHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_get_short_channel_id")] public static extern long RouteHintHop_get_short_channel_id(long _this_ptr);
	// void RouteHintHop_set_short_channel_id(struct LDKRouteHintHop *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_set_short_channel_id")] public static extern void RouteHintHop_set_short_channel_id(long _this_ptr, long _val);
	// struct LDKRoutingFees RouteHintHop_get_fees(const struct LDKRouteHintHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_get_fees")] public static extern long RouteHintHop_get_fees(long _this_ptr);
	// void RouteHintHop_set_fees(struct LDKRouteHintHop *NONNULL_PTR this_ptr, struct LDKRoutingFees val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_set_fees")] public static extern void RouteHintHop_set_fees(long _this_ptr, long _val);
	// uint16_t RouteHintHop_get_cltv_expiry_delta(const struct LDKRouteHintHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_get_cltv_expiry_delta")] public static extern short RouteHintHop_get_cltv_expiry_delta(long _this_ptr);
	// void RouteHintHop_set_cltv_expiry_delta(struct LDKRouteHintHop *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_set_cltv_expiry_delta")] public static extern void RouteHintHop_set_cltv_expiry_delta(long _this_ptr, short _val);
	// struct LDKCOption_u64Z RouteHintHop_get_htlc_minimum_msat(const struct LDKRouteHintHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_get_htlc_minimum_msat")] public static extern long RouteHintHop_get_htlc_minimum_msat(long _this_ptr);
	// void RouteHintHop_set_htlc_minimum_msat(struct LDKRouteHintHop *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_set_htlc_minimum_msat")] public static extern void RouteHintHop_set_htlc_minimum_msat(long _this_ptr, long _val);
	// struct LDKCOption_u64Z RouteHintHop_get_htlc_maximum_msat(const struct LDKRouteHintHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_get_htlc_maximum_msat")] public static extern long RouteHintHop_get_htlc_maximum_msat(long _this_ptr);
	// void RouteHintHop_set_htlc_maximum_msat(struct LDKRouteHintHop *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_set_htlc_maximum_msat")] public static extern void RouteHintHop_set_htlc_maximum_msat(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKRouteHintHop RouteHintHop_new(struct LDKPublicKey src_node_id_arg, uint64_t short_channel_id_arg, struct LDKRoutingFees fees_arg, uint16_t cltv_expiry_delta_arg, struct LDKCOption_u64Z htlc_minimum_msat_arg, struct LDKCOption_u64Z htlc_maximum_msat_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_new")] public static extern long RouteHintHop_new(byte[] _src_node_id_arg, long _short_channel_id_arg, long _fees_arg, short _cltv_expiry_delta_arg, long _htlc_minimum_msat_arg, long _htlc_maximum_msat_arg);
	// uint64_t RouteHintHop_clone_ptr(LDKRouteHintHop *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_clone_ptr")] public static extern long RouteHintHop_clone_ptr(long _arg);
	// struct LDKRouteHintHop RouteHintHop_clone(const struct LDKRouteHintHop *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_clone")] public static extern long RouteHintHop_clone(long _orig);
	// uint64_t RouteHintHop_hash(const struct LDKRouteHintHop *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_hash")] public static extern long RouteHintHop_hash(long _o);
	// bool RouteHintHop_eq(const struct LDKRouteHintHop *NONNULL_PTR a, const struct LDKRouteHintHop *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_eq")] public static extern bool RouteHintHop_eq(long _a, long _b);
	// struct LDKCVec_u8Z RouteHintHop_write(const struct LDKRouteHintHop *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_write")] public static extern byte[] RouteHintHop_write(long _obj);
	// struct LDKCResult_RouteHintHopDecodeErrorZ RouteHintHop_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_read")] public static extern long RouteHintHop_read(byte[] _ser);
	// struct LDKCResult_RouteLightningErrorZ find_route(struct LDKPublicKey our_node_pubkey, const struct LDKRouteParameters *NONNULL_PTR route_params, const struct LDKNetworkGraph *NONNULL_PTR network_graph, struct LDKCVec_ChannelDetailsZ *first_hops, struct LDKLogger logger, const struct LDKScore *NONNULL_PTR scorer, const uint8_t (*random_seed_bytes)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_find_route")] public static extern long find_route(byte[] _our_node_pubkey, long _route_params, long _network_graph, long[] _first_hops, long _logger, long _scorer, byte[] _random_seed_bytes);
	// struct LDKCResult_RouteLightningErrorZ build_route_from_hops(struct LDKPublicKey our_node_pubkey, struct LDKCVec_PublicKeyZ hops, const struct LDKRouteParameters *NONNULL_PTR route_params, const struct LDKNetworkGraph *NONNULL_PTR network_graph, struct LDKLogger logger, const uint8_t (*random_seed_bytes)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_build_route_from_hops")] public static extern long build_route_from_hops(byte[] _our_node_pubkey, byte[][] _hops, long _route_params, long _network_graph, long _logger, byte[] _random_seed_bytes);
	// void Score_free(struct LDKScore this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Score_free")] public static extern void Score_free(long _this_ptr);
	// void LockableScore_free(struct LDKLockableScore this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LockableScore_free")] public static extern void LockableScore_free(long _this_ptr);
	// void WriteableScore_free(struct LDKWriteableScore this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WriteableScore_free")] public static extern void WriteableScore_free(long _this_ptr);
	// void MultiThreadedLockableScore_free(struct LDKMultiThreadedLockableScore this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MultiThreadedLockableScore_free")] public static extern void MultiThreadedLockableScore_free(long _this_obj);
	// void MultiThreadedScoreLock_free(struct LDKMultiThreadedScoreLock this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MultiThreadedScoreLock_free")] public static extern void MultiThreadedScoreLock_free(long _this_obj);
	// struct LDKScore MultiThreadedScoreLock_as_Score(const struct LDKMultiThreadedScoreLock *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MultiThreadedScoreLock_as_Score")] public static extern long MultiThreadedScoreLock_as_Score(long _this_arg);
	// struct LDKCVec_u8Z MultiThreadedScoreLock_write(const struct LDKMultiThreadedScoreLock *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MultiThreadedScoreLock_write")] public static extern byte[] MultiThreadedScoreLock_write(long _obj);
	// struct LDKLockableScore MultiThreadedLockableScore_as_LockableScore(const struct LDKMultiThreadedLockableScore *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MultiThreadedLockableScore_as_LockableScore")] public static extern long MultiThreadedLockableScore_as_LockableScore(long _this_arg);
	// struct LDKCVec_u8Z MultiThreadedLockableScore_write(const struct LDKMultiThreadedLockableScore *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MultiThreadedLockableScore_write")] public static extern byte[] MultiThreadedLockableScore_write(long _obj);
	// struct LDKWriteableScore MultiThreadedLockableScore_as_WriteableScore(const struct LDKMultiThreadedLockableScore *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MultiThreadedLockableScore_as_WriteableScore")] public static extern long MultiThreadedLockableScore_as_WriteableScore(long _this_arg);
	// MUST_USE_RES struct LDKMultiThreadedLockableScore MultiThreadedLockableScore_new(struct LDKScore score);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MultiThreadedLockableScore_new")] public static extern long MultiThreadedLockableScore_new(long _score);
	// void ChannelUsage_free(struct LDKChannelUsage this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_free")] public static extern void ChannelUsage_free(long _this_obj);
	// uint64_t ChannelUsage_get_amount_msat(const struct LDKChannelUsage *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_get_amount_msat")] public static extern long ChannelUsage_get_amount_msat(long _this_ptr);
	// void ChannelUsage_set_amount_msat(struct LDKChannelUsage *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_set_amount_msat")] public static extern void ChannelUsage_set_amount_msat(long _this_ptr, long _val);
	// uint64_t ChannelUsage_get_inflight_htlc_msat(const struct LDKChannelUsage *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_get_inflight_htlc_msat")] public static extern long ChannelUsage_get_inflight_htlc_msat(long _this_ptr);
	// void ChannelUsage_set_inflight_htlc_msat(struct LDKChannelUsage *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_set_inflight_htlc_msat")] public static extern void ChannelUsage_set_inflight_htlc_msat(long _this_ptr, long _val);
	// struct LDKEffectiveCapacity ChannelUsage_get_effective_capacity(const struct LDKChannelUsage *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_get_effective_capacity")] public static extern long ChannelUsage_get_effective_capacity(long _this_ptr);
	// void ChannelUsage_set_effective_capacity(struct LDKChannelUsage *NONNULL_PTR this_ptr, struct LDKEffectiveCapacity val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_set_effective_capacity")] public static extern void ChannelUsage_set_effective_capacity(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelUsage ChannelUsage_new(uint64_t amount_msat_arg, uint64_t inflight_htlc_msat_arg, struct LDKEffectiveCapacity effective_capacity_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_new")] public static extern long ChannelUsage_new(long _amount_msat_arg, long _inflight_htlc_msat_arg, long _effective_capacity_arg);
	// uint64_t ChannelUsage_clone_ptr(LDKChannelUsage *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_clone_ptr")] public static extern long ChannelUsage_clone_ptr(long _arg);
	// struct LDKChannelUsage ChannelUsage_clone(const struct LDKChannelUsage *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_clone")] public static extern long ChannelUsage_clone(long _orig);
	// void FixedPenaltyScorer_free(struct LDKFixedPenaltyScorer this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FixedPenaltyScorer_free")] public static extern void FixedPenaltyScorer_free(long _this_obj);
	// uint64_t FixedPenaltyScorer_clone_ptr(LDKFixedPenaltyScorer *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FixedPenaltyScorer_clone_ptr")] public static extern long FixedPenaltyScorer_clone_ptr(long _arg);
	// struct LDKFixedPenaltyScorer FixedPenaltyScorer_clone(const struct LDKFixedPenaltyScorer *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FixedPenaltyScorer_clone")] public static extern long FixedPenaltyScorer_clone(long _orig);
	// MUST_USE_RES struct LDKFixedPenaltyScorer FixedPenaltyScorer_with_penalty(uint64_t penalty_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FixedPenaltyScorer_with_penalty")] public static extern long FixedPenaltyScorer_with_penalty(long _penalty_msat);
	// struct LDKScore FixedPenaltyScorer_as_Score(const struct LDKFixedPenaltyScorer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FixedPenaltyScorer_as_Score")] public static extern long FixedPenaltyScorer_as_Score(long _this_arg);
	// struct LDKCVec_u8Z FixedPenaltyScorer_write(const struct LDKFixedPenaltyScorer *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FixedPenaltyScorer_write")] public static extern byte[] FixedPenaltyScorer_write(long _obj);
	// struct LDKCResult_FixedPenaltyScorerDecodeErrorZ FixedPenaltyScorer_read(struct LDKu8slice ser, uint64_t arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FixedPenaltyScorer_read")] public static extern long FixedPenaltyScorer_read(byte[] _ser, long _arg);
	// void ProbabilisticScorer_free(struct LDKProbabilisticScorer this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_free")] public static extern void ProbabilisticScorer_free(long _this_obj);
	// void ProbabilisticScoringParameters_free(struct LDKProbabilisticScoringParameters this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringParameters_free")] public static extern void ProbabilisticScoringParameters_free(long _this_obj);
	// uint64_t ProbabilisticScoringParameters_get_base_penalty_msat(const struct LDKProbabilisticScoringParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringParameters_get_base_penalty_msat")] public static extern long ProbabilisticScoringParameters_get_base_penalty_msat(long _this_ptr);
	// void ProbabilisticScoringParameters_set_base_penalty_msat(struct LDKProbabilisticScoringParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringParameters_set_base_penalty_msat")] public static extern void ProbabilisticScoringParameters_set_base_penalty_msat(long _this_ptr, long _val);
	// uint64_t ProbabilisticScoringParameters_get_base_penalty_amount_multiplier_msat(const struct LDKProbabilisticScoringParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringParameters_get_base_penalty_amount_multiplier_msat")] public static extern long ProbabilisticScoringParameters_get_base_penalty_amount_multiplier_msat(long _this_ptr);
	// void ProbabilisticScoringParameters_set_base_penalty_amount_multiplier_msat(struct LDKProbabilisticScoringParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringParameters_set_base_penalty_amount_multiplier_msat")] public static extern void ProbabilisticScoringParameters_set_base_penalty_amount_multiplier_msat(long _this_ptr, long _val);
	// uint64_t ProbabilisticScoringParameters_get_liquidity_penalty_multiplier_msat(const struct LDKProbabilisticScoringParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringParameters_get_liquidity_penalty_multiplier_msat")] public static extern long ProbabilisticScoringParameters_get_liquidity_penalty_multiplier_msat(long _this_ptr);
	// void ProbabilisticScoringParameters_set_liquidity_penalty_multiplier_msat(struct LDKProbabilisticScoringParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringParameters_set_liquidity_penalty_multiplier_msat")] public static extern void ProbabilisticScoringParameters_set_liquidity_penalty_multiplier_msat(long _this_ptr, long _val);
	// uint64_t ProbabilisticScoringParameters_get_liquidity_offset_half_life(const struct LDKProbabilisticScoringParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringParameters_get_liquidity_offset_half_life")] public static extern long ProbabilisticScoringParameters_get_liquidity_offset_half_life(long _this_ptr);
	// void ProbabilisticScoringParameters_set_liquidity_offset_half_life(struct LDKProbabilisticScoringParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringParameters_set_liquidity_offset_half_life")] public static extern void ProbabilisticScoringParameters_set_liquidity_offset_half_life(long _this_ptr, long _val);
	// uint64_t ProbabilisticScoringParameters_get_liquidity_penalty_amount_multiplier_msat(const struct LDKProbabilisticScoringParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringParameters_get_liquidity_penalty_amount_multiplier_msat")] public static extern long ProbabilisticScoringParameters_get_liquidity_penalty_amount_multiplier_msat(long _this_ptr);
	// void ProbabilisticScoringParameters_set_liquidity_penalty_amount_multiplier_msat(struct LDKProbabilisticScoringParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringParameters_set_liquidity_penalty_amount_multiplier_msat")] public static extern void ProbabilisticScoringParameters_set_liquidity_penalty_amount_multiplier_msat(long _this_ptr, long _val);
	// uint64_t ProbabilisticScoringParameters_get_historical_liquidity_penalty_multiplier_msat(const struct LDKProbabilisticScoringParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringParameters_get_historical_liquidity_penalty_multiplier_msat")] public static extern long ProbabilisticScoringParameters_get_historical_liquidity_penalty_multiplier_msat(long _this_ptr);
	// void ProbabilisticScoringParameters_set_historical_liquidity_penalty_multiplier_msat(struct LDKProbabilisticScoringParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringParameters_set_historical_liquidity_penalty_multiplier_msat")] public static extern void ProbabilisticScoringParameters_set_historical_liquidity_penalty_multiplier_msat(long _this_ptr, long _val);
	// uint64_t ProbabilisticScoringParameters_get_historical_liquidity_penalty_amount_multiplier_msat(const struct LDKProbabilisticScoringParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringParameters_get_historical_liquidity_penalty_amount_multiplier_msat")] public static extern long ProbabilisticScoringParameters_get_historical_liquidity_penalty_amount_multiplier_msat(long _this_ptr);
	// void ProbabilisticScoringParameters_set_historical_liquidity_penalty_amount_multiplier_msat(struct LDKProbabilisticScoringParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringParameters_set_historical_liquidity_penalty_amount_multiplier_msat")] public static extern void ProbabilisticScoringParameters_set_historical_liquidity_penalty_amount_multiplier_msat(long _this_ptr, long _val);
	// uint64_t ProbabilisticScoringParameters_get_historical_no_updates_half_life(const struct LDKProbabilisticScoringParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringParameters_get_historical_no_updates_half_life")] public static extern long ProbabilisticScoringParameters_get_historical_no_updates_half_life(long _this_ptr);
	// void ProbabilisticScoringParameters_set_historical_no_updates_half_life(struct LDKProbabilisticScoringParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringParameters_set_historical_no_updates_half_life")] public static extern void ProbabilisticScoringParameters_set_historical_no_updates_half_life(long _this_ptr, long _val);
	// uint64_t ProbabilisticScoringParameters_get_anti_probing_penalty_msat(const struct LDKProbabilisticScoringParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringParameters_get_anti_probing_penalty_msat")] public static extern long ProbabilisticScoringParameters_get_anti_probing_penalty_msat(long _this_ptr);
	// void ProbabilisticScoringParameters_set_anti_probing_penalty_msat(struct LDKProbabilisticScoringParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringParameters_set_anti_probing_penalty_msat")] public static extern void ProbabilisticScoringParameters_set_anti_probing_penalty_msat(long _this_ptr, long _val);
	// uint64_t ProbabilisticScoringParameters_get_considered_impossible_penalty_msat(const struct LDKProbabilisticScoringParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringParameters_get_considered_impossible_penalty_msat")] public static extern long ProbabilisticScoringParameters_get_considered_impossible_penalty_msat(long _this_ptr);
	// void ProbabilisticScoringParameters_set_considered_impossible_penalty_msat(struct LDKProbabilisticScoringParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringParameters_set_considered_impossible_penalty_msat")] public static extern void ProbabilisticScoringParameters_set_considered_impossible_penalty_msat(long _this_ptr, long _val);
	// uint64_t ProbabilisticScoringParameters_clone_ptr(LDKProbabilisticScoringParameters *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringParameters_clone_ptr")] public static extern long ProbabilisticScoringParameters_clone_ptr(long _arg);
	// struct LDKProbabilisticScoringParameters ProbabilisticScoringParameters_clone(const struct LDKProbabilisticScoringParameters *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringParameters_clone")] public static extern long ProbabilisticScoringParameters_clone(long _orig);
	// MUST_USE_RES struct LDKProbabilisticScorer ProbabilisticScorer_new(struct LDKProbabilisticScoringParameters params, const struct LDKNetworkGraph *NONNULL_PTR network_graph, struct LDKLogger logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_new")] public static extern long ProbabilisticScorer_new(long _params, long _network_graph, long _logger);
	// void ProbabilisticScorer_debug_log_liquidity_stats(const struct LDKProbabilisticScorer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_debug_log_liquidity_stats")] public static extern void ProbabilisticScorer_debug_log_liquidity_stats(long _this_arg);
	// MUST_USE_RES struct LDKCOption_C2Tuple_u64u64ZZ ProbabilisticScorer_estimated_channel_liquidity_range(const struct LDKProbabilisticScorer *NONNULL_PTR this_arg, uint64_t scid, const struct LDKNodeId *NONNULL_PTR target);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_estimated_channel_liquidity_range")] public static extern long ProbabilisticScorer_estimated_channel_liquidity_range(long _this_arg, long _scid, long _target);
	// void ProbabilisticScorer_add_banned(struct LDKProbabilisticScorer *NONNULL_PTR this_arg, const struct LDKNodeId *NONNULL_PTR node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_add_banned")] public static extern void ProbabilisticScorer_add_banned(long _this_arg, long _node_id);
	// void ProbabilisticScorer_remove_banned(struct LDKProbabilisticScorer *NONNULL_PTR this_arg, const struct LDKNodeId *NONNULL_PTR node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_remove_banned")] public static extern void ProbabilisticScorer_remove_banned(long _this_arg, long _node_id);
	// void ProbabilisticScorer_set_manual_penalty(struct LDKProbabilisticScorer *NONNULL_PTR this_arg, const struct LDKNodeId *NONNULL_PTR node_id, uint64_t penalty);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_set_manual_penalty")] public static extern void ProbabilisticScorer_set_manual_penalty(long _this_arg, long _node_id, long _penalty);
	// void ProbabilisticScorer_remove_manual_penalty(struct LDKProbabilisticScorer *NONNULL_PTR this_arg, const struct LDKNodeId *NONNULL_PTR node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_remove_manual_penalty")] public static extern void ProbabilisticScorer_remove_manual_penalty(long _this_arg, long _node_id);
	// void ProbabilisticScorer_clear_manual_penalties(struct LDKProbabilisticScorer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_clear_manual_penalties")] public static extern void ProbabilisticScorer_clear_manual_penalties(long _this_arg);
	// void ProbabilisticScoringParameters_add_banned_from_list(struct LDKProbabilisticScoringParameters *NONNULL_PTR this_arg, struct LDKCVec_NodeIdZ node_ids);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringParameters_add_banned_from_list")] public static extern void ProbabilisticScoringParameters_add_banned_from_list(long _this_arg, long[] _node_ids);
	// MUST_USE_RES struct LDKProbabilisticScoringParameters ProbabilisticScoringParameters_default(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringParameters_default")] public static extern long ProbabilisticScoringParameters_default();
	// struct LDKScore ProbabilisticScorer_as_Score(const struct LDKProbabilisticScorer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_as_Score")] public static extern long ProbabilisticScorer_as_Score(long _this_arg);
	// struct LDKCVec_u8Z ProbabilisticScorer_write(const struct LDKProbabilisticScorer *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_write")] public static extern byte[] ProbabilisticScorer_write(long _obj);
	// struct LDKCResult_ProbabilisticScorerDecodeErrorZ ProbabilisticScorer_read(struct LDKu8slice ser, struct LDKProbabilisticScoringParameters arg_a, const struct LDKNetworkGraph *NONNULL_PTR arg_b, struct LDKLogger arg_c);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_read")] public static extern long ProbabilisticScorer_read(byte[] _ser, long _arg_a, long _arg_b, long _arg_c);
	// void BlindedPath_free(struct LDKBlindedPath this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPath_free")] public static extern void BlindedPath_free(long _this_obj);
	// uint64_t BlindedPath_clone_ptr(LDKBlindedPath *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPath_clone_ptr")] public static extern long BlindedPath_clone_ptr(long _arg);
	// struct LDKBlindedPath BlindedPath_clone(const struct LDKBlindedPath *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPath_clone")] public static extern long BlindedPath_clone(long _orig);
	// void BlindedHop_free(struct LDKBlindedHop this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_free")] public static extern void BlindedHop_free(long _this_obj);
	// uint64_t BlindedHop_clone_ptr(LDKBlindedHop *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_clone_ptr")] public static extern long BlindedHop_clone_ptr(long _arg);
	// struct LDKBlindedHop BlindedHop_clone(const struct LDKBlindedHop *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_clone")] public static extern long BlindedHop_clone(long _orig);
	// MUST_USE_RES struct LDKCResult_BlindedPathNoneZ BlindedPath_new(struct LDKCVec_PublicKeyZ node_pks, const struct LDKKeysInterface *NONNULL_PTR keys_manager);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPath_new")] public static extern long BlindedPath_new(byte[][] _node_pks, long _keys_manager);
	// struct LDKCVec_u8Z BlindedPath_write(const struct LDKBlindedPath *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPath_write")] public static extern byte[] BlindedPath_write(long _obj);
	// struct LDKCResult_BlindedPathDecodeErrorZ BlindedPath_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPath_read")] public static extern long BlindedPath_read(byte[] _ser);
	// struct LDKCVec_u8Z BlindedHop_write(const struct LDKBlindedHop *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_write")] public static extern byte[] BlindedHop_write(long _obj);
	// struct LDKCResult_BlindedHopDecodeErrorZ BlindedHop_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_read")] public static extern long BlindedHop_read(byte[] _ser);
	// void OnionMessenger_free(struct LDKOnionMessenger this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessenger_free")] public static extern void OnionMessenger_free(long _this_obj);
	// void Destination_free(struct LDKDestination this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Destination_free")] public static extern void Destination_free(long _this_ptr);
	// uint64_t Destination_clone_ptr(LDKDestination *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Destination_clone_ptr")] public static extern long Destination_clone_ptr(long _arg);
	// struct LDKDestination Destination_clone(const struct LDKDestination *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Destination_clone")] public static extern long Destination_clone(long _orig);
	// struct LDKDestination Destination_node(struct LDKPublicKey a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Destination_node")] public static extern long Destination_node(byte[] _a);
	// struct LDKDestination Destination_blinded_path(struct LDKBlindedPath a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Destination_blinded_path")] public static extern long Destination_blinded_path(long _a);
	// void SendError_free(struct LDKSendError this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_free")] public static extern void SendError_free(long _this_ptr);
	// uint64_t SendError_clone_ptr(LDKSendError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_clone_ptr")] public static extern long SendError_clone_ptr(long _arg);
	// struct LDKSendError SendError_clone(const struct LDKSendError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_clone")] public static extern long SendError_clone(long _orig);
	// struct LDKSendError SendError_secp256k1(enum LDKSecp256k1Error a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_secp256k1")] public static extern long SendError_secp256k1(Secp256k1Error _a);
	// struct LDKSendError SendError_too_big_packet(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_too_big_packet")] public static extern long SendError_too_big_packet();
	// struct LDKSendError SendError_too_few_blinded_hops(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_too_few_blinded_hops")] public static extern long SendError_too_few_blinded_hops();
	// struct LDKSendError SendError_invalid_first_hop(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_invalid_first_hop")] public static extern long SendError_invalid_first_hop();
	// struct LDKSendError SendError_invalid_message(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_invalid_message")] public static extern long SendError_invalid_message();
	// struct LDKSendError SendError_buffer_full(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_buffer_full")] public static extern long SendError_buffer_full();
	// struct LDKSendError SendError_get_node_id_failed(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_get_node_id_failed")] public static extern long SendError_get_node_id_failed();
	// struct LDKSendError SendError_blinded_path_advance_failed(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_blinded_path_advance_failed")] public static extern long SendError_blinded_path_advance_failed();
	// bool SendError_eq(const struct LDKSendError *NONNULL_PTR a, const struct LDKSendError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_eq")] public static extern bool SendError_eq(long _a, long _b);
	// void CustomOnionMessageHandler_free(struct LDKCustomOnionMessageHandler this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomOnionMessageHandler_free")] public static extern void CustomOnionMessageHandler_free(long _this_ptr);
	// MUST_USE_RES struct LDKOnionMessenger OnionMessenger_new(struct LDKKeysInterface keys_manager, struct LDKLogger logger, struct LDKCustomOnionMessageHandler custom_handler);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessenger_new")] public static extern long OnionMessenger_new(long _keys_manager, long _logger, long _custom_handler);
	// MUST_USE_RES struct LDKCResult_NoneSendErrorZ OnionMessenger_send_onion_message(const struct LDKOnionMessenger *NONNULL_PTR this_arg, struct LDKCVec_PublicKeyZ intermediate_nodes, struct LDKDestination destination, struct LDKOnionMessageContents message, struct LDKBlindedPath reply_path);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessenger_send_onion_message")] public static extern long OnionMessenger_send_onion_message(long _this_arg, byte[][] _intermediate_nodes, long _destination, long _message, long _reply_path);
	// struct LDKOnionMessageHandler OnionMessenger_as_OnionMessageHandler(const struct LDKOnionMessenger *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessenger_as_OnionMessageHandler")] public static extern long OnionMessenger_as_OnionMessageHandler(long _this_arg);
	// struct LDKOnionMessageProvider OnionMessenger_as_OnionMessageProvider(const struct LDKOnionMessenger *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessenger_as_OnionMessageProvider")] public static extern long OnionMessenger_as_OnionMessageProvider(long _this_arg);
	// void OnionMessageContents_free(struct LDKOnionMessageContents this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageContents_free")] public static extern void OnionMessageContents_free(long _this_ptr);
	// uint64_t OnionMessageContents_clone_ptr(LDKOnionMessageContents *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageContents_clone_ptr")] public static extern long OnionMessageContents_clone_ptr(long _arg);
	// struct LDKOnionMessageContents OnionMessageContents_clone(const struct LDKOnionMessageContents *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageContents_clone")] public static extern long OnionMessageContents_clone(long _orig);
	// struct LDKOnionMessageContents OnionMessageContents_custom(struct LDKCustomOnionMessageContents a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageContents_custom")] public static extern long OnionMessageContents_custom(long _a);
	// uint64_t CustomOnionMessageContents_clone_ptr(LDKCustomOnionMessageContents *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomOnionMessageContents_clone_ptr")] public static extern long CustomOnionMessageContents_clone_ptr(long _arg);
	// struct LDKCustomOnionMessageContents CustomOnionMessageContents_clone(const struct LDKCustomOnionMessageContents *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomOnionMessageContents_clone")] public static extern long CustomOnionMessageContents_clone(long _orig);
	// void CustomOnionMessageContents_free(struct LDKCustomOnionMessageContents this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomOnionMessageContents_free")] public static extern void CustomOnionMessageContents_free(long _this_ptr);
	// void FilesystemPersister_free(struct LDKFilesystemPersister this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FilesystemPersister_free")] public static extern void FilesystemPersister_free(long _this_obj);
	// MUST_USE_RES struct LDKFilesystemPersister FilesystemPersister_new(struct LDKStr path_to_channel_data);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FilesystemPersister_new")] public static extern long FilesystemPersister_new(string _path_to_channel_data);
	// MUST_USE_RES struct LDKStr FilesystemPersister_get_data_dir(const struct LDKFilesystemPersister *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FilesystemPersister_get_data_dir")] public static extern string FilesystemPersister_get_data_dir(long _this_arg);
	// MUST_USE_RES struct LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ FilesystemPersister_read_channelmonitors(const struct LDKFilesystemPersister *NONNULL_PTR this_arg, struct LDKKeysInterface keys_manager);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FilesystemPersister_read_channelmonitors")] public static extern long FilesystemPersister_read_channelmonitors(long _this_arg, long _keys_manager);
	// void BackgroundProcessor_free(struct LDKBackgroundProcessor this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BackgroundProcessor_free")] public static extern void BackgroundProcessor_free(long _this_obj);
	// void GossipSync_free(struct LDKGossipSync this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipSync_free")] public static extern void GossipSync_free(long _this_ptr);
	// struct LDKGossipSync GossipSync_p2_p(const struct LDKP2PGossipSync *NONNULL_PTR a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipSync_p2_p")] public static extern long GossipSync_p2_p(long _a);
	// struct LDKGossipSync GossipSync_rapid(const struct LDKRapidGossipSync *NONNULL_PTR a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipSync_rapid")] public static extern long GossipSync_rapid(long _a);
	// struct LDKGossipSync GossipSync_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipSync_none")] public static extern long GossipSync_none();
	// MUST_USE_RES struct LDKBackgroundProcessor BackgroundProcessor_start(struct LDKPersister persister, struct LDKEventHandler event_handler, const struct LDKChainMonitor *NONNULL_PTR chain_monitor, const struct LDKChannelManager *NONNULL_PTR channel_manager, struct LDKGossipSync gossip_sync, const struct LDKPeerManager *NONNULL_PTR peer_manager, struct LDKLogger logger, struct LDKCOption_WriteableScoreZ scorer);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BackgroundProcessor_start")] public static extern long BackgroundProcessor_start(long _persister, long _event_handler, long _chain_monitor, long _channel_manager, long _gossip_sync, long _peer_manager, long _logger, long _scorer);
	// MUST_USE_RES struct LDKCResult_NoneErrorZ BackgroundProcessor_join(struct LDKBackgroundProcessor this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BackgroundProcessor_join")] public static extern long BackgroundProcessor_join(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneErrorZ BackgroundProcessor_stop(struct LDKBackgroundProcessor this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BackgroundProcessor_stop")] public static extern long BackgroundProcessor_stop(long _this_arg);
	// void ParseError_free(struct LDKParseError this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseError_free")] public static extern void ParseError_free(long _this_ptr);
	// uint64_t ParseError_clone_ptr(LDKParseError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseError_clone_ptr")] public static extern long ParseError_clone_ptr(long _arg);
	// struct LDKParseError ParseError_clone(const struct LDKParseError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseError_clone")] public static extern long ParseError_clone(long _orig);
	// struct LDKParseError ParseError_bech32_error(struct LDKBech32Error a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseError_bech32_error")] public static extern long ParseError_bech32_error(long _a);
	// struct LDKParseError ParseError_parse_amount_error(struct LDKError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseError_parse_amount_error")] public static extern long ParseError_parse_amount_error(int _a);
	// struct LDKParseError ParseError_malformed_signature(enum LDKSecp256k1Error a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseError_malformed_signature")] public static extern long ParseError_malformed_signature(Secp256k1Error _a);
	// struct LDKParseError ParseError_bad_prefix(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseError_bad_prefix")] public static extern long ParseError_bad_prefix();
	// struct LDKParseError ParseError_unknown_currency(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseError_unknown_currency")] public static extern long ParseError_unknown_currency();
	// struct LDKParseError ParseError_unknown_si_prefix(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseError_unknown_si_prefix")] public static extern long ParseError_unknown_si_prefix();
	// struct LDKParseError ParseError_malformed_hrp(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseError_malformed_hrp")] public static extern long ParseError_malformed_hrp();
	// struct LDKParseError ParseError_too_short_data_part(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseError_too_short_data_part")] public static extern long ParseError_too_short_data_part();
	// struct LDKParseError ParseError_unexpected_end_of_tagged_fields(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseError_unexpected_end_of_tagged_fields")] public static extern long ParseError_unexpected_end_of_tagged_fields();
	// struct LDKParseError ParseError_description_decode_error(struct LDKError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseError_description_decode_error")] public static extern long ParseError_description_decode_error(int _a);
	// struct LDKParseError ParseError_padding_error(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseError_padding_error")] public static extern long ParseError_padding_error();
	// struct LDKParseError ParseError_integer_overflow_error(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseError_integer_overflow_error")] public static extern long ParseError_integer_overflow_error();
	// struct LDKParseError ParseError_invalid_seg_wit_program_length(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseError_invalid_seg_wit_program_length")] public static extern long ParseError_invalid_seg_wit_program_length();
	// struct LDKParseError ParseError_invalid_pub_key_hash_length(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseError_invalid_pub_key_hash_length")] public static extern long ParseError_invalid_pub_key_hash_length();
	// struct LDKParseError ParseError_invalid_script_hash_length(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseError_invalid_script_hash_length")] public static extern long ParseError_invalid_script_hash_length();
	// struct LDKParseError ParseError_invalid_recovery_id(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseError_invalid_recovery_id")] public static extern long ParseError_invalid_recovery_id();
	// struct LDKParseError ParseError_invalid_slice_length(struct LDKStr a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseError_invalid_slice_length")] public static extern long ParseError_invalid_slice_length(string _a);
	// struct LDKParseError ParseError_skip(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseError_skip")] public static extern long ParseError_skip();
	// bool ParseError_eq(const struct LDKParseError *NONNULL_PTR a, const struct LDKParseError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseError_eq")] public static extern bool ParseError_eq(long _a, long _b);
	// void ParseOrSemanticError_free(struct LDKParseOrSemanticError this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseOrSemanticError_free")] public static extern void ParseOrSemanticError_free(long _this_ptr);
	// uint64_t ParseOrSemanticError_clone_ptr(LDKParseOrSemanticError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseOrSemanticError_clone_ptr")] public static extern long ParseOrSemanticError_clone_ptr(long _arg);
	// struct LDKParseOrSemanticError ParseOrSemanticError_clone(const struct LDKParseOrSemanticError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseOrSemanticError_clone")] public static extern long ParseOrSemanticError_clone(long _orig);
	// struct LDKParseOrSemanticError ParseOrSemanticError_parse_error(struct LDKParseError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseOrSemanticError_parse_error")] public static extern long ParseOrSemanticError_parse_error(long _a);
	// struct LDKParseOrSemanticError ParseOrSemanticError_semantic_error(enum LDKSemanticError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseOrSemanticError_semantic_error")] public static extern long ParseOrSemanticError_semantic_error(SemanticError _a);
	// bool ParseOrSemanticError_eq(const struct LDKParseOrSemanticError *NONNULL_PTR a, const struct LDKParseOrSemanticError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseOrSemanticError_eq")] public static extern bool ParseOrSemanticError_eq(long _a, long _b);
	// void Invoice_free(struct LDKInvoice this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Invoice_free")] public static extern void Invoice_free(long _this_obj);
	// bool Invoice_eq(const struct LDKInvoice *NONNULL_PTR a, const struct LDKInvoice *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Invoice_eq")] public static extern bool Invoice_eq(long _a, long _b);
	// uint64_t Invoice_clone_ptr(LDKInvoice *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Invoice_clone_ptr")] public static extern long Invoice_clone_ptr(long _arg);
	// struct LDKInvoice Invoice_clone(const struct LDKInvoice *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Invoice_clone")] public static extern long Invoice_clone(long _orig);
	// uint64_t Invoice_hash(const struct LDKInvoice *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Invoice_hash")] public static extern long Invoice_hash(long _o);
	// void SignedRawInvoice_free(struct LDKSignedRawInvoice this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawInvoice_free")] public static extern void SignedRawInvoice_free(long _this_obj);
	// bool SignedRawInvoice_eq(const struct LDKSignedRawInvoice *NONNULL_PTR a, const struct LDKSignedRawInvoice *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawInvoice_eq")] public static extern bool SignedRawInvoice_eq(long _a, long _b);
	// uint64_t SignedRawInvoice_clone_ptr(LDKSignedRawInvoice *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawInvoice_clone_ptr")] public static extern long SignedRawInvoice_clone_ptr(long _arg);
	// struct LDKSignedRawInvoice SignedRawInvoice_clone(const struct LDKSignedRawInvoice *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawInvoice_clone")] public static extern long SignedRawInvoice_clone(long _orig);
	// uint64_t SignedRawInvoice_hash(const struct LDKSignedRawInvoice *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawInvoice_hash")] public static extern long SignedRawInvoice_hash(long _o);
	// void RawInvoice_free(struct LDKRawInvoice this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawInvoice_free")] public static extern void RawInvoice_free(long _this_obj);
	// struct LDKRawDataPart RawInvoice_get_data(const struct LDKRawInvoice *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawInvoice_get_data")] public static extern long RawInvoice_get_data(long _this_ptr);
	// void RawInvoice_set_data(struct LDKRawInvoice *NONNULL_PTR this_ptr, struct LDKRawDataPart val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawInvoice_set_data")] public static extern void RawInvoice_set_data(long _this_ptr, long _val);
	// bool RawInvoice_eq(const struct LDKRawInvoice *NONNULL_PTR a, const struct LDKRawInvoice *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawInvoice_eq")] public static extern bool RawInvoice_eq(long _a, long _b);
	// uint64_t RawInvoice_clone_ptr(LDKRawInvoice *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawInvoice_clone_ptr")] public static extern long RawInvoice_clone_ptr(long _arg);
	// struct LDKRawInvoice RawInvoice_clone(const struct LDKRawInvoice *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawInvoice_clone")] public static extern long RawInvoice_clone(long _orig);
	// uint64_t RawInvoice_hash(const struct LDKRawInvoice *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawInvoice_hash")] public static extern long RawInvoice_hash(long _o);
	// void RawDataPart_free(struct LDKRawDataPart this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawDataPart_free")] public static extern void RawDataPart_free(long _this_obj);
	// struct LDKPositiveTimestamp RawDataPart_get_timestamp(const struct LDKRawDataPart *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawDataPart_get_timestamp")] public static extern long RawDataPart_get_timestamp(long _this_ptr);
	// void RawDataPart_set_timestamp(struct LDKRawDataPart *NONNULL_PTR this_ptr, struct LDKPositiveTimestamp val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawDataPart_set_timestamp")] public static extern void RawDataPart_set_timestamp(long _this_ptr, long _val);
	// bool RawDataPart_eq(const struct LDKRawDataPart *NONNULL_PTR a, const struct LDKRawDataPart *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawDataPart_eq")] public static extern bool RawDataPart_eq(long _a, long _b);
	// uint64_t RawDataPart_clone_ptr(LDKRawDataPart *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawDataPart_clone_ptr")] public static extern long RawDataPart_clone_ptr(long _arg);
	// struct LDKRawDataPart RawDataPart_clone(const struct LDKRawDataPart *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawDataPart_clone")] public static extern long RawDataPart_clone(long _orig);
	// uint64_t RawDataPart_hash(const struct LDKRawDataPart *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawDataPart_hash")] public static extern long RawDataPart_hash(long _o);
	// void PositiveTimestamp_free(struct LDKPositiveTimestamp this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_free")] public static extern void PositiveTimestamp_free(long _this_obj);
	// bool PositiveTimestamp_eq(const struct LDKPositiveTimestamp *NONNULL_PTR a, const struct LDKPositiveTimestamp *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_eq")] public static extern bool PositiveTimestamp_eq(long _a, long _b);
	// uint64_t PositiveTimestamp_clone_ptr(LDKPositiveTimestamp *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_clone_ptr")] public static extern long PositiveTimestamp_clone_ptr(long _arg);
	// struct LDKPositiveTimestamp PositiveTimestamp_clone(const struct LDKPositiveTimestamp *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_clone")] public static extern long PositiveTimestamp_clone(long _orig);
	// uint64_t PositiveTimestamp_hash(const struct LDKPositiveTimestamp *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_hash")] public static extern long PositiveTimestamp_hash(long _o);
	// enum LDKSiPrefix SiPrefix_clone(const enum LDKSiPrefix *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_clone")] public static extern SiPrefix SiPrefix_clone(long _orig);
	// enum LDKSiPrefix SiPrefix_milli(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_milli")] public static extern SiPrefix SiPrefix_milli();
	// enum LDKSiPrefix SiPrefix_micro(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_micro")] public static extern SiPrefix SiPrefix_micro();
	// enum LDKSiPrefix SiPrefix_nano(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_nano")] public static extern SiPrefix SiPrefix_nano();
	// enum LDKSiPrefix SiPrefix_pico(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_pico")] public static extern SiPrefix SiPrefix_pico();
	// bool SiPrefix_eq(const enum LDKSiPrefix *NONNULL_PTR a, const enum LDKSiPrefix *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_eq")] public static extern bool SiPrefix_eq(long _a, long _b);
	// uint64_t SiPrefix_hash(const enum LDKSiPrefix *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_hash")] public static extern long SiPrefix_hash(long _o);
	// MUST_USE_RES uint64_t SiPrefix_multiplier(const enum LDKSiPrefix *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_multiplier")] public static extern long SiPrefix_multiplier(long _this_arg);
	// enum LDKCurrency Currency_clone(const enum LDKCurrency *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Currency_clone")] public static extern Currency Currency_clone(long _orig);
	// enum LDKCurrency Currency_bitcoin(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Currency_bitcoin")] public static extern Currency Currency_bitcoin();
	// enum LDKCurrency Currency_bitcoin_testnet(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Currency_bitcoin_testnet")] public static extern Currency Currency_bitcoin_testnet();
	// enum LDKCurrency Currency_regtest(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Currency_regtest")] public static extern Currency Currency_regtest();
	// enum LDKCurrency Currency_simnet(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Currency_simnet")] public static extern Currency Currency_simnet();
	// enum LDKCurrency Currency_signet(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Currency_signet")] public static extern Currency Currency_signet();
	// uint64_t Currency_hash(const enum LDKCurrency *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Currency_hash")] public static extern long Currency_hash(long _o);
	// bool Currency_eq(const enum LDKCurrency *NONNULL_PTR a, const enum LDKCurrency *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Currency_eq")] public static extern bool Currency_eq(long _a, long _b);
	// void Sha256_free(struct LDKSha256 this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sha256_free")] public static extern void Sha256_free(long _this_obj);
	// uint64_t Sha256_clone_ptr(LDKSha256 *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sha256_clone_ptr")] public static extern long Sha256_clone_ptr(long _arg);
	// struct LDKSha256 Sha256_clone(const struct LDKSha256 *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sha256_clone")] public static extern long Sha256_clone(long _orig);
	// uint64_t Sha256_hash(const struct LDKSha256 *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sha256_hash")] public static extern long Sha256_hash(long _o);
	// bool Sha256_eq(const struct LDKSha256 *NONNULL_PTR a, const struct LDKSha256 *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sha256_eq")] public static extern bool Sha256_eq(long _a, long _b);
	// void Description_free(struct LDKDescription this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Description_free")] public static extern void Description_free(long _this_obj);
	// uint64_t Description_clone_ptr(LDKDescription *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Description_clone_ptr")] public static extern long Description_clone_ptr(long _arg);
	// struct LDKDescription Description_clone(const struct LDKDescription *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Description_clone")] public static extern long Description_clone(long _orig);
	// uint64_t Description_hash(const struct LDKDescription *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Description_hash")] public static extern long Description_hash(long _o);
	// bool Description_eq(const struct LDKDescription *NONNULL_PTR a, const struct LDKDescription *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Description_eq")] public static extern bool Description_eq(long _a, long _b);
	// void PayeePubKey_free(struct LDKPayeePubKey this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PayeePubKey_free")] public static extern void PayeePubKey_free(long _this_obj);
	// struct LDKPublicKey PayeePubKey_get_a(const struct LDKPayeePubKey *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PayeePubKey_get_a")] public static extern byte[] PayeePubKey_get_a(long _this_ptr);
	// void PayeePubKey_set_a(struct LDKPayeePubKey *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PayeePubKey_set_a")] public static extern void PayeePubKey_set_a(long _this_ptr, byte[] _val);
	// MUST_USE_RES struct LDKPayeePubKey PayeePubKey_new(struct LDKPublicKey a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PayeePubKey_new")] public static extern long PayeePubKey_new(byte[] _a_arg);
	// uint64_t PayeePubKey_clone_ptr(LDKPayeePubKey *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PayeePubKey_clone_ptr")] public static extern long PayeePubKey_clone_ptr(long _arg);
	// struct LDKPayeePubKey PayeePubKey_clone(const struct LDKPayeePubKey *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PayeePubKey_clone")] public static extern long PayeePubKey_clone(long _orig);
	// uint64_t PayeePubKey_hash(const struct LDKPayeePubKey *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PayeePubKey_hash")] public static extern long PayeePubKey_hash(long _o);
	// bool PayeePubKey_eq(const struct LDKPayeePubKey *NONNULL_PTR a, const struct LDKPayeePubKey *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PayeePubKey_eq")] public static extern bool PayeePubKey_eq(long _a, long _b);
	// void ExpiryTime_free(struct LDKExpiryTime this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpiryTime_free")] public static extern void ExpiryTime_free(long _this_obj);
	// uint64_t ExpiryTime_clone_ptr(LDKExpiryTime *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpiryTime_clone_ptr")] public static extern long ExpiryTime_clone_ptr(long _arg);
	// struct LDKExpiryTime ExpiryTime_clone(const struct LDKExpiryTime *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpiryTime_clone")] public static extern long ExpiryTime_clone(long _orig);
	// uint64_t ExpiryTime_hash(const struct LDKExpiryTime *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpiryTime_hash")] public static extern long ExpiryTime_hash(long _o);
	// bool ExpiryTime_eq(const struct LDKExpiryTime *NONNULL_PTR a, const struct LDKExpiryTime *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpiryTime_eq")] public static extern bool ExpiryTime_eq(long _a, long _b);
	// void MinFinalCltvExpiry_free(struct LDKMinFinalCltvExpiry this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MinFinalCltvExpiry_free")] public static extern void MinFinalCltvExpiry_free(long _this_obj);
	// uint64_t MinFinalCltvExpiry_get_a(const struct LDKMinFinalCltvExpiry *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MinFinalCltvExpiry_get_a")] public static extern long MinFinalCltvExpiry_get_a(long _this_ptr);
	// void MinFinalCltvExpiry_set_a(struct LDKMinFinalCltvExpiry *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MinFinalCltvExpiry_set_a")] public static extern void MinFinalCltvExpiry_set_a(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKMinFinalCltvExpiry MinFinalCltvExpiry_new(uint64_t a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MinFinalCltvExpiry_new")] public static extern long MinFinalCltvExpiry_new(long _a_arg);
	// uint64_t MinFinalCltvExpiry_clone_ptr(LDKMinFinalCltvExpiry *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MinFinalCltvExpiry_clone_ptr")] public static extern long MinFinalCltvExpiry_clone_ptr(long _arg);
	// struct LDKMinFinalCltvExpiry MinFinalCltvExpiry_clone(const struct LDKMinFinalCltvExpiry *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MinFinalCltvExpiry_clone")] public static extern long MinFinalCltvExpiry_clone(long _orig);
	// uint64_t MinFinalCltvExpiry_hash(const struct LDKMinFinalCltvExpiry *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MinFinalCltvExpiry_hash")] public static extern long MinFinalCltvExpiry_hash(long _o);
	// bool MinFinalCltvExpiry_eq(const struct LDKMinFinalCltvExpiry *NONNULL_PTR a, const struct LDKMinFinalCltvExpiry *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MinFinalCltvExpiry_eq")] public static extern bool MinFinalCltvExpiry_eq(long _a, long _b);
	// void Fallback_free(struct LDKFallback this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Fallback_free")] public static extern void Fallback_free(long _this_ptr);
	// uint64_t Fallback_clone_ptr(LDKFallback *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Fallback_clone_ptr")] public static extern long Fallback_clone_ptr(long _arg);
	// struct LDKFallback Fallback_clone(const struct LDKFallback *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Fallback_clone")] public static extern long Fallback_clone(long _orig);
	// struct LDKFallback Fallback_seg_wit_program(struct LDKU5 version, struct LDKCVec_u8Z program);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Fallback_seg_wit_program")] public static extern long Fallback_seg_wit_program(byte _version, byte[] _program);
	// struct LDKFallback Fallback_pub_key_hash(struct LDKTwentyBytes a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Fallback_pub_key_hash")] public static extern long Fallback_pub_key_hash(byte[] _a);
	// struct LDKFallback Fallback_script_hash(struct LDKTwentyBytes a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Fallback_script_hash")] public static extern long Fallback_script_hash(byte[] _a);
	// uint64_t Fallback_hash(const struct LDKFallback *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Fallback_hash")] public static extern long Fallback_hash(long _o);
	// bool Fallback_eq(const struct LDKFallback *NONNULL_PTR a, const struct LDKFallback *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Fallback_eq")] public static extern bool Fallback_eq(long _a, long _b);
	// void InvoiceSignature_free(struct LDKInvoiceSignature this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceSignature_free")] public static extern void InvoiceSignature_free(long _this_obj);
	// uint64_t InvoiceSignature_clone_ptr(LDKInvoiceSignature *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceSignature_clone_ptr")] public static extern long InvoiceSignature_clone_ptr(long _arg);
	// struct LDKInvoiceSignature InvoiceSignature_clone(const struct LDKInvoiceSignature *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceSignature_clone")] public static extern long InvoiceSignature_clone(long _orig);
	// uint64_t InvoiceSignature_hash(const struct LDKInvoiceSignature *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceSignature_hash")] public static extern long InvoiceSignature_hash(long _o);
	// bool InvoiceSignature_eq(const struct LDKInvoiceSignature *NONNULL_PTR a, const struct LDKInvoiceSignature *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceSignature_eq")] public static extern bool InvoiceSignature_eq(long _a, long _b);
	// void PrivateRoute_free(struct LDKPrivateRoute this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrivateRoute_free")] public static extern void PrivateRoute_free(long _this_obj);
	// uint64_t PrivateRoute_clone_ptr(LDKPrivateRoute *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrivateRoute_clone_ptr")] public static extern long PrivateRoute_clone_ptr(long _arg);
	// struct LDKPrivateRoute PrivateRoute_clone(const struct LDKPrivateRoute *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrivateRoute_clone")] public static extern long PrivateRoute_clone(long _orig);
	// uint64_t PrivateRoute_hash(const struct LDKPrivateRoute *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrivateRoute_hash")] public static extern long PrivateRoute_hash(long _o);
	// bool PrivateRoute_eq(const struct LDKPrivateRoute *NONNULL_PTR a, const struct LDKPrivateRoute *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrivateRoute_eq")] public static extern bool PrivateRoute_eq(long _a, long _b);
	// MUST_USE_RES struct LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ SignedRawInvoice_into_parts(struct LDKSignedRawInvoice this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawInvoice_into_parts")] public static extern long SignedRawInvoice_into_parts(long _this_arg);
	// MUST_USE_RES struct LDKRawInvoice SignedRawInvoice_raw_invoice(const struct LDKSignedRawInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawInvoice_raw_invoice")] public static extern long SignedRawInvoice_raw_invoice(long _this_arg);
	// MUST_USE_RES const uint8_t (*SignedRawInvoice_signable_hash(const struct LDKSignedRawInvoice *NONNULL_PTR this_arg))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawInvoice_signable_hash")] public static extern byte[] SignedRawInvoice_signable_hash(long _this_arg);
	// MUST_USE_RES struct LDKInvoiceSignature SignedRawInvoice_signature(const struct LDKSignedRawInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawInvoice_signature")] public static extern long SignedRawInvoice_signature(long _this_arg);
	// MUST_USE_RES struct LDKCResult_PayeePubKeyErrorZ SignedRawInvoice_recover_payee_pub_key(const struct LDKSignedRawInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawInvoice_recover_payee_pub_key")] public static extern long SignedRawInvoice_recover_payee_pub_key(long _this_arg);
	// MUST_USE_RES bool SignedRawInvoice_check_signature(const struct LDKSignedRawInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawInvoice_check_signature")] public static extern bool SignedRawInvoice_check_signature(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes RawInvoice_signable_hash(const struct LDKRawInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawInvoice_signable_hash")] public static extern byte[] RawInvoice_signable_hash(long _this_arg);
	// MUST_USE_RES struct LDKSha256 RawInvoice_payment_hash(const struct LDKRawInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawInvoice_payment_hash")] public static extern long RawInvoice_payment_hash(long _this_arg);
	// MUST_USE_RES struct LDKDescription RawInvoice_description(const struct LDKRawInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawInvoice_description")] public static extern long RawInvoice_description(long _this_arg);
	// MUST_USE_RES struct LDKPayeePubKey RawInvoice_payee_pub_key(const struct LDKRawInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawInvoice_payee_pub_key")] public static extern long RawInvoice_payee_pub_key(long _this_arg);
	// MUST_USE_RES struct LDKSha256 RawInvoice_description_hash(const struct LDKRawInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawInvoice_description_hash")] public static extern long RawInvoice_description_hash(long _this_arg);
	// MUST_USE_RES struct LDKExpiryTime RawInvoice_expiry_time(const struct LDKRawInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawInvoice_expiry_time")] public static extern long RawInvoice_expiry_time(long _this_arg);
	// MUST_USE_RES struct LDKMinFinalCltvExpiry RawInvoice_min_final_cltv_expiry(const struct LDKRawInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawInvoice_min_final_cltv_expiry")] public static extern long RawInvoice_min_final_cltv_expiry(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes RawInvoice_payment_secret(const struct LDKRawInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawInvoice_payment_secret")] public static extern byte[] RawInvoice_payment_secret(long _this_arg);
	// MUST_USE_RES struct LDKInvoiceFeatures RawInvoice_features(const struct LDKRawInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawInvoice_features")] public static extern long RawInvoice_features(long _this_arg);
	// MUST_USE_RES struct LDKCVec_PrivateRouteZ RawInvoice_private_routes(const struct LDKRawInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawInvoice_private_routes")] public static extern long[] RawInvoice_private_routes(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z RawInvoice_amount_pico_btc(const struct LDKRawInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawInvoice_amount_pico_btc")] public static extern long RawInvoice_amount_pico_btc(long _this_arg);
	// MUST_USE_RES enum LDKCurrency RawInvoice_currency(const struct LDKRawInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawInvoice_currency")] public static extern Currency RawInvoice_currency(long _this_arg);
	// MUST_USE_RES struct LDKCResult_PositiveTimestampCreationErrorZ PositiveTimestamp_from_unix_timestamp(uint64_t unix_seconds);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_from_unix_timestamp")] public static extern long PositiveTimestamp_from_unix_timestamp(long _unix_seconds);
	// MUST_USE_RES struct LDKCResult_PositiveTimestampCreationErrorZ PositiveTimestamp_from_system_time(uint64_t time);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_from_system_time")] public static extern long PositiveTimestamp_from_system_time(long _time);
	// MUST_USE_RES struct LDKCResult_PositiveTimestampCreationErrorZ PositiveTimestamp_from_duration_since_epoch(uint64_t duration);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_from_duration_since_epoch")] public static extern long PositiveTimestamp_from_duration_since_epoch(long _duration);
	// MUST_USE_RES uint64_t PositiveTimestamp_as_unix_timestamp(const struct LDKPositiveTimestamp *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_as_unix_timestamp")] public static extern long PositiveTimestamp_as_unix_timestamp(long _this_arg);
	// MUST_USE_RES uint64_t PositiveTimestamp_as_duration_since_epoch(const struct LDKPositiveTimestamp *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_as_duration_since_epoch")] public static extern long PositiveTimestamp_as_duration_since_epoch(long _this_arg);
	// MUST_USE_RES uint64_t PositiveTimestamp_as_time(const struct LDKPositiveTimestamp *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_as_time")] public static extern long PositiveTimestamp_as_time(long _this_arg);
	// MUST_USE_RES struct LDKSignedRawInvoice Invoice_into_signed_raw(struct LDKInvoice this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Invoice_into_signed_raw")] public static extern long Invoice_into_signed_raw(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneSemanticErrorZ Invoice_check_signature(const struct LDKInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Invoice_check_signature")] public static extern long Invoice_check_signature(long _this_arg);
	// MUST_USE_RES struct LDKCResult_InvoiceSemanticErrorZ Invoice_from_signed(struct LDKSignedRawInvoice signed_invoice);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Invoice_from_signed")] public static extern long Invoice_from_signed(long _signed_invoice);
	// MUST_USE_RES uint64_t Invoice_timestamp(const struct LDKInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Invoice_timestamp")] public static extern long Invoice_timestamp(long _this_arg);
	// MUST_USE_RES uint64_t Invoice_duration_since_epoch(const struct LDKInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Invoice_duration_since_epoch")] public static extern long Invoice_duration_since_epoch(long _this_arg);
	// MUST_USE_RES const uint8_t (*Invoice_payment_hash(const struct LDKInvoice *NONNULL_PTR this_arg))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Invoice_payment_hash")] public static extern byte[] Invoice_payment_hash(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey Invoice_payee_pub_key(const struct LDKInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Invoice_payee_pub_key")] public static extern byte[] Invoice_payee_pub_key(long _this_arg);
	// MUST_USE_RES const uint8_t (*Invoice_payment_secret(const struct LDKInvoice *NONNULL_PTR this_arg))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Invoice_payment_secret")] public static extern byte[] Invoice_payment_secret(long _this_arg);
	// MUST_USE_RES struct LDKInvoiceFeatures Invoice_features(const struct LDKInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Invoice_features")] public static extern long Invoice_features(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey Invoice_recover_payee_pub_key(const struct LDKInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Invoice_recover_payee_pub_key")] public static extern byte[] Invoice_recover_payee_pub_key(long _this_arg);
	// MUST_USE_RES uint64_t Invoice_expiry_time(const struct LDKInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Invoice_expiry_time")] public static extern long Invoice_expiry_time(long _this_arg);
	// MUST_USE_RES bool Invoice_is_expired(const struct LDKInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Invoice_is_expired")] public static extern bool Invoice_is_expired(long _this_arg);
	// MUST_USE_RES bool Invoice_would_expire(const struct LDKInvoice *NONNULL_PTR this_arg, uint64_t at_time);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Invoice_would_expire")] public static extern bool Invoice_would_expire(long _this_arg, long _at_time);
	// MUST_USE_RES uint64_t Invoice_min_final_cltv_expiry(const struct LDKInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Invoice_min_final_cltv_expiry")] public static extern long Invoice_min_final_cltv_expiry(long _this_arg);
	// MUST_USE_RES struct LDKCVec_PrivateRouteZ Invoice_private_routes(const struct LDKInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Invoice_private_routes")] public static extern long[] Invoice_private_routes(long _this_arg);
	// MUST_USE_RES struct LDKCVec_RouteHintZ Invoice_route_hints(const struct LDKInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Invoice_route_hints")] public static extern long[] Invoice_route_hints(long _this_arg);
	// MUST_USE_RES enum LDKCurrency Invoice_currency(const struct LDKInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Invoice_currency")] public static extern Currency Invoice_currency(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z Invoice_amount_milli_satoshis(const struct LDKInvoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Invoice_amount_milli_satoshis")] public static extern long Invoice_amount_milli_satoshis(long _this_arg);
	// MUST_USE_RES struct LDKCResult_DescriptionCreationErrorZ Description_new(struct LDKStr description);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Description_new")] public static extern long Description_new(string _description);
	// MUST_USE_RES struct LDKStr Description_into_inner(struct LDKDescription this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Description_into_inner")] public static extern string Description_into_inner(long _this_arg);
	// MUST_USE_RES struct LDKExpiryTime ExpiryTime_from_seconds(uint64_t seconds);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpiryTime_from_seconds")] public static extern long ExpiryTime_from_seconds(long _seconds);
	// MUST_USE_RES struct LDKExpiryTime ExpiryTime_from_duration(uint64_t duration);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpiryTime_from_duration")] public static extern long ExpiryTime_from_duration(long _duration);
	// MUST_USE_RES uint64_t ExpiryTime_as_seconds(const struct LDKExpiryTime *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpiryTime_as_seconds")] public static extern long ExpiryTime_as_seconds(long _this_arg);
	// MUST_USE_RES uint64_t ExpiryTime_as_duration(const struct LDKExpiryTime *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpiryTime_as_duration")] public static extern long ExpiryTime_as_duration(long _this_arg);
	// MUST_USE_RES struct LDKCResult_PrivateRouteCreationErrorZ PrivateRoute_new(struct LDKRouteHint hops);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrivateRoute_new")] public static extern long PrivateRoute_new(long _hops);
	// MUST_USE_RES struct LDKRouteHint PrivateRoute_into_inner(struct LDKPrivateRoute this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrivateRoute_into_inner")] public static extern long PrivateRoute_into_inner(long _this_arg);
	// enum LDKCreationError CreationError_clone(const enum LDKCreationError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CreationError_clone")] public static extern CreationError CreationError_clone(long _orig);
	// enum LDKCreationError CreationError_description_too_long(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CreationError_description_too_long")] public static extern CreationError CreationError_description_too_long();
	// enum LDKCreationError CreationError_route_too_long(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CreationError_route_too_long")] public static extern CreationError CreationError_route_too_long();
	// enum LDKCreationError CreationError_timestamp_out_of_bounds(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CreationError_timestamp_out_of_bounds")] public static extern CreationError CreationError_timestamp_out_of_bounds();
	// enum LDKCreationError CreationError_invalid_amount(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CreationError_invalid_amount")] public static extern CreationError CreationError_invalid_amount();
	// enum LDKCreationError CreationError_missing_route_hints(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CreationError_missing_route_hints")] public static extern CreationError CreationError_missing_route_hints();
	// bool CreationError_eq(const enum LDKCreationError *NONNULL_PTR a, const enum LDKCreationError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CreationError_eq")] public static extern bool CreationError_eq(long _a, long _b);
	// struct LDKStr CreationError_to_str(const enum LDKCreationError *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CreationError_to_str")] public static extern string CreationError_to_str(long _o);
	// enum LDKSemanticError SemanticError_clone(const enum LDKSemanticError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SemanticError_clone")] public static extern SemanticError SemanticError_clone(long _orig);
	// enum LDKSemanticError SemanticError_no_payment_hash(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SemanticError_no_payment_hash")] public static extern SemanticError SemanticError_no_payment_hash();
	// enum LDKSemanticError SemanticError_multiple_payment_hashes(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SemanticError_multiple_payment_hashes")] public static extern SemanticError SemanticError_multiple_payment_hashes();
	// enum LDKSemanticError SemanticError_no_description(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SemanticError_no_description")] public static extern SemanticError SemanticError_no_description();
	// enum LDKSemanticError SemanticError_multiple_descriptions(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SemanticError_multiple_descriptions")] public static extern SemanticError SemanticError_multiple_descriptions();
	// enum LDKSemanticError SemanticError_no_payment_secret(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SemanticError_no_payment_secret")] public static extern SemanticError SemanticError_no_payment_secret();
	// enum LDKSemanticError SemanticError_multiple_payment_secrets(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SemanticError_multiple_payment_secrets")] public static extern SemanticError SemanticError_multiple_payment_secrets();
	// enum LDKSemanticError SemanticError_invalid_features(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SemanticError_invalid_features")] public static extern SemanticError SemanticError_invalid_features();
	// enum LDKSemanticError SemanticError_invalid_recovery_id(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SemanticError_invalid_recovery_id")] public static extern SemanticError SemanticError_invalid_recovery_id();
	// enum LDKSemanticError SemanticError_invalid_signature(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SemanticError_invalid_signature")] public static extern SemanticError SemanticError_invalid_signature();
	// enum LDKSemanticError SemanticError_imprecise_amount(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SemanticError_imprecise_amount")] public static extern SemanticError SemanticError_imprecise_amount();
	// bool SemanticError_eq(const enum LDKSemanticError *NONNULL_PTR a, const enum LDKSemanticError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SemanticError_eq")] public static extern bool SemanticError_eq(long _a, long _b);
	// struct LDKStr SemanticError_to_str(const enum LDKSemanticError *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SemanticError_to_str")] public static extern string SemanticError_to_str(long _o);
	// void SignOrCreationError_free(struct LDKSignOrCreationError this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignOrCreationError_free")] public static extern void SignOrCreationError_free(long _this_ptr);
	// uint64_t SignOrCreationError_clone_ptr(LDKSignOrCreationError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignOrCreationError_clone_ptr")] public static extern long SignOrCreationError_clone_ptr(long _arg);
	// struct LDKSignOrCreationError SignOrCreationError_clone(const struct LDKSignOrCreationError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignOrCreationError_clone")] public static extern long SignOrCreationError_clone(long _orig);
	// struct LDKSignOrCreationError SignOrCreationError_sign_error(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignOrCreationError_sign_error")] public static extern long SignOrCreationError_sign_error();
	// struct LDKSignOrCreationError SignOrCreationError_creation_error(enum LDKCreationError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignOrCreationError_creation_error")] public static extern long SignOrCreationError_creation_error(CreationError _a);
	// bool SignOrCreationError_eq(const struct LDKSignOrCreationError *NONNULL_PTR a, const struct LDKSignOrCreationError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignOrCreationError_eq")] public static extern bool SignOrCreationError_eq(long _a, long _b);
	// struct LDKStr SignOrCreationError_to_str(const struct LDKSignOrCreationError *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignOrCreationError_to_str")] public static extern string SignOrCreationError_to_str(long _o);
	// void InvoicePayer_free(struct LDKInvoicePayer this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoicePayer_free")] public static extern void InvoicePayer_free(long _this_obj);
	// void Payer_free(struct LDKPayer this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Payer_free")] public static extern void Payer_free(long _this_ptr);
	// void Retry_free(struct LDKRetry this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Retry_free")] public static extern void Retry_free(long _this_ptr);
	// uint64_t Retry_clone_ptr(LDKRetry *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Retry_clone_ptr")] public static extern long Retry_clone_ptr(long _arg);
	// struct LDKRetry Retry_clone(const struct LDKRetry *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Retry_clone")] public static extern long Retry_clone(long _orig);
	// struct LDKRetry Retry_attempts(uintptr_t a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Retry_attempts")] public static extern long Retry_attempts(long _a);
	// struct LDKRetry Retry_timeout(uint64_t a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Retry_timeout")] public static extern long Retry_timeout(long _a);
	// bool Retry_eq(const struct LDKRetry *NONNULL_PTR a, const struct LDKRetry *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Retry_eq")] public static extern bool Retry_eq(long _a, long _b);
	// uint64_t Retry_hash(const struct LDKRetry *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Retry_hash")] public static extern long Retry_hash(long _o);
	// void PaymentError_free(struct LDKPaymentError this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentError_free")] public static extern void PaymentError_free(long _this_ptr);
	// uint64_t PaymentError_clone_ptr(LDKPaymentError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentError_clone_ptr")] public static extern long PaymentError_clone_ptr(long _arg);
	// struct LDKPaymentError PaymentError_clone(const struct LDKPaymentError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentError_clone")] public static extern long PaymentError_clone(long _orig);
	// struct LDKPaymentError PaymentError_invoice(struct LDKStr a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentError_invoice")] public static extern long PaymentError_invoice(string _a);
	// struct LDKPaymentError PaymentError_routing(struct LDKLightningError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentError_routing")] public static extern long PaymentError_routing(long _a);
	// struct LDKPaymentError PaymentError_sending(struct LDKPaymentSendFailure a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentError_sending")] public static extern long PaymentError_sending(long _a);
	// MUST_USE_RES struct LDKInvoicePayer InvoicePayer_new(struct LDKPayer payer, struct LDKRouter router, struct LDKLogger logger, struct LDKEventHandler event_handler, struct LDKRetry retry);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoicePayer_new")] public static extern long InvoicePayer_new(long _payer, long _router, long _logger, long _event_handler, long _retry);
	// MUST_USE_RES struct LDKCResult_PaymentIdPaymentErrorZ InvoicePayer_pay_invoice(const struct LDKInvoicePayer *NONNULL_PTR this_arg, const struct LDKInvoice *NONNULL_PTR invoice);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoicePayer_pay_invoice")] public static extern long InvoicePayer_pay_invoice(long _this_arg, long _invoice);
	// MUST_USE_RES struct LDKCResult_NonePaymentErrorZ InvoicePayer_pay_invoice_with_id(const struct LDKInvoicePayer *NONNULL_PTR this_arg, const struct LDKInvoice *NONNULL_PTR invoice, struct LDKThirtyTwoBytes payment_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoicePayer_pay_invoice_with_id")] public static extern long InvoicePayer_pay_invoice_with_id(long _this_arg, long _invoice, byte[] _payment_id);
	// MUST_USE_RES struct LDKCResult_PaymentIdPaymentErrorZ InvoicePayer_pay_zero_value_invoice(const struct LDKInvoicePayer *NONNULL_PTR this_arg, const struct LDKInvoice *NONNULL_PTR invoice, uint64_t amount_msats);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoicePayer_pay_zero_value_invoice")] public static extern long InvoicePayer_pay_zero_value_invoice(long _this_arg, long _invoice, long _amount_msats);
	// MUST_USE_RES struct LDKCResult_NonePaymentErrorZ InvoicePayer_pay_zero_value_invoice_with_id(const struct LDKInvoicePayer *NONNULL_PTR this_arg, const struct LDKInvoice *NONNULL_PTR invoice, uint64_t amount_msats, struct LDKThirtyTwoBytes payment_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoicePayer_pay_zero_value_invoice_with_id")] public static extern long InvoicePayer_pay_zero_value_invoice_with_id(long _this_arg, long _invoice, long _amount_msats, byte[] _payment_id);
	// MUST_USE_RES struct LDKCResult_PaymentIdPaymentErrorZ InvoicePayer_pay_pubkey(const struct LDKInvoicePayer *NONNULL_PTR this_arg, struct LDKPublicKey pubkey, struct LDKThirtyTwoBytes payment_preimage, uint64_t amount_msats, uint32_t final_cltv_expiry_delta);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoicePayer_pay_pubkey")] public static extern long InvoicePayer_pay_pubkey(long _this_arg, byte[] _pubkey, byte[] _payment_preimage, long _amount_msats, int _final_cltv_expiry_delta);
	// MUST_USE_RES struct LDKCResult_NonePaymentErrorZ InvoicePayer_pay_pubkey_with_id(const struct LDKInvoicePayer *NONNULL_PTR this_arg, struct LDKPublicKey pubkey, struct LDKThirtyTwoBytes payment_preimage, struct LDKThirtyTwoBytes payment_id, uint64_t amount_msats, uint32_t final_cltv_expiry_delta);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoicePayer_pay_pubkey_with_id")] public static extern long InvoicePayer_pay_pubkey_with_id(long _this_arg, byte[] _pubkey, byte[] _payment_preimage, byte[] _payment_id, long _amount_msats, int _final_cltv_expiry_delta);
	// void InvoicePayer_remove_cached_payment(const struct LDKInvoicePayer *NONNULL_PTR this_arg, const uint8_t (*payment_hash)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoicePayer_remove_cached_payment")] public static extern void InvoicePayer_remove_cached_payment(long _this_arg, byte[] _payment_hash);
	// struct LDKEventHandler InvoicePayer_as_EventHandler(const struct LDKInvoicePayer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoicePayer_as_EventHandler")] public static extern long InvoicePayer_as_EventHandler(long _this_arg);
	// struct LDKCResult_InvoiceSignOrCreationErrorZ create_phantom_invoice(struct LDKCOption_u64Z amt_msat, struct LDKThirtyTwoBytes payment_hash, struct LDKStr description, uint32_t invoice_expiry_delta_secs, struct LDKCVec_PhantomRouteHintsZ phantom_route_hints, struct LDKKeysInterface keys_manager, struct LDKLogger logger, enum LDKCurrency network);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create_phantom_invoice")] public static extern long create_phantom_invoice(long _amt_msat, byte[] _payment_hash, string _description, int _invoice_expiry_delta_secs, long[] _phantom_route_hints, long _keys_manager, long _logger, Currency _network);
	// struct LDKCResult_InvoiceSignOrCreationErrorZ create_phantom_invoice_with_description_hash(struct LDKCOption_u64Z amt_msat, struct LDKThirtyTwoBytes payment_hash, uint32_t invoice_expiry_delta_secs, struct LDKSha256 description_hash, struct LDKCVec_PhantomRouteHintsZ phantom_route_hints, struct LDKKeysInterface keys_manager, struct LDKLogger logger, enum LDKCurrency network);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create_phantom_invoice_with_description_hash")] public static extern long create_phantom_invoice_with_description_hash(long _amt_msat, byte[] _payment_hash, int _invoice_expiry_delta_secs, long _description_hash, long[] _phantom_route_hints, long _keys_manager, long _logger, Currency _network);
	// struct LDKCResult_InvoiceSignOrCreationErrorZ create_invoice_from_channelmanager(const struct LDKChannelManager *NONNULL_PTR channelmanager, struct LDKKeysInterface keys_manager, struct LDKLogger logger, enum LDKCurrency network, struct LDKCOption_u64Z amt_msat, struct LDKStr description, uint32_t invoice_expiry_delta_secs);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create_invoice_from_channelmanager")] public static extern long create_invoice_from_channelmanager(long _channelmanager, long _keys_manager, long _logger, Currency _network, long _amt_msat, string _description, int _invoice_expiry_delta_secs);
	// struct LDKCResult_InvoiceSignOrCreationErrorZ create_invoice_from_channelmanager_with_description_hash(const struct LDKChannelManager *NONNULL_PTR channelmanager, struct LDKKeysInterface keys_manager, struct LDKLogger logger, enum LDKCurrency network, struct LDKCOption_u64Z amt_msat, struct LDKSha256 description_hash, uint32_t invoice_expiry_delta_secs);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create_invoice_from_channelmanager_with_description_hash")] public static extern long create_invoice_from_channelmanager_with_description_hash(long _channelmanager, long _keys_manager, long _logger, Currency _network, long _amt_msat, long _description_hash, int _invoice_expiry_delta_secs);
	// struct LDKCResult_InvoiceSignOrCreationErrorZ create_invoice_from_channelmanager_with_description_hash_and_duration_since_epoch(const struct LDKChannelManager *NONNULL_PTR channelmanager, struct LDKKeysInterface keys_manager, struct LDKLogger logger, enum LDKCurrency network, struct LDKCOption_u64Z amt_msat, struct LDKSha256 description_hash, uint64_t duration_since_epoch, uint32_t invoice_expiry_delta_secs);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create_invoice_from_channelmanager_with_description_hash_and_duration_since_epoch")] public static extern long create_invoice_from_channelmanager_with_description_hash_and_duration_since_epoch(long _channelmanager, long _keys_manager, long _logger, Currency _network, long _amt_msat, long _description_hash, long _duration_since_epoch, int _invoice_expiry_delta_secs);
	// struct LDKCResult_InvoiceSignOrCreationErrorZ create_invoice_from_channelmanager_and_duration_since_epoch(const struct LDKChannelManager *NONNULL_PTR channelmanager, struct LDKKeysInterface keys_manager, struct LDKLogger logger, enum LDKCurrency network, struct LDKCOption_u64Z amt_msat, struct LDKStr description, uint64_t duration_since_epoch, uint32_t invoice_expiry_delta_secs);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create_invoice_from_channelmanager_and_duration_since_epoch")] public static extern long create_invoice_from_channelmanager_and_duration_since_epoch(long _channelmanager, long _keys_manager, long _logger, Currency _network, long _amt_msat, string _description, long _duration_since_epoch, int _invoice_expiry_delta_secs);
	// struct LDKCResult_InvoiceSignOrCreationErrorZ create_invoice_from_channelmanager_and_duration_since_epoch_with_payment_hash(const struct LDKChannelManager *NONNULL_PTR channelmanager, struct LDKKeysInterface keys_manager, struct LDKLogger logger, enum LDKCurrency network, struct LDKCOption_u64Z amt_msat, struct LDKStr description, uint64_t duration_since_epoch, uint32_t invoice_expiry_delta_secs, struct LDKThirtyTwoBytes payment_hash);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create_invoice_from_channelmanager_and_duration_since_epoch_with_payment_hash")] public static extern long create_invoice_from_channelmanager_and_duration_since_epoch_with_payment_hash(long _channelmanager, long _keys_manager, long _logger, Currency _network, long _amt_msat, string _description, long _duration_since_epoch, int _invoice_expiry_delta_secs, byte[] _payment_hash);
	// struct LDKPayer ChannelManager_as_Payer(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_as_Payer")] public static extern long ChannelManager_as_Payer(long _this_arg);
	// struct LDKCResult_SiPrefixParseErrorZ SiPrefix_from_str(struct LDKStr s);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_from_str")] public static extern long SiPrefix_from_str(string _s);
	// struct LDKCResult_InvoiceParseOrSemanticErrorZ Invoice_from_str(struct LDKStr s);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Invoice_from_str")] public static extern long Invoice_from_str(string _s);
	// struct LDKCResult_SignedRawInvoiceParseErrorZ SignedRawInvoice_from_str(struct LDKStr s);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawInvoice_from_str")] public static extern long SignedRawInvoice_from_str(string _s);
	// struct LDKStr ParseError_to_str(const struct LDKParseError *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseError_to_str")] public static extern string ParseError_to_str(long _o);
	// struct LDKStr ParseOrSemanticError_to_str(const struct LDKParseOrSemanticError *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseOrSemanticError_to_str")] public static extern string ParseOrSemanticError_to_str(long _o);
	// struct LDKStr Invoice_to_str(const struct LDKInvoice *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Invoice_to_str")] public static extern string Invoice_to_str(long _o);
	// struct LDKStr SignedRawInvoice_to_str(const struct LDKSignedRawInvoice *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawInvoice_to_str")] public static extern string SignedRawInvoice_to_str(long _o);
	// struct LDKStr Currency_to_str(const enum LDKCurrency *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Currency_to_str")] public static extern string Currency_to_str(long _o);
	// struct LDKStr SiPrefix_to_str(const enum LDKSiPrefix *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_to_str")] public static extern string SiPrefix_to_str(long _o);
	// void RapidGossipSync_free(struct LDKRapidGossipSync this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RapidGossipSync_free")] public static extern void RapidGossipSync_free(long _this_obj);
	// MUST_USE_RES struct LDKRapidGossipSync RapidGossipSync_new(const struct LDKNetworkGraph *NONNULL_PTR network_graph);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RapidGossipSync_new")] public static extern long RapidGossipSync_new(long _network_graph);
	// MUST_USE_RES struct LDKCResult_u32GraphSyncErrorZ RapidGossipSync_update_network_graph(const struct LDKRapidGossipSync *NONNULL_PTR this_arg, struct LDKu8slice update_data);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RapidGossipSync_update_network_graph")] public static extern long RapidGossipSync_update_network_graph(long _this_arg, byte[] _update_data);
	// MUST_USE_RES bool RapidGossipSync_is_initial_sync_complete(const struct LDKRapidGossipSync *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RapidGossipSync_is_initial_sync_complete")] public static extern bool RapidGossipSync_is_initial_sync_complete(long _this_arg);
	// void GraphSyncError_free(struct LDKGraphSyncError this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GraphSyncError_free")] public static extern void GraphSyncError_free(long _this_ptr);
	// uint64_t GraphSyncError_clone_ptr(LDKGraphSyncError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GraphSyncError_clone_ptr")] public static extern long GraphSyncError_clone_ptr(long _arg);
	// struct LDKGraphSyncError GraphSyncError_clone(const struct LDKGraphSyncError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GraphSyncError_clone")] public static extern long GraphSyncError_clone(long _orig);
	// struct LDKGraphSyncError GraphSyncError_decode_error(struct LDKDecodeError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GraphSyncError_decode_error")] public static extern long GraphSyncError_decode_error(long _a);
	// struct LDKGraphSyncError GraphSyncError_lightning_error(struct LDKLightningError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GraphSyncError_lightning_error")] public static extern long GraphSyncError_lightning_error(long _a);
	static bindings() {
	}
}
} } }
