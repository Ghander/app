@attribute [Route(Routes.PointOfSale)]
@using BTCPayApp.CommonServer.Models
@using BTCPayApp.Core.Auth
@using BTCPayApp.UI.Features
@using BTCPayServer.Client.Models
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject NavigationManager NavigationManager
@inject IAccountManager AccountManager
@inject IState<StoreState> StoreState
@inject IDispatcher Dispatcher
@inject IActionSubscriber ActionSubscriber

<PageTitle>Point Of Sale</PageTitle>

@if (Loading || !string.IsNullOrEmpty(AppId) && string.IsNullOrEmpty(_iframeGuid))
{
    <section class="loading-container">
        <LoadingIndicator Size="lg"/>
        <div class="fs-4">Loading</div>
    </section>
}
else if (!string.IsNullOrEmpty(Error))
{
    <section class="container">
        <Alert Type="danger">@Error</Alert>
    </section>
}
@if (!string.IsNullOrEmpty(AppId))
{

    @*<section class="container">
        @
        else if (!string.IsNullOrEmpty(Error))
        {
            <Alert Type="danger">@Error</Alert>
        }
        else if (AppData is not null)
        {
            <form method="post" target="checkout" action="@FormAction">
                <Keypad CurrencyCode="@AppData.Currency"
                        IsDiscountEnabled="@AppData.ShowDiscount"
                        IsTipEnabled="@AppData.EnableTips"
                        CustomTipPercentages="new[] { 5, 10, 21 }"/>
            </form>
        }
    </section>*@
    <iframe name="pos" src="@IframeSrc" allow="clipboard-read;clipboard-write" allowfullscreen></iframe>
}

@code {
    private string? _iframeGuid;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        NavigationManager.LocationChanged += OnLocationChanged;

        ActionSubscriber.SubscribeToAction<StoreState.SetPointOfSale>(this, action =>
        {
            if (Store != null && action.AppData == null)
            {
                AccountManager.EnsureStorePos(Store, true);
                return;
            }
            InvokeAsync(StateHasChanged);
        });

        var appId = Store == null ? null : (await AccountManager.EnsureStorePos(Store)).PosAppId;
        if (!Loading && AppData == null && !string.IsNullOrEmpty(appId))
            Dispatcher.Dispatch(new StoreState.FetchPointOfSale(appId));
    }

    protected override ValueTask DisposeAsyncCore(bool disposing)
    {
        base.DisposeAsyncCore(disposing);

        ActionSubscriber.UnsubscribeFromAllActions(this);
        NavigationManager.LocationChanged -= OnLocationChanged;

        return ValueTask.CompletedTask;
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        if (args.Location.EndsWith(Routes.PointOfSale))
        {
            _iframeGuid = Guid.NewGuid().ToString();
            StateHasChanged();
        }
    }

    private AppUserStoreInfo? Store => AccountManager.GetCurrentStore();
    private string? AppId => Store?.PosAppId ?? AppData?.Id;
    private string? PosUrl => string.IsNullOrEmpty(AppId) ? null : $"{AccountManager.GetAccount()!.BaseUri}apps/{AppId}/pos";
    private string? IframeSrc => string.IsNullOrEmpty(PosUrl) ? null : $"{PosUrl}?guid={_iframeGuid}";
    private PointOfSaleAppData? AppData => StoreState.Value.PointOfSale?.Data;
    private bool Loading => StoreState.Value.PointOfSale?.Loading is true;
    private string? Error => StoreState.Value.PointOfSale?.Error;
}
