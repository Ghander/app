@attribute [Route(Routes.PointOfSale)]
@using System.Globalization
@using BTCPayApp.CommonServer.Models
@using BTCPayApp.Core.Auth
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IAccountManager AccountManager

<PageTitle>Point Of Sale</PageTitle>

<SectionContent SectionId="_Layout.MainTop">
    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <Alert Type="danger">@_errorMessage</Alert>
    }
</SectionContent>

@if (!string.IsNullOrEmpty(AppId))
{
    <section class="container">
        <form method="post" target="checkout" action="@GetFormAction()">
            <Keypad CurrencyInfo="@CurrencyInfo" CurrencyCode="EUR"
                    IsDiscountEnabled="true" IsTipEnabled="true" CustomTipPercentages="new[] { 5, 10, 21 }"/>
        </form>
    </section>
    <iframe name="checkout" width="480" height="270" allow="autoplay;encrypted-media" allowfullscreen></iframe>
}
else
{
    <Alert Type="info">Please configure a store with keypad point of sale first.</Alert>
}

@code {
    private bool _loading;
    private string? _errorMessage;

    private NumberFormatInfo CurrencyInfo { get; set; } = new()
    {
        CurrencySymbol = "\u20ac",
        CurrencyDecimalDigits = 2,
        CurrencyDecimalSeparator = ",",
        CurrencyGroupSeparator = "."
    };

    private AppUserStoreInfo? Store => AccountManager.GetCurrentStore();
    private string? AppId => Store?.PosAppId;

    private string? GetFormAction()
    {
        if (string.IsNullOrEmpty(AppId)) return null;
        var baseUri = AccountManager.GetAccount()!.BaseUri;
        return $"{baseUri}apps/{AppId}/pos";
    }

}
