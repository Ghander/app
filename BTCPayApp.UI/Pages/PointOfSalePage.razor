@attribute [Route(Routes.PointOfSale)]
@using System.Globalization
@using BTCPayApp.Core.Auth
@using BTCPayApp.UI.Features
@using BTCPayServer.Client.Models
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IAccountManager AccountManager
@inject IState<StoreState> StoreState

<PageTitle>Point Of Sale</PageTitle>

@if (!string.IsNullOrEmpty(AppId))
{
    @*<section class="container">
        @
        else if (!string.IsNullOrEmpty(Error))
        {
            <Alert Type="danger">@Error</Alert>
        }
        else if (AppData is not null)
        {
            <form method="post" target="checkout" action="@FormAction">
                <Keypad CurrencyInfo="@CurrencyInfo"
                        CurrencyCode="@AppData.Currency"
                        IsDiscountEnabled="@AppData.ShowDiscount"
                        IsTipEnabled="@AppData.EnableTips"
                        CustomTipPercentages="new[] { 5, 10, 21 }"/>
            </form>
        }
    </section>*@
    <iframe name="pos" src="@PosUrl" allow="clipboard-read;clipboard-write" allowfullscreen></iframe>
}
else
{
    <section class="container">
        @if (Loading)
        {
            <div class="p-3 text-center">
                <LoadingIndicator/>
            </div>
        }
        else if (!string.IsNullOrEmpty(Error))
        {
            <Alert Type="danger">@Error</Alert>
        }
        else
        {
            <Alert Type="info">Please configure a store with keypad point of sale first.</Alert>
        }
    </section>
}

@code {
    private NumberFormatInfo CurrencyInfo { get; set; } = new()
    {
        CurrencySymbol = "\u20ac",
        CurrencyDecimalDigits = 2,
        CurrencyDecimalSeparator = ",",
        CurrencyGroupSeparator = "."
    };

    private string? AppId => AppData?.Id;
    private string? PosUrl => string.IsNullOrEmpty(AppId) ? null : $"{AccountManager.GetAccount()!.BaseUri}apps/{AppId}/pos";
    private PointOfSaleAppData? AppData => StoreState.Value.PointOfSale?.Data;
    private bool Loading => StoreState.Value.PointOfSale?.Loading is true;
    private string? Error => StoreState.Value.PointOfSale?.Error;
}
