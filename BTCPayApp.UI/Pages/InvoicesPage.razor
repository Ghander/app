@attribute [Route(Routes.Invoices)]
@using BTCPayApp.CommonServer.Models
@using BTCPayApp.UI.Components.Layout
@using BTCPayApp.Core.Auth
@using BTCPayApp.UI.Features
@using BTCPayServer.Client.Models
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IAccountManager AccountManager
@inject IDispatcher Dispatcher
@inject IState<StoreState> StoreState

<PageTitle>Invoices</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back="@Routes.Index">
        @if (Store is not null)
        {
            <SectionContent SectionId="Titlebar.End">
                <button type="button" class="btn-icon" @onclick="LoadInvoices" disabled="@Loading">
                    @if (Loading)
                    {
                        <LoadingIndicator/>
                    }
                    else
                    {
                        <Icon Symbol="actions-refresh"/>
                    }
                </button>
            </SectionContent>
        }
        <h1>Invoices</h1>
    </Titlebar>
</SectionContent>

@if (Store is null)
{
    <section class="container">
        <Alert Type="info">Please configure a store first.</Alert>
    </section>
}
@if (!string.IsNullOrEmpty(Error))
{
    <section class="container">
        <Alert Type="danger">@Error</Alert>
    </section>
}
@if (Invoices is not null)
{
    @if (Invoices.Any())
    {
        <div class="list-group list-group-flush">
            @foreach (var i in Invoices)
            {
                <InvoiceItem Invoice="@i"/>
            }
        </div>
    }
    else
    {
        <section class="container">
            <p class="text-muted">There are no invoices, yet.</p>
        </section>
    }
}

@code {
    private void LoadInvoices()
    {
        if (Store is not null)
            Dispatcher.Dispatch(new StoreState.FetchInvoices(Store.Id));
    }

    private AppUserStoreInfo? Store => AccountManager.GetCurrentStore();
    private IEnumerable<InvoiceData>? Invoices => StoreState.Value.Invoices?.Data;
    private bool Loading => StoreState.Value.Invoices?.Loading is true;
    private string? Error => StoreState.Value.Invoices?.Error;
}
