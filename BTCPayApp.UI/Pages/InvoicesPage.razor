@attribute [Route(Routes.Invoices)]
@using BTCPayApp.CommonServer.Models
@using BTCPayApp.UI.Components.Layout
@using BTCPayApp.Core.Auth
@using BTCPayServer.Client.Models
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IAccountManager AccountManager

<PageTitle>Invoices</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back="@Routes.Index">
        @if (Store is not null)
        {
            <SectionContent SectionId="Titlebar.End">
                <button type="button" class="btn-icon" @onclick="LoadInvoices" disabled="@_loading">
                    @if (_loading)
                    {
                        <LoadingIndicator/>
                    }
                    else
                    {
                        <Icon Symbol="actions-refresh"/>
                    }
                </button>
            </SectionContent>
        }
        <h1>Invoices</h1>
    </Titlebar>
</SectionContent>

@if (Store is null)
{
    <section class="container">
        <Alert Type="info">Please configure a store first.</Alert>
    </section>
}
@if (!string.IsNullOrEmpty(_errorMessage))
{
    <section class="container">
        <Alert Type="danger">@_errorMessage</Alert>
    </section>
}
@if (_invoices is not null)
{
    @if (_invoices.Any())
    {
        <div class="list-group list-group-flush">
            @foreach (var i in _invoices)
            {
                <InvoiceItem Invoice="@i"/>
            }
        </div>
    }
    else
    {
        <section class="container">
            <p class="text-muted">There are no invoices, yet.</p>
        </section>
    }
}

@code {
    private bool _loading;
    private string? _errorMessage;
    private IEnumerable<InvoiceData>? _invoices;

    protected override async Task OnInitializedAsync()
    {
        if (Store is not null) await LoadInvoices();
    }

    private async Task LoadInvoices()
    {
        try
        {
            _loading = true;
            _errorMessage = null;
            _invoices = await AccountManager.GetClient().GetInvoices(Store!.Id);
        }
        catch (Exception e)
        {
            _errorMessage = e.InnerException?.Message ?? e.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    private AppUserStoreInfo? Store => AccountManager.GetCurrentStore();
}
