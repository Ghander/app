@attribute [AllowAnonymous]
@attribute [Route(Routes.WalletReceive)]
@using BTCPayApp.Core.Attempt2
@using BTCPayApp.UI.Components.Layout
@using BTCPayServer.Lightning
@using NBitcoin
@using NBitcoin.Crypto
@inject LightningNodeManager LightningNodeManager
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Receive</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back>
        <h1>Receive</h1>
    </Titlebar>
</SectionContent>
<section class="container">
    <h4 class="mb-4">Request payment</h4>
    <ValidationEditContext @ref="_validationEditContext"  Model="Model" OnValidSubmit="GenerateInvoice" SuccessMessage="@_successMessage" ErrorMessage="@_errorMessage">
        <DataAnnotationsValidator/>

        @if (!string.IsNullOrEmpty(_paymentRequest))
        {
            <div class="form-group form-floating">
                <TruncateCenter Text="@_paymentRequest" Padding="15" Copy="true" Elastic="true" class="form-control-plaintext"/>
                <label>Payment Request</label>
            </div>
        }

        <div class="form-group">
            <label for="Amount" class="form-label" data-required>Amount</label>
            <div class="input-group">
                <InputNumber @bind-Value="Model.Amount" id="Amount" class="form-control" inputmode="numeric" min="0" />
                <span class="input-group-text">sats</span>
            </div>
            <ValidationMessage For="@(() => Model.Amount)"/>
        </div>
        <button type="submit" class="btn btn-primary" disabled="@(_validationEditContext!.Invalid || _invoiceGenerating)">
            @if (_invoiceGenerating)
            {
                <LoadingIndicator/>
            }
            else
            {
                <span>Generate Invoice</span>
            }
        </button>
    </ValidationEditContext>
</section>

@code {
    private ReceiveModel Model { get; set; } = new();

    private ValidationEditContext? _validationEditContext;
    private string? _successMessage;
    private string? _errorMessage;
    private string? _paymentRequest;
    private bool _invoiceGenerating;
    private LDKNode? Node => LightningNodeManager.Node;
    private readonly SemaphoreSlim _semaphore = new(1, 1);

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private class ReceiveModel
    {
        [Required]
        public decimal? Amount { get; set; }
    }

    private async void GenerateInvoice()
    {
        if (Model.Amount is null) return;
        await Wrap(async () =>
        {
            try
            {
                var hash = new uint256(Hashes.SHA256(RandomUtils.GetBytes(32)));
                var result = await Node.PaymentsManager.RequestPayment(LightMoney.Satoshis(Model.Amount ?? 0), TimeSpan.FromDays(1), hash);

                _successMessage = "Payment request created";
                _paymentRequest = result.PaymentRequest.ToString();
                Model = new ReceiveModel();
            }
            catch (Exception e)
            {
                _errorMessage = $"Error: {e.Message}";
            }
        });
    }

    private async Task Wrap(Func<Task> action)
    {
        if (_invoiceGenerating) return;
        try
        {
            _paymentRequest = _successMessage = _errorMessage = null;
            _invoiceGenerating = true;
            await InvokeAsync(StateHasChanged);
            await _semaphore.WaitAsync();
            await action();
        }
        finally
        {
            _invoiceGenerating = false;
            await InvokeAsync(StateHasChanged);
            _semaphore.Release();
        }
    }
}
