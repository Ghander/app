@attribute [AllowAnonymous]
@attribute [Route(Routes.Settings)]
@using BTCPayApp.CommonServer
@using BTCPayApp.Core.Auth
@using BTCPayApp.UI.Features
@using BTCPayApp.UI.Components.Layout
@inject IState<UIState> UiState
@inject IDispatcher Dispatcher
@inject IAccountManager AccountManager
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Settings</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back="@Routes.Index">
        <h1>Settings</h1>
    </Titlebar>
</SectionContent>
<section class="container">
    <div class="form-group">
        @if (UiState.Value.CustomThemeExtension is null)
        {
            <label class="form-label">Theme</label>
            <InputSelect class="form-select w-auto" @bind-Value="Model.Theme" @bind-Value:after="OnThemeChange">
                <option value="@Themes.System">System</option>
                <option value="@Themes.Light">Light</option>
                <option value="@Themes.Dark">Dark</option>
            </InputSelect>
        }
        else
        {
            <div>Custom Theme</div>
        }
    </div>
</section>
@if (_userInfo != null)
{
    <section class="container">
        <p>
            ID: @_userInfo.UserId<br/>
            Email: @_userInfo.Email<br/>
            Roles: @(_userInfo.Roles?.Any() is true ? string.Join(", ", _userInfo.Roles) : "none")
        </p>
        @if (_userInfo.Stores?.Any() is true)
        {
            <ul>
                @foreach (var store in _userInfo.Stores)
                {
                    <li>
                        <div>
                            <strong>
                                <a href="@Routes.StorePath(store.Id)">@store.Name</a>
                            </strong>
                            <span class="badge bg-light">@store.RoleId</span>
                            @if (store.Archived)
                            {
                                <span class="badge bg-info">archived</span>
                            }
                        </div>
                        @if (store.Permissions?.Any() is true)
                        {
                            <ul>
                                @foreach (var permission in store.Permissions)
                                {
                                    <li>@permission</li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p class="text-secondary">No permissions</p>
                        }
                    </li>
                }
            </ul>
        }
        else
        {
            <p class="text-secondary">No stores</p>
        }
    </section>
    <section class="container py-3">
        <div class="box">
            <ul class="list-group list-group-flush list-group-links">
                <li class="list-group-item">
                    <NavLink class="nav-link" href="@Routes.ChangePasscode">
                        <span>Passcode</span>
                        <Icon symbol="caret-right"/>
                    </NavLink>
                </li>
            </ul>
        </div>
    </section>
}

@code {
    private AppUserInfo? _userInfo;
    private SettingsModel Model { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _userInfo = AccountManager.GetUserInfo();
        Model.Theme = UiState.Value.SelectedTheme;
    }

    private void OnThemeChange()
    {
        Dispatcher.Dispatch(new UIState.ApplyUserTheme(Model.Theme));
    }

    private class SettingsModel
    {
        public string Theme { get; set; } = Themes.System;
    }
}
