@attribute [Route(Routes.Settings)]
@using BTCPayApp.CommonServer.Models
@using BTCPayApp.Core.Auth
@using BTCPayApp.UI.Features
@inject IState<UIState> UiState
@inject IDispatcher Dispatcher
@inject IAccountManager AccountManager
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Settings</PageTitle>

<section class="container py-4">
    <header class="d-flex align-items-center justify-content-between gap-3">
        @if (UiState.Value.CustomThemeExtension is null)
        {
            <h1>Settings</h1>
            <div class="d-flex align-items-center gap-1">
                @foreach (var theme in ThemeList)
                {
                    <button type="button" class="btn-icon @(Model.Theme == theme ? "active" : null)" title="@theme" @onclick="() => SetTheme(theme)">
                        <Icon Symbol="@($"themes-{theme.ToLower()}")"/>
                    </button>
                }
            </div>
        }
    </header>
    @if (_userInfo != null)
    {
        <a href="@Routes.User" class="box user">
            <div class="profile-picture"></div>
            <div class="me-auto">
                <h5>@(_userInfo.Name ?? _userInfo.Email)</h5>
                <span>@_userInfo.Email</span>
            </div>
            <Icon symbol="caret-right"/>
        </a>
    }

    <h2>Store</h2>
    <div class="box">
        <ul class="list-group list-group-flush list-group-links">
            @{ var store = AccountManager.GetCurrentStore(); }
            @if (store != null)
            {
                <li class="list-group-item">
                    <a href="@Routes.StorePath(store.Id!, Routes.Settings)">
                        <span>@store.Name</span>
                        <Icon symbol="caret-right"/>
                    </a>
                </li>
            }
            @if (_userInfo!.Stores?.Count() > 1 || AccountManager.GetCurrentStore() == null)
            {
                <li class="list-group-item">
                    <a href="@Routes.SelectStore">
                        <span>Select Store</span>
                        <Icon symbol="caret-right"/>
                    </a>
                </li>
            }
        </ul>
    </div>

    <h2>Security</h2>
    <div class="box">
        <ul class="list-group list-group-flush list-group-links">
            <li class="list-group-item">
                <a href="@Routes.ChangePasscode">
                    <span>Passcode</span>
                    <Icon symbol="caret-right"/>
                </a>
            </li>
        </ul>
    </div>
</section>

@code {
    private AppUserInfo? _userInfo;
    private SettingsModel Model { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _userInfo = AccountManager.GetUserInfo();
        Model.Theme = UiState.Value.SelectedTheme;
    }

    private void SetTheme(string theme)
    {
        Model.Theme = theme;
        Dispatcher.Dispatch(new UIState.ApplyUserTheme(Model.Theme));
    }

    private class SettingsModel
    {
        public string Theme { get; set; } = Themes.System;
    }

    private static string[] ThemeList => [Themes.System, Themes.Light, Themes.Dark];
}
