@attribute [Route(Routes.Login)]
@attribute [AllowAnonymous]
@layout SimpleLayout
@using BTCPayApp.UI.Auth
@using BTCPayApp.UI.Util
@inject IAccountManager AccountManager
@inject NavigationManager NavigationManager

<PageTitle>Login to a server</PageTitle>

<EditForm Model="@Model" OnValidSubmit="HandleValidSubmit" FormName="Login" method="post">
    <DataAnnotationsValidator />
    <h1 class="h2 mb-4">Login to a server</h1>
    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger mb-3">@_errorMessage</div>
    }
    <div class="mb-3" hidden="@Model.RequireTwoFactor">
        <label for="Uri" class="form-label">Server URL</label>
        <InputText @bind-Value="Model.Uri" type="url" id="Uri" class="form-control"/>
        <ValidationMessage For="@(() => Model.Uri)" />
    </div>
    <div class="mb-3" hidden="@Model.RequireTwoFactor">
        <label for="Email" class="form-label">Email</label>
        <InputText @bind-Value="Model.Email" type="email" id="Email" class="form-control"/>
        <ValidationMessage For="@(() => Model.Email)" />
    </div>
    <div class="mb-3" hidden="@Model.RequireTwoFactor">
        <label for="Password" class="form-label">Password</label>
        <InputText @bind-Value="Model.Password" type="password" id="Password" autocomplete="current-password" class="form-control"/>
        <ValidationMessage For="@(() => Model.Password)" />
    </div>
    @if (Model.RequireTwoFactor)
    {
        <div class="mb-3">
            <label for="TwoFactorCode" class="form-label">Two Factor Code</label>
            <InputText @bind-Value="Model.TwoFactorCode" type="number" id="TwoFactorCode" autocomplete="one-time-code" class="form-control hide-number-spin"/>
            <ValidationMessage For="@(() => Model.TwoFactorCode)" />
        </div>
    }
    <button type="submit" class="btn btn-primary w-100" data-testid="LoginButton">Login</button>
    <p class="mt-4 text-center" hidden="@Model.RequireTwoFactor">
        <NavLink href="@Routes.ForgotPassword">Forgot your password?</NavLink>
    </p>
</EditForm>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "serverUrl")]
    public string? ServerUrl { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private LoginModel Model { get; set; } = new();

    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState == null) return;

        var authState = await AuthenticationState;

        if (!string.IsNullOrEmpty(ServerUrl))
        {
            // Parameter passed by ConnectPage
            Model.Uri = Uri.UnescapeDataString(ServerUrl);
        }
        else
        {
            // See if we had a previous session/account
            var account = AccountManager.GetAccount();
            Model.Uri = account?.BaseUri;
            Model.Email = account?.Email;
        }
    }

    public async Task HandleValidSubmit()
    {
        _errorMessage = null;

        var result = await AccountManager.Login(Model.Uri!, Model.Email!, Model.Password!, Model.TwoFactorCode);
        if (result.Succeeded)
        {
            NavigationManager.NavigateTo(Routes.Index);
        }
        else
        {
            if (result.ErrorList?.Contains("RequiresTwoFactor") is true)
                Model.RequireTwoFactor = true;
            else
                _errorMessage = result.ErrorList?.Contains("Failed") is false
                    ? string.Join(",", result.ErrorList)
                    : "Invalid login attempt.";
        }
    }

    private class LoginModel
    {
        public bool RequireTwoFactor { get; set; }

        [Required]
        [Url]
        public string? Uri { get; set; }

        [Required]
        [EmailAddress]
        public string? Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string? Password { get; set; }

        [RequiredIf(nameof(RequireTwoFactor), true)]
        public string? TwoFactorCode { get; set; }
    }
}
