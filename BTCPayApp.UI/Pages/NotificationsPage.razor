@attribute [Route(Routes.Notifications)]
@using BTCPayApp.Core.Auth
@using BTCPayApp.UI.Components.Layout
@using BTCPayServer.Client.Models
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IAccountManager AccountManager

<PageTitle>Notifications</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back="@Routes.Index">
        <SectionContent SectionId="Titlebar.End">
            <button type="button" class="btn-icon" @onclick="LoadNotifications" disabled="@_loading">
                @if (_loading)
                {
                    <LoadingIndicator/>
                }
                else
                {
                    <Icon Symbol="actions-refresh"/>
                }
            </button>
        </SectionContent>
        <h1>Notifications</h1>
    </Titlebar>
</SectionContent>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <section class="container">
        <Alert Type="danger">@_errorMessage</Alert>
    </section>
}
@if (_notifications is not null)
{
    @if (_notifications.Any())
    {
        <div class="notifications">
            @foreach (var n in _notifications)
            {
                <NotificationItem Notification="@n"/>
            }
        </div>
    }
    else
    {
        <section class="container">
            <p class="text-muted text-center py-4">There are no transactions, yet.</p>
        </section>
    }
}

@code {

    private bool _loading;
    private string? _errorMessage;
    private IEnumerable<NotificationData>? _notifications;

    protected override async Task OnInitializedAsync()
    {
        await LoadNotifications();
    }

    private async Task LoadNotifications()
    {
        try
        {
            _loading = true;
            _errorMessage = null;
            _notifications = await AccountManager.GetClient().GetNotifications();
        }
        catch (Exception e)
        {
            _errorMessage = e.InnerException?.Message ?? e.Message;
        }
        finally
        {
            _loading = false;
        }
    }
}
