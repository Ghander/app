@attribute [Route(Routes.Notifications)]
@using BTCPayApp.UI.Components.Layout
@using BTCPayApp.UI.Features
@using BTCPayServer.Client.Models
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IDispatcher Dispatcher
@inject IState<NotificationState> NotificationState

<PageTitle>Notifications</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back="@Routes.Dashboard">
        <SectionContent SectionId="Titlebar.End">
            <button type="button" class="btn-icon" @onclick="LoadNotifications" disabled="@Loading">
                @if (Loading)
                {
                    <LoadingIndicator/>
                }
                else
                {
                    <Icon Symbol="actions-refresh"/>
                }
            </button>
        </SectionContent>
        <h1>Notifications</h1>
    </Titlebar>
</SectionContent>

@if (!string.IsNullOrEmpty(Error))
{
    <section class="container">
        <Alert Type="danger">@Error</Alert>
    </section>
}
@if (Notifications is not null)
{
    @if (Notifications.Any())
    {
        <div class="notifications">
            @foreach (var n in Notifications)
            {
                <NotificationItem Notification="@n"/>
            }
        </div>
    }
    else
    {
        <section class="container">
            <p class="text-muted text-center py-4">There are no notifications, yet.</p>
        </section>
    }
}

@code {
    private void LoadNotifications()
    {
        Dispatcher.Dispatch(new NotificationState.FetchNotifications());
    }

    private IEnumerable<NotificationData>? Notifications => NotificationState.Value.Notifications?.Data;
    private bool Loading => NotificationState.Value.Notifications?.Loading is true;
    private string? Error => NotificationState.Value.Notifications?.Error;
}
