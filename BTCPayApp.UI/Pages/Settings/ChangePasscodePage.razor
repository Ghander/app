@attribute [Route(Routes.ChangePasscode)]
@layout BaseLayout
@using BTCPayApp.Core
@using BTCPayApp.Core.Auth
@using BTCPayApp.Core.Contracts
@using BTCPayApp.UI.Components.Layout
@using BTCPayApp.UI.Util
@using Plugin.Fingerprint.Abstractions
@inject IFingerprint Fingerprint
@inject ConfigProvider ConfigProvider
@inject NavigationManager NavigationManager
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>@GetTitle()</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back>
        <h1>@GetTitle()</h1>
        <SectionContent SectionId="Titlebar.End">
            <a class="btn-icon" href="@Routes.Settings">
                <Icon Symbol="cross"/>
            </a>
        </SectionContent>
    </Titlebar>
</SectionContent>

<section class="container">
    <AuthorizeView Policy="@AppPolicies.CanModifySettings">
        <Authorized>
            <ValidationEditContext @ref="_validationEditContext" Model="Model" OnValidSubmit="HandleValidSubmit">
                <div class="text-center">
                    <InputText @bind-Value="Model.NewPasscode" class="d-none"/>
                    <InputText @bind-Value="Model.ConfirmPasscode" class="d-none"/>
                    @if (Model.Mode == PasscodeMode.Set)
                    {
                        <p>Set a 6-digit passcode to unlock the app.<br />This passcode can't be used to recover your wallet.</p>
                    }
                    else if (Model.Mode == PasscodeMode.Confirm)
                    {
                        <p>Please confirm the passcode you just entered.</p>
                        <button type="button" class="btn btn-outline-light mb-3" @onclick="Reset">Start over</button>
                        <ValidationMessage For="@(() => Model.ConfirmPasscode)" />
                    }
                </div>
                <Passcode OnPasscodeEntered="HandlePasscodeEntered" />
                @if (HasPasscode)
                {
                    <div class="buttons">
                        @if (true || _biometricAuthAvailable is true)
                        {
                            <button class="btn btn-secondary" type="button" @onclick="ToggleBiometricAuth">@(Config.UseBiometricAuth ? "Disable" : "Enable") biometric authentication</button>
                        }
                        <button class="btn btn-outline-danger" type="button" @onclick="RemovePasscode">
                            Remove passcode
                        </button>
                    </div>
                }
            </ValidationEditContext>
        </Authorized>
        <NotAuthorized>
            <Alert Type="danger">Unauthorized.</Alert>
        </NotAuthorized>
    </AuthorizeView>
</section>

@code {
    private PasscodeModel Model { get; set; } = new();
    private BTCPayAppConfig Config { get; set; } = null!;
    private ValidationEditContext? _validationEditContext;
    private bool _biometricAuthAvailable;
    private bool HasPasscode => !string.IsNullOrEmpty(Config?.Passcode);

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Config = await ConfigProvider.Get<BTCPayAppConfig>(BTCPayAppConfig.Key) ?? new BTCPayAppConfig();
        _biometricAuthAvailable = await Fingerprint.IsAvailableAsync();
    }

    private class PasscodeModel
    {
        public PasscodeMode Mode { get; set; } = PasscodeMode.Set;

        [DataType(DataType.Password)]
        [RequiredIf(nameof(Mode), PasscodeMode.Set)]
        public string NewPasscode { get; set; } = "";

        [DataType(DataType.Password)]
        [RequiredIf(nameof(Mode), PasscodeMode.Confirm)]
        [Compare("NewPasscode", ErrorMessage = "The confirmation does not match the passcode.")]
        public string ConfirmPasscode { get; set; } = "";
    }

    private async Task Reset()
    {
        Model.NewPasscode = Model.ConfirmPasscode = string.Empty;
        Model.Mode = PasscodeMode.Set;
        await _validationEditContext!.Submit();
    }

    public async Task HandleValidSubmit()
    {
        Config.Passcode = Model.NewPasscode;
        await ConfigProvider.Set(BTCPayAppConfig.Key, Config, true);
        NavigationManager.NavigateTo(Routes.Settings);
    }

    public async Task HandlePasscodeEntered(Passcode.PasscodeEntered form)
    {
        if (Model.Mode == PasscodeMode.Set)
        {
            Model.NewPasscode = form.Passcode;
            Model.Mode = PasscodeMode.Confirm;
        }
        else if (Model.Mode == PasscodeMode.Confirm)
        {
            Model.ConfirmPasscode = form.Passcode;
            await _validationEditContext!.Submit();
        }
    }

    // TODO: Guard with biometric auth
    private async Task ToggleBiometricAuth()
    {
        if (!HasPasscode) return;
        Config.UseBiometricAuth = _biometricAuthAvailable && !Config.UseBiometricAuth;
        await ConfigProvider.Set(BTCPayAppConfig.Key, Config, true);
    }

    // TODO: Guard with passcode entering
    private async Task RemovePasscode()
    {
        if (!HasPasscode) return;
        Config.Passcode = null;
        Config.UseBiometricAuth = false;
        await ConfigProvider.Set(BTCPayAppConfig.Key, Config, true);
    }

    private string GetTitle() => Model.Mode switch
    {
        PasscodeMode.Set => $"{(HasPasscode ? "Change" : "Set")} Passcode",
        PasscodeMode.Confirm => "Confirm Passcode",
        _ => throw new ArgumentOutOfRangeException()
    };
}
