@attribute [Route(Routes.ChangePasscode)]
@layout BaseLayout
@using BTCPayApp.CommonServer.Models
@using BTCPayApp.Core
@using BTCPayApp.Core.Auth
@using BTCPayApp.UI.Components.Layout
@using BTCPayApp.UI.Util
@inject IAccountManager AccountManager
@inject NavigationManager NavigationManager
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>@GetTitle()</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back Fixed="false">
        <h1>@GetTitle()</h1>
        <SectionContent SectionId="Titlebar.End">
            <NavLink class="btn-icon" href="@Routes.Settings">
                <Icon Symbol="close"/>
            </NavLink>
        </SectionContent>
    </Titlebar>
</SectionContent>

<section class="container">
    <ValidationEditContext @ref="_validationEditContext" Model="Model" OnValidSubmit="HandleValidSubmit">
        <div class="text-center">
            <InputText @bind-Value="Model.NewPasscode" class="d-none"/>
            <InputText @bind-Value="Model.ConfirmPasscode" class="d-none"/>
            @if (Model.Mode == PasscodeMode.Set)
            {
                <p>Set a 6-digit passcode to unlock your wallet.<br />This passcode can't be used to recover your wallet.</p>
            }
            else if (Model.Mode == PasscodeMode.Confirm)
            {
                <p>Please confirm the passcode you just entered.</p>
                <button type="button" class="btn btn-outline-light mb-3" @onclick="Reset">Start over</button>
                <ValidationMessage For="@(() => Model.ConfirmPasscode)" />
            }
        </div>
        <Passcode OnPasscodeEntered="HandlePasscodeEntered" />
    </ValidationEditContext>
</section>

@code {
    private PasscodeModel Model { get; set; } = new();
    private BTCPayAccount? _account;
    private ValidationEditContext? _validationEditContext;

    protected override Task OnInitializedAsync()
    {
        _account = AccountManager.GetAccount();
        return Task.CompletedTask;
    }

    private class PasscodeModel
    {
        public PasscodeMode Mode { get; set; } = PasscodeMode.Set;

        [DataType(DataType.Password)]
        [RequiredIf(nameof(Mode), PasscodeMode.Set)]
        public string NewPasscode { get; set; } = "";

        [DataType(DataType.Password)]
        [RequiredIf(nameof(Mode), PasscodeMode.Confirm)]
        [Compare("NewPasscode", ErrorMessage = "The confirmation does not match the passcode.")]
        public string ConfirmPasscode { get; set; } = "";
    }

    private async Task Reset()
    {
        Model.NewPasscode = Model.ConfirmPasscode = string.Empty;
        Model.Mode = PasscodeMode.Set;
        await _validationEditContext!.Submit();
    }

    public async Task HandleValidSubmit()
    {
        _account.Passcode = Model.NewPasscode;
        await AccountManager.UpdateAccount(_account);
        NavigationManager.NavigateTo(Routes.Settings);
    }

    public async Task HandlePasscodeEntered(Passcode.PasscodeEntered form)
    {
        if (Model.Mode == PasscodeMode.Set)
        {
            Model.NewPasscode = form.Passcode;
            Model.Mode = PasscodeMode.Confirm;
        }
        else if (Model.Mode == PasscodeMode.Confirm)
        {
            Model.ConfirmPasscode = form.Passcode;
            await _validationEditContext!.Submit();
        }
    }

    private string GetTitle() => Model.Mode switch
    {
        PasscodeMode.Set => $"{(_account.HasPasscode ? "Change" : "Set")} Passcode",
        PasscodeMode.Confirm => "Confirm Passcode",
        _ => throw new ArgumentOutOfRangeException()
    };
}
