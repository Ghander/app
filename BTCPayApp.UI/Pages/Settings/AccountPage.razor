@attribute [Route(Routes.Account)]
@using BTCPayApp.Core
@using BTCPayApp.Core.Auth
@using BTCPayApp.Core.Contracts
@using BTCPayApp.UI.Components.Layout
@using BTCPayApp.UI.Util
@inject IAccountManager AccountManager
@inject IDataDirectoryProvider DataDirectoryProvider
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Update Account</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back>
        <h1>Update Account</h1>
    </Titlebar>
</SectionContent>
<section class="container">
    <div class="d-flex align-items-center justify-content-between gap-3 mb-3">
        <h2 class="mb-0">Your Account</h2>
    </div>
    <div class="box">
        <ValidationEditContext Model="Model" OnValidSubmit="HandleValidSubmit" SuccessMessage="@_successMessage" ErrorMessage="@_errorMessage" enctype="multipart/form-data">
            <DataAnnotationsValidator/>
            <div class="form-group">
                <label for="Email" class="form-label" data-required>Email</label>
                <InputText @bind-Value="Model.Email" id="Email" type="email" class="form-control"/>
                <ValidationMessage For="@(() => Model.Email)"/>
            </div>
            <div class="form-group">
                <label for="Name" class="form-label">Name</label>
                <InputText @bind-Value="Model.Name" id="Name" class="form-control"/>
                <ValidationMessage For="@(() => Model.Name)"/>
            </div>
            <div class="form-group">
                <div class="d-flex align-items-center justify-content-between gap-2">
                    <label for="ProfilePicture" class="form-label">Profile Picture</label>
                    @if (!string.IsNullOrEmpty(Model.ImageUrl))
                    {
                        <button type="button" class="btn btn-link p-0 text-danger" @onclick="UnsetProfilePicture">
                            <Icon Symbol="cross"/> Remove
                        </button>
                    }
                </div>
                <div class="d-flex align-items-center gap-3">
                    <InputFile OnChange="@LoadProfilePicture" @key="@_inputFileId" id="ProfilePicture" class="form-control"/>
                    @if (!string.IsNullOrEmpty(Model.ImageUrl))
                    {
                        <img src="@Model.ImageUrl" alt="Profile picture" class="profile-picture"/>
                    }
                </div>
                <ValidationMessage For="@(() => Model.ImageUrl)"/>
            </div>

            <button type="submit" class="btn btn-primary w-100" disabled="@(_sending)">
                @if (_sending)
                {
                    <LoadingIndicator/>
                }
                else
                {
                    <span>Update Account</span>
                }
            </button>
        </ValidationEditContext>
    </div>
</section>

@code {
    private AccountModel? Model { get; set; }
    private bool _sending;
    private string? _errorMessage;
    private string? _successMessage;
    private Guid _inputFileId = Guid.NewGuid();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        AccountManager.OnAccountInfoChange += OnAccountInfoChange;

        var account = AccountManager.GetAccount()!;

        Model = new AccountModel
        {
            Email = account.Email,
            Name = account.Name,
            ImageUrl = account.ImageUrl
        };
    }

    protected override ValueTask DisposeAsyncCore(bool disposing)
    {
        base.DisposeAsyncCore(disposing);

        AccountManager.OnAccountInfoChange -= OnAccountInfoChange;

        return ValueTask.CompletedTask;
    }

    private async Task OnAccountInfoChange(object? sender, BTCPayAccount? account)
    {
        Model = new AccountModel
        {
            Email = account?.Email,
            Name = account?.Name,
            ImageUrl = account?.ImageUrl
        };
        await InvokeAsync(StateHasChanged);
    }

    public async Task HandleValidSubmit()
    {
        _errorMessage = _successMessage = null;
        _sending = true;

        try
        {
            if (!string.IsNullOrEmpty(Model!.ImagePath))
            {
                var path = Model.ImagePath;
                var mimeType = FileHelper.GetContentType(path);
                var upload = await AccountManager.GetClient().UploadCurrentUserProfilePicture(path, mimeType);
                Model.ImageUrl = upload.ImageUrl;
                // cleanup
                File.Delete(path);
                Model.ImagePath = null;
                _inputFileId = Guid.NewGuid();
            }
            else if (string.IsNullOrEmpty(Model!.ImageUrl))
            {
                await AccountManager.GetClient().DeleteCurrentUserProfilePicture();
            }
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
            _sending = false;
            return;
        }

        var result = await AccountManager.ChangeAccountInfo(Model.Email!, Model.Name, Model.ImageUrl);
        _sending = false;

        if (result.Succeeded)
        {
            var userData = result.Response!;
            Model = new AccountModel
            {
                Email = userData.Email,
                Name = userData.Name,
                ImageUrl = userData.ImageUrl
            };
            _successMessage = string.Join(",", result.Messages ?? ["Your account information has been changed."]);
        }
        else
        {
            _errorMessage = string.Join(",", result.Messages ?? ["Changing your account information failed."]);
        }
    }

    private async Task LoadProfilePicture(InputFileChangeEventArgs e)
    {
        try
        {
            var appData = await DataDirectoryProvider.GetAppDataDirectory();
            var fileName = e.File.Name;
            var dirPath = Path.Combine(appData, "tmp");
            var filePath = Path.Combine(dirPath, fileName);
            Directory.CreateDirectory(dirPath);

            await using FileStream fs = new(filePath, FileMode.Create);
            await e.File.OpenReadStream().CopyToAsync(fs);
            await fs.FlushAsync();
            Model!.ImagePath = filePath;
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Profile picture could not be applied: {ex.Message}";
        }
    }

    private void UnsetProfilePicture()
    {
        Model!.ImageUrl = null;
        Model.ImagePath = null;
        _inputFileId = Guid.NewGuid();
    }


    private class AccountModel
    {
        [Required, EmailAddress]
        public string? Email { get; set; }
        public string? Name { get; set; }
        [Url]
        public string? ImageUrl { get; set; }
        public string? ImagePath { get; set; }
    }
}
