@attribute [Route(Routes.SelectStore)]
@using BTCPayApp.CommonServer.Models
@using BTCPayApp.Core.Auth
@using BTCPayApp.UI.Components.Layout
@using BTCPayApp.UI.Features
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IAccountManager AccountManager
@inject NavigationManager NavigationManager
@inject IState<StoreState> StoreState
<PageTitle>Select your store</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back="@(!string.IsNullOrEmpty(_initialStoreId))">
        <h1>Select your store</h1>
    </Titlebar>
</SectionContent>

<section class="container">
    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <Alert Type="danger">@_errorMessage</Alert>
    }
    @if (_userInfo!.Stores?.Any() is true)
    {
        if (string.IsNullOrEmpty(_initialStoreId))
        {
            <p class="lead text-secondary mb-4 text-center">Select a store to begin accepting payments.</p>
        }
        <ValidationEditContext @ref="_validationEditContext" Model="Model" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <InputRadioGroup Name="StoreIds" @bind-Value="@Model.StoreId">
                <ul class="list-group list-group-flush mb-3">
                    @foreach (var store in _userInfo.Stores)
                    {
                        <li class="list-group-item">
                            <label class="form-check-label stretched-link d-flex flex-wrap align-items-center justify-content-between gap-2">
                                <InputRadio Name="StoreIds" Value="@store.Id" class="form-check-input m-0"/>
                                @if (string.IsNullOrEmpty(store.LogoUrl))
                                {
                                    <Icon Symbol="nav-store"/>
                                }
                                else
                                {
                                    <img src="@store.LogoUrl" alt="@store.Name" class="icon icon-nav-store"/>
                                }
                                <strong>@store.Name</strong>
                                <span class="badge bg-light ms-auto">@store.RoleId</span>
                            </label>
                        </li>
                    }
                </ul>
            </InputRadioGroup>
            <button class="btn btn-primary w-100" type="submit" data-testid="SelectStoreButton" disabled="@(_validationEditContext.Invalid || Sending)">
                @if (Sending)
                {
                    <LoadingIndicator />
                }
                else
                {
                    <span>Select Store</span>
                }
            </button>
        </ValidationEditContext>
        <p class="mt-5 text-secondary text-center">In case you want to start with a blank slate, you can also create a new store for the app.</p>
        <NavLink class="btn btn-outline-primary w-100" href="@GetCreateStoreUrl()" data-testid="CreateStoreButton">Create Store</NavLink>
    }
    else
    {
        <p class="text-secondary text-center">You don't have a store, yet.</p>
        <NavLink class="btn btn-primary w-100" href="@GetCreateStoreUrl()" data-testid="CreateStoreButton">Create Store</NavLink>
    }
</section>

@code {
    private string? _errorMessage;
    private string? _initialStoreId;
    private AppUserInfo? _userInfo;
    private ValidationEditContext? _validationEditContext;
    SelectStoreModel Model { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        AccountManager.OnUserInfoChange += OnUserInfoChange;

        _userInfo = AccountManager.GetUserInfo();
        _initialStoreId = AccountManager.GetCurrentStore()?.Id;
        Model.StoreId = _initialStoreId;

        if (_userInfo!.Stores?.Any() is not true)
        {
            NavigationManager.NavigateTo(Routes.CreateStore);
        }
        /*else if (_userInfo!.Stores?.Count() == 1)
        {
            await SelectStore(_userInfo!.Stores!.First().Id!);
        }*/
    }

    private async Task OnUserInfoChange(object? sender, AppUserInfo? userInfo)
    {
        _userInfo = userInfo;
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleValidSubmit()
    {
        await SelectStore(Model.StoreId!);
    }

    private async Task SelectStore(string storeId)
    {
        _errorMessage = null;

        try
        {
            var result = await AccountManager.SetCurrentStoreId(storeId);

            if (!result.Succeeded)
            {
                _errorMessage = result.Messages != null
                    ? string.Join(",", result.Messages)
                    : "Store selection failed.";
            }
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
    }

    private class SelectStoreModel
    {
        [Required]
        public string? StoreId { get; set; }
    }

    private bool Sending => StoreState.Value.Store?.Loading is true;
    private string GetCreateStoreUrl() => NavigationManager.GetUriWithQueryParameters(Routes.CreateStore, new Dictionary<string, object?> { {"backUrl", Routes.SelectStore } } );
}
