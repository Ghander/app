@attribute [Route(Routes.ChannelsPeers)]
@using BTCPayApp.UI.Features
@using BTCPayApp.Core.Attempt2
@using BTCPayApp.Core.Data
@using BTCPayApp.UI.Components.Layout
@using BTCPayApp.Core.Helpers
@using BTCPayApp.Core.LDK
@using BTCPayServer.Lightning
@using NBitcoin
@using org.ldk.enums
@using org.ldk.structs
@using NodeInfo = BTCPayServer.Lightning.NodeInfo
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject NavigationManager NavigationManager
@inject LightningNodeManager LightningNodeManager
@inject IState<RootState> State

<PageTitle>Peers and Channels</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back>
        <h1>Peers and Channels</h1>
    </Titlebar>
</SectionContent>
<section class="container">
    @if (LightningNodeManager.IsActive)
    {
        <h2>Peers</h2>
        @if (_peers?.Any() is true || _config?.Peers.Any() is true)
        {
            var rememberedButUnconnected = _config.Peers.Keys.Where(peer => _peers.All(p => !string.Equals(p.nodeId, peer, StringComparison.InvariantCultureIgnoreCase)));
            @foreach (var peer in _peers)
            {
                var peerRemembered = _config.Peers.TryGetValue(peer.nodeId.ToLowerInvariant(), out var peerConfig);
                <div class="box">
                    <div class="form-floating">
                        <TruncateCenter Text="@peerConfig.Label" Padding="15" Copy="true" Elastic="true" class="form-control-plaintext"/>
                        <label>Peer label</label>
                    </div>
                    <div class="form-floating">
                        <TruncateCenter Text="@peer.nodeId" Padding="15" Copy="true" Elastic="true" class="form-control-plaintext"/>
                        <label>Node ID</label>
                    </div>
                    <div class="form-floating">
                        <TruncateCenter Text="@peer.socket" Padding="15" Copy="true" Elastic="true" class="form-control-plaintext"/>
                        <label>Socket</label>
                    </div>
                    <div class="d-grid d-sm-flex flex-wrap gap-3 buttons mt-3">
                        <button type="button" class="btn btn-outline-danger btn-sm" @onclick="() => DisconnectPeer(peer.nodeId)">Disconnect</button>
                        @if (peerRemembered)
                        {
                            <button type="button" class="btn btn-outline-danger btn-sm" @onclick="() => UpdatePeer(peer.nodeId, null)">Forget peer</button>
                            <button type="button" class="btn btn-outline-primary btn-sm" @onclick="() => UpdatePeer(peer.nodeId, peerConfig with { Persistent = !peerConfig.Persistent })">
                                Constant conn = @peerConfig.Persistent Toggle
                            </button>
                            <button type="button" class="btn btn-outline-primary btn-sm" @onclick="() => UpdatePeer(peer.nodeId, peerConfig with { Trusted = !peerConfig.Trusted })">Trusted = @peerConfig.Trusted Toggle</button>
                        }
                        else if (peer.socket is not null)
                        {
                            <button type="button" class="btn btn-outline-primary btn-sm" @onclick="() => UpdatePeer(peer.nodeId, new PeerInfo() { Endpoint = peer.socket })">Remember peer</button>
                        }
                    </div>
                </div>
            }

            @foreach (var peer in rememberedButUnconnected)
            {
                var peerConfig = _config.Peers[peer];
                <div class="box">
                    <td>@peer</td>
                    <td>@peerConfig.Endpoint</td>
                    <td>
                        <button type="button" class="btn btn-primary btn-sm" @onclick="() => ConnectPeer(peer, peerConfig)">Connect</button>
                        <button type="button" class="btn btn-primary btn-sm" @onclick="() => UpdatePeer(peer, null)">Forget peer</button>
                        <button type="button" class="btn btn-primary btn-sm" @onclick="() => UpdatePeer(peer, peerConfig with { Persistent = !peerConfig.Persistent })">
                            Constant conn = @peerConfig.Persistent Toggle
                        </button>
                        <button type="button" class="btn btn-primary btn-sm" @onclick="() => UpdatePeer(peer, peerConfig with { Trusted = !peerConfig.Trusted })">Trusted = @peerConfig.Trusted Toggle</button>
                    </td>
                </div>
            }
        }
        else
        {
            <div class="box">
                <p class="text-muted text-center py-4">There are no peers, yet.</p>
            </div>
        }

        <h2>Connect Peer</h2>
        <ValidationEditContext @ref="_connectEditContext" Model="CPModel" OnValidSubmit="() => ConnectToNewPeer()" SuccessMessage="@_connectSuccessMessage" ErrorMessage="@_connectErrorMessage">
            <DataAnnotationsValidator/>
            <fieldset class="box">
                <div class="form-group">
                    <label for="PeerUrl" class="form-label" data-required>Peer URL</label>
                    <InputText @bind-Value="CPModel.PeerUrl" id="PeerUrl" class="form-control"/>
                    <ValidationMessage For="@(() => CPModel.PeerUrl)"/>
                </div>
                <button type="submit" class="btn btn-primary w-100" disabled="@(_connectEditContext!.Invalid || _peerConnecting)">
                    @if (_peerConnecting)
                    {
                        <LoadingIndicator/>
                    }
                    else
                    {
                        <span>Connect Peer</span>
                    }
                </button>
            </fieldset>
        </ValidationEditContext>

        <h2>Channels</h2>
        @if (_channels?.Any() is true)
        {
            <div class="table-responsive">
                <table class="table">
                    <thead>
                    <tr>
                        <th>Channel ID</th>
                        <th>User Channel ID</th>
                        <th>Counterparty</th>
                        <th>Short Channel ID</th>
                        <th>Confirmations</th>
                        <th>Confirmations Required</th>
                        <th>Funding Transaction Hash</th>
                        <th>Usable</th>
                        <th>Ready</th>
                        <th>Balance</th>
                        <th>Inbound</th>
                        <th>Outbound</th>
                        <th>State</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var channel in _channels)
                    {
                        <tr>
                            <td>@channel.id</td>
                            <td>@channel.userId</td>
                            <td>@channel.counterparty</td>
                            <td>@channel.shortChannelId</td>
                            <td>@channel.confirmations</td>
                            <td>@channel.confirmationsRequired</td>
                            <td>@channel.fundingTransactionHash</td>
                            <td>@channel.usable</td>
                            <td>@channel.ready</td>
                            <td>@channel.Balance</td>
                            <td>@channel.Inbound</td>
                            <td>@channel.Outbound</td>
                            <td>@channel.State</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="box">
                <p class="text-muted text-center py-4">There are no channels, yet.</p>
            </div>
        }

        @if (_peers?.Any() is true)
        {
            <h2>Open Channel</h2>
            <ValidationEditContext @ref="_openChannelEditContext" Model="OCModel" OnValidSubmit="OpenChannel" SuccessMessage="@_channelSuccessMessage" ErrorMessage="@_channelErrorMessage">
                <DataAnnotationsValidator/>
                <fieldset class="box">
                    <div class="form-group">
                        <label for="PeerId" class="form-label" data-required>Peer</label>
                        <InputSelect @bind-Value="OCModel.PeerId" id="PeerId" class="form-select">
                            <option>Select peer</option>
                            @foreach (var peer in _peers)
                            {
                                <option value="@peer.nodeId">@peer.nodeId</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => OCModel.PeerId)"/>
                    </div>
                    <div class="form-group">
                        <label for="Amount" class="form-label" data-required>Amount</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="OCModel.Amount" id="Amount" class="form-control" inputmode="numeric" min="0"/>
                            <span class="input-group-text">sats</span>
                        </div>
                        <ValidationMessage For="@(() => OCModel.Amount)"/>
                    </div>
                    <button type="submit" class="btn btn-primary w-100" disabled="@(_openChannelEditContext!.Invalid || _channelOpening)">
                        @if (_channelOpening)
                        {
                            <LoadingIndicator/>
                        }
                        else
                        {
                            <span>Open Channel</span>
                        }
                    </button>
                </fieldset>
            </ValidationEditContext>

            <h2>Channels</h2>
            @if (_channels?.Any() is true)
            {
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                        <tr>
                            <th>Channel ID</th>
                            <th>User Channel ID</th>
                            <th>Counterparty</th>
                            <th>Short Channel ID</th>
                            <th>Confirmations</th>
                            <th>Confirmations Required</th>
                            <th>Funding Transaction Hash</th>
                            <th>Usable / Ready</th>
                            <th>Balance</th>
                            <th>Liquifity</th>
                            <th>State</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var channel in _channels)
                        {
                            var isPeerOnline = _peers.Any(p =>
                                string.Equals(p.nodeId, channel.counterparty, StringComparison.InvariantCultureIgnoreCase) && p.socket is not null);
                            var channelId = ChannelId.from_bytes(Convert.FromHexString(channel.id));
                            var counterparty = new PubKey(channel.counterparty);
                            <tr>
                                <td>@channel.id</td>
                                <td>@channel.userId</td>
                                <td>@channel.counterparty</td>
                                <td>@channel.shortChannelId</td>
                                <td>@channel.confirmations</td>
                                <td>@channel.confirmationsRequired</td>
                                <td>@channel.fundingTransactionHash</td>
                                <td>@(channel.usable ? "Usable" : "Not Usable") / @(channel.ready ? "Ready" : "Not ready")</td>
                                <td>@channel.Balance</td>
                                <td>@channel.Inbound in / @channel.Outbound out</td>
                                <td>@channel.State</td>
                                <td>
                                    @if (channel.State is ChannelShutdownState.LDKChannelShutdownState_NotShuttingDown or null)
                                    {
                                        <button type="button" class="btn btn-primary btn-sm" @onclick="() => Node.CloseChannel(channelId, counterparty, !isPeerOnline)">@(isPeerOnline ? "" : "Force") Close</button>
                                    }
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="box">
                    <p class="text-muted text-center py-4">There are no channels, yet.</p>
                </div>
            }

            @if (_peers?.Any() is true)
            {
                <h2>Open Channel</h2>
                <ValidationEditContext @ref="_openChannelEditContext" Model="OCModel" OnValidSubmit="OpenChannel" SuccessMessage="@_channelSuccessMessage" ErrorMessage="@_channelErrorMessage">
                    <DataAnnotationsValidator/>
                    <fieldset class="box">
                        <div class="form-group">
                            <label for="PeerId" class="form-label" data-required>Peer</label>
                            <InputSelect @bind-Value="OCModel.PeerId" id="PeerId" class="form-select">
                                <option>Select peer</option>
                                @foreach (var peer in _peers)
                                {
                                    <option value="@peer.nodeId">@peer.nodeId</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => OCModel.PeerId)"/>
                        </div>
                        <div class="form-group">
                            <label for="Amount" class="form-label" data-required>Amount</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="OCModel.Amount" id="Amount" class="form-control" inputmode="numeric" min="0"/>
                                <span class="input-group-text">sats</span>
                            </div>
                            <ValidationMessage For="@(() => OCModel.Amount)"/>
                        </div>
                        <button type="submit" class="btn btn-primary w-100" disabled="@(_openChannelEditContext!.Invalid || _channelOpening)">
                            @if (_channelOpening)
                            {
                                <LoadingIndicator/>
                            }
                            else
                            {
                                <span>Open Channel</span>
                            }
                        </button>
                    </fieldset>
                </ValidationEditContext>
            }
        }
    }
    else
    {
        <LightningNodeStateAlert State="State.Value.LightningNodeState"/>
    }
</section>

@code {
    private readonly SemaphoreSlim _semaphore = new(1, 1);
    private LightningConfig? _config;
    private (string id, string userId, string counterparty, long? shortChannelId, int? confirmations, int? confirmationsRequired, string fundingTransactionHash, bool usable, bool ready, LightMoney Balance, LightMoney Inbound, LightMoney Outbound, ChannelShutdownState? State)[]? _channels;
    private (string nodeId, string? socket)[]? _peers;
    private LDKNode? Node => LightningNodeManager.Node;
    private bool Loading { get; set; }

    private bool _channelOpening { get; set; }
    private string? _channelSuccessMessage { get; set; }
    private string? _channelErrorMessage { get; set; }
    private ValidationEditContext? _openChannelEditContext;
    private OpenChannelModel? OCModel { get; set; } = new();

    private bool _peerConnecting { get; set; }
    private string? _connectSuccessMessage { get; set; }
    private string? _connectErrorMessage { get; set; }
    private ValidationEditContext? _connectEditContext;
    private ConnectPeerModel? CPModel { get; set; } = new();

    private class OpenChannelModel
    {
        [Required] public string? PeerId { get; set; }
        [Required] [Range(10000, 10_000_000)] public decimal? Amount { get; set; }
    }

    private class ConnectPeerModel
    {
        [Required] public string? PeerUrl { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (LightningNodeManager.CanConfigureLightningNode)
        {
            NavigationManager.NavigateTo(Routes.LightningSettings);
        }
        else
        {
            _ = FetchData();
        }
    }

    private async Task FetchData()
    {
        Loading = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            await _semaphore.WaitAsync();
            _config = await Node.GetConfig();
            _channels = (await Node.GetChannels()).Select(details => (id: Convert.ToHexString(details.get_channel_id().get_a()), userId: Convert.ToHexString(details.get_user_channel_id().getLEBytes()), counterparty: Convert.ToHexString(details.get_counterparty().get_node_id()), shortChannelId: details.get_short_channel_id() is Option_u64Z.Option_u64Z_Some some1 ? some1.some : (long?)null, confirmations: details.get_confirmations() is Option_u32Z.Option_u32Z_Some some2 ? some2.some : (int?)null, confirmationsRequired: details.get_confirmations_required() is Option_u32Z.Option_u32Z_Some some3 ? some3.some : (int?)null, fundingTransactionHash: new uint256(details.get_funding_txo().get_txid()).ToString(), usable: details.get_is_usable(), ready: details.get_is_channel_ready(), Balance: LightMoney.MilliSatoshis(details.get_balance_msat()), Inbound: LightMoney.MilliSatoshis(details.get_inbound_capacity_msat()), Outbound: LightMoney.MilliSatoshis(details.get_outbound_capacity_msat()), State: details.get_channel_shutdown_state() is Option_ChannelShutdownStateZ.Option_ChannelShutdownStateZ_Some some4 ? some4.some : (ChannelShutdownState?)null)).ToArray();
            _peers = (await Node.GetPeers()).Select(peer => (nodeId: Convert.ToHexString(peer.get_counterparty_node_id()), socket: peer.get_socket_address() is Option_SocketAddressZ.Option_SocketAddressZ_Some some1 ? some1.some.to_str() : null)).ToArray();
        }
        finally
        {
            Loading = false;
            await InvokeAsync(StateHasChanged);
            _semaphore.Release();
        }
    }

    private async Task ConnectToNewPeer()
    {
        _connectSuccessMessage = _connectErrorMessage = null;
        try
        {
            Loading = true;
            await InvokeAsync(StateHasChanged);
            await _semaphore.WaitAsync();
            if (!NodeInfo.TryParse(CPModel.PeerUrl, out var nodeInfo))
            {
                _connectErrorMessage = $"Invalid peer URL: {CPModel.PeerUrl}";
                return;
            }

            var result = await Node.PeerHandler.ConnectAsync(nodeInfo, CancellationToken.None);
            if (result is not null)
            {
                _peers = (await Node.GetPeers()).Select(peer => (nodeId: Convert.ToHexString(peer.get_counterparty_node_id()), socket: peer.get_socket_address() is Option_SocketAddressZ.Option_SocketAddressZ_Some some1 ? some1.some.to_str() : null)).ToArray();

                _connectSuccessMessage = $"Connection to {CPModel.PeerUrl} initiated";
                CPModel = new ConnectPeerModel();
            }
            else
            {
                _connectErrorMessage = "Error establishing connection";
            }
        }
        catch (Exception e)
        {
            _connectErrorMessage = e.Message;
        }
        finally
        {
            Loading = false;
            _semaphore.Release();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void DisconnectPeer(string nodeId)
    {
        try
        {
            Loading = true;
            await InvokeAsync(StateHasChanged);
            await _semaphore.WaitAsync();

            await Node.PeerHandler.DisconnectAsync(new PubKey(nodeId));
        }
        finally
        {
            Loading = false;
            _semaphore.Release();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void UpdatePeer(string pubKeyHex, PeerInfo? value)
    {
        try
        {
            Loading = true;
            await InvokeAsync(StateHasChanged);
            await _semaphore.WaitAsync();

            await Node.Peer(new PubKey(pubKeyHex), value);
        }
        finally
        {
            Loading = false;
            await InvokeAsync(StateHasChanged);
            _semaphore.Release();
        }
    }

    private async Task ConnectPeer(string peer, PeerInfo peerConfig)
    {
        try
        {
            Loading = true;
            await InvokeAsync(StateHasChanged);
            await _semaphore.WaitAsync();

            EndPointParser.TryParse(peerConfig.Endpoint, 9735, out var endpoint);
            await Node.PeerHandler.ConnectAsync(new PubKey(peer), endpoint);
        }
        finally
        {
            Loading = false;
            await InvokeAsync(StateHasChanged);
            _semaphore.Release();
        }
    }

    private async Task OpenChannel()
    {
        if (Loading || OCModel?.Amount is null || string.IsNullOrEmpty(OCModel.PeerId)) return;
        try
        {
            _channelSuccessMessage = _channelErrorMessage = null;
            _channelOpening = true;
            await InvokeAsync(StateHasChanged);
            await _semaphore.WaitAsync();
            var result = await Node.OpenChannel(Money.Coins(OCModel.Amount.Value), new PubKey(OCModel.PeerId));
            if (result is Result_ChannelIdAPIErrorZ.Result_ChannelIdAPIErrorZ_OK ok)
            {
                _channelSuccessMessage = $"Channel creation started with id {Convert.ToHexString(ok.res.get_a())}";
                OCModel = new OpenChannelModel();
            }
            else if (result is Result_ChannelIdAPIErrorZ.Result_ChannelIdAPIErrorZ_Err err)
            {
                _channelErrorMessage = $"Error: {err.err.GetError()}";
            }
        }
        catch (Exception e)
        {
            _channelErrorMessage = e.Message;
        }
        finally
        {
            _semaphore.Release();
            _channelOpening = false;
            await InvokeAsync(StateHasChanged);
        }
    }

}
