@attribute [Route(Routes.WalletFunds)]
@using BTCPayApp.Core.Attempt2
@using BTCPayApp.Core.Data
@using BTCPayApp.UI.Components.Layout
@using NBitcoin
@using BTCPayApp.CommonServer
@using BTCPayApp.UI.Features
@using BTCPayApp.UI.Util
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject NavigationManager NavigationManager
@inject OnChainWalletManager OnChainWalletManager
@inject IDispatcher Dispatcher
@inject DisplayFormatter DisplayFormatter
@inject IState<UIState> UIState

<PageTitle>@GetTitle()</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back>
        <h1>@GetTitle()</h1>
        <SectionContent SectionId="Titlebar.End">
            <NavLink class="btn-icon" href="@Routes.WalletSettings">
                <Icon Symbol="settings"/>
            </NavLink>
        </SectionContent>
    </Titlebar>
</SectionContent>

<section class="container">
    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <Alert Type="danger" Dismissible>@_errorMessage</Alert>
    }
    <header class="d-flex align-items-center justify-content-between gap-3 mb-3">
        <h2 class="mb-0">Coins</h2>
        @if (_totalBalance != null)
        {
            <span class="badge bg-info ms-2">
                <span @onclick="ToggleDisplayCurrency">@DisplayFormatter.Currency(_totalBalance, UnitMoney, BitcoinUnit, DisplayFormatter.CurrencyFormat.Symbol)</span> total
            </span>
        }
    </header>
    @if (_utxos?.Any() is true)
    {
        <div class="box">
            <ul class="list-group list-group-flush">
                @foreach (var utxo in _utxos)
                {
                    <li class="list-group-item py-2">
                        <span @onclick="ToggleDisplayCurrency">@DisplayFormatter.Currency(utxo.TxOut.Value, UnitMoney, BitcoinUnit, DisplayFormatter.CurrencyFormat.Symbol)</span>
                    </li>
                }
            </ul>
        </div>
    }
    else
    {
        <div class="box py-4 text-center">
            @if (_loading)
            {
                <LoadingIndicator/>
            }
            else
            {
                <p class="text-muted">There are no UTXOs, yet.</p>
            }
        </div>
    }

    <h2>Transactions</h2>
    @if (_txs?.Any() is true)
    {
        <div class="transactions-list mb-l">
            @foreach (var txGroup in _txs)
            {
                <h3>@txGroup.Key</h3>
                @foreach(var tx in txGroup.Value){
                <div class="box">
                    <div class="d-flex flex-wrap align-items-center justify-content-between gap-2">
                        <span class="text-end fw-semibold" @onclick="ToggleDisplayCurrency">
                            @DisplayFormatter.Currency(new Money(tx.BalanceChange, MoneyUnit.BTC), UnitMoney, BitcoinUnit, DisplayFormatter.CurrencyFormat.Symbol)
                        </span>
                        <TruncateCenter Text="@tx.TransactionId" class="truncate-center-id" Copy/>
                        <span class="text-muted">
                            <DateDisplay DateTimeOffset="@tx.Timestamp"/>
                        </span>
                        <span class="badge bg-info">
                            @tx.Confirmations confs
                        </span>
                    </div>
                </div>
            }}
        </div>
    }
    else
    {
        <div class="box py-4 text-center">
            @if (_loading)
            {
                <LoadingIndicator/>
            }
            else
            {
                <p class="text-muted">There are no transactions, yet.</p>
            }
        </div>
    }

    @if (_totalBalance?.ToDecimal(MoneyUnit.Satoshi) is > 0)
    {
        <h2>Send Bitcoin</h2>
        <ValidationEditContext @ref="_validationEditContext" Model="Model" OnValidSubmit="Transact" SuccessMessage="@_successMessage" ErrorMessage="@_errorMessage">
            <DataAnnotationsValidator/>
            <fieldset class="box">
                <div class="form-group">
                    <label for="Destination" class="form-label" data-required>Destination</label>
                    <InputText @bind-Value="Model.Destination" id="Destination" class="form-control" />
                    <ValidationMessage For="@(() => Model.Destination)"/>
                </div>
                <div class="form-group">
                    <label for="Amount" class="form-label" data-required>Amount</label>
                    <InputAmount Id="Amount" @bind-Value="Model.Amount" Unit="@UnitMoney" Max="@_totalBalance.ToDecimal(UnitMoney)" OnToggleDisplayCurrency="ToggleDisplayCurrency" />
                    <ValidationMessage For="@(() => Model.Amount)"/>
                </div>
                @if (Model.Transaction is null)
                {
                    <button type="submit" class="btn btn-primary w-100" disabled="@(_validationEditContext!.Invalid || _sending)">
                        @if (_sending)
                        {
                            <LoadingIndicator/>
                        }
                        else
                        {
                            <span>Create transaction</span>
                        }
                    </button>
                }
                else
                {
                    <pre>@Model.Transaction.Value.Tx.ToString()</pre>
                    <button type="submit" class="btn btn-primary w-100" disabled="@(_validationEditContext!.Invalid || _sending)">
                        @if (_sending)
                        {
                            <LoadingIndicator/>
                        }
                        else
                        {
                            <span>Broadcast transaction</span>
                        }
                    </button>
                    <button type="button" class="btn btn-outline-secondary w-100 mt-2" disabled="@(_sending)" @onclick="CancelTx">
                        @if (_sending)
                        {
                            <LoadingIndicator/>
                        }
                        else
                        {
                            <span>Cancel transaction</span>
                        }
                    </button>
                }
            </fieldset>
        </ValidationEditContext>
    }

    <h2>Receive Bitcoin</h2>
    <div class="box">
        @if (!string.IsNullOrEmpty(_address))
        {
            <div class="form-floating form-group">
                <TruncateCenter Text="@_address" Padding="15" Copy="true" class="form-control-plaintext"/>
                <label>Bitcoin Address</label>
            </div>
            <QrCode Data="@_address" class="mb-3" />
        }
        <button type="button" class="btn btn-primary w-100" @onclick="GetAddress" disabled="@_gettingAddress">
            @if (_gettingAddress)
            {
                <LoadingIndicator/>
            }
            else
            {
                <span>Get onchain address</span>
            }
        </button>
    </div>
</section>

@code {
    private bool _loading;
    private bool _gettingAddress;
    private Money? _totalBalance;
    private string? _address;
    private Dictionary<string, TxResp[]> _txs;
    private IEnumerable<ICoin>? _utxos;
    private string? _txResponse { get; set; }

    private bool _sending { get; set; }
    private string? _successMessage { get; set; }
    private string? _errorMessage { get; set; }
    private ValidationEditContext? _validationEditContext;
    private SendModel? Model { get; set; } = new();

    private string GetTitle() => $"{OnChainWalletManager.Network?.Name ?? ""} Onchain Wallet".Trim();
    private MoneyUnit UnitMoney => BitcoinUnit == CurrencyUnit.BTC ? MoneyUnit.BTC : MoneyUnit.Satoshi;
    private string BitcoinUnit => UIState.Value.BitcoinUnit;

    private class SendModel
    {
        [Required]
        public string? Destination { get; set; }
        [Required]
        public decimal? Amount { get; set; }

        public (Transaction Tx, ICoin[] SpentCoins, Script Change)? Transaction { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (OnChainWalletManager.CanConfigureWallet)
        {
            NavigationManager.NavigateTo(Routes.WalletSettings);
        }
        else
        {
            _ = FetchData();
        }
    }

    private async Task FetchData()
    {
        if (_loading || _sending) return;
        _loading = true;
        _errorMessage = null;
        await InvokeAsync(StateHasChanged);
        try
        {
            _utxos = (await OnChainWalletManager.GetUTXOS()).OfType<OnChainWalletManager.CoinWithKey>();
            _totalBalance = _utxos.Sum(utxo => utxo.TxOut.Value);
            _txs = await OnChainWalletManager.GetTransactions();
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            _loading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task GetAddress()
    {
        if (_gettingAddress) return;
        _gettingAddress = true;
        await InvokeAsync(StateHasChanged);
        try
        {
            var script = await OnChainWalletManager.DeriveScript(WalletDerivation.NativeSegwit);
            _address = script.GetDestinationAddress(OnChainWalletManager.Network!)?.ToString();
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            _gettingAddress = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task Transact()
    {
        if (_loading || _sending) return;
        if (Model.Transaction == null)
            await CreateTx();
        else
            await BroadcastTx();
    }

    private async Task CancelTx()
    {
        if (Model.Transaction is null) return;

        Model.Transaction = null;
        await InvokeAsync(StateHasChanged);
    }

    private async Task CreateTx()
    {
        if (_totalBalance is null || Model.Amount is <= 0 || string.IsNullOrWhiteSpace(Model.Destination)) return;
        _sending = true;
        await InvokeAsync(StateHasChanged);
        try
        {
            var amount = new Money(Model.Amount!.Value, MoneyUnit.Satoshi).ToUnit(MoneyUnit.BTC);
            var txout = new TxOut(Money.Coins(amount), BitcoinAddress.Create(Model.Destination, OnChainWalletManager.Network));
            Model.Transaction = await OnChainWalletManager.CreateTransaction([txout], null, null);
            if (Model.Transaction is null)
                throw new Exception("Transaction creation failed");
            var changeAmt = Model.Transaction.Value.Tx.Outputs
                .Where(o => o.IsTo(Model.Transaction.Value.Change.GetDestinationAddress(OnChainWalletManager.Network)))
                .Sum(o => o.Value.ToDecimal(MoneyUnit.BTC));
            var feeaMT = Model.Transaction.Value.Tx.GetFee(Model.Transaction.Value.SpentCoins).ToDecimal(MoneyUnit.BTC);
            _successMessage = $"Created transaction {Model.Transaction.Value.Tx.GetHash()} spending {Model.Transaction.Value.SpentCoins.Sum(c => c.TxOut.Value.ToDecimal(MoneyUnit.BTC))} BTC, with change of {changeAmt} BTC and fee of {feeaMT} BTC";
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            Model.Transaction = null;
        }
        finally
        {
            _sending = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task BroadcastTx()
    {
        if (Model.Transaction is null) return;
        _sending = true;
        await InvokeAsync(StateHasChanged);
        try
        {
            await OnChainWalletManager.BroadcastTransaction(Model.Transaction.Value.Tx);
            _successMessage = $"Transaction {Model.Transaction.Value.Tx.GetHash()} broadcasted";
            Model = new SendModel();
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            _sending = false;
            await InvokeAsync(StateHasChanged);
        }
        _ = FetchData();
    }

    private void ToggleDisplayCurrency()
    {
        if (Model.Amount.HasValue)
            Model.Amount = new Money(Model.Amount.Value, UnitMoney).ToDecimal(UnitMoney == MoneyUnit.Satoshi
                ? MoneyUnit.BTC
                : MoneyUnit.Satoshi);
        Dispatcher.Dispatch(new UIState.ToggleBitcoinUnit());
    }
}
