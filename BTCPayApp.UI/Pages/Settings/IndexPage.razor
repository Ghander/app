@attribute [Route(Routes.Settings)]
@using BTCPayApp.Core
@using BTCPayApp.Core.Auth
@using BTCPayApp.Core.BTCPayServer
@using BTCPayApp.Core.Contracts
@using BTCPayApp.Core.Wallet
@using BTCPayApp.UI.Features
@using BTCPayServer.Client
@using BTCPayServer.Client.App.Models
@using BTCPayServer.Client.Models
@using Plugin.Fingerprint.Abstractions
@inject IState<RootState> State
@inject IState<UIState> UiState
@inject IDispatcher Dispatcher
@inject ConfigProvider ConfigProvider
@inject IAccountManager AccountManager
@inject IFingerprint Fingerprint
@inject IState<UIState> UIState
@inject IState<UserState> UserState
@inject IState<StoreState> StoreState
@inject BTCPayConnectionManager ConnectionManager
@inject LightningNodeManager LightningNodeManager
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Settings</PageTitle>

@if (_account != null)
{
    <section class="container">
        <header class="d-flex align-items-center justify-content-between gap-3 my-4">
            <h1>Settings</h1>
            @if (InstanceInfo?.CustomThemeExtension is null)
            {
                <div class="theme-switch">
                    @foreach (var theme in ThemeList)
                    {
                        <button type="button" class="btn-icon @(Model.Theme == theme ? "active" : null)" title="@theme" @onclick="() => SetTheme(theme)">
                            <Icon Symbol="@($"themes-{theme.ToLower()}")"/>
                        </button>
                    }
                </div>
            }
        </header>
        <div class="box user mb-2 d-flex align-items-center justify-content-between gap-3 my-4">
            <UserSwitch Users="@StoreUsers"/>
        </div>
        <div class="box">
            <ul class="list-group list-group-flush list-group-links">
                <li class="list-group-item">
                    <a href="@Routes.Account">
                        <Icon Symbol="nav-account"/>
                        <span>Account Details</span>
                        <Icon Symbol="caret-right"/>
                    </a>
                </li>
                <li class="list-group-item">
                    <a href="@Routes.NotificationSettings">
                        <Icon Symbol="nav-notifications"/>
                        <span>Notifications</span>
                        <Icon Symbol="caret-right"/>
                    </a>
                </li>
            </ul>
        </div>

        <h2>Store</h2>
        <div class="box">
            <ul class="list-group list-group-flush list-group-links">
                @if (UserInfo?.Stores?.Count() > 1 || CurrentStore == null)
                {
                    <li class="list-group-item">
                        <a href="@Routes.SelectStore" class="@(CurrentStore != null ? "pt-1 pb-2" : "justify-content-start")">
                            <Icon Symbol="nav-store"/>
                            @if (CurrentStore == null)
                            {
                                <span>Select Store</span>
                                <Icon Symbol="caret-right"/>
                            }
                            else
                            {
                                <div>
                                    <div>@CurrentStore.Name</div>
                                    <div class="text-muted">@CurrentStore.RoleId</div>
                                </div>
                                <span class="btn btn-link fw-semibold px-2 py-1 ms-auto">Select</span>
                            }
                        </a>
                    </li>
                }
                else
                {
                    <li class="list-group-item">
                        <a href="@Routes.CreateStore">
                            <Icon Symbol="nav-store"/>
                            <span>Create Store</span>
                            <Icon Symbol="caret-right"/>
                        </a>
                    </li>
                }
                @if (CurrentStore != null)
                {
                    <AuthorizeView Policy="@Policies.CanViewStoreSettings" Resource="@CurrentStore.Id">
                        <li class="list-group-item">
                            <a href="@Routes.StorePath(CurrentStore.Id)">
                                <Icon Symbol="nav-store"/>
                                <span>@CurrentStore.Name</span>
                                <Icon Symbol="caret-right"/>
                            </a>
                        </li>
                    </AuthorizeView>
                    <AuthorizeView Policy="@Policies.CanModifyStoreSettings" Resource="@CurrentStore.Id">
                        @if (CurrentStore.PosAppId != null)
                        {
                            <li class="list-group-item">
                                <a href="@Routes.PosSettingsPath(CurrentStore.PosAppId)">
                                    <Icon Symbol="nav-pointofsale"/>
                                    <span>Checkout</span>
                                    <Icon Symbol="caret-right"/>
                                </a>
                            </li>
                        }
                    </AuthorizeView>
                }
            </ul>
        </div>

        <h2>Bitcoin</h2>
        <div class="box">
            <ul class="list-group list-group-flush list-group-links">
                <li class="list-group-item">
                    <a href="@Routes.WalletSettings">
                        <Icon Symbol="wallet-wallet"/>
                        <span>Onchain Wallet</span>
                        <Icon Symbol="caret-right"/>
                    </a>
                </li>
                <li class="list-group-item">
                    <a href="@Routes.LightningSettings">
                        <Icon Symbol="lightning-node"/>
                        <span>Lightning Node</span>
                        <Icon Symbol="caret-right"/>
                    </a>
                </li>
                @if (LightningNodeManager.IsActive)
                {
                    <li class="list-group-item">
                        <a href="@Routes.ChannelsPeers">
                            <Icon Symbol="lightning-node"/>
                            <span>Channels and Peers</span>
                            <Icon Symbol="caret-right"/>
                        </a>
                    </li>
                }
            </ul>
        </div>

        <h2>Security</h2>
        <div class="box">
            <ul class="list-group list-group-flush list-group-links">
                <li class="list-group-item">
                    <a href="@Routes.EncryptionKey">
                        <Icon Symbol="key"/>
                        <span>Encryption key</span>
                        <Icon Symbol="caret-right"/>
                    </a>
                </li>
                <li class="list-group-item">
                    <a href="@Routes.ChangePassword">
                        <Icon Symbol="dots" class="p-2"/>
                        <span>Change Password</span>
                        <Icon Symbol="caret-right"/>
                    </a>
                </li>
                @*
                <li class="list-group-item">
                    <a href="@Routes.ChangePasscode">
                        <Icon Symbol="key"/>
                        <span>@(HasPasscode ? "Change" : "Set") Passcode</span>
                        <Icon Symbol="caret-right"/>
                    </a>
                </li>
                @if (HasPasscode)
                {
                    <li class="list-group-item">
                        <button class="btn btn-link text-danger" type="button" @onclick="RemovePasscode">
                            <Icon Symbol="key" class="text-body"/>
                            <span class="me-auto">Remove passcode</span>
                        </button>
                    </li>
                }
                *@
            </ul>
        </div>

        <h2>Debug</h2>
        <div class="box">
            <ul class="list-group list-group-flush list-group-links">
                <li class="list-group-item">
                    <div class="justify-content-start">
                        <span class="m-2 me-1 btcpay-status btcpay-status--@(State.Value.ConnectionState switch { BTCPayConnectionState.ConnectedAsMaster or BTCPayConnectionState.ConnectedAsSlave or BTCPayConnectionState.ConnectedFinishedInitialSync => "enabled", BTCPayConnectionState.Disconnected => "disabled", _ => "pending" })"></span>
                        <span>
                            Hub:
                            @(State.Value.ConnectionState switch
                            {
                                BTCPayConnectionState.ConnectedAsMaster => "Connected as primary device",
                                BTCPayConnectionState.ConnectedAsSlave => "Connected as secondary device",
                                BTCPayConnectionState.ConnectedFinishedInitialSync => "Connected, initial sync finished",
                                BTCPayConnectionState.WaitingForAuth => "Waiting for authentication",
                                BTCPayConnectionState.WaitingForEncryptionKey => "Waiting for encryption key",
                                _ => State.Value.ConnectionState.ToString()
                            })
                        </span>
                        @if (State.Value.ConnectionState == BTCPayConnectionState.ConnectedAsMaster)
                        {
                            <button type="button" class="btn btn-link fw-semibold px-2 py-1 ms-auto" @onclick="SwitchToSlave">
                                <span>Switch to Slave</span>
                            </button>
                        }
                    </div>
                </li>
                @if (State.Value.ConnectionState != BTCPayConnectionState.ConnectedAsSlave)
                {
                    <li class="list-group-item">
                        <div class="justify-content-start">
                            <span class="m-2 me-1 btcpay-status btcpay-status--@(State.Value.OnchainWalletState switch { OnChainWalletState.Loaded => "enabled", OnChainWalletState.Init => "disabled", _ => "pending" })"></span>
                            <span>
                                Wallet:
                                @(State.Value.OnchainWalletState switch
                                {
                                    OnChainWalletState.NotConfigured => "Not configured",
                                    OnChainWalletState.WaitingForConnection => "Waiting for connection",
                                    _ => State.Value.OnchainWalletState.ToString()
                                })
                            </span>
                        </div>
                    </li>
                    <li class="list-group-item">
                        <div class="justify-content-start">
                            <span class="m-2 me-1 btcpay-status btcpay-status--@(State.Value.LightningNodeState switch { LightningNodeState.Loaded => "enabled", LightningNodeState.Error or LightningNodeState.Stopped=> "disabled", _ => "pending" })"></span>
                            <span>
                                Lightning:
                                @(State.Value.LightningNodeState switch
                                {
                                    LightningNodeState.NotConfigured => "Not configured",
                                    LightningNodeState.WaitingForConnection => "Waiting for connection",
                                    _ => State.Value.LightningNodeState.ToString()
                                })
                            </span>
                        </div>
                    </li>
                }
            </ul>
        </div>

        <h2>Logout</h2>
        <div class="box">
            @switch (State.Value.ConnectionState)
            {
                case BTCPayConnectionState.ConnectedAsMaster:
                    <p>This device is currently connected as primary device for communication with the BTCPay Server.</p>
                    <p>Please note, that when you sign out of the account on this device, your Lightning node will go offline and you will not be able to receive any payments.</p>
                    break;
                case BTCPayConnectionState.ConnectedAsSlave:
                    <p>This device is currently connected as additional device for communication with the BTCPay Server.</p>
                    <p>Please ensure, that your primary device is still connected to the BTCPay Server, because otherwise you will not be able to receive any payments.</p>
                    break;
            }
            <button class="btn btn-outline-danger w-100 mt-2" type="button" @onclick="Logout">Logout</button>
        </div>
    </section>
}

@code {
    private static string[] ThemeList => [Themes.System, Themes.Light, Themes.Dark];
    private BTCPayAccount? _account;
    private BTCPayAppConfig? _config;
    private bool? _biometricAuthAvailable;
    private SettingsModel Model { get; set; } = new();
    private bool HasPasscode => !string.IsNullOrEmpty(_config?.Passcode);
    private AppUserStoreInfo? CurrentStore => AccountManager.GetCurrentStore();
    private AppInstanceInfo? InstanceInfo => UIState.Value.Instance?.Data;
    private AppUserInfo? UserInfo => UserState.Value.Info?.Data;
    private IEnumerable<StoreUserData>? StoreUsers => StoreState.Value.Users?.Data;

    private class SettingsModel
    {
        public string Theme { get; set; } = Themes.System;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        AccountManager.OnAccountInfoChange += OnAccountInfoChange;

        Model.Theme = UiState.Value.SelectedTheme;
        _account = AccountManager.GetAccount();
        _config = await ConfigProvider.Get<BTCPayAppConfig>(BTCPayAppConfig.Key);
        _biometricAuthAvailable = await Fingerprint.IsAvailableAsync();
    }

    protected override ValueTask DisposeAsyncCore(bool disposing)
    {
        base.DisposeAsyncCore(disposing);

        AccountManager.OnAccountInfoChange -= OnAccountInfoChange;

        return ValueTask.CompletedTask;
    }

    private async Task OnAccountInfoChange(object? sender, BTCPayAccount? account)
    {
        _account = account;
        await InvokeAsync(StateHasChanged);
    }

    // TODO: Guard with passcode entering
    private async Task RemovePasscode()
    {
        if (HasPasscode)
        {
            _config!.Passcode = null;
            await ConfigProvider.Set(BTCPayAppConfig.Key, _config, false);
        }
    }

    private void SetTheme(string theme)
    {
        Model.Theme = theme;
        Dispatcher.Dispatch(new UIState.ApplyUserTheme(Model.Theme));
    }

    private void SwitchToSlave()
    {
        _ = ConnectionManager.SwitchToSlave();
    }

    private async Task Logout()
    {
        await AccountManager.Logout();
    }
}
