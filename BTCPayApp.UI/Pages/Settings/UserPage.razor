@attribute [Route(Routes.User)]
@using BTCPayApp.CommonServer.Models
@using BTCPayApp.Core
@using BTCPayApp.Core.Auth
@using BTCPayApp.UI.Components.Layout
@inject IAccountManager AccountManager
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Settings</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back>
        <h1>User</h1>
    </Titlebar>
</SectionContent>
@if (_userInfo != null)
{
    <section class="container">
        <h1 class="mb-3">@_userInfo.Email</h1>
        <div class="box">
            ID: @_userInfo.UserId<br/>
            Roles: @(_userInfo.Roles?.Any() is true ? string.Join(", ", _userInfo.Roles) : "none")
        </div>

        <h2>Stores</h2>
        <div class="box">
            @if (_userInfo.Stores?.Any() is true)
            {
                <ul class="list-group list-group-flush">
                    @foreach (var store in _userInfo.Stores)
                    {
                        <li class="list-group-item">
                            <h3>
                                @store.Name
                                <span class="badge bg-light">@store.RoleId</span>
                                @if (store.Archived)
                                {
                                    <span class="badge bg-info">archived</span>
                                }
                            </h3>
                            @if (store.Permissions?.Any() is true)
                            {
                                <ul>
                                    @foreach (var permission in store.Permissions)
                                    {
                                    <li>@permission</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p class="text-secondary">No permissions</p>
                            }
                        </li>
                    }
                </ul>
            }
            else
            {
                <p class="text-secondary">No stores</p>
            }
        </div>

        <h2>Account</h2>
        <div class="box">
            <ul class="list-group list-group-flush list-group-links">
                <li class="list-group-item">
                    <button class="btn btn-link text-danger" type="button" @onclick="Logout">Logout</button>
                </li>
                <li class="list-group-item">
                    <button class="btn btn-link text-danger" type="button" @onclick="RemoveAccount">Remove account</button>
                </li>
            </ul>
        </div>
    </section>
}

@code {
    private AppUserInfo? _userInfo;
    private BTCPayAccount? _account;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _userInfo = AccountManager.GetUserInfo();
        _account = AccountManager.GetAccount();
    }

    private async Task Logout()
    {
        await AccountManager.Logout();
    }

    private async Task RemoveAccount()
    {
        await Logout();
        await AccountManager.RemoveAccount(_account!);
    }
}
