@attribute [Route(Routes.WalletSettings)]
@layout BaseLayout
@using BTCPayApp.UI.Features
@using Microsoft.AspNetCore.SignalR.Client
@using BTCPayApp.Core.Attempt2
@using BTCPayApp.Core.Auth
@using Microsoft.Extensions.Logging
@using BTCPayApp.UI.Components.Layout
@using BTCPayApp.Core.Helpers
@using BTCPayServer.Client.Models
@using Newtonsoft.Json.Linq
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject OnChainWalletManager OnChainWalletManager
@inject IState<RootState> State
@inject ILogger<IndexPage> Logger
@inject IAccountManager AccountManager
<PageTitle>Wallet Setup</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back>
        <h1>Wallet Setup</h1>
    </Titlebar>
</SectionContent>
<section class="container">
    @if (CanConfigureWallet)
    {
        <button class="btn btn-primary" @onclick="GenerateWallet">Generate Wallet</button>
    }
    @if (OnChainWalletManager.State == OnChainWalletState.Loaded)
    {
        var config = OnChainWalletManager.WalletConfig;
        <h3>@config.Network Wallet</h3>
        <p>Fingerprint: <code>@config.Fingerprint</code></p>
        <button class="btn btn-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#seed" aria-expanded="false" aria-controls="seed">
            Show seed
        </button>
        <div id="seed" class="collapse">
            <div class="box p-4 mt-3">
                <ol class="m-0">
                    @foreach (var word in config.Mnemonic.Split(' '))
                    {
                        <li class="font-monospace">@word</li>
                    }
                </ol>
            </div>
        </div>

        <h3 class="mt-4">Derivations</h3>
        @foreach (var d in config.Derivations)
        {
            <div class="box mb-3">
                <h4>@(d.Value.Name)</h4>

                @if (!string.IsNullOrEmpty(d.Value.Identifier))
                {
                    <div class="form-floating">
                        <TruncateCenter Text="@d.Value.Identifier" Padding="15" Copy="true" Elastic="true" class="form-control-plaintext" />
                        <label>Identifier</label>
                    </div>

                }
                @if (!string.IsNullOrEmpty(d.Value.Descriptor))
                {
                    <div class="form-floating">
                        <TruncateCenter Text="@d.Value.Descriptor" Padding="15" Copy="true" Elastic="true" class="form-control-plaintext" />
                        <label>Descriptor</label>
                    </div>
                }
                @if (d.Value.Descriptor is not null && d.Value.Identifier is not null && (StorePaymentMethodIdentifier is null || !d.Value.Identifier.Contains(StorePaymentMethodIdentifier)))
                {
                    <button class="btn btn-primary" @onclick="() => SetStorePaymentMethod(d.Key)">Set as Store Payment Method</button>
                }
            </div>
        }
    }
</section>

@code {
    private bool CanConfigureWallet =>
        State.Value.OnchainWalletState == OnChainWalletState.NotConfigured &&
        State.Value.ConnectionState == HubConnectionState.Connected;

    private string? StorePaymentMethodIdentifier = null;

    private async Task SetStorePaymentMethod(string key)
    {

        try
        {
            if (!OnChainWalletManager.WalletConfig.Derivations.TryGetValue(key, out var derivation) || derivation.Descriptor is null)
            {
                return;
            }

            var xpub = derivation.Descriptor.ExtractFromDescriptor(OnChainWalletManager.Network);
            var identifierSUffix = derivation.Identifier.Split(':').Last();
            var acc = AccountManager.GetAccount();
            if (acc?.CurrentStoreId is null)
                return;
            var pm = await AccountManager.GetClient().UpdateStorePaymentMethod(acc.CurrentStoreId, "BTC-CHAIN", new UpdatePaymentMethodRequest()
            {
                Enabled = true,
                Config = derivation.Descriptor
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error setting store payment method");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await GetStorePaymentMethod();
    }

    private async Task GetStorePaymentMethod()
    {
        try
        {
            if(CanConfigureWallet)
                return;
            var acc = AccountManager.GetAccount();
            if (acc?.CurrentStoreId is null)
                return;
            var pm = await AccountManager.GetClient().GetStorePaymentMethod(acc.CurrentStoreId, "BTC-CHAIN", true);
            if (pm?.Config is JObject configObj && configObj.TryGetValue("accountDerivation", out var derivationSchemeToken) && derivationSchemeToken.Value<string>() is {} derivationScheme)
            {
                StorePaymentMethodIdentifier = derivationScheme;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error getting store payment method");
        }
    }


    private async Task GenerateWallet()
    {
        try
        {
            await OnChainWalletManager.Generate();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error configuring wallet");
        }
    }
}
