@attribute [Route(Routes.WalletSettings)]
@using System.Text.Json
@using BTCPayApp.UI.Features
@using BTCPayApp.Core.Auth
@using BTCPayApp.Core.BTCPayServer
@using BTCPayApp.Core.Wallet
@using Microsoft.Extensions.Logging
@using BTCPayApp.UI.Components.Layout
@using BTCPayServer.Client.Models
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject OnChainWalletManager OnChainWalletManager
@inject IState<RootState> State
@inject ILogger<IndexPage> Logger
@inject IAccountManager AccountManager

<PageTitle>@GetTitle()</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back>
        <h1>@GetTitle()</h1>
    </Titlebar>
</SectionContent>
<section class="container">
    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <Alert Type="danger" Dismissible>@_errorMessage</Alert>
    }
    else if (!string.IsNullOrEmpty(_successMessage))
    {
        <Alert Type="success" Dismissible>@_successMessage</Alert>
    }
    @if (OnChainWalletManager.IsConfigured)
    {
        var config = OnChainWalletManager.WalletConfig!;
        <h4>Wallet</h4>
        <div class="box mb-3">
            <div class="form-floating">
                <TruncateCenter Text="@config.Fingerprint" Padding="15" Copy="true" Elastic="true" class="form-control-plaintext"/>
                <label>Fingerprint</label>
            </div>
            <button class="btn btn-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#seed" aria-expanded="false" aria-controls="seed">
                Show seed
            </button>
            <div id="seed" class="collapse">
                <div class="box p-4 mt-3">
                    <ol class="m-0">
                        @foreach (var word in config.Mnemonic.Split(' '))
                        {
                            <li class="font-monospace">@word</li>
                        }
                    </ol>
                </div>
            </div>
        </div>
        <h4>Derivations</h4>
        @foreach (var d in config.Derivations)
        {
            var identifier = d.Value.Identifier;
            var descriptor = d.Value.Descriptor;
            var isStorePM = IsStorePaymentMethodId(identifier);
            <div class="box mb-3">

                <h4 class="d-flex flex-wrap align-items-center gap-2">
                    @(d.Value.Name)
                    @if (isStorePM is true)
                    {
                        <span class="badge bg-info">
                            Current onchain payment method for store
                        </span>
                    }
                </h4>
                @if (!string.IsNullOrEmpty(identifier))
                {
                    <div class="form-floating">
                        <TruncateCenter Text="@identifier" Padding="15" Copy="true" Elastic="true" class="form-control-plaintext"/>
                        <label>Identifier</label>
                    </div>
                }
                @if (!string.IsNullOrEmpty(descriptor))
                {
                    <div class="form-floating">
                        <TruncateCenter Text="@descriptor" Padding="15" Copy="true" Elastic="true" class="form-control-plaintext"/>
                        <label>Descriptor</label>
                    </div>
                    @if (isStorePM is false && !string.IsNullOrEmpty(StoreId))
                    {
                        <button class="btn btn-primary mt-3" @onclick="() => SetStorePaymentMethod(d.Key)">
                            Set as onchain payment method for store
                        </button>
                    }
                }
            </div>
        }
    }
    else
    {
        <ul>
            <li>Connection state: @State.Value.ConnectionState</li>
            <li>Onchain wallet state: @State.Value.OnchainWalletState</li>
            @if (State.Value.ConnectionState == BTCPayConnectionState.ConnectedAsMaster)
            {
                <li>
                    <button class="btn btn-primary" @onclick="OnChainWalletManager.Generate">Generate wallet</button>
                </li>
            }
        </ul>
    }
</section>

@code {
    private string PaymentMethodId => OnChainWalletManager.PaymentMethodId;
    private string? StoreId => AccountManager.GetCurrentStore()?.Id;
    private string? _storePaymentMethodIdentifier;
    private string? _errorMessage;
    private string? _successMessage;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (!string.IsNullOrEmpty(StoreId))
            await GetStorePaymentMethod();
    }

    private async Task GetStorePaymentMethod()
    {
        if (string.IsNullOrEmpty(StoreId)) return;
        try
        {
            var pm = await AccountManager.GetClient().GetStorePaymentMethod(StoreId, PaymentMethodId, true);
            _storePaymentMethodIdentifier = GetDerivationScheme(pm);
        }
        catch (Exception ex)
        {
            Logger.LogDebug(ex, "Payment method {PaymentMethodId} unset for store {StoreId}", PaymentMethodId, StoreId);
        }
    }

    private async Task SetStorePaymentMethod(string key)
    {
        if (string.IsNullOrEmpty(StoreId) || OnChainWalletManager.WalletConfig?.Derivations.TryGetValue(key, out var derivation) is not true || derivation.Descriptor is null) return;
        _successMessage = _errorMessage = null;
        try
        {
            var pm = await AccountManager.GetClient().UpdateStorePaymentMethod(StoreId, PaymentMethodId, new UpdatePaymentMethodRequest
            {
                Enabled = true,
                Config = derivation.Descriptor
            });
            _storePaymentMethodIdentifier = GetDerivationScheme(pm);
            _successMessage = "Store payment method set.";
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error setting store payment method: {ex.Message}";
            Logger.LogError(ex, "Error setting payment method {PaymentMethodId} for store {StoreId}", PaymentMethodId, StoreId);
        }

        await InvokeAsync(StateHasChanged);
    }

    private bool? IsStorePaymentMethodId(string identifier)
    {
        return !string.IsNullOrEmpty(StoreId) && !string.IsNullOrEmpty(identifier) && !string.IsNullOrEmpty(_storePaymentMethodIdentifier)
                ? identifier.Contains(_storePaymentMethodIdentifier)
                : null;
    }

    private string? GetDerivationScheme(GenericPaymentMethodData? pm)
    {
        if (string.IsNullOrEmpty(pm?.Config.ToString())) return null;
        using var jsonDoc = JsonDocument.Parse(pm.Config.ToString());
        return jsonDoc.RootElement.TryGetProperty("accountDerivation", out var derivationSchemeElement) &&
            derivationSchemeElement.GetString() is { } derivationScheme
            ? derivationScheme
            : null;
    }

    private string GetTitle() => $"{OnChainWalletManager.Network?.Name ?? ""} Onchain Wallet".Trim();
}

