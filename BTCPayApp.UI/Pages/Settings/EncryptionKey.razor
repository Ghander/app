@attribute [Route(Routes.EncryptionKey)]
@using BTCPayApp.Core.Backup
@using BTCPayApp.Core.BTCPayServer
@using BTCPayApp.UI.Components.Layout
@inject NavigationManager NavigationManager
@inject BTCPayConnectionManager ConnectionManager
@inject SyncService SyncService
@inject IJSRuntime JS
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>@GetTitle()</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back="!NeedsEncryptionKey">
        <h1>@GetTitle()</h1>
        @if (NeedsEncryptionKey) {
            <SectionContent SectionId="Titlebar.End">
                <a class="btn-icon" href="@Routes.Settings">
                    <Icon Symbol="cross"/>
                </a>
            </SectionContent>
        }
    </Titlebar>
</SectionContent>

<section class="container">
    @if (NeedsEncryptionKey)
    {
        <style>#NavbarBottom { display: none; }</style>
        <p class="mb-4 text-center">
            Your encryption key is required to unlock the app.
            Enter the encryption key of your master device.
        </p>
        <div class="box my-4 mx-auto">
            <ValidationEditContext @ref="_validationEditContext" Model="@Model" OnValidSubmit="HandleValidSubmit" ErrorMessage="@_errorMessage">
                <div class="form-group">
                    <label for="EncryptionKey" class="form-label">Your Encryption Key</label>
                    <div class="d-flex gap-2">
                        <InputText @bind-Value="Model.EncryptionKey" id="EncryptionKey" class="form-control flex-grow-1" placeholder="Retrieve from your master device" />
                        <button type="button" class="btn btn-secondary px-3" data-testid="ScanButton" data-bs-toggle="modal" data-bs-target="#ScanQrCodeModal">
                            <Icon Symbol="scan-qr"/>
                        </button>
                    </div>
                    <ValidationMessage For="@(() => Model.EncryptionKey)"/>
                </div>
                <button type="submit" class="btn btn-primary w-100" disabled="@(!IsValidKey)">Use Encryption Key</button>
            </ValidationEditContext>
        </div>
        <QrScanModal OnScan="@OnQrCodeScan"/>
    }
    else if (!string.IsNullOrEmpty(Model.EncryptionKey))
    {
        <p class="mb-4 text-center">
            Back up your encryption key, otherwise you won't be able to restore the app and its wallet.
            You will also need this key to pair the app with other devices.
        </p>
        <div class="box my-4 mx-auto">
            <div class="form-floating form-group">
                <TruncateCenter Text="@Model.EncryptionKey" Padding="10" Copy="true" Elastic="true" class="form-control-plaintext"/>
                <label>Your Encryption Key</label>
            </div>
            <QrCode Data="@Model.EncryptionKey" class="w-100"/>
        </div>
    }
</section>

@code {
    private ValidationEditContext? _validationEditContext;
    private EncryptionKeyModel Model { get; } = new ();
    private string? _errorMessage;
    private string? _qrInput;
    private const int KeyLength = 64;

    private class EncryptionKeyModel
    {
        [Required]
        [StringLength(KeyLength, MinimumLength = KeyLength)]
        public string? EncryptionKey { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Model.EncryptionKey = await SyncService.GetEncryptionKey();
    }

    public async Task HandleValidSubmit()
    {
        _errorMessage = null;
        try
        {
            if (IsValidKey && await SyncService.SetEncryptionKey(Model.EncryptionKey!))
                NavigationManager.NavigateTo(Routes.Index);
            else
                _errorMessage = "Invalid encryption key";
        }
        catch (Exception e)
        {
            _errorMessage = "Invalid encryption key: " + e.Message;
        }
    }

    private async void OnQrCodeScan(string code)
    {
        // prevent duplicate submission due to quirk in QR reader lib
        if (code == _qrInput) return;
        _qrInput = code;
        await JS.InvokeVoidAsync("Interop.closeModal", "#ScanQrCodeModal");

        Model!.EncryptionKey = code;
        StateHasChanged();
    }

    private string GetTitle() => $"{(NeedsEncryptionKey ? "Enter" : "View")} your encryption key";
    private bool NeedsEncryptionKey => ConnectionManager.ConnectionState == BTCPayConnectionState.WaitingForEncryptionKey;
    private bool IsValidKey => !string.IsNullOrEmpty(Model.EncryptionKey) && Model.EncryptionKey.Length == KeyLength;
}
