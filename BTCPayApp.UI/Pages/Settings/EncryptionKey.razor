@attribute [Route(Routes.EncryptionKey)]
@using BTCPayApp.Core.Auth
@using BTCPayApp.Core.Backup
@using BTCPayApp.Core.BTCPayServer
@using BTCPayApp.UI.Components.Layout
@inject NavigationManager NavigationManager
@inject BTCPayConnectionManager ConnectionManager
@inject SyncService SyncService
@inject IJSRuntime JS
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>@GetTitle()</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back="!NeedsEncryptionKey">
        <h1>@GetTitle()</h1>
        @if (NeedsEncryptionKey) {
            <SectionContent SectionId="Titlebar.End">
                <a class="btn-icon" href="@Routes.Settings">
                    <Icon Symbol="cross"/>
                </a>
            </SectionContent>
        }
    </Titlebar>
</SectionContent>

<section class="container">
    @if (NeedsEncryptionKey)
    {
        <style>#NavbarBottom { display: none; }</style>
        <p class="text-center">
            Your encryption key is required to unlock the app.
        </p>
        <p class="text-center">
            Enter or scan the encryption key of your master device.
            In case you lost your device or do not have access to the encryption key,
            you can also provide your wallet seed as a fallback.
        </p>
        <div class="box my-4 mx-auto">
            <ValidationEditContext @ref="_validationEditContext" Model="@Model" OnValidSubmit="HandleValidSubmit" ErrorMessage="@_errorMessage">
                <div class="form-group">
                    <label for="EncryptionKey" class="form-label">Encryption Key</label>
                    <div class="d-flex gap-2">
                        <InputText @bind-Value="Model.EncryptionKey" id="EncryptionKey" class="form-control flex-grow-1" placeholder="Retrieve from your master device" autocomplete="off"/>
                        <button type="button" class="btn btn-secondary px-3" data-testid="ScanButton" data-bs-toggle="modal" data-bs-target="#ScanQrCodeModal">
                            <Icon Symbol="scan-qr"/>
                        </button>
                    </div>
                    <ValidationMessage For="@(() => Model.EncryptionKey)"/>
                </div>
                <button type="submit" class="btn btn-primary w-100" disabled="@(!IsValidKey)">Unlock</button>
            </ValidationEditContext>
        </div>
        <QrScanModal OnScan="@OnQrCodeScan"/>
    }
    else if (!string.IsNullOrEmpty(Model.EncryptionKey))
    {
        <AuthorizeView Policy="@AppPolicies.CanModifySettings">
            <Authorized>
                <p>
                    You can use this app's wallet and Lightning node on multiple devices.
                    To pair another device, install the app and log into your account.
                </p>
                <p>
                    You will be prompted for this encryption key, so that the data can be synced with the new device.
                </p>
                <QrCode Data="@Model.EncryptionKey" class="w-100 my-4 rounded"/>

                <h2 class="text-center fs-5 mt-3">Backup</h2>
                <p>
                    In case you lose your device, the encryption key can also be used for restoring the app and its wallet.
                    To restore your data without this key, you will need to provide your wallet seed.
                </p>
                <p>
                    You can safely back up the encryption key using a password manager.
                </p>
                <div class="box my-4 mx-auto">
                    <div class="form-floating form-group">
                        <TruncateCenter Text="@Model.EncryptionKey" Padding="10" Copy="true" Elastic="true" class="form-control-plaintext"/>
                        <label>Your Encryption Key</label>
                    </div>
                </div>
            </Authorized>
            <NotAuthorized>
                <Alert Type="danger">Unauthorized.</Alert>
            </NotAuthorized>
        </AuthorizeView>
    }
</section>

@code {
    private ValidationEditContext? _validationEditContext;
    private EncryptionKeyModel Model { get; } = new ();
    private string? _errorMessage;
    private string? _qrInput;

    private class EncryptionKeyModel
    {
        [Required]
        public string? EncryptionKey { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Model.EncryptionKey = await SyncService.GetEncryptionKey();
    }

    public async Task HandleValidSubmit()
    {
        _errorMessage = null;
        try
        {
            if (IsValidKey && await SyncService.SetEncryptionKey(Model.EncryptionKey!))
                NavigationManager.NavigateTo(Routes.Index);
            else
                _errorMessage = "Invalid encryption key";
        }
        catch (Exception e)
        {
            _errorMessage = "Invalid encryption key: " + e.Message;
        }
    }

    private async void OnQrCodeScan(string code)
    {
        // prevent duplicate submission due to quirk in QR reader lib
        if (code == _qrInput) return;
        _qrInput = code;
        await JS.InvokeVoidAsync("Interop.closeModal", "#ScanQrCodeModal");

        Model.EncryptionKey = code;
        StateHasChanged();
    }

    private string GetTitle() => NeedsEncryptionKey ? "Provide your encryption key" : "Pair another device";
    private bool NeedsEncryptionKey => ConnectionManager.ConnectionState == BTCPayConnectionState.WaitingForEncryptionKey;
    private bool IsValidKey => !string.IsNullOrEmpty(Model.EncryptionKey);
}
