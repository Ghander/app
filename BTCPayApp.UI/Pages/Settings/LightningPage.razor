@attribute [Route(Routes.LightningSettings)]
@using BTCPayApp.UI.Features
@using BTCPayApp.Core.Attempt2
@using BTCPayApp.Core.Data
@using Microsoft.Extensions.Logging
@using BTCPayApp.UI.Components.Layout
@using BTCPayApp.Core.Auth
@using BTCPayServer.Client.Models
@using Newtonsoft.Json.Linq
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject LightningNodeManager LightningNodeManager
@inject IState<RootState> State
@inject ILogger<IndexPage> Logger
@inject IAccountManager AccountManager

<PageTitle>Lightning Node</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back>
        <h1>
            @if (!string.IsNullOrEmpty(Node?.Network.Name))
            {
                @Node.Network.Name
            }
            Lightning Node
        </h1>
    </Titlebar>
</SectionContent>
<section class="container">
    @if (State.Value.LightningNodeState is LightningNodeState.Error)
    {
        <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading">Error</h4>
            <p>There was an error with the lightning node. Please try again later.</p>
        </div>
    }
    else if (State.Value.LightningNodeState is LightningNodeState.Inactive)
    {
        <div class="alert alert-info" role="alert">
            <h4 class="alert-heading">Instance inactive</h4>
            <p>There seems to be another instance of this lightning node running. This instance is inactive.</p>
        </div>
    }
    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <Alert Type="danger" Dismissible>@_errorMessage</Alert>
    }
    else if (!string.IsNullOrEmpty(_successMessage))
    {
        <Alert Type="success" Dismissible>@_successMessage</Alert>
    }
    @if (LightningNodeManager.CanConfigureLightningNode)
    {
        <button class="btn btn-primary" @onclick="ConfigureLNWallet">Configure Lightning Wallet</button>
    }
    else
    {
        <h4 class="d-flex flex-wrap align-items-center gap-2">
            <span>@(_config?.Alias ?? "Lightning Node")</span>
            @if (!string.IsNullOrEmpty(_storePaymentMethodIdentifier) && _storePaymentMethodIdentifier == ConnectionString)
            {
                <span class="badge bg-info">
                    Current lightning payment method for store
                </span>
            }
        </h4>
        @if (Node is not null)
        {
            <div class="form-floating">
                <TruncateCenter Text="@Node.NodeId.ToString()" Padding="15" Copy="true" Elastic="true" class="form-control-plaintext"/>
                <label>Node ID</label>
            </div>
        }

        @if (!string.IsNullOrEmpty(_config?.LightningDerivationPath))
        {
            <div class="form-floating">
                <TruncateCenter Text="@_config.LightningDerivationPath" Padding="15" Copy="true" Elastic="true" class="form-control-plaintext"/>
                <label>Derivation Path</label>
            </div>
        }

        @if (!string.IsNullOrEmpty(ConnectionString))
        {
            <div class="form-floating">
                <TruncateCenter Text="@ConnectionString" Padding="15" Copy="true" Elastic="true" class="form-control-plaintext"/>
                <label>Connection String</label>
            </div>

            @if (!string.IsNullOrEmpty(StoreId) && _storePaymentMethodIdentifier != ConnectionString)
            {
                <button class="btn btn-primary my-3" @onclick="SetStorePaymentMethod">Set as lightning payment method for store</button>
            }
        }

        @if (Node is not null && JITOptions?.Any() is true)
        {
            <div class="form-group mt-4">
                <label for="JITLSP" class="form-label">JIT LSP</label>
                <select class="form-select" @onchange="OnSelectLSP" value="@_config?.JITLSP" id="JITLSP">
                    <option value="">None</option>
                    @foreach (var jit in JITOptions)
                    {
                        <option value="@jit">@jit</option>
                    }
                </select>
            </div>
        }

        <div class="d-grid d-sm-flex flex-wrap gap-3 buttons my-4">
            @if (State.Value.LightningNodeState is LightningNodeState.Init or LightningNodeState.Stopped or LightningNodeState.Error)
            {
                <button class="btn btn-secondary" type="button" @onclick="LightningNodeManager.StartNode">START</button>
            }
            else if (State.Value.LightningNodeState is LightningNodeState.Loaded)
            {
                <button class="btn btn-outline-warning" type="button" @onclick="LightningNodeManager.StopNode">STOP</button>
            }
            @if (Node is not null && State.Value.LightningNodeState is not LightningNodeState.NotConfigured)
            {
                <button class="btn btn-outline-danger" type="button" @onclick="LightningNodeManager.CleanseTask">DESTROY</button>
            }
        </div>
    }
</section>

@code {
    private LightningConfig? _config;
    private LDKNode? Node => LightningNodeManager.Node;
    private string? StoreId => AccountManager.GetCurrentStore()?.Id;
    private string PaymentMethodId => LightningNodeManager.PaymentMethodId;
    private string? _errorMessage;
    private string? _successMessage;
    private string? _storePaymentMethodIdentifier;

    private string? ConnectionString => LightningNodeManager.ConnectionString;
    private string[] JITOptions;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (LightningNodeManager?.Node is not null)
        {
            _config = await LightningNodeManager.Node.GetConfig();
            JITOptions = await LightningNodeManager.Node.GetJITLSPs();
        }

        if (!string.IsNullOrEmpty(StoreId))
            await GetStorePaymentMethod();
    }

    private async Task GetStorePaymentMethod()
    {
        if (string.IsNullOrEmpty(StoreId)) return;
        try
        {
            var pm = await AccountManager.GetClient().GetStorePaymentMethod(StoreId, PaymentMethodId, true);
            _storePaymentMethodIdentifier = GetConnectionString(pm);
        }
        catch (Exception ex)
        {
            Logger.LogDebug(ex, "Payment method {PaymentMethodId} unset for store {StoreId}", PaymentMethodId, StoreId);
        }
    }

    private async Task SetStorePaymentMethod()
    {
        if (string.IsNullOrEmpty(StoreId) || string.IsNullOrEmpty(LightningNodeManager.ConnectionString)) return;
        _successMessage = _errorMessage = null;
        try
        {
            var pm = await AccountManager.GetClient().UpdateStorePaymentMethod(StoreId, PaymentMethodId, new UpdatePaymentMethodRequest
            {
                Enabled = true,
                Config = new JObject
                {
                    ["connectionString"] = ConnectionString
                }
            });
            _storePaymentMethodIdentifier = GetConnectionString(pm);
            _successMessage = "Store payment method set.";
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error setting store payment method: {ex.Message}";
            Logger.LogError(ex, "Error setting payment method {PaymentMethodId} for store {StoreId}", PaymentMethodId, StoreId);
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task ConfigureLNWallet()
    {
        try
        {
            await LightningNodeManager.Generate();
        }
        catch (Exception ex)
        {
            _errorMessage = "Error configuring LN wallet";
            Logger.LogError(ex, "Error configuring LN wallet");
        }
    }

    private async Task OnSelectLSP(ChangeEventArgs obj)
    {
        _config = await LightningNodeManager.Node.GetConfig();
        _config.JITLSP = obj.Value?.ToString();
        await LightningNodeManager.Node.UpdateConfig(_config);
    }

    private string? GetConnectionString(GenericPaymentMethodData? pm)
    {
        return pm?.Config is JObject configObj &&
               configObj.TryGetValue("connectionString", out var connectionStringToken) &&
               connectionStringToken.Value<string>() is {} connectionString
            ? connectionString
            : null;
    }

}
