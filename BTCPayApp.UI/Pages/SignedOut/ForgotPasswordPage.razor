@attribute [Route(Routes.ForgotPassword)]
@attribute [AllowAnonymous]
@layout SimpleLayout
@using BTCPayApp.CommonServer.Models
@using BTCPayApp.Core
@using BTCPayApp.Core.Auth
@using BTCPayApp.UI.Util
@inject BTCPayAppClient AppClient
@inject IAccountManager AccountManager
@inject NavigationManager NavigationManager

<PageTitle>@GetTitle()</PageTitle>

<SectionContent SectionId="_Layout.MainTop">
    <h1>@GetTitle()</h1>
    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <Alert Type="danger">@_errorMessage</Alert>
    }
    else if (!string.IsNullOrEmpty(_successMessage))
    {
        <Alert Type="success">@_successMessage</Alert>
    }
</SectionContent>

<EditForm Model="Model" OnValidSubmit="HandleValidSubmit" FormName="ForgotPassword" method="post">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="Uri" class="form-label">Server URL</label>
        <InputText @bind-Value="Model.Uri" @bind-Value:after="ResolveInstanceInfo" type="url" id="Uri" class="form-control"/>
        <ValidationMessage For="@(() => Model.Uri)" />
    </div>
    <div class="form-group" hidden="@(Model.Mode != ResetPasswordMode.ForgotPassword)">
        <label for="Email" class="form-label">Email</label>
        <InputText @bind-Value="Model.Email" type="email" id="Email" class="form-control"/>
        <ValidationMessage For="@(() => Model.Email)" />
    </div>
    @if (Model.Mode == ResetPasswordMode.ResetPassword)
    {
        <div class="form-group">
            <label for="ResetCode" class="form-label">Reset Code</label>
            <InputText @bind-Value="Model.ResetCode" id="ResetCode" class="form-control"/>
            <ValidationMessage For="@(() => Model.ResetCode)" />
        </div>
        <div class="form-group">
            <label for="NewPassword" class="form-label">New Password</label>
            <InputText @bind-Value="Model.NewPassword" type="password" id="NewPassword" class="form-control"/>
            <ValidationMessage For="@(() => Model.NewPassword)" />
        </div>
        <div class="form-group">
            <label for="ConfirmPassword" class="form-label">Confirm Password</label>
            <InputText @bind-Value="Model.ConfirmPassword" type="password" id="ConfirmPassword" class="form-control"/>
            <ValidationMessage For="@(() => Model.ConfirmPassword)" />
        </div>
    }
    @if (Model.Mode == ResetPasswordMode.Success)
    {
        <NavLink href="@GetLoginUrl()" class="btn btn-secondary w-100">Go To Login</NavLink>
    }
    else
    {
        <button type="submit" class="btn btn-primary w-100" data-testid="ForgotPasswordButton" disabled="@(InstanceInfo == null)">
            @(Model.Mode == ResetPasswordMode.ResetPassword ? "Reset password" : "Send reset email")
        </button>
        <p class="mt-4 text-center">
            <NavLink href="@GetLoginUrl()">Back to login</NavLink>
        </p>
    }
</EditForm>

@code {
    [SupplyParameterFromQuery, EditorRequired]
    public string? ServerUrl { get; set; }

    [SupplyParameterFromQuery]
    public string? Email { get; set; }

    [SupplyParameterFromQuery]
    public bool Reset { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private ResetPasswordModel Model { get; set; } = new();
    private AppInstanceInfo? InstanceInfo { get; set; }

    private string? _errorMessage;
    private string? _successMessage;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(ServerUrl) || !string.IsNullOrEmpty(Email))
        {
            Model.Uri = string.IsNullOrEmpty(ServerUrl) ? null : Uri.UnescapeDataString(ServerUrl);
            Model.Email = string.IsNullOrEmpty(Email) ? null : Uri.UnescapeDataString(Email);
        }
        else
        {
            // See if we had a previous session/account
            var account = AccountManager.GetAccount();
            Model.Email = account?.Email;
        }

        if (Reset && !string.IsNullOrEmpty(Model.Uri) && !string.IsNullOrEmpty(Model.Email))
        {
            Model.Mode = ResetPasswordMode.ResetPassword;
        }

        await ResolveInstanceInfo();
    }

    public async Task HandleValidSubmit()
    {
         _errorMessage = _successMessage = null;

         var result = await AccountManager.ResetPassword(Model.Uri!, Model.Email!, Model.ResetCode, Model.NewPassword);
         if (result.Succeeded)
         {
             if (Model.Mode == ResetPasswordMode.ResetPassword)
             {
                 Model.Mode = ResetPasswordMode.Success;
                 var successMessage = string.Join(",", result.Messages ?? ["Your password has been reset."]);
                 var uri = NavigationManager.GetUriWithQueryParameters(GetLoginUrl(),
                     new Dictionary<string, object?> { {"successMessage", successMessage } } );
                 NavigationManager.NavigateTo(uri);
             }
             else
             {
                 Model.Mode = ResetPasswordMode.ResetPassword;
                 _successMessage = result.Messages != null ? string.Join(",", result.Messages) : null;
             }
         }
         else
         {
             _errorMessage = result.Messages != null
                ? string.Join(",", result.Messages)
                : "Invalid password reset attempt.";
         }
    }

    private async Task ResolveInstanceInfo()
    {
        try
        {
            InstanceInfo = !string.IsNullOrEmpty(Model.Uri)
                ? await AppClient.GetInstanceInfo(Model.Uri)
                : null;

            _errorMessage = !string.IsNullOrEmpty(Model.Uri) && InstanceInfo == null
                ? "This server does not seem to support the BTCPay app."
                : null;
        }
        catch (Exception e)
        {
            _errorMessage = e.InnerException?.Message ?? e.Message;
        }
    }

    public enum ResetPasswordMode
    {
        ForgotPassword,
        ResetPassword,
        Success
    }

    private class ResetPasswordModel
    {
        public ResetPasswordMode Mode { get; set; } = ResetPasswordMode.ForgotPassword;

        [Required]
        [Url]
        public string? Uri { get; set; }

        [Required]
        [EmailAddress]
        public string? Email { get; set; }

        [RequiredIf(nameof(Mode), ResetPasswordMode.ResetPassword)]
        public string? ResetCode { get; set; }

        [DataType(DataType.Password)]
        [RequiredIf(nameof(Mode), ResetPasswordMode.ResetPassword)]
        public string? NewPassword { get; set; }

        [DataType(DataType.Password)]
        [RequiredIf(nameof(Mode), ResetPasswordMode.ResetPassword)]
        [Compare("NewPassword", ErrorMessage = "The password and its confirmation do not match.")]
        public string? ConfirmPassword { get; set; }
    }

    private string GetTitle() => "Forgot your password?";
    private string GetLoginUrl() => NavigationManager.GetUriWithQueryParameters(Routes.Login, new Dictionary<string, object?> { {"serverUrl", Model.Uri } } );
}
