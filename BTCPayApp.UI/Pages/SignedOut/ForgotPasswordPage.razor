@attribute [Route(Routes.ForgotPassword)]
@inherits SignedOutBasePage
@using BTCPayApp.Core.Auth
@using BTCPayApp.UI.Util
@inject IAccountManager AccountManager
@inject NavigationManager NavigationManager

<PageTitle>@GetTitle()</PageTitle>
<AuthorizeView>
    <NotAuthorized>
        <SectionContent SectionId="_Layout.MainTop">
            <InstanceLogo/>
            <h1>@GetTitle()</h1>
            @if (!string.IsNullOrEmpty(Error))
            {
                <Alert Type="danger">@Error</Alert>
            }
            else if (!string.IsNullOrEmpty(SuccessMessage))
            {
                <Alert Type="success">@SuccessMessage</Alert>
            }
        </SectionContent>

        <ValidationEditContext @ref="ValidationEditContext" Model="Model" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group" hidden="@(Model.Mode == PasswordMode.Set)">
                <div class="d-flex justify-content-between">
                    <label for="Uri" class="form-label">Server URL</label>
                    @if (InstanceLoading)
                    {
                        <LoadingIndicator />
                    }
                </div>
                <InputText @bind-Value="Model.Uri" @bind-Value:after="() => ResolveInstanceInfo(Model.Uri)" id="Uri" class="form-control"/>
                <ValidationMessage For="@(() => Model.Uri)" />
            </div>
            <div class="form-group" hidden="@(Model.Mode != PasswordMode.Forgot)">
                <label for="Email" class="form-label">Email</label>
                <InputText @bind-Value="Model.Email" type="email" id="Email" class="form-control"/>
                <ValidationMessage For="@(() => Model.Email)" />
            </div>
            @if (Model.Mode is PasswordMode.Reset or PasswordMode.Set)
            {
                <div class="form-group" hidden="@(Model.Mode == PasswordMode.Set)">
                    <label for="ResetCode" class="form-label">Reset Code</label>
                    <InputText @bind-Value="Model.ResetCode" id="ResetCode" class="form-control"/>
                    <ValidationMessage For="@(() => Model.ResetCode)" />
                </div>
                <div class="form-group">
                    <label for="NewPassword" class="form-label">New Password</label>
                    <InputText @bind-Value="Model.NewPassword" type="password" id="NewPassword" class="form-control"/>
                    <ValidationMessage For="@(() => Model.NewPassword)" />
                </div>
                <div class="form-group">
                    <label for="ConfirmPassword" class="form-label">Confirm Password</label>
                    <InputText @bind-Value="Model.ConfirmPassword" type="password" id="ConfirmPassword" class="form-control"/>
                    <ValidationMessage For="@(() => Model.ConfirmPassword)" />
                </div>
            }
            <button type="submit" class="btn btn-primary w-100" data-testid="ForgotPasswordButton" disabled="@(InstanceInfo == null || Sending)">
                @if (Sending)
                {
                    <LoadingIndicator />
                }
                else
                    switch (Model.Mode)
                    {
                        case PasswordMode.Reset:
                            <span>Reset password</span>
                            break;
                        case PasswordMode.Set:
                            <span>Set password</span>
                            break;
                        default:
                            <span>Send reset email</span>
                            break;
                    }
            </button>
            <p class="mt-4 text-center">
                <NavLink href="@GetLoginUrl()">Back to login</NavLink>
            </p>
        </ValidationEditContext>
    </NotAuthorized>
    <Authorized>
        <RedirectToIndex/>
    </Authorized>
</AuthorizeView>

@code {
    [SupplyParameterFromQuery]
    public string? Email { get; set; }

    [SupplyParameterFromQuery]
    public string? ResetCode { get; set; }

    [SupplyParameterFromQuery]
    public string? Mode { get; set; }

    private ResetPasswordModel Model { get; set; } = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (!string.IsNullOrEmpty(ServerUrl) || !string.IsNullOrEmpty(Email) || !string.IsNullOrEmpty(ResetCode))
        {
            Model.Uri = string.IsNullOrEmpty(ServerUrl) ? null : Uri.UnescapeDataString(ServerUrl);
            Model.Email = string.IsNullOrEmpty(Email) ? null : Uri.UnescapeDataString(Email);
            Model.ResetCode = string.IsNullOrEmpty(ResetCode) ? null : Uri.UnescapeDataString(ResetCode);
        }
        else
        {
            // See if we had a previous session/account
            var account = AccountManager.Account;
            Model.Email = account?.Email;
        }

        if (!string.IsNullOrEmpty(Mode) && Enum.TryParse<PasswordMode>(Mode, true, out var mode))
        {
            Model.Mode = mode;
        }
        else if (!string.IsNullOrEmpty(Model.ResetCode) && !string.IsNullOrEmpty(Model.Uri) && !string.IsNullOrEmpty(Model.Email))
        {
            Model.Mode = PasswordMode.Reset;
        }

        ResolveInstanceInfo(Model.Uri);
    }

    public async Task HandleValidSubmit()
    {
         ErrorMessage = SuccessMessage = null;
         Sending = true;

         var url = GetBaseUri(Model.Uri);
         var result = await AccountManager.ResetPassword(url, Model.Email!, Model.ResetCode, Model.NewPassword);
         Sending = false;

         // user might be signed in after accepting invitation and setting password
         var authState = AuthState != null ? await AuthState : null;
         if (authState?.User.Identity?.IsAuthenticated is true) return;

         if (result.Succeeded)
         {
             if (Model.Mode is PasswordMode.Reset or PasswordMode.Set)
             {
                 var success = Model.Mode == PasswordMode.Set
                    ? "Your account has been created."
                    : string.Join(",", result.Messages ?? ["Your password has been reset."]);
                 var uri = NavigationManager.GetUriWithQueryParameters(GetLoginUrl(),
                     new Dictionary<string, object?> { {"success", success } } );
                 NavigationManager.NavigateTo(uri);
             }
             else
             {
                 Model.Mode = PasswordMode.Reset;
                 SuccessMessage = result.Messages != null ? string.Join(",", result.Messages) : null;
             }
         }
         else
         {
             ErrorMessage = result.Messages != null
                ? string.Join(",", result.Messages)
                : "Invalid password reset attempt.";
         }
    }

    public enum PasswordMode
    {
        Forgot,
        Reset,
        Set
    }

    private class ResetPasswordModel
    {
        public PasswordMode Mode { get; set; } = PasswordMode.Forgot;

        [Required]
        public string? Uri { get; set; }

        [Required]
        [EmailAddress]
        public string? Email { get; set; }

        [RequiredIf(nameof(Mode), PasswordMode.Reset)]
        public string? ResetCode { get; set; }

        [DataType(DataType.Password)]
        [RequiredIf(nameof(Mode), PasswordMode.Reset)]
        public string? NewPassword { get; set; }

        [DataType(DataType.Password)]
        [RequiredIf(nameof(Mode), PasswordMode.Reset)]
        [Compare("NewPassword", ErrorMessage = "The password and its confirmation do not match.")]
        public string? ConfirmPassword { get; set; }
    }

    private string GetTitle()
    {
        return Model.Mode switch
        {
            PasswordMode.Forgot => "Forgot your password?",
            PasswordMode.Reset => "Reset your password",
            PasswordMode.Set => "Set your password",
            _ => ""
        };
    }
    private string GetLoginUrl() => NavigationManager.GetUriWithQueryParameters(Routes.Login, new Dictionary<string, object?> { {"serverUrl", Model.Uri } } );
}
