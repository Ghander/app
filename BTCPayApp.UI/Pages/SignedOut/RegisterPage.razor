@attribute [Route(Routes.Register)]
@attribute [AllowAnonymous]
@layout SimpleLayout
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@using BTCPayApp.CommonServer.Models
@using BTCPayApp.Core.Auth
@using BTCPayApp.UI.Features
@inject IAccountManager AccountManager
@inject NavigationManager NavigationManager
@inject IDispatcher Dispatcher
@inject IState<UIState> UIState

<PageTitle>@GetTitle()</PageTitle>

<SectionContent SectionId="_Layout.MainTop">
    <h1>@GetTitle()</h1>
    @if (!string.IsNullOrEmpty(Error))
    {
        <Alert Type="danger">@Error</Alert>
    }
</SectionContent>

<EditForm Model="Model" OnValidSubmit="HandleValidSubmit" FormName="Register" method="post">
    <DataAnnotationsValidator />
    <div class="form-group">
        <div class="d-flex justify-content-between">
            <label for="Uri" class="form-label">Server URL</label>
            @if (InstanceLoading)
            {
                <LoadingIndicator />
            }
        </div>
        <InputText @bind-Value="Model.Uri" @bind-Value:after="ResolveInstanceInfo" type="url" id="Uri" class="form-control"/>
        <ValidationMessage For="@(() => Model.Uri)" />
    </div>
    <div class="form-group">
        <label for="Email" class="form-label">Email</label>
        <InputText @bind-Value="Model.Email" type="email" id="Email" class="form-control" disabled="@GetRegistrationEnabled()"/>
        <ValidationMessage For="@(() => Model.Email)" />
    </div>
    <div class="form-group">
        <label for="Password" class="form-label">Password</label>
        <InputText @bind-Value="Model.Password" type="password" id="Password" class="form-control" disabled="@GetRegistrationEnabled()"/>
        <ValidationMessage For="@(() => Model.Password)" />
    </div>
    <div class="form-group">
        <label for="ConfirmPassword" class="form-label">Confirm Password</label>
        <InputText @bind-Value="Model.ConfirmPassword" type="password" id="ConfirmPassword" class="form-control" disabled="@GetRegistrationEnabled()"/>
        <ValidationMessage For="@(() => Model.ConfirmPassword)" />
    </div>
    <button type="submit" class="btn btn-primary w-100" data-testid="RegisterButton" disabled="@(GetRegistrationEnabled() || _sending)">
        @if (_sending)
        {
            <LoadingIndicator />
        }
        else
        {
            <span>Create account</span>
        }
    </button>

    <p class="mt-4 text-center">
        <NavLink href="@GetLoginUrl()">Back to login</NavLink>
    </p>
</EditForm>

@code {
    [SupplyParameterFromQuery, EditorRequired]
    public string? ServerUrl { get; set; }

    private RegisterModel Model { get; set; } = new();
    private string? _errorMessage;
    private bool _sending;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (!string.IsNullOrEmpty(ServerUrl))
        {
            Model.Uri = Uri.UnescapeDataString(ServerUrl);
        }

        ResolveInstanceInfo();
    }

    public async Task HandleValidSubmit()
    {
        _errorMessage = null;
        _sending = true;

        var result = await AccountManager.Register(Model.Uri!, Model.Email!, Model.Password!);
        _sending = false;
        if (result.Succeeded)
        {
            var successMessage = string.Join(",", result.Messages ?? ["Account created."]);
            var uri = NavigationManager.GetUriWithQueryParameters(GetLoginUrl(),
                new Dictionary<string, object?> { {"success", successMessage } } );
            NavigationManager.NavigateTo(uri);
        }
        else
        {
            _errorMessage = result.Messages != null
                ? string.Join(",", result.Messages)
                : "Invalid signup attempt.";
        }
    }

    private void ResolveInstanceInfo()
    {
        if (!string.IsNullOrEmpty(Model.Uri) && Model.Uri != InstanceInfo?.BaseUrl)
            Dispatcher.Dispatch(new UIState.FetchInstanceInfo(Model.Uri));
    }

    private class RegisterModel
    {
        [Required]
        [Url]
        public string? Uri { get; set; }

        [Required]
        [EmailAddress]
        public string? Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string? Password { get; set; }

        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "The password and its confirmation do not match.")]
        public string? ConfirmPassword { get; set; }
    }

    private string GetTitle() => $"Create account{(string.IsNullOrEmpty(InstanceInfo?.ServerName) ? null : $" at {InstanceInfo.ServerName}")}";
    private string GetLoginUrl() => NavigationManager.GetUriWithQueryParameters(Routes.Login, new Dictionary<string, object?> { {"serverUrl", Model.Uri } } );
    private bool GetRegistrationEnabled() => InstanceInfo is not { RegistrationEnabled: true };
    private string? Error => _errorMessage ?? InstanceError;

    private AppInstanceInfo? InstanceInfo => UIState.Value.Instance?.Data;
    private string? InstanceError => UIState.Value.Instance?.Error;
    private bool InstanceLoading => UIState.Value.Instance?.Loading is true;
}
