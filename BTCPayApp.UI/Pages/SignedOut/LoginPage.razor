@attribute [Route(Routes.Login)]
@attribute [AllowAnonymous]
@layout SimpleLayout
@using BTCPayApp.CommonServer
@using BTCPayApp.Core
@using BTCPayApp.Core.Auth
@using BTCPayApp.UI.Features
@using BTCPayApp.UI.Util
@inject BTCPayAppClient AppClient
@inject IAccountManager AccountManager
@inject NavigationManager NavigationManager
@inject IDispatcher Dispatcher

<PageTitle>@GetTitle()</PageTitle>

<SectionContent SectionId="_Layout.MainTop">
    <h1>@GetTitle()</h1>
    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <Alert Type="danger">@_errorMessage</Alert>
    }
    else if (!string.IsNullOrEmpty(_successMessage))
    {
        <Alert Type="success">@_successMessage</Alert>
    }
</SectionContent>

<EditForm Model="@Model" OnValidSubmit="HandleValidSubmit" FormName="Login" method="post">
    <DataAnnotationsValidator />
    <div class="mb-3" hidden="@Model.RequireTwoFactor">
        <label for="Uri" class="form-label">Server URL</label>
        <InputText @bind-Value="Model.Uri" @bind-Value:after="ResolveInstanceInfo" type="url" id="Uri" class="form-control"/>
        <ValidationMessage For="@(() => Model.Uri)" />
    </div>
    <div class="mb-3" hidden="@Model.RequireTwoFactor">
        <label for="Email" class="form-label">Email</label>
        <InputText @bind-Value="Model.Email" type="email" id="Email" class="form-control"/>
        <ValidationMessage For="@(() => Model.Email)" />
    </div>
    <div class="mb-3" hidden="@Model.RequireTwoFactor">
        <label for="Password" class="form-label">Password</label>
        <InputText @bind-Value="Model.Password" type="password" id="Password" autocomplete="current-password" class="form-control"/>
        <ValidationMessage For="@(() => Model.Password)" />
    </div>
    @if (Model.RequireTwoFactor)
    {
        <div class="mb-3">
            <label for="TwoFactorCode" class="form-label">Two Factor Code</label>
            <InputText @bind-Value="Model.TwoFactorCode" type="number" id="TwoFactorCode" autocomplete="one-time-code" class="form-control hide-number-spin"/>
            <ValidationMessage For="@(() => Model.TwoFactorCode)" />
        </div>
    }
    <button type="submit" class="btn btn-primary w-100" data-testid="LoginButton" disabled="@(InstanceInfo == null)">Login</button>

    @if (!Model.RequireTwoFactor && InstanceInfo != null)
    {
        <p class="mt-4 text-center">
            <NavLink href="@GetForgotPasswordUrl()">Forgot your password?</NavLink>
        </p>

        @if (InstanceInfo.RegistrationEnabled)
        {
            <p class="mt-4 text-center">
                <NavLink href="@GetRegisterUrl()">Register new account</NavLink>
            </p>
        }
    }
</EditForm>

@code {
    [SupplyParameterFromQuery]
    public string? ServerUrl { get; set; }

    [SupplyParameterFromQuery]
    public string? Success { get; set; }

    private string? _errorMessage;
    private string? _successMessage;

    private LoginModel Model { get; set; } = new();
    private AppInstanceInfo? InstanceInfo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Success))
        {
            _successMessage = Uri.UnescapeDataString(Success);
        }

        if (!string.IsNullOrEmpty(ServerUrl))
        {
            Model.Uri = Uri.UnescapeDataString(ServerUrl);
        }

        // See if we had a previous session/account
        var account = AccountManager.GetAccount();
        if (string.IsNullOrEmpty(ServerUrl) || Model.Uri == account?.BaseUri)
        {
            Model.Uri = account?.BaseUri;
            Model.Email = account?.Email;
        }

        await ResolveInstanceInfo();
    }

    public async Task HandleValidSubmit()
    {
        _errorMessage = null;

        var result = await AccountManager.Login(Model.Uri!, Model.Email!, Model.Password!, Model.TwoFactorCode);
        if (result.Succeeded)
        {
            NavigationManager.NavigateTo(Routes.Index);
        }
        else
        {
            if (result.Messages?.Contains("RequiresTwoFactor") is true)
                Model.RequireTwoFactor = true;
            else
                _errorMessage = result.Messages?.Contains("Failed") is false
                    ? string.Join(",", result.Messages)
                    : "Invalid login attempt.";
        }
    }

    private async Task ResolveInstanceInfo()
    {
        try
        {
            InstanceInfo = !string.IsNullOrEmpty(Model.Uri)
                ? await AppClient.Get<AppInstanceInfo>(Model.Uri, "instance")
                : null;

            _errorMessage = !string.IsNullOrEmpty(Model.Uri) && InstanceInfo == null
                ? "This server does not seem to support the BTCPay app."
                : null;
        }
        catch (Exception e)
        {
            InstanceInfo = null;
            _errorMessage = e.InnerException?.Message ?? e.Message;
        }

        Dispatcher.Dispatch(new UIState.SetInstance(InstanceInfo));
    }

    private class LoginModel
    {
        public bool RequireTwoFactor { get; set; }

        [Required]
        [Url]
        public string? Uri { get; set; }

        [Required]
        [EmailAddress]
        public string? Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string? Password { get; set; }

        [RequiredIf(nameof(RequireTwoFactor), true)]
        public string? TwoFactorCode { get; set; }
    }

    private string GetTitle() => $"Login to {InstanceInfo?.ServerName ?? "a BTCPay Server"}";
    private string GetRegisterUrl() => NavigationManager.GetUriWithQueryParameters(Routes.Register, new Dictionary<string, object?> { {"serverUrl", Model.Uri } } );
    private string GetForgotPasswordUrl() => NavigationManager.GetUriWithQueryParameters(Routes.ForgotPassword, new Dictionary<string, object?> { {"serverUrl", Model.Uri } } );
}
