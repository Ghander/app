@attribute [Route(Routes.Connect)]
@inherits SignedOutBasePage
@inject NavigationManager NavigationManager

<AuthorizeView>
    <NotAuthorized>
        <PageTitle>@GetTitle()</PageTitle>
        <SectionContent SectionId="_Layout.MainTop">
            <h1>@GetTitle()</h1>
            @if (!string.IsNullOrEmpty(Error))
            {
                <Alert Type="danger">@Error</Alert>
            }
        </SectionContent>

        <ValidationEditContext @ref="ValidationEditContext" Model="Model" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <div class="d-flex justify-content-between mb-3">
                    <label for="Uri" class="form-label mb-0">Enter or scan your server URL or invite link.</label>
                    @if (InstanceLoading)
                    {
                        <LoadingIndicator />
                    }
                </div>
                <div class="d-flex align-items-center justify-content-between gap-3">
                    <InputText @bind-Value="Model.Uri" @bind-Value:after="() => ResolveInstanceInfo(Model.Uri)" id="Uri" class="form-control flex-grow-1" placeholder="Enter server URL or invite link"/>
                    <button type="button" class="btn btn-secondary px-3" data-testid="ScanButton" data-bs-toggle="modal" data-bs-target="#ScanQrCodeModal">
                        <Icon Symbol="scan-qr"/>
                    </button>
                </div>
                <ValidationMessage For="@(() => Model.Uri)"/>
            </div>
            <button type="submit" class="btn btn-primary w-100" data-testid="ConnectButton" disabled="@(InstanceInfo == null || Sending)">
                @if (Sending)
                {
                    <LoadingIndicator />
                }
                else
                {
                    <span>Connect</span>
                }
            </button>
        </ValidationEditContext>
        <QrScanModal OnScan="@OnQrCodeScan"/>
    </NotAuthorized>
    <Authorized>
        <RedirectToIndex/>
    </Authorized>
</AuthorizeView>

@code {
    ConnectModel Model { get; set; } = new();

    private async Task HandleValidSubmit()
    {
        if (await HandleInput(Model.Uri!)) return;
        var loginUri = NavigationManager.GetUriWithQueryParameters(Routes.Login, new Dictionary<string, object?> { {"serverUrl", Model.Uri } } );
        NavigationManager.NavigateTo(loginUri);
    }

    private class ConnectModel
    {
        [Url, Required]
        public string? Uri { get; set; }
    }

    private string GetTitle() => $"Connect to {InstanceInfo?.ServerName ?? "a BTCPay Server"}";
}
