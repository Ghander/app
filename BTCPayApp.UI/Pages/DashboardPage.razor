@attribute [Route(Routes.Dashboard)]
@using BTCPayApp.UI.Features
@using BTCPayApp.UI.Util
@using BTCPayServer.Client
@using BTCPayServer.Client.Models
@using BTCPayServer.Lightning
@using NBitcoin
@inject IJSRuntime JS
@inject IDispatcher Dispatcher
@inject IState<UIState> UIState
@inject IState<StoreState> StoreState
@inject IActionSubscriber ActionSubscriber
@inject DisplayFormatter DisplayFormatter
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Dashboard</PageTitle>
<section class="container py-4">
    <header class="d-flex align-items-center justify-content-between gap-3 mb-4 mt-n2">
        <AccountSwitch />
        <div class="notifications">
            @if (!string.IsNullOrEmpty(StoreId))
            {
                <NotificationsBell/>
            }
        </div>
    </header>
    @if (!string.IsNullOrEmpty(_successMessage))
    {
        <Alert Type="success" Margin="0" Dismissible>@_successMessage</Alert>
    }
    <AuthorizeView Policy="@Policies.CanModifyStoreSettings" Resource="StoreId">
        <div class="d-flex flex-column gap-4 wallet">
            @if (TotalBalance != null)
            {
                <div class="amount text-center">
                    <div class="sats fw-bold fs-1" @onclick="ToggleDisplayCurrency">@DisplayFormatter.Currency(TotalBalance.Value, BitcoinUnit, DisplayFormatter.CurrencyFormat.Symbol)</div>
                    @if (CurrencyValue.HasValue)
                    {
                        <div class="fiat fw-semibold text-muted">~ @DisplayFormatter.Currency(CurrencyValue.Value, Currency, DisplayFormatter.CurrencyFormat.Symbol)</div>
                    }
                </div>
            }
            else if (!string.IsNullOrEmpty(BalanceError))
            {
                <div class="p-3 text-center">
                    <LoadingIndicator/>
                </div>
            }
            <div id="Histogram" class="ct-chart"></div>
        </div>
    </AuthorizeView>
    <AuthorizeView Policy="@Policies.CanViewInvoices" Resource="StoreId">
        @if (InvoicesLoading || Invoices is not null)
        {
            <div class="invoices">
                <h2>Recent Invoices</h2>
                <InvoiceList Invoices="Invoices" Loading="InvoicesLoading" Error="@InvoicesError"/>
            </div>
        }
    </AuthorizeView>
</section>

@code {
    [SupplyParameterFromQuery]
    public string? Success { get; set; }

    private string? _successMessage;
    private Action? _updateChart;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (!string.IsNullOrEmpty(Success))
        {
            _successMessage = Uri.UnescapeDataString(Success);
        }

        ActionSubscriber.SubscribeToAction<UIState.ToggleBitcoinUnit>(this, action => _updateChart?.Invoke());
        ActionSubscriber.SubscribeToAction<StoreState.SetOnchainHistogram>(this, action => _updateChart?.Invoke());
        ActionSubscriber.SubscribeToAction<StoreState.SetLightningHistogram>(this, action => _updateChart?.Invoke());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        _updateChart = () =>
        {
            if (Histogram != null)
                JS.InvokeVoidAsync("Interop.renderLineChart", "#Histogram", Histogram.Labels, Histogram.Series, "BTC", BitcoinUnit, null, Currency);
        };
        _updateChart?.Invoke();
    }

    protected override ValueTask DisposeAsyncCore(bool disposing)
    {
        base.DisposeAsyncCore(disposing);

        ActionSubscriber.UnsubscribeFromAllActions(this);

        return ValueTask.CompletedTask;
    }

    private void ToggleDisplayCurrency()
    {
        Dispatcher.Dispatch(new UIState.ToggleBitcoinUnit());
    }

    private IEnumerable<InvoiceData>? Invoices => StoreState.Value.Invoices?.Data?.Take(5);
    private bool InvoicesLoading => StoreState.Value.Invoices?.Loading is true;
    private string? InvoicesError => StoreState.Value.Invoices?.Error;
    private string? StoreId => StoreState.Value.StoreInfo?.Id;
    private string? Currency => StoreState.Value.StoreInfo?.DefaultCurrency;
    private string? BalanceError => StoreState.Value.OnchainBalance?.Error ?? StoreState.Value.LightningBalance?.Error;
    private OnChainWalletOverviewData? OnchainBalance => StoreState.Value.OnchainBalance?.Data;
    private decimal? OnchainConfirmedBalance => OnchainBalance == null ? null : new Money(OnchainBalance.ConfirmedBalance, MoneyUnit.BTC).ToDecimal(UnitMoney);
    private decimal? OnchainUnconfirmedBalance => OnchainBalance == null ? null : new Money(OnchainBalance.UnconfirmedBalance, MoneyUnit.BTC).ToDecimal(UnitMoney);
    private LightningNodeBalanceData? LightningBalance => StoreState.Value.LightningBalance?.Data;
    private decimal? LightningOnchainBalance => LightningBalance?.OnchainBalance?.Confirmed.ToDecimal(UnitMoney);
    private decimal? LightningOffchainBalance => LightningBalance?.OffchainBalance.Local.ToDecimal(UnitLightMoney);
    private decimal? TotalBalance => OnchainBalance == null && LightningBalance == null
        ? null
        : (OnchainConfirmedBalance ?? 0) + (OnchainUnconfirmedBalance ?? 0) + (LightningOnchainBalance ?? 0) + (LightningOffchainBalance ?? 0);
    private decimal? Rate => StoreState.Value.Rates?.Data?.FirstOrDefault()?.Rate;
    private decimal? CurrencyValue => TotalBalance != null && Rate.HasValue && !string.IsNullOrEmpty(Currency)
        ? new Money(TotalBalance.Value, UnitMoney).ToDecimal(MoneyUnit.BTC) * Rate.Value
        : null;

    private HistogramData? Histogram => StoreState.Value.UnifiedHistogram;
    private string BitcoinUnit => UIState.Value.BitcoinUnit;
    private MoneyUnit UnitMoney => BitcoinUnit == CurrencyUnit.BTC ? MoneyUnit.BTC : MoneyUnit.Satoshi;
    private LightMoneyUnit UnitLightMoney => BitcoinUnit == CurrencyUnit.BTC ? LightMoneyUnit.BTC : LightMoneyUnit.Satoshi;
}
