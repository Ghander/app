@attribute [Route(Routes.Dashboard)]
@using BTCPayApp.UI.Features
@using BTCPayApp.CommonServer
@using BTCPayApp.Core.Attempt2
@using BTCPayApp.Core.Auth
@using BTCPayApp.Core.Data
@using Microsoft.AspNetCore.SignalR.Client
@inject IAccountManager AccountManager
@inject IState<RootState> State
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Dashboard</PageTitle>

<AuthorizeView>
    <Authorized>
        <header class="container d-flex align-items-center justify-content-between py-2 px-4">
            <div class="d-flex align-items-center justify-content-between gap-2">
                <div class="status">
                    @if (SetupStateOverall() == SetupState.Undetermined)
                    {
                        <div class="spinner-border spinner-border-sm" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    }
                    else
                    {
                        <a href="@Routes.Wallet">
                            <span class="btcpay-status btcpay-status--@(SetupStateOverall() == SetupState.Completed ? "enabled" : (SetupStateOverall() == SetupState.Failed ? "disabled" : "pending"))"></span>
                        </a>
                    }
                </div>
                <div class="fw-semibold">
                    @context.User.Identity?.Name
                </div>
                <NavLink class="btn btn-sm rounded-pill py-1 px-3 btn-outline-light" href="@Routes.Logout" Match="NavLinkMatch.All">
                    <span>Logout</span>
                </NavLink>
            </div>
            <div class="notifications">
                <NavLink class="btn btn-light rounded-circle" href="@Routes.Notifications" Match="NavLinkMatch.All">
                    <Icon symbol="nav-notifications"/>
                    <span class="visually-hidden">Notifications</span>
                </NavLink>
            </div>
        </header>
        <section class="container d-flex flex-column gap-4 py-3">
            <div class="amount text-center">
                <div class="sats fw-bold fs-1">615,000,000 sats</div>
                <div class="fiat fw-semibold text-muted">$174,465.79</div>
            </div>
            <nav class="d-flex align-items-center gap-3 mx-auto">
                <NavLink class="btn btn-light rounded-pill w-125px" href="@Routes.WalletSend" Match="NavLinkMatch.All">
                    <Icon symbol="payment-send"/>
                    <span>Send</span>
                </NavLink>
                <NavLink class="btn btn-light rounded-pill w-125px" href="@Routes.WalletReceive" Match="NavLinkMatch.All">
                    <Icon symbol="payment-receive"/>
                    <span>Receive</span>
                </NavLink>
            </nav>
        </section>
        <section class="container py-3">
            <h2>Getting started</h2>
            <div class="box">
                <ul class="list-group list-group-flush list-group-links">
                    <li class="list-group-item @(SetupStateOnchain() == SetupState.Undetermined ? "disabled" : null)" aria-disabled="@(SetupStateOnchain() == SetupState.Undetermined ? "true" : null)" data-state="@SetupStateLightning().ToString().ToLowerInvariant()">
                        <NavLink class="nav-link" href="@Routes.Wallet" Match="NavLinkMatch.All">
                            <span>Set up wallet</span>
                            @switch (SetupStateOnchain())
                            {
                                case SetupState.Undetermined:
                                    <div class="spinner-border spinner-border-sm" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                    break;
                                case SetupState.Completed:
                                    <Icon symbol="done"/>
                                    break;
                                default:
                                    <Icon symbol="caret-right"/>
                                    break;
                            }
                        </NavLink>
                    </li>
                    <li class="list-group-item @(SetupStateLightning() == SetupState.Undetermined ? "disabled" : null)" aria-disabled="@(SetupStateLightning() == SetupState.Undetermined ? "true" : null)" data-state="@SetupStateLightning().ToString().ToLowerInvariant()">
                        <NavLink class="nav-link" href="@Routes.Wallet" Match="NavLinkMatch.All">
                            <span>Configure node</span>
                            @switch (SetupStateLightning())
                            {
                                case SetupState.Undetermined:
                                    <div class="spinner-border spinner-border-sm" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                    break;
                                case SetupState.Completed:
                                    <Icon symbol="done"/>
                                    break;
                                case SetupState.Failed:
                                    <Icon symbol="warning"/>
                                    break;
                                default:
                                    <Icon symbol="caret-right"/>
                                    break;
                            }
                        </NavLink>
                    </li>
                    @*
                    <li class="list-group-item">
                        <NavLink class="nav-link" href="#" Match="NavLinkMatch.All">
                            <span>Set up recovery tools</span>
                            <Icon symbol="caret-right"/>
                        </NavLink>
                    </li>
                    <li class="list-group-item">
                        <NavLink class="nav-link" href="#" Match="NavLinkMatch.All">
                            <span>Configure LSP</span>
                            <Icon symbol="caret-right"/>
                        </NavLink>
                    </li>
                    *@
                </ul>
            </div>
        </section>
        <section class="container py-3">
            <h2>Recent Activity</h2>
            <ul class="list-group list-group-flush">
                <li class="list-group-item">
                    <div class="d-flex align-items-center justify-content-between mb-1">
                        <TruncateCenter Text="CDOy6cOibCWEdsRiZuaHf8dSGGJRYuBGC" Link="@Routes.InvoicePath("CDOy6cOibCWEdsRiZuaHf8dSGGJRYuBGC")"/>
                        <span class="text-end">$29.13</span>
                    </div>
                    <div class="d-flex align-items-center justify-content-between">
                        <span class="text-muted">
                            <DateDisplay DateTimeOffset="@(DateTimeOffset.Now - TimeSpan.FromMinutes(21))" />
                        </span>
                        <span class="text-muted text-end">177,032 sats</span>
                    </div>
                </li>
                <li class="list-group-item">
                    <div class="d-flex align-items-center justify-content-between mb-1">
                        <TruncateCenter Text="WpYu7PQz4QOOjznTuLwp1PNZXZKP8U1pB2" Link="@Routes.InvoicePath("WpYu7PQz4QOOjznTuLwp1PNZXZKP8U1pB2")"/>
                        <span class="text-end">$29.13</span>
                    </div>
                    <div class="d-flex align-items-center justify-content-between">
                        <span class="text-muted">
                            <DateDisplay DateTimeOffset="@(DateTimeOffset.Now - TimeSpan.FromHours(6))" />
                        </span>
                        <span class="text-muted text-end">177,032 sats</span>
                    </div>
                </li>
            </ul>
        </section>
    </Authorized>
    <Authorizing>
        <section class="d-flex justify-content-center min-vh-100">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Authorizing...</span>
            </div>
        </section>
    </Authorizing>
</AuthorizeView>

@code {
    private AppUserInfo? _userInfo;

    protected override Task OnInitializedAsync()
    {
        _userInfo = AccountManager.GetUserInfo();
        return Task.CompletedTask;
    }

    private bool IsLoading => State.Value.Loading.Any();

    private enum SetupState
    {
        Undetermined,
        Pending,
        Completed,
        Failed
    }

    private SetupState SetupStateOnchain() {
        if (State.Value.Loading.Contains(RootState.LoadingHandles.LightningState) ||
            State.Value.OnchainWalletState is OnChainWalletState.Init or OnChainWalletState.Loading ||
            State.Value.BTCPayServerConnectionState != HubConnectionState.Connected) return SetupState.Undetermined;
        return State.Value.OnchainWalletState == OnChainWalletState.Loaded ? SetupState.Completed : SetupState.Pending;
    }

    private SetupState SetupStateLightning() {
        if (State.Value.Loading.Contains(RootState.LoadingHandles.WalletState) ||
            State.Value.LightningNodeState is LightningNodeState.Init or LightningNodeState.Loading ||
            State.Value.BTCPayServerConnectionState != HubConnectionState.Connected) return SetupState.Undetermined;
        if (State.Value.LightningNodeState is LightningNodeState.Error or LightningNodeState.Stopped) return SetupState.Failed;
        return State.Value.LightningNodeState == LightningNodeState.Loaded ? SetupState.Completed : SetupState.Pending;
    }

    private SetupState SetupStateOverall() {
        if (SetupStateOnchain() == SetupState.Undetermined || SetupStateLightning() == SetupState.Undetermined) return SetupState.Undetermined;
        if (SetupStateOnchain() == SetupState.Completed || SetupStateLightning() == SetupState.Completed) return SetupState.Completed;
        if (SetupStateOnchain() == SetupState.Failed || SetupStateLightning() == SetupState.Failed) return SetupState.Failed;
        return SetupState.Pending;
    }
}
