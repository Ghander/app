@attribute [Route(Routes.Dashboard)]
@using BTCPayApp.UI.Features
@using BTCPayApp.UI.Auth
@using BTCPayApp.CommonServer
@using BTCPayApp.UI.Components.Layout
@inject IAccountManager AccountManager
@inject IState<RootState> State
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Dashboard</PageTitle>

<SectionContent SectionName="top">
    <Titlebar>
        <h1>Dashboard</h1>
    </Titlebar>
</SectionContent>

<section class="container">
    @if (IsInitialized && !IsLoading)
    {
    <AuthorizeView>
        <Authorized>
            <h1>Hello, @context.User.Identity?.Name!</h1>

            @if (_userInfo != null)
            {
            <div class="mb-4">
                ID: @_userInfo.UserId<br />
                Email: @_userInfo.Email<br />
                Roles: @(_userInfo.Roles?.Any() is true ? string.Join(", ", _userInfo.Roles) : "none")
            </div>

            if (_userInfo.Stores?.Any() is true)
            {
            <ul>
                @foreach (var store in _userInfo.Stores)
                {
                <li>
                    <div>
                        <strong>@store.Name</strong>
                        <span class="badge bg-light">@store.RoleId</span>
                        @if (store.Archived)
                        {
                        <span class="badge bg-info">archived</span>
                        }
                    </div>
                    <div></div>

                    @if (store.Permissions?.Any() is true)
                    {
                    <ul>
                        @foreach (var permission in store.Permissions)
                        {
                        <li>@permission</li>
                        }
                    </ul>
                    }
                    else
                    {
                    <div class="text-secondary">No permissions</div>
                    }
                </li>
                }
            </ul>
            }
            else
            {
            <p class="text-secondary">No stores</p>
            }
            }
        </Authorized>
    </AuthorizeView>

    @*if (State.Value.PairConfig is null && State.Value.WalletConfig is null)
    {
        <Onboarding />
    }
    else
    {
        <Dashboard />
    }*@
    }
</section>

@code {
    private AppUserInfo? _userInfo;

    private bool IsInitialized => State.Value.PairConfigRequested && State.Value.WalletConfigRequested;
    private bool IsLoading => State.Value.Loading.Contains(RootState.LoadingHandles.PairConfig) ||
                              State.Value.Loading.Contains(RootState.LoadingHandles.WalletConfig);

    protected override Task OnInitializedAsync()
    {
        _userInfo = AccountManager.GetUserInfo();
        return Task.CompletedTask;
    }
}
