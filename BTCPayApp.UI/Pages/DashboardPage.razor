@attribute [Route(Routes.Dashboard)]
@using BTCPayApp.CommonServer.Models
@using BTCPayApp.Core
@using BTCPayApp.Core.Attempt2
@using BTCPayApp.Core.Auth
@using BTCPayApp.UI.Features
@using BTCPayServer.Client.Models
@using BTCPayServer.Services
@using NBitcoin
@inject IState<RootState> State
@inject IState<StoreState> StoreState
@inject IAccountManager AccountManager
@inject OnChainWalletManager OnChainWalletManager
@inject DisplayFormatter DisplayFormatter
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Dashboard</PageTitle>

<AuthorizeView>
    <Authorized>
        <header class="container d-flex align-items-center justify-content-between py-2">
            <div class="d-flex align-items-center justify-content-between gap-2">
                <SetupStatus @ref="_setupStatus" />
                <div class="fw-semibold">
                    @context.User.Identity?.Name
                </div>
            </div>
            <div class="notifications">
                <NotificationsBell />
            </div>
        </header>
        @if (!string.IsNullOrEmpty(_successMessage))
        {
            <section class="container py-3">
                <Alert Type="success" Margin="0" Dismissible>@_successMessage</Alert>
            </section>
        }
        @if (SetupStateOnchain == SetupState.Completed)
        {
            <section class="container d-flex flex-column gap-4 wallet">
                @if (_balance == null)
                {
                    <div class="p-3 text-center">
                        <LoadingIndicator/>
                    </div>
                }
                else
                {
                    <div class="amount text-center">
                        <div class="sats fw-bold fs-1">@_balance.ToUnit(MoneyUnit.Satoshi) sats</div>
                        @if (CurrencyValue.HasValue)
                        {
                            <div class="fiat fw-semibold text-muted">@DisplayFormatter.Currency(CurrencyValue.Value, Currency, DisplayFormatter.CurrencyFormat.Symbol)</div>
                        }
                    </div>
                    <nav class="d-flex flex-wrap align-items-center gap-3 mx-auto">
                        <a class="btn btn-light rounded-pill" href="@Routes.WalletSend">
                            <Icon symbol="payment-send"/>
                            <span>Send</span>
                        </a>
                        <a class="btn btn-light rounded-pill" href="@Routes.WalletReceive">
                            <Icon symbol="payment-receive"/>
                            <span>Receive</span>
                        </a>
                    </nav>
                }
            </section>
        }
        <section class="container">
            <h2>Getting Started</h2>
            <div class="box">
                <ul class="list-group list-group-flush list-group-links">
                    <li class="list-group-item @(SetupStateConnection == SetupState.Undetermined ? "disabled" : null)" aria-disabled="@(SetupStateConnection == SetupState.Undetermined ? "true" : null)" data-state="@SetupStateConnection.ToString().ToLowerInvariant()">
                        <NavLink class="nav-link" href="@(SetupStateAccount == SetupState.Completed ? Routes.StorePath(AccountManager.GetCurrentStore()!.Id) : Routes.SelectStore)" Match="NavLinkMatch.All">
                            <span>Connect a store</span>
                            @switch (SetupStateConnection)
                            {
                                case SetupState.Failed:
                                    <Icon symbol="warning" class="text-warning"/>
                                    break;
                                case SetupState.Pending:
                                case SetupState.Undetermined:
                                    <LoadingIndicator />
                                    break;
                                default:
                                    <Icon symbol="@(SetupStateAccount == SetupState.Completed ? "done" : "caret-right")"/>
                                    break;
                            }
                        </NavLink>
                    </li>
                    <li class="list-group-item @(SetupStateOnchain == SetupState.Undetermined ? "disabled" : null)" aria-disabled="@(SetupStateOnchain == SetupState.Undetermined ? "true" : null)" data-state="@SetupStateOnchain.ToString().ToLowerInvariant()">
                        <NavLink class="nav-link" href="@(SetupStateOnchain == SetupState.Completed ? Routes.Wallet : Routes.WalletSetup)" Match="NavLinkMatch.All">
                            <span>Set up wallet</span>
                            @switch (SetupStateOnchain)
                            {
                                case SetupState.Undetermined:
                                    <LoadingIndicator />
                                    break;
                                case SetupState.Completed:
                                    <Icon symbol="done"/>
                                    break;
                                default:
                                    <Icon symbol="caret-right"/>
                                    break;
                            }
                        </NavLink>
                    </li>
                    <li class="list-group-item @(SetupStateLightning == SetupState.Undetermined ? "disabled" : null)" aria-disabled="@(SetupStateLightning == SetupState.Undetermined ? "true" : null)" data-state="@SetupStateLightning.ToString().ToLowerInvariant()">
                        <NavLink class="nav-link" href="@(SetupStateLightning == SetupState.Completed ? Routes.Lightning : Routes.LightningSetup)" Match="NavLinkMatch.All">
                            <span>Configure node</span>
                            @switch (SetupStateLightning)
                            {
                                case SetupState.Undetermined:
                                    <LoadingIndicator />
                                    break;
                                case SetupState.Completed:
                                    <Icon symbol="done"/>
                                    break;
                                case SetupState.Failed:
                                    <Icon symbol="warning" class="text-warning"/>
                                    break;
                                default:
                                    <Icon symbol="caret-right"/>
                                    break;
                            }
                        </NavLink>
                    </li>
                    @*
                    <li class="list-group-item">
                        <NavLink class="nav-link" href="#" Match="NavLinkMatch.All">
                            <span>Set up recovery tools</span>
                            <Icon symbol="caret-right"/>
                        </NavLink>
                    </li>
                    <li class="list-group-item">
                        <NavLink class="nav-link" href="#" Match="NavLinkMatch.All">
                            <span>Configure LSP</span>
                            <Icon symbol="caret-right"/>
                        </NavLink>
                    </li>
                    *@
                </ul>
            </div>
        </section>

        @if (StoreState.Value.StoreInfo is not null && InvoicesLoading || Invoices is not null)
        {
            <section class="container">
                <h2>Recent Invoices</h2>
                <div class="box">
                    @if (InvoicesLoading)
                    {
                        <div class="p-3 text-center">
                            <LoadingIndicator/>
                        </div>
                    }
                    @if (Invoices is not null)
                    {
                        @if (Invoices.Any())
                        {
                            <div class="list-group list-group-flush invoices">
                                @foreach (var i in Invoices)
                                {
                                    <InvoiceItem Invoice="@i"/>
                                }
                            </div>
                        }
                        else if (!string.IsNullOrEmpty(InvoicesError))
                        {
                            <Alert Type="danger">@InvoicesError</Alert>
                        }
                        else
                        {
                            <p class="text-muted py-3">There are no invoices, yet.</p>
                        }
                    }
                </div>
            </section>
        }
    </Authorized>
</AuthorizeView>

@code {
    [SupplyParameterFromQuery]
    public string? Success { get; set; }

    private AppUserInfo? _userInfo;
    private BTCPayAccount? _account;
    private SetupStatus? _setupStatus;
    private Money? _balance;

    private string? _successMessage;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Success))
        {
            _successMessage = Uri.UnescapeDataString(Success);
        }

        _userInfo = AccountManager.GetUserInfo();
        _account = AccountManager.GetAccount();

        OnChainWalletManager.StateChanged += RefreshBalance;
        if (OnChainWalletManager.State == OnChainWalletState.Loaded) await GetBalance();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // ensure the ElementReference is set
        if (firstRender) StateHasChanged();
    }

    private async Task RefreshBalance(object? sender, (OnChainWalletState Old, OnChainWalletState New) e)
    {
        if (e is { New: OnChainWalletState.Loaded }) await GetBalance();
    }

    private async Task GetBalance()
    {
        try
        {
            var resp = await OnChainWalletManager.GetUTXOS();
            _balance = new Money(resp.Sum(r => r.TxOut.Value.ToDecimal(MoneyUnit.BTC)), MoneyUnit.BTC);
        }
        catch (Exception ex)
        {
            _balance = null;
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private SetupState? SetupStateConnection => _setupStatus?.SetupStateConnection() ?? SetupState.Undetermined;
    private SetupState? SetupStateAccount => _setupStatus?.SetupStateAccount() ?? SetupState.Undetermined;
    private SetupState? SetupStateOnchain => _setupStatus?.SetupStateOnchain() ?? SetupState.Undetermined;
    private SetupState? SetupStateLightning => _setupStatus?.SetupStateLightning() ?? SetupState.Undetermined;

    private IEnumerable<InvoiceData>? Invoices => StoreState.Value.Invoices?.Data?.Take(5);
    private bool InvoicesLoading => StoreState.Value.Invoices?.Loading is true;
    private string? InvoicesError => StoreState.Value.Invoices?.Error;

    private string? Currency => StoreState.Value.StoreInfo?.DefaultCurrency;
    private decimal? Rate => StoreState.Value.Rates?.Data?.FirstOrDefault()?.Rate;
    private decimal? CurrencyValue => _balance != null && Rate.HasValue && !string.IsNullOrEmpty(Currency)
        ? _balance.ToDecimal(MoneyUnit.BTC) * Rate.Value
        : null;
}
