@attribute [Route(Routes.Funds)]
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@using BTCPayApp.CommonServer.Models
@using BTCPayApp.UI.Features
@using BTCPayApp.UI.Components.Layout
@using NBitcoin
@using BTCPayApp.UI.Util
@using BTCPayServer.Client.Models
@using BTCPayServer.Lightning
@inject IDispatcher Dispatcher
@inject IState<UIState> UIState
@inject IState<StoreState> StoreState
@inject DisplayFormatter DisplayFormatter

<PageTitle>@GetTitle()</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back>
        <h1>@GetTitle()</h1>
    </Titlebar>
</SectionContent>
<section class="container">
    <AuthorizeView Resource="StoreId">
        <WalletOverview BitcoinBalance="@TotalBalance" BitcoinUnit="@BitcoinUnit" MoneyUnit="@UnitMoney" Histogram="@Histogram"
                        Currency="@Currency" Rate="@Rate" Error="@BalanceError" OnBalanceClick="ToggleDisplayCurrency"
                        class="my-3"/>

        @if (OnchainConfirmedBalance != null || OnchainUnconfirmedBalance != null)
        {
            <header class="mt-5 mb-0 d-flex align-items-center justify-content-between">
                <h4 class="mb-0">Onchain</h4>
                @if (OnchainTotalBalance is > 0)
                {
                    <a href="@Routes.Send" class="bg-light rounded-pill px-4 py-2 fw-semibold" disabled>Send onchain</a>
                }
            </header>
            <ul class="list-group list-group-flush list-group-links">
                @if (OnchainConfirmedBalance != null)
                {
                    <li class="list-group-item py-2">
                        @DisplayFormatter.Currency(OnchainConfirmedBalance.Value, BitcoinUnit, DisplayFormatter.CurrencyFormat.Symbol) confirmed
                    </li>
                }
                @if (OnchainUnconfirmedBalance != null)
                {
                    <li class="list-group-item py-2">
                        @DisplayFormatter.Currency(OnchainUnconfirmedBalance.Value, BitcoinUnit, DisplayFormatter.CurrencyFormat.Symbol) unconfirmed
                    </li>
                }
            </ul>
        }

        @if (LightningOnchainConfirmedBalance != null || LightningOnchainUnconfirmedBalance != null || LightningOnchainReservedBalance != null)
        {
            <header class="mt-5 mb-2 d-flex align-items-center justify-content-between">
                <h4 class="mb-0">Lightning Onchain</h4>
            </header>
            <ul class="list-group list-group-flush list-group-links">
                @if (LightningOnchainConfirmedBalance != null)
                {
                    <li class="list-group-item py-2">
                        @DisplayFormatter.Currency(LightningOnchainConfirmedBalance.Value, BitcoinUnit, DisplayFormatter.CurrencyFormat.Symbol) confirmed
                    </li>
                }
                @if (LightningOnchainUnconfirmedBalance != null)
                {
                    <li class="list-group-item py-2">
                        @DisplayFormatter.Currency(LightningOnchainUnconfirmedBalance.Value, BitcoinUnit, DisplayFormatter.CurrencyFormat.Symbol) unconfirmed
                    </li>
                }
                @if (LightningOnchainReservedBalance != null)
                {
                    <li class="list-group-item py-2">
                        @DisplayFormatter.Currency(LightningOnchainReservedBalance.Value, BitcoinUnit, DisplayFormatter.CurrencyFormat.Symbol) reserved
                    </li>
                }
            </ul>
        }

        @if (LightningOffchainOpeningBalance != null || LightningOffchainLocalBalance != null || LightningOffchainRemoteBalance != null || LightningOffchainClosingBalance != null)
        {
            <header class="mt-5 mb-2 d-flex align-items-center justify-content-between">
                <h4 class="mb-0">Lightning Channels</h4>
                @if (LightningOffchainLocalBalance is > 0)
                {
                    <NavLink href="@Routes.Send" class="bg-light rounded-pill px-5 py-2 fw-semibold">Send via Lightning</NavLink>
                }
            </header>
            <ul class="list-group list-group-flush list-group-links">
                @if (LightningOffchainOpeningBalance != null)
                {
                    <li class="list-group-item py-2">
                        @DisplayFormatter.Currency(LightningOffchainOpeningBalance.Value, BitcoinUnit, DisplayFormatter.CurrencyFormat.Symbol) opening channels
                    </li>
                }
                @if (LightningOffchainLocalBalance != null)
                {
                    <li class="list-group-item py-2">
                        @DisplayFormatter.Currency(LightningOffchainLocalBalance.Value, BitcoinUnit, DisplayFormatter.CurrencyFormat.Symbol) local / outbound capacity
                    </li>
                }
                @if (LightningOffchainRemoteBalance != null)
                {
                    <li class="list-group-item py-2">
                        @DisplayFormatter.Currency(LightningOffchainRemoteBalance.Value, BitcoinUnit, DisplayFormatter.CurrencyFormat.Symbol) remote / inbound capacity
                    </li>
                }
                @if (LightningOffchainClosingBalance != null)
                {
                    <li class="list-group-item py-2">
                        @DisplayFormatter.Currency(LightningOffchainClosingBalance.Value, BitcoinUnit, DisplayFormatter.CurrencyFormat.Symbol) closing channels
                    </li>
                }
            </ul>
        }
    </AuthorizeView>

</section>

@code {

    private void ToggleDisplayCurrency()
    {
        Dispatcher.Dispatch(new UIState.ToggleBitcoinUnit());
    }

    private AppUserStoreInfo? StoreInfo => StoreState.Value.StoreInfo;
    private string? StoreId => StoreState.Value.StoreInfo?.Id;
    private string? Currency => StoreState.Value.StoreInfo?.DefaultCurrency;
    private string? BalanceError => StoreState.Value.OnchainBalance?.Error ?? StoreState.Value.LightningBalance?.Error;
    private OnChainWalletOverviewData? OnchainBalance => StoreState.Value.OnchainBalance?.Data;
    private decimal? OnchainConfirmedBalance => OnchainBalance == null ? null : new Money(OnchainBalance.ConfirmedBalance, MoneyUnit.BTC).ToDecimal(UnitMoney);
    private decimal? OnchainUnconfirmedBalance => OnchainBalance == null ? null : new Money(OnchainBalance.UnconfirmedBalance, MoneyUnit.BTC).ToDecimal(UnitMoney);
    private decimal? OnchainTotalBalance => OnchainBalance == null ? null : (OnchainConfirmedBalance ?? 0) + (OnchainUnconfirmedBalance ?? 0);
    private LightningNodeBalanceData? LightningBalance => StoreState.Value.LightningBalance?.Data;
    private decimal? LightningOnchainBalance => LightningBalance?.OnchainBalance?.Confirmed.ToDecimal(UnitMoney);
    private decimal? LightningOffchainBalance => LightningBalance?.OffchainBalance.Local.ToDecimal(UnitLightMoney);
    private decimal? LightningOnchainConfirmedBalance => LightningBalance?.OnchainBalance?.Confirmed.ToDecimal(UnitMoney);
    private decimal? LightningOnchainUnconfirmedBalance => LightningBalance?.OnchainBalance?.Unconfirmed.ToDecimal(UnitMoney);
    private decimal? LightningOnchainReservedBalance => LightningBalance?.OnchainBalance?.Reserved.ToDecimal(UnitMoney);
    private decimal? LightningOffchainOpeningBalance => LightningBalance?.OffchainBalance.Opening?.ToDecimal(UnitLightMoney);
    private decimal? LightningOffchainLocalBalance => LightningBalance?.OffchainBalance.Local.ToDecimal(UnitLightMoney);
    private decimal? LightningOffchainRemoteBalance => LightningBalance?.OffchainBalance.Remote.ToDecimal(UnitLightMoney);
    private decimal? LightningOffchainClosingBalance => LightningBalance?.OffchainBalance.Opening?.ToDecimal(UnitLightMoney);
    private decimal? TotalBalance => OnchainBalance == null && LightningBalance == null
        ? null
        : (OnchainConfirmedBalance ?? 0) + (OnchainUnconfirmedBalance ?? 0) + (LightningOnchainBalance ?? 0) + (LightningOffchainBalance ?? 0);

    private decimal? Rate => StoreState.Value.Rates?.Data?.FirstOrDefault()?.Rate;
    private string BitcoinUnit => UIState.Value.BitcoinUnit;
    private HistogramData? Histogram => StoreState.Value.UnifiedHistogram;
    private MoneyUnit UnitMoney => BitcoinUnit == CurrencyUnit.BTC ? MoneyUnit.BTC : MoneyUnit.Satoshi;
    private LightMoneyUnit UnitLightMoney => BitcoinUnit == CurrencyUnit.BTC ? LightMoneyUnit.BTC : LightMoneyUnit.Satoshi;
    private string GetTitle() => $"{StoreInfo?.Name ?? "Store"} Funds";
}
