@attribute [Route(Routes.Funds)]
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@using BTCPayApp.Core.Auth
@using BTCPayApp.Core.BTCPayServer
@using BTCPayApp.Core.Helpers
@using BTCPayApp.Core.Wallet
@using BTCPayApp.UI.Features
@using BTCPayApp.UI.Components.Layout
@using BTCPayServer.Client.App.Models
@using NBitcoin
@using BTCPayServer.Client.Models
@using BTCPayServer.Lightning
@inject IJSRuntime JS
@inject IDispatcher Dispatcher
@inject IState<UIState> UIState
@inject IState<StoreState> StoreState
@inject IAccountManager AccountManager
@inject OnChainWalletManager OnChainWalletManager
@inject LightningNodeManager LightningNodeManager
@inject BTCPayConnectionManager ConnectionManager

<PageTitle>@GetTitle()</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back>
        <h1>@GetTitle()</h1>
    </Titlebar>
</SectionContent>
<section class="container">
    <AuthorizeView Resource="StoreId">
        @if (OnchainConfirmedBalance is > 0 || OnchainUnconfirmedBalance is > 0)
        {
            <header class="d-flex align-items-center justify-content-between gap-3 mb-3">
                <h2 class="mb-0">Onchain</h2>
                <span class="text-muted">
                    <AmountDisplay Value="OnchainConfirmedBalance" Unit="@BitcoinUnit" OnToggleDisplayCurrency="ToggleDisplayCurrency" /> available
                </span>
            </header>
            @if (LightningState == SourceState.NotSupported)
            {
                <p class="d-flex gap-2 text-warning">
                    <Icon Symbol="warning"/>
                    <span>
                        The store's onchain wallet is not provided by the app.
                        Currently, the app does not support sending from external wallets.
                        Please try sending from the server instead.
                    </span>
                </p>
            }
            <div class="box">
                <ul class="list-group list-group-flush list-group-links">
                    @if (OnchainConfirmedBalance is > 0)
                    {
                        <li class="list-group-item py-2">
                            <AmountDisplay Value="OnchainConfirmedBalance" Unit="@BitcoinUnit" OnToggleDisplayCurrency="ToggleDisplayCurrency" /> confirmed
                        </li>
                    }
                    @if (OnchainUnconfirmedBalance is > 0)
                    {
                        <li class="list-group-item py-2 disabled">
                            <AmountDisplay Value="OnchainUnconfirmedBalance" Unit="@BitcoinUnit" OnToggleDisplayCurrency="ToggleDisplayCurrency" /> unconfirmed
                        </li>
                    }
                </ul>
            </div>
        }

        @if (LightningOnchainConfirmedBalance is > 0 || LightningOnchainUnconfirmedBalance is > 0 || LightningOnchainReservedBalance is > 0)
        {
            <header class="d-flex align-items-center justify-content-between gap-3 mb-3">
                <h2 class="mb-0">Lightning Onchain</h2>
                <span class="text-muted">
                    <AmountDisplay Value="LightningOnchainConfirmedBalance" Unit="@BitcoinUnit" OnToggleDisplayCurrency="ToggleDisplayCurrency" /> available
                </span>
            </header>
            @if (LightningState == SourceState.NotSupported)
            {
                <p class="d-flex gap-2 text-warning">
                    <Icon Symbol="warning"/>
                    <span>
                        The store's Lightning node is not provided by the app.
                        Currently, the app does not support sending from external Lightning nodes.
                        Please try sending from the server instead.
                    </span>
                </p>
            }
            <div class="box">
                <ul class="list-group list-group-flush list-group-links">
                    @if (LightningOnchainConfirmedBalance is > 0)
                    {
                        <li class="list-group-item py-2">
                            <AmountDisplay Value="LightningOnchainConfirmedBalance" Unit="@BitcoinUnit" OnToggleDisplayCurrency="ToggleDisplayCurrency" /> confirmed
                        </li>
                    }
                    @if (LightningOnchainUnconfirmedBalance is > 0)
                    {
                        <li class="list-group-item py-2 disabled">
                            <AmountDisplay Value="LightningOnchainUnconfirmedBalance" Unit="@BitcoinUnit" OnToggleDisplayCurrency="ToggleDisplayCurrency" /> unconfirmed
                        </li>
                    }
                    @if (LightningOnchainReservedBalance is > 0)
                    {
                        <li class="list-group-item py-2 disabled">
                            <AmountDisplay Value="LightningOnchainReservedBalance" Unit="@BitcoinUnit" OnToggleDisplayCurrency="ToggleDisplayCurrency" /> reserved
                        </li>
                    }
                </ul>
            </div>
        }

        @if (LightningOffchainOpeningBalance is > 0 || LightningOffchainLocalBalance is > 0 || LightningOffchainRemoteBalance is > 0 || LightningOffchainClosingBalance is > 0)
        {
            <header class="d-flex align-items-center justify-content-between gap-3 mb-3">
                <h2 class="mb-0">Lightning Channels</h2>
                <span class="text-muted">
                    <AmountDisplay Value="LightningOffchainLocalBalance" Unit="@BitcoinUnit" OnToggleDisplayCurrency="ToggleDisplayCurrency" /> available
                </span>
            </header>
            @if (LightningState == SourceState.NotSupported)
            {
                <p class="d-flex gap-2 text-warning">
                    <Icon Symbol="warning"/>
                    <span>
                        The store's Lightning node is not provided by the app.
                        Currently, the app does not support sending from external Lightning nodes.
                        Please try sending from the server instead.
                    </span>
                </p>
            }
            <div class="box">
                <ul class="list-group list-group-flush list-group-links">
                    @if (LightningOffchainOpeningBalance is > 0)
                    {
                        <li class="list-group-item py-2 disabled">
                            <AmountDisplay Value="LightningOffchainOpeningBalance" Unit="@BitcoinUnit" OnToggleDisplayCurrency="ToggleDisplayCurrency" /> opening channels
                        </li>
                    }
                    @if (LightningOffchainLocalBalance is > 0)
                    {
                        <li class="list-group-item py-2">
                            <AmountDisplay Value="LightningOffchainLocalBalance" Unit="@BitcoinUnit" OnToggleDisplayCurrency="ToggleDisplayCurrency" /> local / outbound capacity
                        </li>
                    }
                    @if (LightningOffchainClosingBalance is > 0)
                    {
                        <li class="list-group-item py-2 disabled">
                            <AmountDisplay Value="LightningOffchainClosingBalance" Unit="@BitcoinUnit" OnToggleDisplayCurrency="ToggleDisplayCurrency" /> closing channels
                        </li>
                    }
                </ul>
            </div>
        }

        @if (TotalBalance > 0 && (LightningOffchainLocalBalance is > 0 || OnchainConfirmedBalance is > 0) && (OnchainState == SourceState.Supported || LightningState == SourceState.Supported))
        {
            <h2>Send Bitcoin</h2>
            @if (InsufficientFunds || NotSupported)
            {
                <Alert Type="warning">
                    @if (NotSupported)
                    {
                        <div>
                            Sending via external
                            @(Model.Bolt11 != null ? "Lightning node" : "wallet")
                            is not supported, see above.
                        </div>
                    }
                    else
                    {
                        <div>
                            Not enough
                            @(Model.Bolt11 != null ? "Lightning" : Model.Address != null ? "onchain" : "")
                            balance to send
                            <AmountDisplay Value="Model.Amount" Unit="@BitcoinUnit" OnToggleDisplayCurrency="ToggleDisplayCurrency"/>
                        </div>
                    }
                </Alert>
            }
            <ValidationEditContext @ref="_validationEditContext" Model="Model" OnValidSubmit="SendFunds" SuccessMessage="@_successMessage" ErrorMessage="@_errorMessage">
                <DataAnnotationsValidator/>
                <fieldset class="box">
                    <div class="form-group">
                        <label for="Destination" class="form-label" data-required>Destination</label>
                        <div class="d-flex gap-2">
                            <InputText @bind-Value="Model.Destination" @bind-Value:after="() => UpdateForDestination(Model.Destination)" id="Destination" class="form-control flex-grow-1" placeholder="@DestinationPlaceholder" />
                            <button type="button" class="btn btn-secondary px-3" data-testid="ScanButton" data-bs-toggle="modal" data-bs-target="#ScanQrCodeModal">
                                <Icon Symbol="scan-qr"/>
                            </button>
                        </div>
                        <ValidationMessage For="@(() => Model.Destination)"/>
                    </div>
                    <div class="form-group">
                        <label for="Amount" class="form-label" data-required>Amount</label>
                        <InputAmount Id="Amount" @bind-Value="Model.Amount" Unit="@UnitMoney" Rate="@Rate" Currency="@Currency" Max="@MaxAvailable" Readonly="@(!CanAdjustAmount)" OnToggleDisplayCurrency="ToggleDisplayCurrency" />
                        <ValidationMessage For="@(() => Model.Amount)"/>
                        @if (Model.Address != null || Model.Bolt11 != null)
                        {
                            <div class="form-text d-flex flex-wrap gap-1 align-items-center">
                                <span>
                                    Sending @(Model.Bolt11 != null ? "via Lightning" : "onchain"):
                                    <AmountDisplay Value="MaxAvailable" Unit="@BitcoinUnit" OnToggleDisplayCurrency="ToggleDisplayCurrency" />
                                    available.
                                </span>
                                @if (CanAdjustAmount)
                                {
                                    <button type="button" class="btn btn-link p-0" @onclick="() => Model.Amount = MaxAvailable">Send maximum</button>
                                }
                            </div>
                        }
                    </div>
                    <button type="submit" class="btn btn-primary w-100" disabled="@(!IsValidForm || _sending)">
                        @if (_sending)
                        {
                            <LoadingIndicator/>
                        }
                        else if (Model.Transaction != null)
                        {
                            <span>Broadcast transaction</span>
                        }
                        else
                        {
                            <span>Send @(Model.Bolt11 != null ? "via Lightning" : Model.Address != null ? "onchain" : "")</span>
                        }
                    </button>
                    @if (Model.Transaction != null)
                    {
                        <button type="button" class="btn btn-outline-secondary w-100 mt-3" @onclick="CancelTx">Cancel transaction</button>
                    }
                </fieldset>
            </ValidationEditContext>
            <QrScanModal OnScan="@OnQrCodeScan"/>
        }
    </AuthorizeView>

</section>

@code {
    private readonly SemaphoreSlim _semaphore = new(1, 1);

    private AppUserStoreInfo? StoreInfo => StoreState.Value.StoreInfo;
    private string? StoreId => StoreState.Value.StoreInfo?.Id;
    private OnChainWalletOverviewData? OnchainBalance => StoreState.Value.OnchainBalance?.Data;
    private decimal? OnchainConfirmedBalance => OnchainBalance == null ? null : new Money(OnchainBalance.ConfirmedBalance, MoneyUnit.BTC).ToDecimal(UnitMoney);
    private decimal? OnchainUnconfirmedBalance => OnchainBalance == null ? null : new Money(OnchainBalance.UnconfirmedBalance, MoneyUnit.BTC).ToDecimal(UnitMoney);
    private LightningNodeBalanceData? LightningBalance => StoreState.Value.LightningBalance?.Data;
    private decimal? LightningOnchainBalance => LightningBalance?.OnchainBalance?.Confirmed.ToDecimal(UnitMoney);
    private decimal? LightningOffchainBalance => LightningBalance?.OffchainBalance.Local.ToDecimal(UnitLightMoney);
    private decimal? LightningOnchainConfirmedBalance => LightningBalance?.OnchainBalance?.Confirmed.ToDecimal(UnitMoney);
    private decimal? LightningOnchainUnconfirmedBalance => LightningBalance?.OnchainBalance?.Unconfirmed.ToDecimal(UnitMoney);
    private decimal? LightningOnchainReservedBalance => LightningBalance?.OnchainBalance?.Reserved.ToDecimal(UnitMoney);
    private decimal? LightningOffchainOpeningBalance => LightningBalance?.OffchainBalance.Opening?.ToDecimal(UnitLightMoney);
    private decimal? LightningOffchainLocalBalance => LightningBalance?.OffchainBalance.Local.ToDecimal(UnitLightMoney);
    private decimal? LightningOffchainRemoteBalance => LightningBalance?.OffchainBalance.Remote.ToDecimal(UnitLightMoney);
    private decimal? LightningOffchainClosingBalance => LightningBalance?.OffchainBalance.Opening?.ToDecimal(UnitLightMoney);
    private decimal? TotalBalance => OnchainBalance == null && LightningBalance == null
        ? null
        : (OnchainConfirmedBalance ?? 0) + (OnchainUnconfirmedBalance ?? 0) + (LightningOnchainBalance ?? 0) + (LightningOffchainBalance ?? 0);

    private string? Currency => StoreState.Value.StoreInfo?.DefaultCurrency;
    private decimal? Rate => StoreState.Value.Rates?.Data?.FirstOrDefault()?.Rate;
    private string BitcoinUnit => UIState.Value.BitcoinUnit;
    private MoneyUnit UnitMoney => BitcoinUnit == CurrencyUnit.BTC ? MoneyUnit.BTC : MoneyUnit.Satoshi;
    private LightMoneyUnit UnitLightMoney => BitcoinUnit == CurrencyUnit.BTC ? LightMoneyUnit.BTC : LightMoneyUnit.Satoshi;
    private string GetTitle() => $"{StoreInfo?.Name ?? "Store"} Funds";
    private bool InsufficientFunds => Model.Amount is > 0 && MaxAvailable < Model.Amount;
    private bool NotSupported => Model.Bolt11 != null && LightningState != SourceState.Supported || Model.Address != null && OnchainState != SourceState.Supported;
    private string DestinationPlaceholder
    {
        get
        {
            var canOnchain = OnchainState == SourceState.Supported && OnchainConfirmedBalance is > 0;
            var canLightning = LightningState == SourceState.Supported && LightningOffchainLocalBalance is > 0;
            return canOnchain && canLightning
                ? "Bitcoin address or Lightning invoice (BOLT11)"
                : canOnchain
                    ? "Bitcoin address"
                    : canLightning
                        ? "Lightning invoice (BOLT11)"
                        : "";
        }
    }

    private bool CanAdjustAmount => Model.Bolt11?.MinimumAmount == null && MaxAvailable > 0;
    private decimal? MaxAvailable => Model.Bolt11 != null
        ? (LightningOffchainLocalBalance ?? 0)
        : (OnchainConfirmedBalance ?? 0);
    private bool IsValidForm => !_validationEditContext!.Invalid && MaxAvailable is > 0 && Model.Amount is > 0 && !string.IsNullOrEmpty(Model.Destination) && (
                                    (Model.Bolt11 != null && LightningState == SourceState.Supported) ||
                                    (Model.Address != null && OnchainState == SourceState.Supported));

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var (onchain, lightning) = await AccountManager.GetCurrentStorePaymentMethods();
        OnchainState = onchain != null
            ? await OnChainWalletManager.IsOnChainOurs(onchain) ? SourceState.Supported : SourceState.NotSupported
            : SourceState.NotConfigured;
        LightningState = lightning != null
            ? await LightningNodeManager.IsLightningOurs(lightning) ? SourceState.Supported : SourceState.NotSupported
            : SourceState.NotConfigured;
    }

    private void ToggleDisplayCurrency()
    {
        if (Model.Amount.HasValue)
            Model.Amount = new Money(Model.Amount.Value, UnitMoney).ToDecimal(UnitMoney == MoneyUnit.Satoshi
                ? MoneyUnit.BTC
                : MoneyUnit.Satoshi);
        Dispatcher.Dispatch(new UIState.ToggleBitcoinUnit());
    }

    private bool _sending { get; set; }
    private string? _qrInput;
    private string? _successMessage { get; set; }
    private string? _errorMessage { get; set; }
    private ValidationEditContext? _validationEditContext;
    private SendModel Model { get; set; } = new();

    private SourceState OnchainState { get; set; }
    private SourceState LightningState { get; set; }

    private enum SourceState
    {
        NotConfigured,
        NotSupported,
        Supported
    }

    private class SendModel
    {
        [Required]
        public string? Destination { get; set; }
        [Required]
        public decimal? Amount { get; set; }

        public BOLT11PaymentRequest? Bolt11 { get; set; }
        public BitcoinAddress? Address { get; set; }
        public (Transaction Tx, ICoin[] SpentCoins, BitcoinAddress Change)? Transaction { get; set; }
    }

    private void UpdateForDestination(string? destination)
    {
        var network = ConnectionManager.ReportedNetwork;
        if (string.IsNullOrEmpty(destination) || network == null)
        {
            Model.Bolt11 = null;
            Model.Address = null;
            Model.Transaction = null;
            return;
        }

        try
        {
            Model.Bolt11 = BOLT11PaymentRequest.Parse(destination, network);
            Model.Amount = Model.Bolt11.MinimumAmount.ToDecimal(UnitLightMoney);
        }
        catch
        {
            Model.Bolt11 = null;
        }

        try
        {
            Model.Address = BitcoinAddress.Create(destination, network);
        }
        catch
        {
            Model.Address = null;
            Model.Transaction = null;
        }
    }

    // ReSharper disable once AsyncVoidMethod
    private async void OnQrCodeScan(string code)
    {
        // prevent duplicate submission due to quirk in QR reader lib
        if (code == _qrInput) return;
        _qrInput = code;
        await JS.InvokeVoidAsync("Interop.closeModal", "#ScanQrCodeModal");

        Model.Destination = code;
        UpdateForDestination(Model.Destination);
        StateHasChanged();
    }

    private async Task SendFunds()
    {
        if (_sending || !IsValidForm) return;
        try
        {
            _successMessage = _errorMessage = null;
            _sending = true;
            await InvokeAsync(StateHasChanged);
            FormResult? result = null;
            if (Model.Bolt11 != null)
            {
                // TODO: Implement send via external node: SendLightningExternal(Model.Bolt11, new LightMoney(Model.Amount.Value, UnitLightMoney));
                result = await SendLightning(Model.Bolt11, new LightMoney(Model.Amount.Value, UnitLightMoney));
            }
            else if (Model.Address != null)
            {
                // TODO: Implement send via external wallet: SendOnchainExternal(Model.Address, new Money(Model.Amount.Value, UnitMoney));
                result = await SendOnchain(Model.Address, new Money(Model.Amount.Value, UnitMoney));
            }
            switch (result?.Succeeded)
            {
                case true:
                    _successMessage = string.Join(".", result.Messages!);
                    break;
                case false:
                    _errorMessage = string.Join(".", result.Messages!);
                    break;
            }
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
        finally
        {
            _sending = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task<FormResult> SendOnchain(BitcoinAddress address, Money amount)
    {
        try
        {
            await _semaphore.WaitAsync();
            return Model.Transaction == null
                ? await CreateTx(address, amount)
                : await BroadcastTx(Model.Transaction.Value.Tx);
        }
        catch (Exception ex)
        {
            return new FormResult(false, "Payment failed: " + ex.Message);
        }
        finally
        {
            _semaphore.Release();
        }
    }

    private async Task<FormResult> CreateTx(BitcoinAddress address, Money amount)
    {
        try
        {
            var txOut = new TxOut(Money.Coins(amount.ToUnit(MoneyUnit.BTC)), address);
            Model.Transaction = await OnChainWalletManager.CreateTransaction([txOut], null);
            if (Model.Transaction is null) return new FormResult(false, "Transaction creation failed");
            var transaction = Model.Transaction.Value;
            var changeAmt = transaction.Tx.Outputs
                .Where(o => o.IsTo(transaction.Change))
                .Sum(o => o.Value.ToDecimal(MoneyUnit.BTC));
            var fee = transaction.Tx.GetFee(transaction.SpentCoins).ToDecimal(MoneyUnit.BTC);
            return new FormResult(true, $"Created transaction {transaction.Tx.GetHash()} spending {transaction.SpentCoins.Sum(c => c.TxOut.Value.ToDecimal(MoneyUnit.BTC))} BTC, with change of {changeAmt} BTC and fee of {fee} BTC");
        }
        catch (Exception ex)
        {
            Model.Transaction = null;
            return new FormResult(false, "Creating transaction failed: " + ex.Message);
        }
    }

    private async Task<FormResult> BroadcastTx(Transaction transaction)
    {
        try
        {
            await OnChainWalletManager.BroadcastTransaction(transaction);
            Dispatcher.Dispatch(new StoreState.FetchBalances(StoreId!));
            Model = new SendModel();
            return new FormResult(true, $"Transaction {transaction.GetHash()} broadcasted");
        }
        catch (Exception ex)
        {
            return new FormResult(false, "Broadcasting transaction failed: " + ex.Message);
        }
    }

    private async Task CancelTx()
    {
        if (Model.Transaction is null) return;

        _successMessage = _errorMessage = null;
        Model.Transaction = null;
        await InvokeAsync(StateHasChanged);
    }

    private async Task<FormResult> SendLightning(BOLT11PaymentRequest bolt11, LightMoney amount)
    {
        try
        {
            await _semaphore.WaitAsync();
            // TODO
            return new FormResult(true, "Payment sent");
        }
        catch (Exception ex)
        {
            return new FormResult(false, "Payment failed: " + ex.Message);
        }
        finally
        {
            _semaphore.Release();
        }
    }

    private async Task<FormResult> SendLightningExternal(BOLT11PaymentRequest bolt11, LightMoney amount)
    {
        var lnRequest = new PayLightningInvoiceRequest
        {
            BOLT11 = bolt11.ToString(),
            Amount = amount
        };
        try
        {
            var payData = await AccountManager.GetClient().PayLightningInvoice(StoreId, "BTC", lnRequest);
            return payData != null
                ? new FormResult(true, $"Created transaction {payData.PaymentHash} spending {payData.TotalAmount} BTC")
                : new FormResult(false, "Payment failed");
        }
        catch (Exception ex)
        {
            return new FormResult(false, "Payment failed: " + ex.Message);
        }
    }

    private async Task<FormResult> SendOnchainExternal(BitcoinAddress address, Money amount)
    {
        var dest = new CreateOnChainTransactionRequest.CreateOnChainTransactionRequestDestination
        {
            Destination = address.ToString(),
            Amount = amount.ToDecimal(MoneyUnit.BTC),
            SubtractFromAmount = amount.ToDecimal(UnitMoney) == MaxAvailable
        };
        var txRequest = new CreateOnChainTransactionRequest
        {
            Destinations = [dest]
        };
        try
        {
            var txData = await AccountManager.GetClient().CreateOnChainTransaction(StoreId, "BTC", txRequest);
            return txData != null
                ? new FormResult(true, $"Created transaction {txData.TransactionHash} spending {new Money(txData.Amount, MoneyUnit.BTC)} BTC")
                : new FormResult(false, "Payment failed");
        }
        catch (Exception ex)
        {
            return new FormResult(false, "Payment failed: " + ex.Message);
        }
    }
}
