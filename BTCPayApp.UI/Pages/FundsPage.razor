@attribute [Route(Routes.Funds)]
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@using BTCPayApp.CommonServer.Models
@using BTCPayApp.Core.Attempt2
@using BTCPayApp.UI.Features
@using BTCPayApp.UI.Components.Layout
@using NBitcoin
@using BTCPayServer.Client.Models
@using BTCPayServer.Lightning
@inject IDispatcher Dispatcher
@inject IState<UIState> UIState
@inject IState<StoreState> StoreState
@inject OnChainWalletManager OnChainWalletManager
@inject LightningNodeManager LightningNodeManager

<PageTitle>@GetTitle()</PageTitle>

<SectionContent SectionId="_Layout.Top">
    <Titlebar Back>
        <h1>@GetTitle()</h1>
    </Titlebar>
</SectionContent>
<section class="container">
    <AuthorizeView Resource="StoreId">
        <WalletOverview BitcoinBalance="@TotalBalance" BitcoinUnit="@BitcoinUnit" MoneyUnit="@UnitMoney" Histogram="@Histogram"
                        Currency="@Currency" Rate="@Rate" Error="@BalanceError" OnBalanceClick="ToggleDisplayCurrency"
                        class="mt-3 mb-5"/>

        @if (OnchainConfirmedBalance != null || OnchainUnconfirmedBalance != null)
        {
            <header class="d-flex align-items-center justify-content-between gap-3 mb-3">
                <h2 class="mb-0">Onchain</h2>
                <span class="badge bg-info ms-2">
                    <AmountDisplay Value="OnchainConfirmedBalance" Unit="@BitcoinUnit" OnToggleDisplayCurrency="ToggleDisplayCurrency" /> available
                </span>
            </header>
            <div class="box">
                <ul class="list-group list-group-flush list-group-links">
                    @if (OnchainConfirmedBalance != null)
                    {
                        <li class="list-group-item py-2">
                            <AmountDisplay Value="OnchainConfirmedBalance" Unit="@BitcoinUnit" OnToggleDisplayCurrency="ToggleDisplayCurrency" />
                        </li>
                    }
                    @if (OnchainUnconfirmedBalance != null)
                    {
                        <li class="list-group-item py-2 disabled">
                            <AmountDisplay Value="OnchainUnconfirmedBalance" Unit="@BitcoinUnit" OnToggleDisplayCurrency="ToggleDisplayCurrency" />
                        </li>
                    }
                </ul>
            </div>
        }

        @if (LightningOnchainConfirmedBalance != null || LightningOnchainUnconfirmedBalance != null || LightningOnchainReservedBalance != null)
        {
            <header class="d-flex align-items-center justify-content-between gap-3 mb-3">
                <h2 class="mb-0">Lightning Onchain</h2>
                <span class="badge bg-info ms-2">
                    <AmountDisplay Value="OnchainConfirmedBalance" Unit="@BitcoinUnit" OnToggleDisplayCurrency="ToggleDisplayCurrency" /> available
                </span>
            </header>
            <div class="box">
                <ul class="list-group list-group-flush list-group-links">
                    @if (LightningOnchainConfirmedBalance != null)
                    {
                        <li class="list-group-item py-2">
                            <AmountDisplay Value="LightningOnchainConfirmedBalance" Unit="@BitcoinUnit" OnToggleDisplayCurrency="ToggleDisplayCurrency" />confirmed
                        </li>
                    }
                    @if (LightningOnchainUnconfirmedBalance != null)
                    {
                        <li class="list-group-item py-2 disabled">
                            <AmountDisplay Value="LightningOnchainUnconfirmedBalance" Unit="@BitcoinUnit" OnToggleDisplayCurrency="ToggleDisplayCurrency" /> unconfirmed
                        </li>
                    }
                    @if (LightningOnchainReservedBalance != null)
                    {
                        <li class="list-group-item py-2 disabled">
                            <AmountDisplay Value="LightningOnchainReservedBalance" Unit="@BitcoinUnit" OnToggleDisplayCurrency="ToggleDisplayCurrency" /> reserved
                        </li>
                    }
                </ul>
            </div>
        }

        @if (LightningOffchainOpeningBalance != null || LightningOffchainLocalBalance != null || LightningOffchainRemoteBalance != null || LightningOffchainClosingBalance != null)
        {
            <header class="d-flex align-items-center justify-content-between gap-3 mb-3">
                <h2 class="mb-0">Lightning Channels</h2>
                <span class="badge bg-info ms-2">
                    <AmountDisplay Value="LightningOffchainLocalBalance" Unit="@BitcoinUnit" OnToggleDisplayCurrency="ToggleDisplayCurrency" /> available
                </span>
            </header>
            <div class="box">
                <ul class="list-group list-group-flush list-group-links">
                    @if (LightningOffchainOpeningBalance != null)
                    {
                        <li class="list-group-item py-2 disabled">
                            <AmountDisplay Value="LightningOffchainOpeningBalance" Unit="@BitcoinUnit" OnToggleDisplayCurrency="ToggleDisplayCurrency" /> opening channels
                        </li>
                    }
                    @if (LightningOffchainLocalBalance != null)
                    {
                        <li class="list-group-item py-2">
                            <AmountDisplay Value="LightningOffchainLocalBalance" Unit="@BitcoinUnit" OnToggleDisplayCurrency="ToggleDisplayCurrency" /> local / outbound capacity
                        </li>
                    }
                    @if (LightningOffchainClosingBalance != null)
                    {
                        <li class="list-group-item py-2 disabled">
                            <AmountDisplay Value="LightningOffchainClosingBalance" Unit="@BitcoinUnit" OnToggleDisplayCurrency="ToggleDisplayCurrency" /> closing channels
                        </li>
                    }
                </ul>
            </div>
        }

        @if (TotalBalance > 0 && (LightningOffchainLocalBalance is > 0 || OnchainConfirmedBalance is > 0))
        {
            decimal available = Model.Bolt11 != null
                ? (LightningOffchainLocalBalance ?? 0)
                : (OnchainConfirmedBalance ?? 0);
            <h2>Send Bitcoin</h2>
            <ValidationEditContext @ref="_validationEditContext" Model="Model" OnValidSubmit="SendFunds" SuccessMessage="@_successMessage" ErrorMessage="@_errorMessage">
                <DataAnnotationsValidator/>
                <fieldset class="box">
                    <div class="form-group">
                        <label for="Destination" class="form-label" data-required>Destination</label>
                        <InputText @bind-Value="Model.Destination" @bind-Value:after="() => UpdateForDestination(Model.Destination)" id="Destination" class="form-control" />
                        <ValidationMessage For="@(() => Model.Destination)"/>
                    </div>
                    <div class="form-group">
                        <label for="Amount" class="form-label" data-required>Amount</label>
                        <InputAmount Id="Amount" @bind-Value="Model.Amount" Unit="@UnitMoney" Rate="@Rate" Currency="@Currency" Max="@available" OnToggleDisplayCurrency="ToggleDisplayCurrency" />
                        <ValidationMessage For="@(() => Model.Amount)"/>
                        @if (Model.Address != null || Model.Bolt11 != null)
                        {
                            <div class="form-text d-flex flex-wrap gap-1 align-items-center">
                                <span>
                                    Sending @(Model.Bolt11 != null ? "via Lightning" : "onchain"):
                                    <AmountDisplay Value="available" Unit="@BitcoinUnit" OnToggleDisplayCurrency="ToggleDisplayCurrency" />
                                    available.
                                </span>
                                <button type="button" class="btn btn-link p-0" @onclick="() => Model.Amount = available">Send maximum</button>
                            </div>
                        }
                    </div>
                    <button type="submit" class="btn btn-primary w-100" disabled="@(_validationEditContext!.Invalid || _sending || available == 0)">
                        @if (_sending)
                        {
                            <LoadingIndicator/>
                        }
                        else
                        {
                            <span>Send Funds</span>
                        }
                    </button>
                </fieldset>
            </ValidationEditContext>
        }
    </AuthorizeView>

</section>

@code {
    private readonly SemaphoreSlim _semaphore = new(1, 1);

    private AppUserStoreInfo? StoreInfo => StoreState.Value.StoreInfo;
    private string? StoreId => StoreState.Value.StoreInfo?.Id;
    private string? BalanceError => StoreState.Value.OnchainBalance?.Error ?? StoreState.Value.LightningBalance?.Error;
    private OnChainWalletOverviewData? OnchainBalance => StoreState.Value.OnchainBalance?.Data;
    private decimal? OnchainConfirmedBalance => OnchainBalance == null ? null : new Money(OnchainBalance.ConfirmedBalance, MoneyUnit.BTC).ToDecimal(UnitMoney);
    private decimal? OnchainUnconfirmedBalance => OnchainBalance == null ? null : new Money(OnchainBalance.UnconfirmedBalance, MoneyUnit.BTC).ToDecimal(UnitMoney);
    private LightningNodeBalanceData? LightningBalance => StoreState.Value.LightningBalance?.Data;
    private decimal? LightningOnchainBalance => LightningBalance?.OnchainBalance?.Confirmed.ToDecimal(UnitMoney);
    private decimal? LightningOffchainBalance => LightningBalance?.OffchainBalance.Local.ToDecimal(UnitLightMoney);
    private decimal? LightningOnchainConfirmedBalance => LightningBalance?.OnchainBalance?.Confirmed.ToDecimal(UnitMoney);
    private decimal? LightningOnchainUnconfirmedBalance => LightningBalance?.OnchainBalance?.Unconfirmed.ToDecimal(UnitMoney);
    private decimal? LightningOnchainReservedBalance => LightningBalance?.OnchainBalance?.Reserved.ToDecimal(UnitMoney);
    private decimal? LightningOffchainOpeningBalance => LightningBalance?.OffchainBalance.Opening?.ToDecimal(UnitLightMoney);
    private decimal? LightningOffchainLocalBalance => LightningBalance?.OffchainBalance.Local.ToDecimal(UnitLightMoney);
    private decimal? LightningOffchainRemoteBalance => LightningBalance?.OffchainBalance.Remote.ToDecimal(UnitLightMoney);
    private decimal? LightningOffchainClosingBalance => LightningBalance?.OffchainBalance.Opening?.ToDecimal(UnitLightMoney);
    private decimal? TotalBalance => OnchainBalance == null && LightningBalance == null
        ? null
        : (OnchainConfirmedBalance ?? 0) + (OnchainUnconfirmedBalance ?? 0) + (LightningOnchainBalance ?? 0) + (LightningOffchainBalance ?? 0);

    private string? Currency => StoreState.Value.StoreInfo?.DefaultCurrency;
    private decimal? Rate => StoreState.Value.Rates?.Data?.FirstOrDefault()?.Rate;
    private string BitcoinUnit => UIState.Value.BitcoinUnit;
    private HistogramData? Histogram => StoreState.Value.UnifiedHistogram;
    private MoneyUnit UnitMoney => BitcoinUnit == CurrencyUnit.BTC ? MoneyUnit.BTC : MoneyUnit.Satoshi;
    private LightMoneyUnit UnitLightMoney => BitcoinUnit == CurrencyUnit.BTC ? LightMoneyUnit.BTC : LightMoneyUnit.Satoshi;
    private string GetTitle() => $"{StoreInfo?.Name ?? "Store"} Funds";

    private void ToggleDisplayCurrency()
    {
        if (Model.Amount.HasValue)
            Model.Amount = new Money(Model.Amount.Value, UnitMoney).ToDecimal(UnitMoney == MoneyUnit.Satoshi
                ? MoneyUnit.BTC
                : MoneyUnit.Satoshi);
        Dispatcher.Dispatch(new UIState.ToggleBitcoinUnit());
    }

    private bool _sending { get; set; }
    private string? _successMessage { get; set; }
    private string? _errorMessage { get; set; }
    private ValidationEditContext? _validationEditContext;
    private SendModel Model { get; set; } = new();

    private class SendModel
    {
        [Required]
        public string? Destination { get; set; }
        [Required]
        public decimal? Amount { get; set; }

        public BOLT11PaymentRequest? Bolt11 { get; set; }
        public BitcoinAddress? Address { get; set; }
    }

    private void UpdateForDestination(string? destination)
    {
        var network = OnChainWalletManager.Network;
        if (string.IsNullOrEmpty(destination) || network == null)
        {
            Model.Bolt11 = null;
            Model.Address = null;
            return;
        }

        try
        {
            Model.Bolt11 = BOLT11PaymentRequest.Parse(destination, network);
        }
        catch
        {
            Model.Bolt11 = null;
        }

        try
        {
            Model.Address = BitcoinAddress.Create(destination, network);
        }
        catch
        {
            Model.Address = null;
        }
    }

    private async Task SendFunds()
    {
        if (_sending || Model.Amount is null || string.IsNullOrEmpty(Model.Destination)) return;
        try
        {
            _successMessage = _errorMessage = null;
            _sending = true;
            await InvokeAsync(StateHasChanged);
            await _semaphore.WaitAsync();
            Model = new SendModel();
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
        finally
        {
            _semaphore.Release();
            _sending = false;
            await InvokeAsync(StateHasChanged);
        }
    }
}
