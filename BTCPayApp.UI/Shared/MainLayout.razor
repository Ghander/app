@using BTCPayApp.UI.Features
@using BTCPayApp.UI.Pages
@using BTCPayApp.Core.Contracts
@inherits Fluxor.Blazor.Web.Components.FluxorLayout
@inject IStateSelection<RootState, HashSet<RootState.LoadingHandles>> LoadingStateSelection
@inject IStateSelection<UIState, bool> DarkModeStateSelection
@inject IDispatcher Dispatcher
@inject IConfigProvider ConfigProvider
@inject ISystemThemeProvider SystemThemeProvider
@inject IStore Store

<PageTitle>BTCPay Server</PageTitle>
<MudThemeProvider @ref="@_mudThemeProvider" IsDarkMode="@(_darkMode??DarkModeStateSelection.Value)" Theme="Constants.Theme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@BTCPayIcons.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@DrawerToggle"/>
        <MudLink Href="@Routes.Home" Underline="Underline.None" Color="Color.Inherit" Class="d-flex align-center ml-2">
            <MudImage Src="_content/BTCPayApp.UI/img/logo.svg" Height="24" Alt="BTCPay Server" />
            <MudText Typo="Typo.h6" Class="ml-3">BTCPay Server</MudText>
        </MudLink>
    </MudAppBar>
    <MudDrawer @bind-Open="_isDrawerOpen" ClipMode="DrawerClipMode.Always" Class="py-5">
        <MudNavMenu Color="Color.Success" Bordered="true">
            <MudNavLink Href="@Routes.Home" Icon="@BTCPayIcons.Home" Match="NavLinkMatch.All">Dashboard</MudNavLink>
            <MudNavLink Href="@Routes.WalletSetup" Icon="@Icons.Material.Filled.AccountBalanceWallet" Match="NavLinkMatch.All">Wallet</MudNavLink>
            <MudNavLink Href="@Routes.PointOfSale" Icon="@BTCPayIcons.Pointofsale" Match="NavLinkMatch.All">Point Of Sale</MudNavLink>
            <MudNavLink Href="@Routes.Settings" Icon="@BTCPayIcons.Settings" Match="NavLinkMatch.All">Settings</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Size="Size.Small" Class="@(LoadingStateSelection.Value.Any() ? null : "invisible")"/>
        <MudContainer Fixed="true" Class="py-5">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private MudThemeProvider _mudThemeProvider;

    private bool _isDrawerOpen;

    void DrawerToggle()
    {
        _isDrawerOpen = !_isDrawerOpen;
    }

    private bool? _darkMode;

    protected override async Task OnInitializedAsync()
    {
        LoadingStateSelection.Select(state => state.Loading);
        DarkModeStateSelection.Select(state => state.IsDarkMode);
        var state = await ConfigProvider.Get<UIState>(StateMiddleware.UiStateConfigKey);
        if (state != null)
        {
            if (_darkMode is null && !Store.Initialized.IsCompleted)
            {
                _darkMode = state.IsDarkMode;
                _ = Store.Initialized.ContinueWith(_ => _darkMode = null);
            }
            if (!string.IsNullOrEmpty(state.SelectedTheme))
            {
                Dispatcher.Dispatch(new UIState.ApplyUserTheme(state.SelectedTheme));
            }
        }
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (SystemThemeProvider is MudBlazorThemeProvider mudThemeProvider)
                mudThemeProvider.MudThemeProvider = _mudThemeProvider;
            ApplySystemPreference(this, await _mudThemeProvider.GetSystemPreference());
            SystemThemeProvider.SystemThemeChanged += ApplySystemPreference;
        }
    }

    private void ApplySystemPreference(object? sender, bool isDarkMode)
    {
        var systemTheme = isDarkMode ? Constants.DarkTheme : Constants.LightTheme;
        Dispatcher.Dispatch(new UIState.SetSystemPreference(systemTheme));
    }
}
