@using BTCPayApp.UI.Features
@using BTCPayApp.UI.Pages
@inherits Fluxor.Blazor.Web.Components.FluxorLayout
@inject IStateSelection<RootState, HashSet<RootState.LoadingHandles>> LoadingStateSelection
@inject IStateSelection<UIState, bool> DarkModeStateSelection
@inject IDispatcher Dispatcher

<PageTitle>BTCPay Server</PageTitle>
<MudThemeProvider @ref="@_mudThemeProvider" IsDarkMode="@DarkModeStateSelection.Value" Theme="Constants.Theme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@DrawerToggle"/>
        <MudImage Src="_content/BTCPayApp.UI/img/logo.svg" Height="24" Alt="BTCPay Server" Class="ml-3" />
        <MudText Typo="Typo.h6" Class="ml-3">BTCPay Server</MudText>
    </MudAppBar>
    <MudDrawer @bind-Open="_isDrawerOpen" ClipMode="DrawerClipMode.Always" Class="py-5">
        <MudNavMenu Color="Color.Success" Bordered="true">
            <MudNavLink Href="@Routes.Home" Icon="@Icons.Material.Filled.Dashboard" Match="NavLinkMatch.All">Dashboard</MudNavLink>
            <MudNavLink Href="@Routes.Settings" Icon="@Icons.Material.Filled.Settings" Match="NavLinkMatch.All">Settings</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Size="Size.Small" Class="@(LoadingStateSelection.Value.Count > 0 ? null : "invisible")"/>
        <MudContainer Fixed="true" Class="py-5">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private MudThemeProvider _mudThemeProvider;

    private bool _isDrawerOpen;

    void DrawerToggle()
    {
        _isDrawerOpen = !_isDrawerOpen;
    }

    protected override void OnInitialized()
    {
        LoadingStateSelection.Select(state => state.Loading);
        DarkModeStateSelection.Select(state => state.IsDarkMode);
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await ApplySystemPreference(isDarkMode);
            await _mudThemeProvider.WatchSystemPreference(ApplySystemPreference);
        }
    }

    private Task ApplySystemPreference(bool isDarkMode)
    {
        var systemTheme = isDarkMode ? Constants.DarkTheme : Constants.LightTheme;
        Dispatcher.Dispatch(new UIState.ApplySystemPreference(systemTheme));
        return Task.CompletedTask;
    }
}
