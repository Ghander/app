@using BTCPayApp.UI.Features
@using BTCPayApp.Core.Contracts
@inherits LayoutComponentBase
@inject IState<UIState> State
@inject IConfigProvider ConfigProvider
@inject IDispatcher Dispatcher
<PageTitle>BTCPayApp</PageTitle>
<MudThemeProvider @ref="@_mudThemeProvider" IsDarkMode="@(State.Value.EffectiveTheme == "dark")" Theme="_theme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(e => DrawerToggle())"/>
        <MudText Typo="Typo.h5" Class="ml-3">BTCPay BTCPayApp</MudText>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <MudNavMenu>
            <MudNavLink Href="/" Match="NavLinkMatch.All">Dashboard</MudNavLink>
            <MudNavLink Href="/Counter" Match="NavLinkMatch.Prefix">Counter</MudNavLink>
            <MudSpacer/>
            
            <MudSelect @bind-Value="@ThemeMode" Label="Theme" Variant="Variant.Outlined">
                <MudSelectItem Value="@("system")">
                    <MudIcon Icon="@Icons.Material.Filled.Settings" Title="System" Size="Size.Small" /> System
                </MudSelectItem>
                <MudSelectItem Value="@("light")">
                    <MudIcon Icon="@Icons.Material.Filled.LightMode" Title="Light" Size="Size.Small" /> Light
                </MudSelectItem>
                <MudSelectItem Value="@("dark")">
                    <MudIcon Icon="@Icons.Material.Filled.Nightlight" Title="Dark" Size="Size.Small" /> Dark
                </MudSelectItem>
            </MudSelect>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
       @Body
    </MudMainContent>
</MudLayout>

@code {

    private MudThemeProvider _mudThemeProvider;

    private string ThemeMode
    {
        get => State.Value.SelectedTheme;
        set => Dispatcher.Dispatch(new UIState.ThemeSelectedAction(value));
    }
    
    

    private readonly MudTheme _theme = new ()
    {
        Typography = new Typography
        {
            Default = new Default
            {
                FontFamily = new[] { "Open Sans", "Helvetica Neue", "Arial", "sans-serif" }
            }
        },
        Palette = new PaletteLight
        {
            Primary = Colors.Green.Default,
            Secondary = Colors.Green.Accent4,
        },
        PaletteDark = new PaletteDark
        {
            Primary = Colors.Blue.Lighten1
        }
    };

    bool _drawerOpen;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Dispatcher.Dispatch(new UIState.SystemPreferenceLoadedAction((await _mudThemeProvider.GetSystemPreference())? "dark": "light"));
            await _mudThemeProvider.WatchSystemPreference(async b => Dispatcher.Dispatch(new UIState.SystemPreferenceLoadedAction((await _mudThemeProvider.GetSystemPreference())? "dark": "light")));
        }
    }
}
