@using System.ComponentModel.DataAnnotations
@using NBitcoin

<ValidationEditContext Model="this" @ref="_validationEditContext" Validate="Validate" OnValidSubmit="OnSubmit">
    <MudText>Please write down this seed and keep it safe. You will need it to recover your wallet.</MudText>
    <MudTextField
        @bind-Value="Mnemonic"
        HelperText="Mnemonic Seed"
        Variant="Variant.Outlined"
        AdornmentIcon="@Icons.Material.Filled.Refresh"
        Adornment="Adornment.End"
        OnAdornmentClick="GenerateSeed"
        For="() => Mnemonic"/>
    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="_validationEditContext.Invalid" Class="mt-3">
        Continue
    </MudButton>
</ValidationEditContext>

@code {
    private ValidationEditContext _validationEditContext;
    private string _mnemonic;

    private string Mnemonic
    {
        get => _mnemonic;
        set
        {
            _mnemonic = value;
            _validationEditContext.NotifyFieldChanged(() => Mnemonic);
        }
    }

    private Task Validate()
    {
        Mnemonic? mnemonic = null;
        string? xpub = null;
        if (string.IsNullOrEmpty(Mnemonic))
        {
            _validationEditContext.MessageStore.Add(() => Mnemonic, "Please generate a mnemonic for the wallet");

            return Task.CompletedTask;
        }
        try
        {
            new Mnemonic(Mnemonic);
        }
        catch (Exception e)
        {
            _validationEditContext.MessageStore.Add(() => Mnemonic, $"Invalid mnemonic: {e.Message}");
            return Task.CompletedTask;
        }
        return Task.CompletedTask;
    }

    [Parameter]
    public EventCallback<string> OnSeedChosen { get; set; }

    private void OnSubmit()
    {
        OnSeedChosen.InvokeAsync(Mnemonic);
    }

    private void GenerateSeed()
    {
        Mnemonic = new Mnemonic(Wordlist.English, WordCount.Twelve).ToString();
    }
}
