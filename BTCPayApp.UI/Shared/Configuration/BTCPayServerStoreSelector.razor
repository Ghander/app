@using BTCPayServer.Client
@using BTCPayServer.Client.Models
@implements IDisposable

@if (Loading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true"/>
}
<MudList
    Clickable="true"
    SelectedValue="SelectedStoreId"
    SelectedValueChanged="OnSelectedValue" Disabled="@(Disabled || SelectedStoreId == "create-new-store")">

    <MudListItem Value="null">Select store</MudListItem>
    @if (Loading)
    {
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave"/>
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave"/>
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave"/>
    }
    else if (Stores is not null)
    {
        foreach (var store in Stores)
        {
            <MudListItem Value="store.Id">@store.Name</MudListItem>
        }

        <MudListItem OnClickHandlerPreventDefault="true" @Value="create-new-store">Create store</MudListItem>
    }
</MudList>
@if (SelectedStoreId == "create-new-store")
{
    <MudPaper>
        <MudTextField Label="Store name" @bind-Value="NewStoreName" />
        <MudButtonGroup>
            <MudButton Color="Color.Primary" OnClick="CreateStore" Disabled="(string.IsNullOrEmpty(NewStoreName) || Loading || Disabled )">Create</MudButton>
            <MudButton Color="Color.Secondary" OnClick="CancelStoreCreation">Cancel</MudButton>
        </MudButtonGroup>
    </MudPaper>
   
}

@code {

    

    public string? NewStoreName { get; set; }
    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public string? SelectedStoreId { get; set; }

    [Parameter]
    public EventCallback<string> SelectedStoreIdChanged { get; set; }
    [Parameter]
    public string Url { get; set; }

    [Parameter]
    public string Key { get; set; }

    private bool Loading { get; set; }
    private CancellationTokenSource? _cts;
    private IEnumerable<StoreData>? Stores { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _ = LoadStores();
    }

    private async Task LoadStores()
    {
        try
        {
            Loading = true;
            var client = new BTCPayServerClient(new Uri(Url), Key);
            Stores = await client.GetStores();
        }
        finally
        {
            Loading = false;
        }
    }

    private void OnSelectedValue(object obj)
    {
        SelectedStoreId = obj as string;
        SelectedStoreIdChanged.InvokeAsync(SelectedStoreId);
    }

    public void Dispose()
    {
        _cts?.Dispose();
    }

    private void CancelStoreCreation()
    {
        SelectedStoreId = null;
    }

    private async Task CreateStore()
    {
        try
        {
            Loading = true;
            var client = new BTCPayServerClient(new Uri(Url), Key);
            var store =  await client.CreateStore(new CreateStoreRequest()
            {
                Name = NewStoreName
            });
            await LoadStores();
            SelectedStoreId = store.Id;
        }
        finally
        {
            Loading = false;
        }
    }

}