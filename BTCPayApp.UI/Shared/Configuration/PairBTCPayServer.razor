@using System.ComponentModel.DataAnnotations
@using BTCPayApp.CommonServer
@using BTCPayApp.Core
@using System.Net.Http.Json

@if (Result is null)
{
    <ValidationEditContext Model="this" @ref="_validationEditContext" OnValidSubmit="StartPair">
        <MudTextField Label="Pairing URL" @bind-Value="PairingUrl" For="() => PairingUrl"/>
        <MudErrorMessage For="() => PairingUrl"></MudErrorMessage>
        <MudGrid Class="mt-4">
            <MudItem>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="_validationEditContext.Invalid">
                    Submit
                    @if (Loading)
                    {
                        <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true"/>
                    }
                </MudButton>
            </MudItem>
        </MudGrid>
    </ValidationEditContext>
}
else if (Result.StoreId is null)
{
    <BTCPayServerStoreSelector Key="@Result.Key" Url="@PairingUrl" bind-SelectedStoreId="SelectedStoreId" OnCreateStore="CreateStore" />
}

@code {
    private string? SelectedStoreId
    {
        get => _selectedStoreId;
        set
        {
            _selectedStoreId = value;
            if (_selectedStoreId is not null)
            {
                Result!.StoreId = _selectedStoreId;
                OnPair.InvokeAsync(new BTCPayPairConfig
                {
                    PairingResult = Result,
                    PairingInstanceUri = PairingUrl
                });
            }
        }
    }

    private bool Loading { get; set; }
    private ValidationEditContext _validationEditContext { get; set; }
    private PairSuccessResult? Result { get; set; }

    [Inject]
    public IHttpClientFactory HttpClientFactory { get; set; }

    [Required]
    [Url]
    private string? PairingUrl { get; set; }

    [Parameter]
    public EventCallback<BTCPayPairConfig> OnPair { get; set; }

    private async Task StartPair()
    {
        try
        {
            Loading = true;

            var client = HttpClientFactory.CreateClient();
            var response = await client.GetAsync(PairingUrl);
            response.EnsureSuccessStatusCode();
            Result = await response.Content.ReadFromJsonAsync<PairSuccessResult>();
            if (Result == null)
            {
                _validationEditContext.MessageStore.Add(() => PairingUrl, "Pairing was not successful");
            }
            else if (!string.IsNullOrEmpty(Result.StoreId))
            {
                await OnPair.InvokeAsync(new BTCPayPairConfig
                {
                    PairingResult = Result,
                    PairingInstanceUri = PairingUrl[..PairingUrl.IndexOf("/btcpayapp", StringComparison.Ordinal)]
                });
            }
        }
        catch (Exception e)
        {
            var message = !string.IsNullOrEmpty(e.InnerException?.Message) ? e.InnerException.Message : e.Message;
            _validationEditContext.MessageStore.Add(() => PairingUrl, message);
        }
        finally
        {
            Loading = false;
        }
    }

    private string? _selectedStoreId;

    private Task CreateStore()
    {
        throw new NotImplementedException();
    }

}
