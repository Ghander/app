@using System.ComponentModel.DataAnnotations
@using BTCPayApp.CommonServer
@using BTCPayApp.Core
@using System.Net.Http.Json
@using BTCPayApp.UI.Features
@inject IDispatcher Dispatcher
@inject IState<RootState> State

@if (Result is null)
{
    <ValidationEditContext Model="this" @ref="_validationEditContext" OnValidSubmit="StartPair">
        <ErrorMessage For="() => PairingUrl"></ErrorMessage>
        <div class="form-group">
            <label for="PairingURL" class="form-label">Pairing URL</label>
            <InputText id="PairingURL" class="form-control" @bind-Value="PairingUrl" />
        </div>
        <button type="submit" class="btn btn-primary" disabled="@_validationEditContext.Invalid">
            Submit
        </button>
    </ValidationEditContext>
}
else if (Result.StoreId is null)
{
    @*
    <BTCPayServerStoreSelector Key="@Result.Key" Url="@PairingUrl" bind-SelectedStoreId="SelectedStoreId" OnCreateStore="CreateStore" />
    *@
}

@code {
    private string? SelectedStoreId
    {
        get => _selectedStoreId;
        set
        {
            _selectedStoreId = value;
            if (_selectedStoreId is not null)
            {
                Result!.StoreId = _selectedStoreId;
                OnPair.InvokeAsync(new BTCPayPairConfig
                {
                    PairingResult = Result,
                    PairingInstanceUri = PairingUrl
                });
            }
        }
    }

    private ValidationEditContext _validationEditContext { get; set; }
    private PairSuccessResult? Result { get; set; }

    [Inject]
    public IHttpClientFactory HttpClientFactory { get; set; }

    [Required]
    [Url]
    private string? PairingUrl { get; set; }

    [Parameter]
    public EventCallback<BTCPayPairConfig> OnPair { get; set; }

    private async Task StartPair()
    {
        try
        {
            var client = HttpClientFactory.CreateClient();
            Dispatcher.Dispatch(new RootState.LoadingAction(RootState.LoadingHandles.PairConfig, true));
            var response = await client.GetAsync(PairingUrl);
            response.EnsureSuccessStatusCode();
            Result = await response.Content.ReadFromJsonAsync<PairSuccessResult>();
            if (Result == null)
            {
                _validationEditContext.MessageStore.Add(() => PairingUrl, "Pairing was not successful");
            }
            else if (!string.IsNullOrEmpty(Result.StoreId))
            {
                await OnPair.InvokeAsync(new BTCPayPairConfig
                {
                    PairingResult = Result,
                    PairingInstanceUri = PairingUrl[..PairingUrl.IndexOf("/btcpayapp", StringComparison.Ordinal)]
                });
            }
        }
        catch (Exception e)
        {
            var message = !string.IsNullOrEmpty(e.InnerException?.Message) ? e.InnerException.Message : e.Message;
            _validationEditContext.MessageStore.Add(() => PairingUrl, message);
        }
        finally
        {
            Dispatcher.Dispatch(new RootState.LoadingAction(RootState.LoadingHandles.PairConfig, false));
        }
    }

    private string? _selectedStoreId;

    private Task CreateStore()
    {
        throw new NotImplementedException();
    }
}
