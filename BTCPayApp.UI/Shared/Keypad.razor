@using BTCPayApp.UI.Pages
@using BTCPayApp.UI.Shared
@using Microsoft.AspNetCore.Components
@using MudBlazor
@using System.Globalization
@using org.ldk.structs
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@layout SimpleLayout

<link href="./_content/BTCPayApp.UI/css/keypad.css" rel="stylesheet"/>

<MudContainer MaxWidth="MaxWidth.Small" Class="py-5">
    <ValidationEditContext Model="this" @ref="_validationEditContext" OnValidSubmit="HandleSubmit" Class="d-flex flex-column gap-4 my-auto">
        <div class="d-flex flex-column align-center px-4 mb-auto">
            <MudText Typo="Typo.overline" Color="Color.Tertiary" Class="fw-semibold">@Currency</MudText>
            <MudText Typo="Typo.h1" Class="mb-4" Style="@AmountStyle">@FormatCurrency(Amount, false)</MudText>
            @if (!string.IsNullOrEmpty(Calculation) && EnableDiscount || EnableTips)
            {
                <MudText Typo="Typo.overline" Color="Color.Secondary" Class="text-muted text-center mt-2" id="Calculation">@Calculation</MudText>
            }
        </div>
        @if (false && Modes.Count > 1)
        {
            <div id="ModeTabs" class="tab-content mb-n2">
                @if (EnableDiscount)
                {
                    <div id="Mode-Discount" class="tab-pane fade px-2" :class="{ show: mode === 'discount', active: mode === 'discount' }" role="tabpanel" aria-labelledby="ModeTablist-Discount">
                        <div class="h4 fw-semibold text-muted text-center" id="Discount">
                            <span class="h3 text-body me-1">@DiscountPercent%</span> discount
                        </div>
                    </div>
                }
                @if (EnableTips)
                {
                    <div id="Mode-Tip" class="tab-pane fade px-2" :class="{ show: mode === 'tip', active: mode === 'tip' }" role="tabpanel" aria-labelledby="ModeTablist-Tip">
                        <div class="btcpay-pills d-flex flex-wrap align-items-center justify-content-center gap-2">
                            @if (CustomTipPercentages.Count > 0)
                            {
                                <MudButton Variant="Variant.Filled" DisableElevation="true" Class="btcpay-pill" OnClick="() => { TipPercent = null; }">
                                    @if (Tip > 0)
                                    {
                                        @FormatCurrency(Tip, true)
                                    }
                                    else
                                    {
                                        <span>Custom</span>
                                    }
                                </MudButton>
                                @foreach (var percentage in CustomTipPercentages)
                                {
                                    <MudButton Variant="Variant.Filled" DisableElevation="true" Class=@PillClass(percentage == TipPercent) OnClick="() => { TipPercent = percentage; }">
                                        @percentage%
                                    </MudButton>
                                }
                            }
                            else
                            {
                                <div class="h5 fw-semibold text-muted text-center">
                                    Amount@(Tip > 0 ? $": {Tip}" : null)
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
            <MudChipSet Mandatory="true" Class="d-flex align-center justify-center ">
                @foreach (var mode in Modes)
                {
                    var isActive = SelectedMode == mode;
                    <MudChip Variant="isActive ? Variant.Filled : Variant.Outlined" Color="Color.Secondary" Disabled="@(mode != "Amount" && Amount == 0)" OnClick="() => { SelectedMode = mode; }">@mode</MudChip>
                }
            </MudChipSet>
        }
        <div class="keypad">
            @foreach(var key in Keys)
            {
                <MudButton DisableElevation="true" @onclick="() => KeyPressed(key)" data-key="@key">
                    @if (key == "del")
                    {
                        <MudIcon Icon="@BTCPayIcons.CaretRight" aria-label="delete"/>
                    }
                    else
                    {
                        @key
                    }
                </MudButton>
            }
        </div>
        <div class="actions px-4 gap-4">
            <MudButton Size="Size.Large" DisableElevation="true" Color="Color.Secondary" @onclick="@Clear">Clear</MudButton>
            <MudButton Size="Size.Large" DisableElevation="true" Color="Color.Primary" Disabled="Loading" data-testid="ChargeButton">
                @if (Loading)
                {
                    <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true"/>
                }
                else
                {
                    <span>Charge</span>
                }
            </MudButton>
        </div>
    </ValidationEditContext>
</MudContainer>


@code {
    private ValidationEditContext _validationEditContext { get; set; }

    public bool EnableDiscount { get; set; } = true;
    public bool EnableTips { get; set; } = true;
    public bool Loading { get; set; }
    public string Currency { get; set; } = "USD";
    private int Divisibility { get; set; } = 2;
    private string DisplayAmount { get; set; } = string.Empty;
    public double Amount { get; set; }
    public double Tip { get; set; }
    public double Discount { get; set; }
    public double? TipPercent { get; set; }
    public double DiscountPercent { get; set; }
    public List<int> CustomTipPercentages { get; set; } = new () { 5, 10, 21 };

    public static readonly List<string> Keys = new() { "1", "2", "3", "4", "5", "6", "7", "8", "9", ".", "0", "del" };

    public string SelectedMode { get; set; } = "Amount";

    public List<string> Modes
    {
        get
        {
            var modes = new List<string> { "Amount" };
            if (EnableDiscount) modes.Add("Discount");
            if (EnableTips) modes.Add("Tips");
            return modes;
        }
    }

    public string AmountStyle
    {
        get
        {
            var fs = 64; // TODO: Calculate based on width
            return $"font-size:{fs}px";
        }
    }

    public string Calculation
    {
        get
        {
            return "";
        }
    }

    private void KeyPressed(string key)
    {
        switch (SelectedMode) {
            case "Amount":
                DisplayAmount = ApplyKeyToValue(key, DisplayAmount);
                Amount = double.Parse(DisplayAmount, CultureInfo.InvariantCulture);
                break;
            case "Discount":
                var discount = ApplyKeyToValue(key, DiscountPercent.ToString(CultureInfo.InvariantCulture));
                DiscountPercent = double.Parse(discount, CultureInfo.InvariantCulture);
                break;
            case "Tips":
                var tipPercent = ApplyKeyToValue(key, (TipPercent ?? 0).ToString(CultureInfo.InvariantCulture));
                TipPercent = double.Parse(tipPercent, CultureInfo.InvariantCulture);
                break;
            default:
                throw new Exception("Invalid mode");
        };
    }

    private string ApplyKeyToValue (string key, string value) {
        if (string.IsNullOrEmpty(value) || value == "0") {
            value = "";
        }
        switch (key) {
            case "del":
                if (string.IsNullOrEmpty(value)) return "0";
                value = value[..^1];
                value = string.IsNullOrEmpty(value) ? "0" : value;
                break;
            case ".":
                if (!value.Contains(".")) { // Only add decimal point if it doesn't exist yet
                    value += ".";
                }
                break;
            default:
                value += key;
                var decimalIndex = value.IndexOf(".", StringComparison.Ordinal);
                if (decimalIndex != -1 && value.Length - decimalIndex - 1  > Divisibility) {
                    value = value.Replace(".", "");
                    value = $"{value[..^Divisibility]}.{value[^Divisibility..]}";
                }
                break;
        }
        return value;
    }

    private void HandleSubmit()
    {
    }

    private void Clear()
    {
        Amount = Tip = Discount = DiscountPercent = 0;
        DisplayAmount = string.Empty;
        TipPercent = null;
        SelectedMode = "Amount";
    }

    private string FormatCurrency(double value, bool b)
    {
        var formatted = value.ToString("C", CultureInfo.InvariantCulture);
        return formatted[1..] + (b ? $" {Currency}" : "");
    }

    private string PillClass(bool isActive)
    {
        return $"btcpay-pill{(isActive ? " active" : "")}";
    }
}
