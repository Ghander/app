@using BTCPayApp.Core.Data
@using BTCPayServer.Lightning

<div>
    <div class="d-flex flex-wrap align-items-center justify-content-between gap-2" @onclick="() => _showDetails = !_showDetails">
        <AmountDisplay Value="Payment.Value.ToDecimal(UnitLightMoney)" Unit="@Unit" OnToggleDisplayCurrency="ToggleDisplayCurrency" class="text-end fw-semibold" />
        <span class="text-muted">
            <DateDisplay DateTimeOffset="@Payment.Timestamp"/>
        </span>
        <span class="w-100px ms-auto text-end">
            <LightningPaymentStatusDisplay Payment="@Payment" OnCancelClick="OnCancelClick" />
        </span>
    </div>
    <div class="collapse @(_showDetails ? "show" : null)">
        <div class="pt-3">
            @if (Payment.PaymentRequest != null)
            {
                <div class="form-floating">
                    <TruncateCenter Text="@Payment.PaymentRequest.ToString()" Padding="15" Copy="true" class="form-control-plaintext"/>
                    <label>Payment Request</label>
                </div>
            }
            @if (Payment.Preimage != null)
            {
                <div class="form-floating">
                    <TruncateCenter Text="@Payment.Preimage" Padding="15" Copy="true" class="form-control-plaintext"/>
                    <label>Preimage</label>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public AppLightningPayment Payment { get; set; } = null!;

    [Parameter, EditorRequired]
    public string? Unit { get; set; }

    [Parameter]
    public EventCallback<AppLightningPayment> OnCancelClick { get; set; }

    [Parameter]
    public EventCallback OnToggleDisplayCurrency { get; set; }

    private bool _showDetails;
    private LightMoneyUnit UnitLightMoney => Unit == "SATS" ? LightMoneyUnit.Satoshi : LightMoneyUnit.BTC;

    private async Task ToggleDisplayCurrency()
    {
        if (OnToggleDisplayCurrency.HasDelegate)
            await OnToggleDisplayCurrency.InvokeAsync();
    }
}
