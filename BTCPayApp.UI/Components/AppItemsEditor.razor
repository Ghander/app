@using BTCPayApp.UI.Models
@using Plk.Blazor.DragDrop
@inject IJSRuntime JS

<div @attributes="InputAttributes" class="@CssClass">
    <div class="row align-items-start">
        <div class="col-12 col-xl-7">
            @if (Items?.Any() is true)
            {
                <Dropzone Items="Items" InstantReplace="true" Class="items list-group list-group-flush" ItemWrapperClass='item => { return $"d-inline-flex align-items-center gap-3 list-group-item rounded {(item == SelectedItem ? "active" : null)}"; }'>
                    @{
                        var hasImage = !string.IsNullOrEmpty(context.ImageUrl);
                        var imageUrl = hasImage ? context.ImageUrl : "_content/BTCPayApp.UI/img/img-placeholder.svg";
                    }
                    <button type="button" class="btn b-0 control drag" disabled="@(Items.Count == 1)">
                        <Icon Symbol="actions-drag"/>
                    </button>
                    <div class="template-item d-flex align-items-start w-100 gap-3" @onclick="async () => { await SelectItem(context == SelectedItem ? null : context); }">
                        <div class="img">
                            <img src="@imageUrl" alt="@context.Title" style="@(hasImage ? null : "opacity:.5")">
                        </div>
                        <div class="d-flex flex-column gap-2">
                            <h5 class="card-title m-0">@context.Title</h5>
                            <div class="d-flex gap-2 align-items-center">
                                @if (context.PriceType == "Topup" || context.Price == 0)
                                {
                                    <span class="fw-semibold badge text-bg-info">@(context.PriceType == "Topup" ? "Any amount" : "Free")</span>
                                }
                                else
                                {
                                    <span class="fw-semibold text-muted">
                                        <AmountDisplay Value="@context.Price" Unit="@Currency"/> @(context.PriceType == "Minimum" ? " minimum" : null)
                                    </span>
                                }
                                @if (context.Inventory.HasValue)
                                {
                                    <span class="badge text-bg-warning">
                                        @(context.Inventory > 0 ? $"{context.Inventory} left" : "Sold out")
                                    </span>
                                }
                            </div>
                        </div>
                    </div>
                    <button type="button" class="btn b-0 control remove" @onclick="() => RemoveItem(context)">
                        <Icon Symbol="actions-remove"/>
                    </button>
                </Dropzone>
            }
            <button type="button" id="btAddItem" class="btn btn-link py-0 px-2 mt-2 mb-2 gap-1 add fw-semibold d-inline-flex align-items-center" @onclick="AddItem">
                <Icon Symbol="actions-add"/>
                Add Item
            </button>
        </div>
        <div class="col-xl-5 offcanvas-xl offcanvas-end" tabindex="-1" id="AppItemsEditorOffcanvas">
            <div class="offcanvas-header justify-content-between p-3">
                <h5 class="offcanvas-title">Edit Item</h5>
                <button type="button" class="btn btn-sm rounded-pill btn-outline-secondary" @onclick="HideOffcanvas">Close</button>
            </div>
            <div class="offcanvas-body p-3 p-xl-0">
                <div class="bg-tile w-100 p-xl-4 rounded">
                    @if (SelectedItem != null)
                    {
                        <ValidationEditContext @ref="_validationEditContext" Model="SelectedItem" id="item-form" class="item">
                            <DataAnnotationsValidator />
                            <div class="form-group">
                                <label for="Title" class="form-label" data-required>Title</label>
                                <InputText @bind-Value="SelectedItem.Title" @bind-Value:after="GenerateId" id="Title" class="form-control"/>
                                <ValidationMessage For="@(() => SelectedItem.Title)" />
                            </div>
                            <div class="form-group">
                                <label for="Id" class="form-label" data-required>ID</label>
                                <InputText @bind-Value="SelectedItem.Id" id="Id" class="form-control"/>
                                <ValidationMessage For="@(() => SelectedItem.Id)" />
                                <div class="form-text">Leave blank to generate ID from title.</div>
                            </div>
                            <div class="form-group row">
                                <div class="col-sm-6">
                                    <label for="PriceType" class="form-label" data-required>Price</label>
                                    <InputSelect @bind-Value="SelectedItem.PriceType" id="PriceType" class="form-select">
                                        <option value="Fixed">Fixed</option>
                                        <option value="Minimum">Minimum</option>
                                        <option value="Topup">Custom</option>
                                    </InputSelect>
                                </div>
                                @if (SelectedItem.PriceType != "Topup")
                                {
                                    <div class="col-sm-6">
                                        <label for="Price" class="form-label">&nbsp;</label>
                                        <div class="input-group mb-2">
                                            <InputNumber @bind-Value="SelectedItem.Price" id="Price" class="form-control hide-number-spin" inputmode="decimal" min="0"
                                                         pattern="\d*" step="any" aria-describedby="currency-addon"/>
                                            <span class="input-group-text" id="currency-addon">@Currency</span>
                                        </div>
                                    </div>
                                }
                                <ValidationMessage For="@(() => SelectedItem.Price)" />
                            </div>

                            <div class="form-group">
                                <label for="ImageUrl" class="form-label">Image Url</label>
                                <InputText @bind-Value="SelectedItem.ImageUrl" id="ImageUrl" class="form-control" type="url"/>
                                <ValidationMessage For="@(() => SelectedItem.ImageUrl)" />
                            </div>
                            <div class="form-group">
                                <label for="Description" class="form-label">Description</label>
                                <InputTextArea @bind-Value="SelectedItem.Description" id="Description" class="form-control" rows="3" cols="40"/>
                                <ValidationMessage For="@(() => SelectedItem.Description)" />
                            </div>

                            <div class="form-group">
                                <label for="Inventory" class="form-label">Inventory</label>
                                <InputNumber @bind-Value="SelectedItem.Inventory" id="Inventory" class="form-control" inputmode="numeric" min="0" step="1"/>
                                <ValidationMessage For="@(() => SelectedItem.Inventory)" />
                                <div class="form-text">Leave empty to not use this feature.</div>
                            </div>
                            <div class="form-group">
                                <label for="BuyButtonText" class="form-label">Buy Button Text</label>
                                <InputText @bind-Value="SelectedItem.BuyButtonText" id="BuyButtonText" class="form-control"/>
                                <ValidationMessage For="@(() => SelectedItem.BuyButtonText)" />
                            </div>
                            <div class="form-group d-flex align-items-center">
                                <InputCheckbox @bind-Value="@SelectedItem.Enabled" id="Enable" class="btcpay-toggle me-3"/>
                                <label for="Enable" class="form-check-label">Enable</label>
                                <ValidationMessage For="@(() => SelectedItem.Enabled)"/>
                            </div>
                        </ValidationEditContext>
                    }
                    else
                    {
                        <div>Select an item to edit</div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public string Currency { get; set; } = null!;

    [Parameter]
    public List<AppItemModel>? Items {
        get => _items;
        set {
            _items = value;
            _ = SelectItem(null);
        }
    }

    private List<AppItemModel>? _items;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? InputAttributes { get; set; }

    private ValidationEditContext? _validationEditContext;
    private string? _successMessage;

    private AppItemModel? SelectedItem { get; set; }

    private async Task SelectItem(AppItemModel? item)
    {
        SelectedItem = item;
        await (SelectedItem != null ? ShowOffcanvas() : HideOffcanvas());
    }

    private async Task AddItem()
    {
        var item = new AppItemModel { PriceType = "Fixed", Price = 0 };
        Items ??= [];
        Items.Add(item);
        await SelectItem(item);
    }

    private async Task RemoveItem(AppItemModel item)
    {
        Items!.Remove(item);
        await SelectItem(null);
    }

    private async Task ShowOffcanvas()
    {
        await JS.InvokeVoidAsync("Interop.showOffcanvas", "#AppItemsEditorOffcanvas");
    }

    private async Task HideOffcanvas()
    {
        await JS.InvokeVoidAsync("Interop.hideOffcanvas", "#AppItemsEditorOffcanvas");
    }

    private void GenerateId()
    {
        if (string.IsNullOrEmpty(SelectedItem?.Id) && !string.IsNullOrEmpty(SelectedItem?.Title)) SelectedItem.Id = SelectedItem.Title;
    }

    private string CssClass => $"editor {(InputAttributes?.ContainsKey("class") is true ? InputAttributes["class"] : "")}".Trim();
}
