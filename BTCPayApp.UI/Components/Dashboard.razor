@inject IState<RootState> State
@inject IDispatcher Dispatcher
@inject IState<OnChainTransactionsState> OnChainTransactionsState
@using Microsoft.AspNetCore.SignalR.Client
@using BTCPayApp.UI.Features
@using BTCPayApp.Core
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<h1 class="mb-3">Dashboard</h1>

@if (State.Value.Loading.Contains(RootState.LoadingHandles.PairConfig))
{
    <div class="alert alert-info">Pairing configuration loading.</div>
}
else if (State.Value.PairConfig is not null)
{
    <div class="alert alert-@ConnectionSeverity">
        <div class="d-flex align-center justify-space-between gap-3">
            Your BTCPay Server is paired. Connection status is @ConnectionStatus.
            @if (State.Value.BTCPayServerConnectionState == HubConnectionState.Disconnected)
            {
                <NavLink href="@Routes.Pair" class="btn btn-sm btn-danger">
                    Configure connection
                </NavLink>
            }
        </div>
    </div>
}
else
{
    <div class="alert alert-warning">
        <div class="d-flex flex-wrap align-center justify-space-between gap-3">
            No BTCPay Server paired.
            <NavLink href="@Routes.Pair" class="btn btn-sm btn-primary">
                Configure connection
            </NavLink>
        </div>
    </div>
}

@if (State.Value.Loading.Contains(RootState.LoadingHandles.WalletConfig))
{
    <div class="alert alert-info">Wallet configuration loading.</div>
}
else if (State.Value.WalletConfig is not null)
{
    <div class="alert alert-success">Your wallet is configured.</div>
}
else
{
    <div class="alert alert-warning">
        <div class="d-flex flex-wrap align-center justify-space-between gap-3">
            Your wallet is not configured.
            <NavLink href="@Routes.WalletSetup" class="btn btn-sm btn-primary">
                Set up a wallet
            </NavLink>
        </div>
    </div>
}

@if (State.Value.Loading.Contains(RootState.LoadingHandles.LightningState))
{
    <div class="alert alert-info">Lightning node loading.</div>
}
else
{
    <div class="alert alert-@LightningSeverity">Your Lightning node is @LightningStatus</div>
}

@if (State.Value.Loading.Contains(RootState.LoadingHandles.TransactionState))
{
    <div class="alert alert-info">Transactions loading.</div>
}
else
{
    <h6 class="mt-5">Transactions</h6>
    @if (OnChainTransactionsState.Value.Error is not false)
    {
        <div class="alert alert-warning">
            <div class="d-flex flex-wrap align-center justify-space-between gap-3">
                There was an error loading your transactions.
                <button class="btn btn-sm btn-primary" @onclick="() => Dispatcher.Dispatch(new OnChainTransactionsState.LoadTransactionsAction())">
                    Retry
                </button>
            </div>
        </div>
    }
    else if (OnChainTransactionsState.Value.AllTransactions?.Any() is true)
    {
        <ul>
            @foreach (var tx in OnChainTransactionsState.Value.AllTransactions)
            {
                <li class="d-flex align-center justify-space-between gap-3">
                    <div>
                        <div class="mb-1">@tx.Value.Id</div>
                        <div class="mb-1">@tx.Value.Timestamp</div>
                    </div>
                    <div>
                        <div class="mb-1">@tx.Value.Balance</div>
                        <div class="mb-1">@tx.Value.Status</div>
                    </div>
                </li>
            }
        </ul>
        <button class="btn btn-sm btn-secondary" @onclick="() => Dispatcher.Dispatch(new OnChainTransactionsState.LoadTransactionsAction())">
            Refresh
        </button>
    }
    else
    {
        <p class="text-muted">There are no transactions, yet.</p>
    }
}
@code {
    private string ConnectionStatus => State.Value.BTCPayServerConnectionState?.ToString().ToLowerInvariant() ?? "not connected";

    private string ConnectionSeverity => State.Value.BTCPayServerConnectionState switch {
        HubConnectionState.Disconnected => "warning",
        HubConnectionState.Connected => "success",
        HubConnectionState.Connecting => "info",
        HubConnectionState.Reconnecting => "info",
        _ => "warning"
        };

    private string LightningStatus => State.Value.LightningNodeState switch {

        LightningNodeState.NotConfigured => "not configured",
        LightningNodeState.NotRunning => "not running",
        LightningNodeState.Error => "in error state",
        _ => State.Value.LightningNodeState.ToString().ToLowerInvariant()
    };

    private string LightningSeverity => State.Value.LightningNodeState switch {
        LightningNodeState.Starting => "info",
        LightningNodeState.Running => "success",
        LightningNodeState.Error => "danger",
        _ => "warning"
        };

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return base.OnAfterRenderAsync(firstRender);
        if (State.Value.BTCPayServerConnectionState is not HubConnectionState.Connected)
            Dispatcher.Dispatch(new OnChainTransactionsState.LoadTransactionsAction(true));
        return base.OnAfterRenderAsync(firstRender);
    }

}
