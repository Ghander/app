@inject IState<RootState> State
@inject IDispatcher Dispatcher
@using Microsoft.AspNetCore.SignalR.Client
@using BTCPayApp.UI.Features
@using BTCPayApp.Core.Data
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<h1 class="mb-3">Dashboard</h1>

@if (State.Value.Loading.Contains(RootState.LoadingHandles.WalletConfig))
{
    <Alert Type="info">Wallet configuration loading.</Alert>
}
else if (State.Value.WalletConfig is not null)
{
    <Alert Type="success">Your wallet is configured.</Alert>
}
else
{
    <Alert Type="warning">
        <div class="d-flex flex-wrap align-center justify-space-between gap-3">
            Your wallet is not configured.
            <NavLink href="@Routes.WalletSetup" class="btn btn-sm btn-primary">
                Set up a wallet
            </NavLink>
        </div>
    </Alert>
}

@if (State.Value.Loading.Contains(RootState.LoadingHandles.LightningState))
{
    <Alert Type="info">
        Lightning node loading.
    </Alert>
}
else
{
    <Alert Type="@LightningSeverity">
        Your Lightning node is @LightningStatus
    </Alert>
}

@code {
    private string ConnectionStatus => State.Value.BTCPayServerConnectionState?.ToString().ToLowerInvariant() ?? "not connected";

    private string ConnectionSeverity => State.Value.BTCPayServerConnectionState switch {
        HubConnectionState.Disconnected => "warning",
        HubConnectionState.Connected => "success",
        HubConnectionState.Connecting => "info",
        HubConnectionState.Reconnecting => "info",
        _ => "warning"
        };

    private string LightningStatus => State.Value.LightningNodeState switch {

        LightningNodeState.NotConfigured => "not configured",
        LightningNodeState.NotRunning => "not running",
        LightningNodeState.Error => "in error state",
        _ => State.Value.LightningNodeState.ToString().ToLowerInvariant()
    };

    private string LightningSeverity => State.Value.LightningNodeState switch {
        LightningNodeState.Starting => "info",
        LightningNodeState.Running => "success",
        LightningNodeState.Error => "danger",
        _ => "warning"
        };

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return base.OnAfterRenderAsync(firstRender);
        return base.OnAfterRenderAsync(firstRender);
    }

}
