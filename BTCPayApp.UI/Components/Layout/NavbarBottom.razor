@using BTCPayApp.Core.Auth
@using BTCPayApp.UI.Features
@inject IState<UIState> UiState
@inject NavigationManager NavigationManager
@inject IAccountManager AccountManager

<nav id="NavbarBottom">
    <div class="container d-flex align-items-center justify-content-between">
        <ul class="navbar-nav">
            <li class="nav-item">
                <NavLink href="@Routes.Dashboard" Match="NavLinkMatch.All" class="@HomeCssClass()">
                    <Icon symbol="nav-store"/>
                    <span>Home</span>
                </NavLink>
            </li>
            <li class="nav-item">
                <NavLink href="@(HasStore ? Routes.PointOfSale : null)" Match="NavLinkMatch.All" class=" @(HasStore ? "nav-link" : "nav-link disabled")" aria-disabled="@(HasStore ? null : true)">
                    <Icon symbol="nav-keypad"/>
                    <span>Keypad</span>
                </NavLink>
            </li>
            <li class="nav-item">
                <NavLink href="@(HasStore ? Routes.Invoices : null)" Match="NavLinkMatch.All" class="@(HasStore ? "nav-link" : "nav-link disabled")" aria-disabled="@(HasStore ? null : true)">
                    <Icon symbol="nav-invoices"/>
                    <span>Invoices</span>
                </NavLink>
            </li>
            <li class="nav-item">
                <NavLink href="@Routes.Settings" Match="NavLinkMatch.Prefix" class="nav-link">
                    <Icon symbol="settings"/>
                    <span>Settings</span>
                </NavLink>
            </li>
        </ul>
    </div>
</nav>

@code {
    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private string HomeCssClass()
    {
        var rel = "/" + NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        var c = "nav-link";
        if (rel.StartsWith(Routes.Notifications)) c += " active";
        if (rel.StartsWith(Routes.WalletSend)) c += " active";
        if (rel.StartsWith(Routes.WalletReceive)) c += " active";
        return c;
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        StateHasChanged();
    }

    private bool HasStore => AccountManager.GetCurrentStore() != null;
}
